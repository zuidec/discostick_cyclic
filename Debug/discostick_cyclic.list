
discostick_cyclic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e650  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8b4  0800e8b4  00010224  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e8b4  0800e8b4  0000f8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e8bc  0800e8bc  00010224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8bc  0800e8bc  0000f8bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8c0  0800e8c0  0000f8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000224  20000000  0800e8c4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010224  2**0
                  CONTENTS
 10 .bss          00001110  20000224  20000224  00010224  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001334  20001334  00010224  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY
 13 .debug_info   000230be  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006024  00000000  00000000  00033312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  00039338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c4  00000000  00000000  0003afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288dd  00000000  00000000  0003c59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027db8  00000000  00000000  00064e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0b39  00000000  00000000  0008cc31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016d76a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007948  00000000  00000000  0016d7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001750f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e7c8 	.word	0x0800e7c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800e7c8 	.word	0x0800e7c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005b0:	4a28      	ldr	r2, [pc, #160]	@ (8000654 <MX_ADC1_Init+0xb8>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005de:	4a1e      	ldr	r2, [pc, #120]	@ (8000658 <MX_ADC1_Init+0xbc>)
 80005e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005fe:	f003 f98f 	bl	8003920 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 ff84 	bl	8002514 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000614:	2305      	movs	r3, #5
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ADC1_Init+0xb4>)
 800061e:	f003 fc05 	bl	8003e2c <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 ff74 	bl	8002514 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800062c:	230e      	movs	r3, #14
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_ADC1_Init+0xb4>)
 800063a:	f003 fbf7 	bl	8003e2c <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000644:	f001 ff66 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000240 	.word	0x20000240
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a33      	ldr	r2, [pc, #204]	@ (8000748 <HAL_ADC_MspInit+0xec>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d160      	bne.n	8000740 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b32      	ldr	r3, [pc, #200]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000686:	4a31      	ldr	r2, [pc, #196]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068c:	6453      	str	r3, [r2, #68]	@ 0x44
 800068e:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b2b      	ldr	r3, [pc, #172]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a2a      	ldr	r2, [pc, #168]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b28      	ldr	r3, [pc, #160]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CYCLIC_PITCH_Pin|CYCLIC_ROLL_Pin;
 80006b6:	2330      	movs	r3, #48	@ 0x30
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4821      	ldr	r0, [pc, #132]	@ (8000750 <HAL_ADC_MspInit+0xf4>)
 80006ca:	f004 fbbb 	bl	8004e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <HAL_ADC_MspInit+0xfc>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000704:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000708:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800070c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000714:	480f      	ldr	r0, [pc, #60]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000716:	f003 ff93 	bl	8004640 <HAL_DMA_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000720:	f001 fef8 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000728:	639a      	str	r2, [r3, #56]	@ 0x38
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2012      	movs	r0, #18
 8000736:	f003 fefe 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800073a:	2012      	movs	r0, #18
 800073c:	f003 ff17 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	@ 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40012000 	.word	0x40012000
 800074c:	40023800 	.word	0x40023800
 8000750:	40020800 	.word	0x40020800
 8000754:	20000288 	.word	0x20000288
 8000758:	40026410 	.word	0x40026410

0800075c <u8_to_i16>:
 */


#include "bitutils.h"

int16_t u8_to_i16(uint8_t high, uint8_t low)	{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
	return (int16_t)(high << 8 | low);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b21b      	sxth	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <u8_to_u32>:

uint32_t u8_to_u32(uint8_t* num)	{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	uint32_t ret = (((uint32_t)num[3] << 24) | ((uint32_t)num[2] << 16) | ((uint32_t)num[1] << 8) | ((uint32_t)num[0]<< 0));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3303      	adds	r3, #3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	061a      	lsls	r2, r3, #24
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3302      	adds	r3, #2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	431a      	orrs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
	return ret;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <u8_to_float>:

float u8_to_float(uint8_t* num)	{
 80007c2:	b480      	push	{r7}
 80007c4:	b085      	sub	sp, #20
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	float_st temp_num = {.bytes[0] = num[0], .bytes[1] = num[1], .bytes[2] = num[2], .bytes[3] = num[3]};
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	733b      	strb	r3, [r7, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	737b      	strb	r3, [r7, #13]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	73bb      	strb	r3, [r7, #14]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	78db      	ldrb	r3, [r3, #3]
 80007e0:	73fb      	strb	r3, [r7, #15]
	return temp_num.value;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	ee07 3a90 	vmov	s15, r3

}
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <i16_high_to_u8>:

uint8_t i16_high_to_u8(int16_t num)	{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((num & 0xFF00) >> 8);
 8000800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000804:	121b      	asrs	r3, r3, #8
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <i16_low_to_u8>:

uint8_t i16_low_to_u8(int16_t num)	{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(num & 0x00FF);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	b2db      	uxtb	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <i16_to_u8>:

void i16_to_u8(int16_t num, uint8_t* data)	{
 800082e:	b590      	push	{r4, r7, lr}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	6039      	str	r1, [r7, #0]
 8000838:	80fb      	strh	r3, [r7, #6]
	data[0] = i16_high_to_u8(num);
 800083a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd9 	bl	80007f6 <i16_high_to_u8>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	701a      	strb	r2, [r3, #0]
	data[1] = i16_low_to_u8(num);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	1c5c      	adds	r4, r3, #1
 8000850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffdd 	bl	8000814 <i16_low_to_u8>
 800085a:	4603      	mov	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bd90      	pop	{r4, r7, pc}

08000866 <float_to_u8>:

void float_to_u8(float num, uint8_t* data)	{
 8000866:	b480      	push	{r7}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000870:	6038      	str	r0, [r7, #0]
	float_st temp_num = {.value = num};
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]

	data[0] = temp_num.bytes[0];
 8000876:	7b3a      	ldrb	r2, [r7, #12]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	701a      	strb	r2, [r3, #0]
	data[1] = temp_num.bytes[1];
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	7b7a      	ldrb	r2, [r7, #13]
 8000882:	701a      	strb	r2, [r3, #0]
	data[2] = temp_num.bytes[2];
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3302      	adds	r3, #2
 8000888:	7bba      	ldrb	r2, [r7, #14]
 800088a:	701a      	strb	r2, [r3, #0]
	data[3] = temp_num.bytes[3];
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3303      	adds	r3, #3
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	701a      	strb	r2, [r3, #0]

}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <apply_calibration>:


#include "calibration.h"
#include "bitutils.h"

int16_t apply_calibration(axis_calibration_factors_t* cal, int16_t input){
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
	int16_t value = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	81fb      	strh	r3, [r7, #14]
	if(input == cal->zero)	{
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80008b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d101      	bne.n	80008c2 <apply_calibration+0x22>
		return 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	e02f      	b.n	8000922 <apply_calibration+0x82>
	}
	else {
		value = input - cal->zero;
 80008c2:	887a      	ldrh	r2, [r7, #2]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	81fb      	strh	r3, [r7, #14]
		value = (int16_t)((float)value * cal->step_size);
 80008d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ec:	ee17 3a90 	vmov	r3, s15
 80008f0:	81fb      	strh	r3, [r7, #14]
	}

	if(value >= cal->logical_max)	{
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	db03      	blt.n	8000908 <apply_calibration+0x68>
		return cal->logical_max;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000906:	e00c      	b.n	8000922 <apply_calibration+0x82>
	}
	else if (value <= cal->logical_min){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800090e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000912:	429a      	cmp	r2, r3
 8000914:	dc03      	bgt.n	800091e <apply_calibration+0x7e>
		return cal->logical_min;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800091c:	e001      	b.n	8000922 <apply_calibration+0x82>
	}

	return value;
 800091e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <set_calibration>:

void set_calibration(axis_calibration_factors_t* cal, uint8_t* data, uint8_t data_size)	{
 800092e:	b580      	push	{r7, lr}
 8000930:	b084      	sub	sp, #16
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	4613      	mov	r3, r2
 800093a:	71fb      	strb	r3, [r7, #7]
	if(data_size != CALIBRATION_FACTOR_SIZE){
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b13      	cmp	r3, #19
 8000940:	d15a      	bne.n	80009f8 <set_calibration+0xca>
		return;
	}
	cal->physical_max 	= u8_to_i16(data[0], data[1]);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	3301      	adds	r3, #1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	4610      	mov	r0, r2
 8000950:	f7ff ff04 	bl	800075c <u8_to_i16>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	801a      	strh	r2, [r3, #0]
	cal->physical_min 	= u8_to_i16(data[2], data[3]);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3302      	adds	r3, #2
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3303      	adds	r3, #3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f7ff fef6 	bl	800075c <u8_to_i16>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	805a      	strh	r2, [r3, #2]
	cal->physical_range = u8_to_i16(data[4], data[5]);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3304      	adds	r3, #4
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	3305      	adds	r3, #5
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	4610      	mov	r0, r2
 8000988:	f7ff fee8 	bl	800075c <u8_to_i16>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	809a      	strh	r2, [r3, #4]
	cal->logical_max 	= DEFAULT_LOGICAL_MAX;//u8_to_i16(data[6], data[7]);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099a:	80da      	strh	r2, [r3, #6]
	cal->logical_min 	= DEFAULT_LOGICAL_MIN;//u8_to_i16(data[8], data[9]);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f44f 427c 	mov.w	r2, #64512	@ 0xfc00
 80009a2:	811a      	strh	r2, [r3, #8]
	cal->logical_range 	= cal->logical_max - cal->logical_min;//u8_to_i16(data[10], data[11]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	815a      	strh	r2, [r3, #10]
	cal->zero 			= u8_to_i16(data[12], data[13]);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	330c      	adds	r3, #12
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	330d      	adds	r3, #13
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff fec5 	bl	800075c <u8_to_i16>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	819a      	strh	r2, [r3, #12]
	cal->step_size		= u8_to_float(&data[14]);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	330e      	adds	r3, #14
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff feef 	bl	80007c2 <u8_to_float>
 80009e4:	eef0 7a40 	vmov.f32	s15, s0
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	edc3 7a04 	vstr	s15, [r3, #16]
	cal->is_reversed	= data[18];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	7c9a      	ldrb	r2, [r3, #18]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	751a      	strb	r2, [r3, #20]
 80009f6:	e000      	b.n	80009fa <set_calibration+0xcc>
		return;
 80009f8:	bf00      	nop
}
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <get_calibration>:

void get_calibration(axis_calibration_factors_t* cal, uint8_t* data, uint8_t data_size)	{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if(data_size != CALIBRATION_FACTOR_SIZE){
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b13      	cmp	r3, #19
 8000a12:	d14b      	bne.n	8000aac <get_calibration+0xac>
		return;
	}
	i16_to_u8(cal->physical_max, 	&data[0]);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff06 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->physical_min, 	&data[2]);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4610      	mov	r0, r2
 8000a30:	f7ff fefd 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->physical_range, 	&data[4]);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4610      	mov	r0, r2
 8000a42:	f7ff fef4 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->logical_max, 	&data[6]);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3306      	adds	r3, #6
 8000a50:	4619      	mov	r1, r3
 8000a52:	4610      	mov	r0, r2
 8000a54:	f7ff feeb 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->logical_min, 	&data[8]);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	3308      	adds	r3, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	4610      	mov	r0, r2
 8000a66:	f7ff fee2 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->logical_range, 	&data[10]);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	330a      	adds	r3, #10
 8000a74:	4619      	mov	r1, r3
 8000a76:	4610      	mov	r0, r2
 8000a78:	f7ff fed9 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->zero, 			&data[12]);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	330c      	adds	r3, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4610      	mov	r0, r2
 8000a8a:	f7ff fed0 	bl	800082e <i16_to_u8>
	float_to_u8(cal->step_size, 	&data[14]);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	330e      	adds	r3, #14
 8000a98:	4618      	mov	r0, r3
 8000a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9e:	f7ff fee2 	bl	8000866 <float_to_u8>
				cal->is_reversed = 	data[18];
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	7c9a      	ldrb	r2, [r3, #18]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	751a      	strb	r2, [r3, #20]
 8000aaa:	e000      	b.n	8000aae <get_calibration+0xae>
		return;
 8000aac:	bf00      	nop

}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <clear_calibration>:

void clear_calibration(axis_calibration_factors_t* cal)	{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	cal->physical_max 	= 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	801a      	strh	r2, [r3, #0]
	cal->physical_min 	= 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	805a      	strh	r2, [r3, #2]
	cal->physical_range = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	809a      	strh	r2, [r3, #4]
	//cal->logical_max 	= 0;
	//cal->logical_min 	= 0;
	//cal->logical_range 	= 0;
	cal->zero 			= 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	819a      	strh	r2, [r3, #12]
	cal->step_size		= 0.0f;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	cal->is_reversed	= 0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	751a      	strb	r2, [r3, #20]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <recalculate_calibration>:

void recalculate_calibration(axis_calibration_factors_t* cal)	{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	if(cal->physical_max > cal->physical_min){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dd1b      	ble.n	8000b3e <recalculate_calibration+0x50>
		cal->physical_range = cal->physical_max - cal->physical_min;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	809a      	strh	r2, [r3, #4]
		cal->zero = (cal->physical_max + cal->physical_min) / 2;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b26:	461a      	mov	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b2e:	4413      	add	r3, r2
 8000b30:	0fda      	lsrs	r2, r3, #31
 8000b32:	4413      	add	r3, r2
 8000b34:	105b      	asrs	r3, r3, #1
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	819a      	strh	r2, [r3, #12]
 8000b3c:	e01d      	b.n	8000b7a <recalculate_calibration+0x8c>
	}
	else	{
		cal->physical_range = cal->physical_min - cal->physical_max;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	809a      	strh	r2, [r3, #4]
		cal->zero = (cal->physical_min + cal->physical_max) / 2;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	4413      	add	r3, r2
 8000b68:	0fda      	lsrs	r2, r3, #31
 8000b6a:	4413      	add	r3, r2
 8000b6c:	105b      	asrs	r3, r3, #1
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	819a      	strh	r2, [r3, #12]
		cal->is_reversed = 1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	751a      	strb	r2, [r3, #20]
	}
	//cal->logical_range = cal->logical_max + cal->logical_min;
	if(/*cal->physical_range <= cal->logical_range && */cal->physical_range !=0)	{
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <recalculate_calibration+0xbe>
		cal->step_size = (float)((float)cal->logical_range / (float)cal->physical_range);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	else	{
		cal->step_size = 1;
	}
}
 8000baa:	e003      	b.n	8000bb4 <recalculate_calibration+0xc6>
		cal->step_size = 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <com_packet_init>:
#include "bitutils.h"
#include "string.h"

static CRC_HandleTypeDef* crc_handle;

void com_packet_init(com_packet_t* packet, CRC_HandleTypeDef* crc)	{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	packet->version = COM_PACKET_VERSION;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	705a      	strb	r2, [r3, #1]
	packet->payload_length = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	709a      	strb	r2, [r3, #2]
	packet->padding = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	70da      	strb	r2, [r3, #3]
	packet->packet_size.value = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
	packet->crc32.value = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
	memset(packet->payload, 0, COM_PACKET_PAYLOAD_SIZE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	330c      	adds	r3, #12
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00d f968 	bl	800decc <memset>

	crc_handle = crc;
 8000bfc:	4a03      	ldr	r2, [pc, #12]	@ (8000c0c <com_packet_init+0x4c>)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200002e8 	.word	0x200002e8

08000c10 <com_packet_clear_payload>:

void com_packet_clear_payload(com_packet_t* packet)	{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	packet->version = COM_PACKET_VERSION;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	705a      	strb	r2, [r3, #1]
	packet->payload_length = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	709a      	strb	r2, [r3, #2]
	packet->padding = 0;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	70da      	strb	r2, [r3, #3]
	packet->packet_size.value = 0;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
	packet->crc32.value = 0;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	memset(packet->payload, 0, COM_PACKET_PAYLOAD_SIZE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	330c      	adds	r3, #12
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00d f941 	bl	800decc <memset>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <com_packet_create>:

void com_packet_create(com_packet_t* packet, uint8_t* data, uint32_t size){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	com_packet_clear_payload(packet);
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f7ff ffd5 	bl	8000c10 <com_packet_clear_payload>
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	705a      	strb	r2, [r3, #1]
	if(size >= COM_PACKET_PAYLOAD_SIZE){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c70:	d91d      	bls.n	8000cae <com_packet_create+0x5a>
		memcpy(packet->payload, data, COM_PACKET_PAYLOAD_SIZE);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	330c      	adds	r3, #12
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00d f95a 	bl	800df34 <memcpy>
		packet->payload_length = COM_PACKET_PAYLOAD_SIZE;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	709a      	strb	r2, [r3, #2]
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + COM_PACKET_PAYLOAD_SIZE;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	228c      	movs	r2, #140	@ 0x8c
 8000c8a:	605a      	str	r2, [r3, #4]
		packet->padding = 0;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	70da      	strb	r2, [r3, #3]
		uint32_t crc_size = COM_PACKET_PAYLOAD_SIZE/sizeof(uint32_t);
 8000c92:	2320      	movs	r3, #32
 8000c94:	617b      	str	r3, [r7, #20]
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <com_packet_create+0xdc>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f003 fc9a 	bl	80045da <HAL_CRC_Calculate>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	609a      	str	r2, [r3, #8]
			packet->padding = (uint8_t)misaligned_bytes;
		}
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + packet->payload_length;
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
	}
}
 8000cac:	e03b      	b.n	8000d26 <com_packet_create+0xd2>
		memcpy(packet->payload, data, size);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00d f93c 	bl	800df34 <memcpy>
		uint32_t crc_size = size/sizeof(uint32_t);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
		packet->payload_length = crc_size * sizeof(uint32_t);
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	709a      	strb	r2, [r3, #2]
		uint32_t misaligned_bytes = sizeof(uint32_t) - (size % sizeof(uint32_t));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	f1c3 0304 	rsb	r3, r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
		if(misaligned_bytes != 0 && (size + misaligned_bytes) < COM_PACKET_PAYLOAD_SIZE){
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d011      	beq.n	8000d04 <com_packet_create+0xb0>
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce8:	d80c      	bhi.n	8000d04 <com_packet_create+0xb0>
			crc_size++;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3301      	adds	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
			packet->payload_length += sizeof(uint32_t);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	709a      	strb	r2, [r3, #2]
			packet->padding = (uint8_t)misaligned_bytes;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	70da      	strb	r2, [r3, #3]
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + packet->payload_length;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	330c      	adds	r3, #12
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	605a      	str	r2, [r3, #4]
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <com_packet_create+0xdc>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	330c      	adds	r3, #12
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f003 fc5d 	bl	80045da <HAL_CRC_Calculate>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	609a      	str	r2, [r3, #8]
}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200002e8 	.word	0x200002e8

08000d34 <com_packet_parse>:
			packet->crc32.value = 0xFFFFFFFF;
			break;
	}
}

packet_type_t com_packet_parse(com_packet_t* packet, uint8_t* data, uint32_t size){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
	packet_type_t retval = COM_PACKET_FALSE;
 8000d44:	2304      	movs	r3, #4
 8000d46:	76fb      	strb	r3, [r7, #27]
	if(size < COM_PACKET_HEADER_SIZE){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b0b      	cmp	r3, #11
 8000d4c:	f200 80e3 	bhi.w	8000f16 <com_packet_parse+0x1e2>
		return retval;
 8000d50:	7efb      	ldrb	r3, [r7, #27]
 8000d52:	e0ea      	b.n	8000f2a <com_packet_parse+0x1f6>
	 * index + 4:	packet_size
	 * index + 8: 	crc32
	 * index + 12:	beginning of payload
	 */
	while((index + COM_PACKET_HEADER_SIZE) <= size && retval==COM_PACKET_FALSE){
		if(data[index] == COM_PACKET_VERSION)	{
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	f040 80d7 	bne.w	8000f10 <com_packet_parse+0x1dc>
			 if((index + u8_to_u32(&data[index+4])) <= size){
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd0c 	bl	8000788 <u8_to_u32>
 8000d70:	4602      	mov	r2, r0
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f0c0 80c9 	bcc.w	8000f10 <com_packet_parse+0x1dc>
				 packet_type_t type = data[index+1];
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3301      	adds	r3, #1
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	76bb      	strb	r3, [r7, #26]
				 uint32_t test_crc = u8_to_u32(&data[index+8]);
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3308      	adds	r3, #8
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fcf8 	bl	8000788 <u8_to_u32>
 8000d98:	6178      	str	r0, [r7, #20]
				 uint32_t calc_crc = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
				 switch(type)	{
 8000d9e:	7ebb      	ldrb	r3, [r7, #26]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	f200 80ac 	bhi.w	8000efe <com_packet_parse+0x1ca>
 8000da6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <com_packet_parse+0x78>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000e57 	.word	0x08000e57
 8000db4:	08000ee3 	.word	0x08000ee3
 8000db8:	08000ef1 	.word	0x08000ef1
				 	 case COM_PACKET_NORMAL:
				 		 calc_crc = HAL_CRC_Calculate(crc_handle, (uint32_t*)&data[index+COM_PACKET_HEADER_SIZE],data[index+2]/sizeof(uint32_t));
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f34 <com_packet_parse+0x200>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	330c      	adds	r3, #12
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f003 fbff 	bl	80045da <HAL_CRC_Calculate>
 8000ddc:	6138      	str	r0, [r7, #16]
				 		 if(calc_crc==test_crc)	{
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	f040 808d 	bne.w	8000f02 <com_packet_parse+0x1ce>
				 			 retval = type;
 8000de8:	7ebb      	ldrb	r3, [r7, #26]
 8000dea:	76fb      	strb	r3, [r7, #27]
				 			 packet->version 			= data[index];
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	4413      	add	r3, r2
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	701a      	strb	r2, [r3, #0]
				 			 packet->packet_type 		= data[index+1];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	705a      	strb	r2, [r3, #1]
				 			 packet->payload_length 	= data[index+2];
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	709a      	strb	r2, [r3, #2]
				 			 packet->padding 			= data[index+3];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3303      	adds	r3, #3
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	70da      	strb	r2, [r3, #3]
				 			 packet->packet_size.value	= u8_to_u32(&data[index+4]);
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fcac 	bl	8000788 <u8_to_u32>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	605a      	str	r2, [r3, #4]
				 			 packet->crc32.value		= test_crc;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	609a      	str	r2, [r3, #8]
				 			 memcpy(packet->payload, &data[index+12], packet->payload_length);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 000c 	add.w	r0, r3, #12
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	330c      	adds	r3, #12
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	18d1      	adds	r1, r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	789b      	ldrb	r3, [r3, #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f00d f870 	bl	800df34 <memcpy>
				 		 }
				 		 break;
 8000e54:	e055      	b.n	8000f02 <com_packet_parse+0x1ce>
				 	 case COM_PACKET_CMD:
				 		 calc_crc = HAL_CRC_Calculate(crc_handle, (uint32_t*)&data[index+COM_PACKET_HEADER_SIZE],1);
 8000e56:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <com_packet_parse+0x200>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	330c      	adds	r3, #12
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4413      	add	r3, r2
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	f003 fbb8 	bl	80045da <HAL_CRC_Calculate>
 8000e6a:	6138      	str	r0, [r7, #16]
				 		 if(calc_crc==test_crc)	{
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d148      	bne.n	8000f06 <com_packet_parse+0x1d2>
				 			 retval = type;
 8000e74:	7ebb      	ldrb	r3, [r7, #26]
 8000e76:	76fb      	strb	r3, [r7, #27]
				 			 packet->version 			= data[index];
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	701a      	strb	r2, [r3, #0]
				 			 packet->packet_type 		= data[index+1];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3301      	adds	r3, #1
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	705a      	strb	r2, [r3, #1]
				 			 packet->payload_length 	= data[index+2];
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3302      	adds	r3, #2
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	709a      	strb	r2, [r3, #2]
				 			 packet->padding 			= data[index+3];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	3303      	adds	r3, #3
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	70da      	strb	r2, [r3, #3]
				 			 packet->packet_size.value	= u8_to_u32(&data[index+4]);
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc66 	bl	8000788 <u8_to_u32>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	605a      	str	r2, [r3, #4]
				 			 packet->crc32.value		= test_crc;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	609a      	str	r2, [r3, #8]
				 			 memcpy(packet->payload, &data[index+12], packet->payload_length);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f103 000c 	add.w	r0, r3, #12
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	18d1      	adds	r1, r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	789b      	ldrb	r3, [r3, #2]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f00d f82a 	bl	800df34 <memcpy>
				 		 }
				 		 break;
 8000ee0:	e011      	b.n	8000f06 <com_packet_parse+0x1d2>
				 	 case COM_PACKET_ACK:
				 		 if(test_crc == ACK_CRC32){
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <com_packet_parse+0x204>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10f      	bne.n	8000f0a <com_packet_parse+0x1d6>
				 			 retval = type;
 8000eea:	7ebb      	ldrb	r3, [r7, #26]
 8000eec:	76fb      	strb	r3, [r7, #27]
				 		 }
				 		 break;
 8000eee:	e00c      	b.n	8000f0a <com_packet_parse+0x1d6>
				 	 case COM_PACKET_NACK:
				 		if(test_crc == NACK_CRC32){
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <com_packet_parse+0x208>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d10a      	bne.n	8000f0e <com_packet_parse+0x1da>
				 			 retval = type;
 8000ef8:	7ebb      	ldrb	r3, [r7, #26]
 8000efa:	76fb      	strb	r3, [r7, #27]
				 		 }
				 		 break;
 8000efc:	e007      	b.n	8000f0e <com_packet_parse+0x1da>
				 	 default:
					 	 break;
 8000efe:	bf00      	nop
 8000f00:	e006      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f02:	bf00      	nop
 8000f04:	e004      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f0e:	bf00      	nop
				 }
			 }
		}
		index++;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3301      	adds	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
	while((index + COM_PACKET_HEADER_SIZE) <= size && retval==COM_PACKET_FALSE){
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d303      	bcc.n	8000f28 <com_packet_parse+0x1f4>
 8000f20:	7efb      	ldrb	r3, [r7, #27]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	f43f af16 	beq.w	8000d54 <com_packet_parse+0x20>
	}
	return retval;
 8000f28:	7efb      	ldrb	r3, [r7, #27]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002e8 	.word	0x200002e8
 8000f38:	0abcd001 	.word	0x0abcd001
 8000f3c:	0abcd002 	.word	0x0abcd002

08000f40 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_CRC_Init+0x20>)
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <MX_CRC_Init+0x24>)
 8000f48:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_CRC_Init+0x20>)
 8000f4c:	f003 fb29 	bl	80045a2 <HAL_CRC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f56:	f001 fadd 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200002ec 	.word	0x200002ec
 8000f64:	40023000 	.word	0x40023000

08000f68 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_CRC_MspInit+0x3c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10d      	bne.n	8000f96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023000 	.word	0x40023000
 8000fa8:	40023800 	.word	0x40023800

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f003 faa1 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f003 faba 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	200d      	movs	r0, #13
 8001000:	f003 fa99 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001004:	200d      	movs	r0, #13
 8001006:	f003 fab2 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	200e      	movs	r0, #14
 8001010:	f003 fa91 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001014:	200e      	movs	r0, #14
 8001016:	f003 faaa 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200f      	movs	r0, #15
 8001020:	f003 fa89 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001024:	200f      	movs	r0, #15
 8001026:	f003 faa2 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2038      	movs	r0, #56	@ 0x38
 8001030:	f003 fa81 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001034:	2038      	movs	r0, #56	@ 0x38
 8001036:	f003 fa9a 	bl	800456e <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <fifo_init>:
 *      Author: zuidec
 */

#include "fifo.h"

void fifo_init(fifo_buffer_t* fifo, uint8_t* buffer, uint32_t size) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]

    fifo->buffer = buffer;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	601a      	str	r2, [r3, #0]
    fifo->read_index = 0;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    fifo->write_index = 0;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    fifo->mask = size - 1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	605a      	str	r2, [r3, #4]
    fifo->size = size;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]

}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <fifo_bytes_available>:

    // Return true if read index and write index are the same
    return fifo->read_index == fifo->write_index;
}

uint32_t fifo_bytes_available(fifo_buffer_t* fifo)	{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if(fifo->write_index >= fifo->read_index)	{
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d305      	bcc.n	80010a0 <fifo_bytes_available+0x20>
		return fifo->write_index-fifo->read_index;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	e007      	b.n	80010b0 <fifo_bytes_available+0x30>
	}
	else	{
		return (fifo->size - fifo->read_index) + fifo->write_index;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	1ad2      	subs	r2, r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4413      	add	r3, r2
	}
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <fifo_write>:

uint32_t fifo_write(fifo_buffer_t* fifo, uint8_t* data, uint32_t size)   {
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]

    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	61fb      	str	r3, [r7, #28]
    uint32_t local_write_index = fifo->write_index;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
    uint32_t next_write_index = local_write_index;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	61bb      	str	r3, [r7, #24]
    uint32_t bytes_written = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

    while(bytes_written < size){
 80010dc:	e01d      	b.n	800111a <fifo_write+0x5e>
        local_write_index = next_write_index;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	613b      	str	r3, [r7, #16]
        fifo->buffer[local_write_index] = data[bytes_written];
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	441a      	add	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6819      	ldr	r1, [r3, #0]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	440b      	add	r3, r1
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	701a      	strb	r2, [r3, #0]
        bytes_written++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
        next_write_index = (local_write_index + 1) & fifo->mask;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if(next_write_index == local_read_index){
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	429a      	cmp	r2, r3
 800110c:	d105      	bne.n	800111a <fifo_write+0x5e>
        	local_read_index = (local_read_index + 1) & fifo->mask; // Push read index
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
    while(bytes_written < size){
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3dd      	bcc.n	80010de <fifo_write+0x22>
        }
    }

    fifo->write_index = next_write_index;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]
    fifo->read_index = local_read_index;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	609a      	str	r2, [r3, #8]

    return bytes_written;
 800112e:	697b      	ldr	r3, [r7, #20]

}
 8001130:	4618      	mov	r0, r3
 8001132:	3724      	adds	r7, #36	@ 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <fifo_peek_continuous>:

    return fifo->buffer[local_read_index+peek_distance];
}


uint32_t fifo_peek_continuous(fifo_buffer_t* fifo, uint8_t* data, uint32_t distance)    {
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]

    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	61fb      	str	r3, [r7, #28]
    uint32_t local_write_index = fifo->write_index;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	617b      	str	r3, [r7, #20]

    // return if theres no data to read
    if(local_read_index == local_write_index)   {
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	d101      	bne.n	8001160 <fifo_peek_continuous+0x24>
        return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e01d      	b.n	800119c <fifo_peek_continuous+0x60>
    }

    uint32_t bytes_read = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
    while(bytes_read < distance && local_read_index != local_write_index)	{
 8001164:	e011      	b.n	800118a <fifo_peek_continuous+0x4e>
    	data[bytes_read] = fifo->buffer[local_read_index];
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	441a      	add	r2, r3
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	440b      	add	r3, r1
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	701a      	strb	r2, [r3, #0]
    	bytes_read++;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3301      	adds	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
        local_read_index = (local_read_index + 1) & fifo->mask;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4013      	ands	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
    while(bytes_read < distance && local_read_index != local_write_index)	{
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d203      	bcs.n	800119a <fifo_peek_continuous+0x5e>
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	429a      	cmp	r2, r3
 8001198:	d1e5      	bne.n	8001166 <fifo_peek_continuous+0x2a>
    }

    return bytes_read;
 800119a:	69bb      	ldr	r3, [r7, #24]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	@ 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <fifo_push_read_index>:

void fifo_push_read_index(fifo_buffer_t* fifo, uint32_t distance)	{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	617b      	str	r3, [r7, #20]
    uint32_t local_write_index = fifo->write_index;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60fb      	str	r3, [r7, #12]

    // return if theres no data to read
    if(local_read_index == local_write_index)   {
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d019      	beq.n	80011fa <fifo_push_read_index+0x52>
        return;
    }

    uint32_t bytes_read = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
    for(uint32_t i = 0; (i < distance) && (local_read_index != local_write_index); i++)	{
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e008      	b.n	80011e2 <fifo_push_read_index+0x3a>
        local_read_index = (local_read_index + 1) & fifo->mask;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4013      	ands	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
    for(uint32_t i = 0; (i < distance) && (local_read_index != local_write_index); i++)	{
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	3301      	adds	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d203      	bcs.n	80011f2 <fifo_push_read_index+0x4a>
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d1ee      	bne.n	80011d0 <fifo_push_read_index+0x28>
    }

    fifo->read_index = local_read_index;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e000      	b.n	80011fc <fifo_push_read_index+0x54>
        return;
 80011fa:	bf00      	nop
}
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
     PC12   ------> UART5_TX
     PD2   ------> UART5_RX
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	4bb6      	ldr	r3, [pc, #728]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4ab5      	ldr	r2, [pc, #724]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4bb3      	ldr	r3, [pc, #716]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	4baf      	ldr	r3, [pc, #700]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4aae      	ldr	r2, [pc, #696]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4bac      	ldr	r3, [pc, #688]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4ba8      	ldr	r3, [pc, #672]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4aa7      	ldr	r2, [pc, #668]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4ba5      	ldr	r3, [pc, #660]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4ba1      	ldr	r3, [pc, #644]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4aa0      	ldr	r2, [pc, #640]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b9e      	ldr	r3, [pc, #632]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b9a      	ldr	r3, [pc, #616]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a99      	ldr	r2, [pc, #612]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b97      	ldr	r3, [pc, #604]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b93      	ldr	r3, [pc, #588]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a92      	ldr	r2, [pc, #584]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b90      	ldr	r3, [pc, #576]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2170      	movs	r1, #112	@ 0x70
 80012ca:	488d      	ldr	r0, [pc, #564]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 80012cc:	f003 ff6e 	bl	80051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d6:	488b      	ldr	r0, [pc, #556]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 80012d8:	f003 ff68 	bl	80051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	4889      	ldr	r0, [pc, #548]	@ (8001508 <MX_GPIO_Init+0x300>)
 80012e2:	f003 ff63 	bl	80051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PITCH_STEP_DIR_Pin|PITCH_STEP_EN_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80012ec:	4887      	ldr	r0, [pc, #540]	@ (800150c <MX_GPIO_Init+0x304>)
 80012ee:	f003 ff5d 	bl	80051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ROLL_STEP_DIR_Pin|ROLL_STEP_EN_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2103      	movs	r1, #3
 80012f6:	4882      	ldr	r0, [pc, #520]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 80012f8:	f003 ff58 	bl	80051ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_OK_Pin */
  GPIO_InitStruct.Pin = SW_OK_Pin;
 80012fc:	2304      	movs	r3, #4
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SW_OK_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	487c      	ldr	r0, [pc, #496]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 8001310:	f003 fd98 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_CAL_Pin */
  GPIO_InitStruct.Pin = SW_CAL_Pin;
 8001314:	2308      	movs	r3, #8
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001318:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131e:	2301      	movs	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SW_CAL_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4875      	ldr	r0, [pc, #468]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 800132a:	f003 fd8b 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800132e:	2370      	movs	r3, #112	@ 0x70
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001332:	2311      	movs	r3, #17
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	486e      	ldr	r0, [pc, #440]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 8001346:	f003 fd7d 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_4_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 800134a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001350:	2311      	movs	r3, #17
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4868      	ldr	r0, [pc, #416]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 8001364:	f003 fd6e 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001368:	f24c 0387 	movw	r3, #49287	@ 0xc087
 800136c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4861      	ldr	r0, [pc, #388]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 800137e:	f003 fd61 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_EN_Pin */
  GPIO_InitStruct.Pin = UART4_EN_Pin;
 8001382:	2308      	movs	r3, #8
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART4_EN_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	485b      	ldr	r0, [pc, #364]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 8001396:	f003 fd55 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139a:	230c      	movs	r3, #12
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4856      	ldr	r0, [pc, #344]	@ (8001510 <MX_GPIO_Init+0x308>)
 80013b6:	f003 fd45 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin;
 80013ba:	2310      	movs	r3, #16
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART2_EN_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4850      	ldr	r0, [pc, #320]	@ (8001510 <MX_GPIO_Init+0x308>)
 80013ce:	f003 fd39 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013d2:	f248 73e0 	movw	r3, #34784	@ 0x87e0
 80013d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	484a      	ldr	r0, [pc, #296]	@ (8001510 <MX_GPIO_Init+0x308>)
 80013e8:	f003 fd2c 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80013ec:	f64f 4303 	movw	r3, #64515	@ 0xfc03
 80013f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4842      	ldr	r0, [pc, #264]	@ (800150c <MX_GPIO_Init+0x304>)
 8001402:	f003 fd1f 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001406:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800140a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4839      	ldr	r0, [pc, #228]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 800141c:	f003 fd12 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD1 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 8001420:	f240 137b 	movw	r3, #379	@ 0x17b
 8001424:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4834      	ldr	r0, [pc, #208]	@ (8001508 <MX_GPIO_Init+0x300>)
 8001436:	f003 fd05 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYC_ICS_SW_Pin CYC_CARGO_REL_Pin CYC_CDR_REL_Pin CYC_AP_REL_Pin
                           CYC_HAT_LEFT_Pin CYC_HAT_DOWN_Pin CYC_HAT_UP_Pin */
  GPIO_InitStruct.Pin = CYC_ICS_SW_Pin|CYC_CARGO_REL_Pin|CYC_CDR_REL_Pin|CYC_AP_REL_Pin
 800143a:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 800143e:	61fb      	str	r3, [r7, #28]
                          |CYC_HAT_LEFT_Pin|CYC_HAT_DOWN_Pin|CYC_HAT_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	482e      	ldr	r0, [pc, #184]	@ (8001508 <MX_GPIO_Init+0x300>)
 8001450:	f003 fcf8 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CYC_HAT_RIGHT_Pin */
  GPIO_InitStruct.Pin = CYC_HAT_RIGHT_Pin;
 8001454:	2340      	movs	r3, #64	@ 0x40
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CYC_HAT_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4827      	ldr	r0, [pc, #156]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 8001468:	f003 fcec 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800146c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800147e:	2308      	movs	r3, #8
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	481e      	ldr	r0, [pc, #120]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 800148a:	f003 fcdb 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148e:	2304      	movs	r3, #4
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800149e:	2308      	movs	r3, #8
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4817      	ldr	r0, [pc, #92]	@ (8001508 <MX_GPIO_Init+0x300>)
 80014aa:	f003 fccb 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4810      	ldr	r0, [pc, #64]	@ (8001508 <MX_GPIO_Init+0x300>)
 80014c6:	f003 fcbd 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PITCH_STEP_DIR_Pin PITCH_STEP_EN_Pin */
  GPIO_InitStruct.Pin = PITCH_STEP_DIR_Pin|PITCH_STEP_EN_Pin;
 80014ca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	480a      	ldr	r0, [pc, #40]	@ (800150c <MX_GPIO_Init+0x304>)
 80014e4:	f003 fcae 	bl	8004e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROLL_STEP_DIR_Pin ROLL_STEP_EN_Pin */
  GPIO_InitStruct.Pin = ROLL_STEP_DIR_Pin|ROLL_STEP_EN_Pin;
 80014e8:	2303      	movs	r3, #3
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f8:	e00c      	b.n	8001514 <MX_GPIO_Init+0x30c>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40020400 	.word	0x40020400
 8001510:	40020000 	.word	0x40020000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <MX_GPIO_Init+0x330>)
 800151c:	f003 fc92 	bl	8004e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2009      	movs	r0, #9
 8001526:	f003 f806 	bl	8004536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800152a:	2009      	movs	r0, #9
 800152c:	f003 f81f 	bl	800456e <HAL_NVIC_EnableIRQ>

}
 8001530:	bf00      	nop
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000

0800153c <input_filter_init>:
 */


#include "input_filter.h"

void input_filter_init(input_filter_t* filter, float alpha)	{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
	input_filter_set_alpha(filter, alpha);
 8001548:	ed97 0a00 	vldr	s0, [r7]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f808 	bl	8001562 <input_filter_set_alpha>
	filter->output = 0.0f;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <input_filter_set_alpha>:

void input_filter_set_alpha(input_filter_t* filter, float alpha)	{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	ed87 0a00 	vstr	s0, [r7]
	if(alpha > 1.0f){
 800156e:	edd7 7a00 	vldr	s15, [r7]
 8001572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	dd03      	ble.n	8001588 <input_filter_set_alpha+0x26>
		alpha = 1.0f;
 8001580:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	e009      	b.n	800159c <input_filter_set_alpha+0x3a>
	}
	else if (alpha < 0.0f){
 8001588:	edd7 7a00 	vldr	s15, [r7]
 800158c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d502      	bpl.n	800159c <input_filter_set_alpha+0x3a>
		alpha = 0.0f;
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
	}
	filter->alpha = alpha;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <input_filter_update>:

float input_filter_update(input_filter_t* filter, float input)	{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	ed87 0a00 	vstr	s0, [r7]
	filter->output = filter->alpha * input + (1.0f - filter->alpha) * filter->output;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a00 	vldr	s15, [r7]
 80015c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a01 	vstr	s15, [r3, #4]
	return filter->output;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	ee07 3a90 	vmov	s15, r3
}
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	f5ad 6db3 	sub.w	sp, sp, #1432	@ 0x598
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160a:	f002 f8f3 	bl	80037f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160e:	f000 fa81 	bl	8001b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001612:	f7ff fdf9 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8001616:	f7ff fcc9 	bl	8000fac <MX_DMA_Init>
  MX_ADC1_Init();
 800161a:	f7fe ffbf 	bl	800059c <MX_ADC1_Init>
  MX_SPI1_Init();
 800161e:	f000 ff7f 	bl	8002520 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001622:	f001 fa09 	bl	8002a38 <MX_TIM8_Init>
  MX_TIM4_Init();
 8001626:	f001 f97b 	bl	8002920 <MX_TIM4_Init>
  MX_TIM3_Init();
 800162a:	f001 f92b 	bl	8002884 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800162e:	f001 fdc5 	bl	80031bc <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001632:	f7ff fc85 	bl	8000f40 <MX_CRC_Init>
  MX_UART4_Init();
 8001636:	f001 fd97 	bl	8003168 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800163a:	f001 ff43 	bl	80034c4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, NUM_ADC_CHANNEL);
 800163e:	2202      	movs	r2, #2
 8001640:	49bb      	ldr	r1, [pc, #748]	@ (8001930 <main+0x330>)
 8001642:	48bc      	ldr	r0, [pc, #752]	@ (8001934 <main+0x334>)
 8001644:	f002 fac0 	bl	8003bc8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8001648:	48bb      	ldr	r0, [pc, #748]	@ (8001938 <main+0x338>)
 800164a:	f006 fc0d 	bl	8007e68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800164e:	48bb      	ldr	r0, [pc, #748]	@ (800193c <main+0x33c>)
 8001650:	f006 fc0a 	bl	8007e68 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	48ba      	ldr	r0, [pc, #744]	@ (8001940 <main+0x340>)
 8001658:	f006 fcc8 	bl	8007fec <HAL_TIM_PWM_Start>
  bool rs232_connected = true;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 357b 	strb.w	r3, [r7, #1403]	@ 0x57b
  if(rs232_connected)	{
 8001662:	f897 357b 	ldrb.w	r3, [r7, #1403]	@ 0x57b
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <main+0x72>
	ENABLE_USBD_HID_CUSTOM2 = 1;
 800166a:	4ab6      	ldr	r2, [pc, #728]	@ (8001944 <main+0x344>)
 800166c:	2301      	movs	r3, #1
 800166e:	7013      	strb	r3, [r2, #0]
 8001670:	e002      	b.n	8001678 <main+0x78>
  }
  else	{
		ENABLE_USBD_HID_CUSTOM2 = 0;
 8001672:	4ab4      	ldr	r2, [pc, #720]	@ (8001944 <main+0x344>)
 8001674:	2300      	movs	r3, #0
 8001676:	7013      	strb	r3, [r2, #0]
  }
  MX_USB_DEVICE_Init();
 8001678:	f00a f944 	bl	800b904 <MX_USB_DEVICE_Init>
  init_flash();
 800167c:	f000 fafc 	bl	8001c78 <init_flash>
  init_cyclic_input();
 8001680:	f000 fb02 	bl	8001c88 <init_cyclic_input>
  init_steppers();
 8001684:	f000 fab0 	bl	8001be8 <init_steppers>
  uart_handle_t uart4;
  uart_handle_t uart3;
  uart_init(&uart4, &huart4);
 8001688:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800168c:	49ae      	ldr	r1, [pc, #696]	@ (8001948 <main+0x348>)
 800168e:	4618      	mov	r0, r3
 8001690:	f001 fb0c 	bl	8002cac <uart_init>
  uart_init(&uart3, &huart3);
 8001694:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8001698:	49ac      	ldr	r1, [pc, #688]	@ (800194c <main+0x34c>)
 800169a:	4618      	mov	r0, r3
 800169c:	f001 fb06 	bl	8002cac <uart_init>
  com_packet_t packet;
  com_packet_init(&packet, &hcrc);
 80016a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016a4:	49aa      	ldr	r1, [pc, #680]	@ (8001950 <main+0x350>)
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fa8a 	bl	8000bc0 <com_packet_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint64_t usb_timer = HAL_GetTick();
 80016ac:	f002 f908 	bl	80038c0 <HAL_GetTick>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2200      	movs	r2, #0
 80016b4:	461c      	mov	r4, r3
 80016b6:	4615      	mov	r5, r2
 80016b8:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 80016bc:	e9c3 4500 	strd	r4, r5, [r3]
  uint64_t uart_timer = HAL_GetTick();
 80016c0:	f002 f8fe 	bl	80038c0 <HAL_GetTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2200      	movs	r2, #0
 80016c8:	4698      	mov	r8, r3
 80016ca:	4691      	mov	r9, r2
 80016cc:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80016d0:	e9c3 8900 	strd	r8, r9, [r3]
  uint32_t usb_interval_ms = 5;
 80016d4:	2305      	movs	r3, #5
 80016d6:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
  uint32_t packet_count =0x00;
 80016da:	2300      	movs	r3, #0
 80016dc:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584

  bool ack_received = false;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
  uint32_t retx_count = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IRQ_Calibrate_Flag){
 80016ec:	4b99      	ldr	r3, [pc, #612]	@ (8001954 <main+0x354>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <main+0xf8>
		  calibration_routine();
 80016f4:	f000 fbac 	bl	8001e50 <calibration_routine>
	  }
	  update_cyclic_input();
 80016f8:	f000 faf6 	bl	8001ce8 <update_cyclic_input>

	  // Check if CDR is pressed and release stepper motors if it is
	  if(CDR_BIT(cyclic_report.buttons))	{
 80016fc:	4b96      	ldr	r3, [pc, #600]	@ (8001958 <main+0x358>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b25b      	sxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	da06      	bge.n	8001714 <main+0x114>
		  stepper_disable(&pitch_motor);
 8001706:	4895      	ldr	r0, [pc, #596]	@ (800195c <main+0x35c>)
 8001708:	f000 ffa1 	bl	800264e <stepper_disable>
		  stepper_disable(&roll_motor);
 800170c:	4894      	ldr	r0, [pc, #592]	@ (8001960 <main+0x360>)
 800170e:	f000 ff9e 	bl	800264e <stepper_disable>
 8001712:	e005      	b.n	8001720 <main+0x120>
	  }
	  else	{
		  stepper_enable(&pitch_motor);
 8001714:	4891      	ldr	r0, [pc, #580]	@ (800195c <main+0x35c>)
 8001716:	f000 ff89 	bl	800262c <stepper_enable>
		  stepper_enable(&roll_motor);
 800171a:	4891      	ldr	r0, [pc, #580]	@ (8001960 <main+0x360>)
 800171c:	f000 ff86 	bl	800262c <stepper_enable>
	  }


	  if(HAL_GetTick()-usb_timer >= usb_interval_ms )	{
 8001720:	f002 f8ce 	bl	80038c0 <HAL_GetTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2200      	movs	r2, #0
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800172a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800172c:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001738:	4621      	mov	r1, r4
 800173a:	ebb1 0a02 	subs.w	sl, r1, r2
 800173e:	4629      	mov	r1, r5
 8001740:	eb61 0b03 	sbc.w	fp, r1, r3
 8001744:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 8001748:	2200      	movs	r2, #0
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	627a      	str	r2, [r7, #36]	@ 0x24
 800174e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001752:	460b      	mov	r3, r1
 8001754:	459a      	cmp	sl, r3
 8001756:	4613      	mov	r3, r2
 8001758:	eb7b 0303 	sbcs.w	r3, fp, r3
 800175c:	f0c0 809a 	bcc.w	8001894 <main+0x294>
		  uint8_t temp_buffer[6] = {0x01, cyclic_report.buttons,cyclic_report.roll, cyclic_report.roll >> 8,cyclic_report.pitch, cyclic_report.pitch >> 8};
 8001760:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001764:	f5a3 62ac 	sub.w	r2, r3, #1376	@ 0x560
 8001768:	2301      	movs	r3, #1
 800176a:	7013      	strb	r3, [r2, #0]
 800176c:	4b7a      	ldr	r3, [pc, #488]	@ (8001958 <main+0x358>)
 800176e:	7819      	ldrb	r1, [r3, #0]
 8001770:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001774:	f5a3 62ac 	sub.w	r2, r3, #1376	@ 0x560
 8001778:	460b      	mov	r3, r1
 800177a:	7053      	strb	r3, [r2, #1]
 800177c:	4b76      	ldr	r3, [pc, #472]	@ (8001958 <main+0x358>)
 800177e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001782:	b2d9      	uxtb	r1, r3
 8001784:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001788:	f5a3 62ac 	sub.w	r2, r3, #1376	@ 0x560
 800178c:	460b      	mov	r3, r1
 800178e:	7093      	strb	r3, [r2, #2]
 8001790:	4b71      	ldr	r3, [pc, #452]	@ (8001958 <main+0x358>)
 8001792:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001796:	121b      	asrs	r3, r3, #8
 8001798:	b21b      	sxth	r3, r3
 800179a:	b2d9      	uxtb	r1, r3
 800179c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017a0:	f5a3 62ac 	sub.w	r2, r3, #1376	@ 0x560
 80017a4:	460b      	mov	r3, r1
 80017a6:	70d3      	strb	r3, [r2, #3]
 80017a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001958 <main+0x358>)
 80017aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017ae:	b2d9      	uxtb	r1, r3
 80017b0:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017b4:	f5a3 62ac 	sub.w	r2, r3, #1376	@ 0x560
 80017b8:	460b      	mov	r3, r1
 80017ba:	7113      	strb	r3, [r2, #4]
 80017bc:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <main+0x358>)
 80017be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	b2d9      	uxtb	r1, r3
 80017c8:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017cc:	f5a3 62ac 	sub.w	r2, r3, #1376	@ 0x560
 80017d0:	460b      	mov	r3, r1
 80017d2:	7153      	strb	r3, [r2, #5]
		  uint8_t otherbuffer[7] = {0x02,cyclic_report.pitch, cyclic_report.pitch >> 8,0xC0,0xDE,0xDE,0xAD};
 80017d4:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017d8:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 80017dc:	2302      	movs	r3, #2
 80017de:	7013      	strb	r3, [r2, #0]
 80017e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001958 <main+0x358>)
 80017e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017e6:	b2d9      	uxtb	r1, r3
 80017e8:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017ec:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 80017f0:	460b      	mov	r3, r1
 80017f2:	7053      	strb	r3, [r2, #1]
 80017f4:	4b58      	ldr	r3, [pc, #352]	@ (8001958 <main+0x358>)
 80017f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017fa:	121b      	asrs	r3, r3, #8
 80017fc:	b21b      	sxth	r3, r3
 80017fe:	b2d9      	uxtb	r1, r3
 8001800:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001804:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 8001808:	460b      	mov	r3, r1
 800180a:	7093      	strb	r3, [r2, #2]
 800180c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001810:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 8001814:	23c0      	movs	r3, #192	@ 0xc0
 8001816:	70d3      	strb	r3, [r2, #3]
 8001818:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 800181c:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 8001820:	23de      	movs	r3, #222	@ 0xde
 8001822:	7113      	strb	r3, [r2, #4]
 8001824:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001828:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 800182c:	23de      	movs	r3, #222	@ 0xde
 800182e:	7153      	strb	r3, [r2, #5]
 8001830:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001834:	f5a3 62ad 	sub.w	r2, r3, #1384	@ 0x568
 8001838:	23ad      	movs	r3, #173	@ 0xad
 800183a:	7193      	strb	r3, [r2, #6]
		 uint8_t status =  USBD_CUSTOM_HID_SendReport(&hUsbDevice, temp_buffer, sizeof(temp_buffer));
 800183c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001840:	2206      	movs	r2, #6
 8001842:	4619      	mov	r1, r3
 8001844:	4847      	ldr	r0, [pc, #284]	@ (8001964 <main+0x364>)
 8001846:	f00a fd8f 	bl	800c368 <USBD_CUSTOM_HID_SendReport>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
		 if(status == USBD_FAIL || status == USBD_BUSY)	{
 8001850:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 8001854:	2b03      	cmp	r3, #3
 8001856:	d003      	beq.n	8001860 <main+0x260>
 8001858:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <main+0x26e>
			 USBD_CUSTOM_HID_SendReport(&hUsbDevice, temp_buffer, sizeof(temp_buffer));
 8001860:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001864:	2206      	movs	r2, #6
 8001866:	4619      	mov	r1, r3
 8001868:	483e      	ldr	r0, [pc, #248]	@ (8001964 <main+0x364>)
 800186a:	f00a fd7d 	bl	800c368 <USBD_CUSTOM_HID_SendReport>
		 }
		 USBD_CUSTOM_HID2_SendReport(&hUsbDevice, otherbuffer, sizeof(otherbuffer));
 800186e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001872:	2207      	movs	r2, #7
 8001874:	4619      	mov	r1, r3
 8001876:	483b      	ldr	r0, [pc, #236]	@ (8001964 <main+0x364>)
 8001878:	f00a fe8c 	bl	800c594 <USBD_CUSTOM_HID2_SendReport>
		  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)&cyclic_report, cyclic_report.size);
          usb_timer = HAL_GetTick();
 800187c:	f002 f820 	bl	80038c0 <HAL_GetTick>
 8001880:	4603      	mov	r3, r0
 8001882:	2200      	movs	r2, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	60fa      	str	r2, [r7, #12]
 8001888:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 800188c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001890:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  if(uart_update(&uart4) == UART_RX_FAIL)	{
 8001894:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8001898:	4618      	mov	r0, r3
 800189a:	f001 faa7 	bl	8002dec <uart_update>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b04      	cmp	r3, #4
 80018a2:	d06b      	beq.n	800197c <main+0x37c>
	  		  // handle rx failure
	  }
	  else if(uart4.unread_bytes > 0)	{
 80018a4:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80018a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ac:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d063      	beq.n	800197c <main+0x37c>
		   memset(temp,'\0', RX_BUFFER_SIZE);
 80018b4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80018b8:	2280      	movs	r2, #128	@ 0x80
 80018ba:	2100      	movs	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f00c fb05 	bl	800decc <memset>
		   uint32_t bytes_read =  fifo_peek_continuous(&uart4.rx_fifo, temp, uart4.unread_bytes);
 80018c2:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80018c6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018ca:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 80018ce:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80018d2:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80018d6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fc2e 	bl	800113c <fifo_peek_continuous>
 80018e0:	f8c7 056c 	str.w	r0, [r7, #1388]	@ 0x56c
		   //uint32_t bytes_read = uart_read(&uart4,temp,RX_BUFFER_SIZE);

		   packet_type_t packet_type = com_packet_parse(&packet,temp,bytes_read);
 80018e4:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80018e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018ec:	f8d7 256c 	ldr.w	r2, [r7, #1388]	@ 0x56c
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fa1f 	bl	8000d34 <com_packet_parse>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f887 356b 	strb.w	r3, [r7, #1387]	@ 0x56b
		   if(packet_type != COM_PACKET_FALSE)	{
 80018fc:	f897 356b 	ldrb.w	r3, [r7, #1387]	@ 0x56b
 8001900:	2b04      	cmp	r3, #4
 8001902:	d03b      	beq.n	800197c <main+0x37c>
			   switch(packet_type)	{
 8001904:	f897 356b 	ldrb.w	r3, [r7, #1387]	@ 0x56b
 8001908:	2b03      	cmp	r3, #3
 800190a:	d00c      	beq.n	8001926 <main+0x326>
 800190c:	2b03      	cmp	r3, #3
 800190e:	dc0c      	bgt.n	800192a <main+0x32a>
 8001910:	2b01      	cmp	r3, #1
 8001912:	d029      	beq.n	8001968 <main+0x368>
 8001914:	2b02      	cmp	r3, #2
 8001916:	d108      	bne.n	800192a <main+0x32a>
				   case COM_PACKET_ACK:
					   ack_received = true;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
					   retx_count = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
					   break;
 8001924:	e021      	b.n	800196a <main+0x36a>
				   case COM_PACKET_NACK:
					   break;
 8001926:	bf00      	nop
 8001928:	e01f      	b.n	800196a <main+0x36a>
				   case COM_PACKET_CMD:
					   break;
				   default:
					   break;
 800192a:	bf00      	nop
 800192c:	e01d      	b.n	800196a <main+0x36a>
 800192e:	bf00      	nop
 8001930:	200002f4 	.word	0x200002f4
 8001934:	20000240 	.word	0x20000240
 8001938:	20000474 	.word	0x20000474
 800193c:	200003e4 	.word	0x200003e4
 8001940:	2000042c 	.word	0x2000042c
 8001944:	20000384 	.word	0x20000384
 8001948:	200004e0 	.word	0x200004e0
 800194c:	20000528 	.word	0x20000528
 8001950:	200002ec 	.word	0x200002ec
 8001954:	200002f8 	.word	0x200002f8
 8001958:	200002fc 	.word	0x200002fc
 800195c:	20000334 	.word	0x20000334
 8001960:	20000354 	.word	0x20000354
 8001964:	20000bd8 	.word	0x20000bd8
					   break;
 8001968:	bf00      	nop
			   }
			   fifo_push_read_index(&uart4.rx_fifo, bytes_read);
 800196a:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 800196e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001972:	f8d7 156c 	ldr.w	r1, [r7, #1388]	@ 0x56c
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fc16 	bl	80011a8 <fifo_push_read_index>
		   }

	  }
	  if (ack_received){// && HAL_GetTick() - uart_timer >= 2){
 800197c:	f897 3583 	ldrb.w	r3, [r7, #1411]	@ 0x583
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03a      	beq.n	80019fa <main+0x3fa>

		  uint32_t bytes_read = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
		  memset(temp,'\0', RX_BUFFER_SIZE);
 800198a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f00c fa9a 	bl	800decc <memset>
		  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 8001998:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800199c:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 80019a0:	4a5b      	ldr	r2, [pc, #364]	@ (8001b10 <main+0x510>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	f00c fa5c 	bl	800de60 <sniprintf>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
		  com_packet_create(&packet, temp, bytes_read);
 80019ae:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80019b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019b6:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f94a 	bl	8000c54 <com_packet_create>
		  (void)uart_write_packet(&uart4, &packet);
 80019c0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80019c4:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 fa2d 	bl	8002e2a <uart_write_packet>
		  ack_received = false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
		  packet_count++;
 80019d6:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 80019da:	3301      	adds	r3, #1
 80019dc:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
          uart_timer = HAL_GetTick();
 80019e0:	f001 ff6e 	bl	80038c0 <HAL_GetTick>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	f507 62b1 	add.w	r2, r7, #1416	@ 0x588
 80019f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019f4:	e9c2 3400 	strd	r3, r4, [r2]
 80019f8:	e678      	b.n	80016ec <main+0xec>

	  }
	  else if(ack_received == false && HAL_GetTick() - uart_timer >= 150)	{
 80019fa:	f897 3583 	ldrb.w	r3, [r7, #1411]	@ 0x583
 80019fe:	f083 0301 	eor.w	r3, r3, #1
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d051      	beq.n	8001aac <main+0x4ac>
 8001a08:	f001 ff5a 	bl	80038c0 <HAL_GetTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61bb      	str	r3, [r7, #24]
 8001a12:	61fa      	str	r2, [r7, #28]
 8001a14:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001a20:	4621      	mov	r1, r4
 8001a22:	1a89      	subs	r1, r1, r2
 8001a24:	6139      	str	r1, [r7, #16]
 8001a26:	4629      	mov	r1, r5
 8001a28:	eb61 0303 	sbc.w	r3, r1, r3
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a32:	460b      	mov	r3, r1
 8001a34:	2b96      	cmp	r3, #150	@ 0x96
 8001a36:	4613      	mov	r3, r2
 8001a38:	f173 0300 	sbcs.w	r3, r3, #0
 8001a3c:	d336      	bcc.n	8001aac <main+0x4ac>
		  if(retx_count < 3)	{
 8001a3e:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d82b      	bhi.n	8001a9e <main+0x49e>

			  uint32_t bytes_read = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
		  	  memset(temp,'\0', RX_BUFFER_SIZE);
 8001a4c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001a50:	2280      	movs	r2, #128	@ 0x80
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f00c fa39 	bl	800decc <memset>
		  	  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 8001a5a:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001a5e:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001a62:	4a2b      	ldr	r2, [pc, #172]	@ (8001b10 <main+0x510>)
 8001a64:	2180      	movs	r1, #128	@ 0x80
 8001a66:	f00c f9fb 	bl	800de60 <sniprintf>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
		  	  com_packet_create(&packet, temp, bytes_read);
 8001a70:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001a74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a78:	f8d7 2564 	ldr.w	r2, [r7, #1380]	@ 0x564
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f8e9 	bl	8000c54 <com_packet_create>
		  	  (void)uart_write_packet(&uart4, &packet);
 8001a82:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001a86:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 f9cc 	bl	8002e2a <uart_write_packet>
		  	  retx_count++;
 8001a92:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
 8001a96:	3301      	adds	r3, #1
 8001a98:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
		  if(retx_count < 3)	{
 8001a9c:	e036      	b.n	8001b0c <main+0x50c>
		  }
		  else	{
			  retx_count = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
			  ack_received = true;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
		  if(retx_count < 3)	{
 8001aaa:	e02f      	b.n	8001b0c <main+0x50c>
		  }
	  }
	  else if(packet_count ==0)	{
 8001aac:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f ae1b 	bne.w	80016ec <main+0xec>
		  uint32_t bytes_read = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
          memset(temp,'\0', RX_BUFFER_SIZE);
 8001abc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001ac0:	2280      	movs	r2, #128	@ 0x80
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00c fa01 	bl	800decc <memset>
		  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 8001aca:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8001ace:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <main+0x510>)
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	f00c f9c3 	bl	800de60 <sniprintf>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
		  packet_count++;
 8001ae0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
		  com_packet_create(&packet, temp, bytes_read);
 8001aea:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 8001aee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001af2:	f8d7 2560 	ldr.w	r2, [r7, #1376]	@ 0x560
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff f8ac 	bl	8000c54 <com_packet_create>
		  (void)uart_write_packet(&uart4, &packet);
 8001afc:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001b00:	f507 7365 	add.w	r3, r7, #916	@ 0x394
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 f98f 	bl	8002e2a <uart_write_packet>
	  if(IRQ_Calibrate_Flag){
 8001b0c:	e5ee      	b.n	80016ec <main+0xec>
 8001b0e:	bf00      	nop
 8001b10:	0800e7e0 	.word	0x0800e7e0

08001b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b094      	sub	sp, #80	@ 0x50
 8001b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b1a:	f107 0320 	add.w	r3, r7, #32
 8001b1e:	2230      	movs	r2, #48	@ 0x30
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f00c f9d2 	bl	800decc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b38:	2300      	movs	r3, #0
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	4b28      	ldr	r3, [pc, #160]	@ (8001be0 <SystemClock_Config+0xcc>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	4a27      	ldr	r2, [pc, #156]	@ (8001be0 <SystemClock_Config+0xcc>)
 8001b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b48:	4b25      	ldr	r3, [pc, #148]	@ (8001be0 <SystemClock_Config+0xcc>)
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <SystemClock_Config+0xd0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <SystemClock_Config+0xd0>)
 8001b5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <SystemClock_Config+0xd0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b84:	2304      	movs	r3, #4
 8001b86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b88:	23a8      	movs	r3, #168	@ 0xa8
 8001b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b90:	2307      	movs	r3, #7
 8001b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 0320 	add.w	r3, r7, #32
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 fd8d 	bl	80066b8 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ba4:	f000 fcb6 	bl	8002514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba8:	230f      	movs	r3, #15
 8001baa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bac:	2302      	movs	r3, #2
 8001bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f004 ffee 	bl	8006ba8 <HAL_RCC_ClockConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bd2:	f000 fc9f 	bl	8002514 <Error_Handler>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	3750      	adds	r7, #80	@ 0x50
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40007000 	.word	0x40007000

08001be8 <init_steppers>:

/* USER CODE BEGIN 4 */
void init_steppers(void)	{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0

	  pitch_motor.en_gpio_port = PITCH_STEP_EN_GPIO_Port;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <init_steppers+0x7c>)
 8001bee:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <init_steppers+0x80>)
 8001bf0:	601a      	str	r2, [r3, #0]
	  pitch_motor.en_gpio_pin = PITCH_STEP_EN_Pin;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <init_steppers+0x7c>)
 8001bf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf8:	605a      	str	r2, [r3, #4]
	  pitch_motor.dir_gpio_port = PITCH_STEP_DIR_GPIO_Port;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <init_steppers+0x7c>)
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <init_steppers+0x80>)
 8001bfe:	609a      	str	r2, [r3, #8]
	  pitch_motor.dir_gpio_pin = PITCH_STEP_DIR_Pin;
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <init_steppers+0x7c>)
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	60da      	str	r2, [r3, #12]
	  pitch_motor.pul_gpio_port = PITCH_STEP_PUL_GPIO_Port;
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <init_steppers+0x7c>)
 8001c08:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <init_steppers+0x80>)
 8001c0a:	611a      	str	r2, [r3, #16]
	  pitch_motor.pul_gpio_pin = PITCH_STEP_PUL_Pin;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <init_steppers+0x7c>)
 8001c0e:	2240      	movs	r2, #64	@ 0x40
 8001c10:	615a      	str	r2, [r3, #20]
	  pitch_motor.timer = &htim8;
 8001c12:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <init_steppers+0x7c>)
 8001c14:	4a15      	ldr	r2, [pc, #84]	@ (8001c6c <init_steppers+0x84>)
 8001c16:	619a      	str	r2, [r3, #24]
	  pitch_motor.mode = MICROSTEP_16;
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <init_steppers+0x7c>)
 8001c1a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001c1e:	839a      	strh	r2, [r3, #28]

	  roll_motor.en_gpio_port = ROLL_STEP_EN_GPIO_Port;
 8001c20:	4b13      	ldr	r3, [pc, #76]	@ (8001c70 <init_steppers+0x88>)
 8001c22:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <init_steppers+0x8c>)
 8001c24:	601a      	str	r2, [r3, #0]
	  roll_motor.en_gpio_pin = ROLL_STEP_EN_Pin;
 8001c26:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <init_steppers+0x88>)
 8001c28:	2202      	movs	r2, #2
 8001c2a:	605a      	str	r2, [r3, #4]
	  roll_motor.dir_gpio_port = ROLL_STEP_DIR_GPIO_Port;
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <init_steppers+0x88>)
 8001c2e:	4a11      	ldr	r2, [pc, #68]	@ (8001c74 <init_steppers+0x8c>)
 8001c30:	609a      	str	r2, [r3, #8]
	  roll_motor.dir_gpio_pin = ROLL_STEP_DIR_Pin;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <init_steppers+0x88>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	60da      	str	r2, [r3, #12]
	  roll_motor.pul_gpio_port = ROLL_STEP_PUL_GPIO_Port;
 8001c38:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <init_steppers+0x88>)
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <init_steppers+0x80>)
 8001c3c:	611a      	str	r2, [r3, #16]
	  roll_motor.pul_gpio_pin = ROLL_STEP_PUL_Pin;
 8001c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <init_steppers+0x88>)
 8001c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c44:	615a      	str	r2, [r3, #20]
	  roll_motor.timer = &htim8;
 8001c46:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <init_steppers+0x88>)
 8001c48:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <init_steppers+0x84>)
 8001c4a:	619a      	str	r2, [r3, #24]
	  roll_motor.mode = MICROSTEP_16;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <init_steppers+0x88>)
 8001c4e:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001c52:	839a      	strh	r2, [r3, #28]

	  stepper_enable(&pitch_motor);
 8001c54:	4803      	ldr	r0, [pc, #12]	@ (8001c64 <init_steppers+0x7c>)
 8001c56:	f000 fce9 	bl	800262c <stepper_enable>
	  stepper_enable(&roll_motor);
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <init_steppers+0x88>)
 8001c5c:	f000 fce6 	bl	800262c <stepper_enable>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000334 	.word	0x20000334
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	20000474 	.word	0x20000474
 8001c70:	20000354 	.word	0x20000354
 8001c74:	40021000 	.word	0x40021000

08001c78 <init_flash>:

void init_flash(void)	{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

	  //volatile uint64_t id_value = w25q16_get_id(&flash_handle);
	  //volatile uint32_t jedec_id = w25q16_get_jedec_id(&flash_handle);

}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <init_cyclic_input>:

void init_cyclic_input(void)	{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
	  axis_calibration_factors_t* axis_ptr[2] = {&pitch_calibrations, &roll_calibrations};
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <init_cyclic_input+0x4c>)
 8001c90:	463b      	mov	r3, r7
 8001c92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c96:	e883 0003 	stmia.w	r3, {r0, r1}
	cyclic_report.buttons = 0;
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <init_cyclic_input+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
	  cyclic_report.size = sizeof(cyclic_report.buttons) + sizeof(cyclic_report.roll) + sizeof(cyclic_report.pitch);
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8001cd8 <init_cyclic_input+0x50>)
 8001ca2:	2205      	movs	r2, #5
 8001ca4:	719a      	strb	r2, [r3, #6]
	  HAL_Delay(10); // Allow extra time for flash chip to come up, probably unnecessary but is for extra safe-ness
 8001ca6:	200a      	movs	r0, #10
 8001ca8:	f001 fe16 	bl	80038d8 <HAL_Delay>
	  load_calibrations(axis_ptr,2);
 8001cac:	463b      	mov	r3, r7
 8001cae:	2102      	movs	r1, #2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fafb 	bl	80022ac <load_calibrations>
	  input_filter_init(&roll_filter, ROLL_ALPHA);
 8001cb6:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001cdc <init_cyclic_input+0x54>
 8001cba:	4809      	ldr	r0, [pc, #36]	@ (8001ce0 <init_cyclic_input+0x58>)
 8001cbc:	f7ff fc3e 	bl	800153c <input_filter_init>
	  input_filter_init(&pitch_filter, PITCH_ALPHA);
 8001cc0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001cdc <init_cyclic_input+0x54>
 8001cc4:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <init_cyclic_input+0x5c>)
 8001cc6:	f7ff fc39 	bl	800153c <input_filter_init>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	0800e7f4 	.word	0x0800e7f4
 8001cd8:	200002fc 	.word	0x200002fc
 8001cdc:	3e99999a 	.word	0x3e99999a
 8001ce0:	20000374 	.word	0x20000374
 8001ce4:	2000037c 	.word	0x2000037c

08001ce8 <update_cyclic_input>:

void update_cyclic_input(void)	{
 8001ce8:	b598      	push	{r3, r4, r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	  cyclic_report.buttons = 0;
 8001cec:	4b30      	ldr	r3, [pc, #192]	@ (8001db0 <update_cyclic_input+0xc8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001cf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cf6:	482f      	ldr	r0, [pc, #188]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001cf8:	f003 fa40 	bl	800517c <HAL_GPIO_ReadPin>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b25c      	sxtb	r4, r3
			  	  	  	  	  (HAL_GPIO_ReadPin(CYC_ICS_SW_GPIO_Port, CYC_ICS_SW_Pin) << 1) |
 8001d00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d04:	482b      	ldr	r0, [pc, #172]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001d06:	f003 fa39 	bl	800517c <HAL_GPIO_ReadPin>
 8001d0a:	4603      	mov	r3, r0
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	4323      	orrs	r3, r4
 8001d14:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_CARGO_REL_GPIO_Port, CYC_CARGO_REL_Pin) << 2) |
 8001d16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d1a:	4826      	ldr	r0, [pc, #152]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001d1c:	f003 fa2e 	bl	800517c <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
			  	  	  	  	  (HAL_GPIO_ReadPin(CYC_ICS_SW_GPIO_Port, CYC_ICS_SW_Pin) << 1) |
 8001d22:	b25b      	sxtb	r3, r3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	4323      	orrs	r3, r4
 8001d2a:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_UP_GPIO_Port, CYC_HAT_UP_Pin) << 3) |
 8001d2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d30:	4820      	ldr	r0, [pc, #128]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001d32:	f003 fa23 	bl	800517c <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_CARGO_REL_GPIO_Port, CYC_CARGO_REL_Pin) << 2) |
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	b25b      	sxtb	r3, r3
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_DOWN_GPIO_Port, CYC_HAT_DOWN_Pin) << 4) |
 8001d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d46:	481b      	ldr	r0, [pc, #108]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001d48:	f003 fa18 	bl	800517c <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_UP_GPIO_Port, CYC_HAT_UP_Pin) << 3) |
 8001d4e:	b25b      	sxtb	r3, r3
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	4323      	orrs	r3, r4
 8001d56:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_RIGHT_GPIO_Port, CYC_HAT_RIGHT_Pin) << 5) |
 8001d58:	2140      	movs	r1, #64	@ 0x40
 8001d5a:	4817      	ldr	r0, [pc, #92]	@ (8001db8 <update_cyclic_input+0xd0>)
 8001d5c:	f003 fa0e 	bl	800517c <HAL_GPIO_ReadPin>
 8001d60:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_DOWN_GPIO_Port, CYC_HAT_DOWN_Pin) << 4) |
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	b25b      	sxtb	r3, r3
 8001d68:	4323      	orrs	r3, r4
 8001d6a:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_LEFT_GPIO_Port, CYC_HAT_LEFT_Pin) << 6) |
 8001d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d70:	4810      	ldr	r0, [pc, #64]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001d72:	f003 fa03 	bl	800517c <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_RIGHT_GPIO_Port, CYC_HAT_RIGHT_Pin) << 5) |
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	019b      	lsls	r3, r3, #6
 8001d7c:	b25b      	sxtb	r3, r3
 8001d7e:	4323      	orrs	r3, r4
 8001d80:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_CDR_REL_GPIO_Port, CYC_CDR_REL_Pin) << 7);
 8001d82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d86:	480b      	ldr	r0, [pc, #44]	@ (8001db4 <update_cyclic_input+0xcc>)
 8001d88:	f003 f9f8 	bl	800517c <HAL_GPIO_ReadPin>
 8001d8c:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_LEFT_GPIO_Port, CYC_HAT_LEFT_Pin) << 6) |
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	01db      	lsls	r3, r3, #7
 8001d92:	b25b      	sxtb	r3, r3
 8001d94:	4323      	orrs	r3, r4
 8001d96:	b25b      	sxtb	r3, r3
 8001d98:	b2da      	uxtb	r2, r3
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <update_cyclic_input+0xc8>)
 8001d9c:	701a      	strb	r2, [r3, #0]

	  cyclic_report.buttons = (cyclic_report.buttons ^ CYCLIC_BUTTON_MASK);
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <update_cyclic_input+0xc8>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b01      	ldr	r3, [pc, #4]	@ (8001db0 <update_cyclic_input+0xc8>)
 8001daa:	701a      	strb	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	bd98      	pop	{r3, r4, r7, pc}
 8001db0:	200002fc 	.word	0x200002fc
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40020800 	.word	0x40020800

08001dbc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	cyclic_report.roll = input_filter_update(&roll_filter, (float) apply_calibration(&roll_calibrations,adc_buffer[0]));
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	b21b      	sxth	r3, r3
 8001dcc:	4619      	mov	r1, r3
 8001dce:	481b      	ldr	r0, [pc, #108]	@ (8001e3c <HAL_ADC_ConvCpltCallback+0x80>)
 8001dd0:	f7fe fd66 	bl	80008a0 <apply_calibration>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	4817      	ldr	r0, [pc, #92]	@ (8001e40 <HAL_ADC_ConvCpltCallback+0x84>)
 8001de4:	f7ff fbe3 	bl	80015ae <input_filter_update>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df0:	ee17 3a90 	vmov	r3, s15
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_ADC_ConvCpltCallback+0x88>)
 8001df8:	805a      	strh	r2, [r3, #2]
	cyclic_report.pitch = input_filter_update(&pitch_filter, (float) apply_calibration(&pitch_calibrations, adc_buffer[1]));
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001dfc:	885b      	ldrh	r3, [r3, #2]
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	4810      	ldr	r0, [pc, #64]	@ (8001e48 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001e06:	f7fe fd4b 	bl	80008a0 <apply_calibration>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	480c      	ldr	r0, [pc, #48]	@ (8001e4c <HAL_ADC_ConvCpltCallback+0x90>)
 8001e1a:	f7ff fbc8 	bl	80015ae <input_filter_update>
 8001e1e:	eef0 7a40 	vmov.f32	s15, s0
 8001e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e26:	ee17 3a90 	vmov	r3, s15
 8001e2a:	b21a      	sxth	r2, r3
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_ADC_ConvCpltCallback+0x88>)
 8001e2e:	809a      	strh	r2, [r3, #4]
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200002f4 	.word	0x200002f4
 8001e3c:	20000304 	.word	0x20000304
 8001e40:	20000374 	.word	0x20000374
 8001e44:	200002fc 	.word	0x200002fc
 8001e48:	2000031c 	.word	0x2000031c
 8001e4c:	2000037c 	.word	0x2000037c

08001e50 <calibration_routine>:

void calibration_routine(void)	{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b092      	sub	sp, #72	@ 0x48
 8001e56:	af00      	add	r7, sp, #0
	  axis_calibration_factors_t* axis_ptr[2] = {&pitch_calibrations, &roll_calibrations};
 8001e58:	4b57      	ldr	r3, [pc, #348]	@ (8001fb8 <calibration_routine+0x168>)
 8001e5a:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001e5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001e62:	e882 0003 	stmia.w	r2, {r0, r1}
	  calibrate_axis(&roll_calibrations, &adc_buffer[0]);
 8001e66:	4955      	ldr	r1, [pc, #340]	@ (8001fbc <calibration_routine+0x16c>)
 8001e68:	4855      	ldr	r0, [pc, #340]	@ (8001fc0 <calibration_routine+0x170>)
 8001e6a:	f000 f8b3 	bl	8001fd4 <calibrate_axis>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2120      	movs	r1, #32
 8001e72:	4854      	ldr	r0, [pc, #336]	@ (8001fc4 <calibration_routine+0x174>)
 8001e74:	f003 f99a 	bl	80051ac <HAL_GPIO_WritePin>
	  calibrate_axis(&pitch_calibrations, &adc_buffer[1]);
 8001e78:	4953      	ldr	r1, [pc, #332]	@ (8001fc8 <calibration_routine+0x178>)
 8001e7a:	4854      	ldr	r0, [pc, #336]	@ (8001fcc <calibration_routine+0x17c>)
 8001e7c:	f000 f8aa 	bl	8001fd4 <calibrate_axis>
	  uint64_t time = HAL_GetTick();
 8001e80:	f001 fd1e 	bl	80038c0 <HAL_GetTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2200      	movs	r2, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	61fa      	str	r2, [r7, #28]
 8001e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e90:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2120      	movs	r1, #32
 8001e98:	484a      	ldr	r0, [pc, #296]	@ (8001fc4 <calibration_routine+0x174>)
 8001e9a:	f003 f987 	bl	80051ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2110      	movs	r1, #16
 8001ea2:	4848      	ldr	r0, [pc, #288]	@ (8001fc4 <calibration_routine+0x174>)
 8001ea4:	f003 f982 	bl	80051ac <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001ea8:	bf00      	nop
 8001eaa:	f001 fd09 	bl	80038c0 <HAL_GetTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eb4:	637a      	str	r2, [r7, #52]	@ 0x34
 8001eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001eba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ebc:	1a8c      	subs	r4, r1, r2
 8001ebe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001ec0:	eb61 0503 	sbc.w	r5, r1, r3
 8001ec4:	2c64      	cmp	r4, #100	@ 0x64
 8001ec6:	f175 0300 	sbcs.w	r3, r5, #0
 8001eca:	d3ee      	bcc.n	8001eaa <calibration_routine+0x5a>
	  time = HAL_GetTick();
 8001ecc:	f001 fcf8 	bl	80038c0 <HAL_GetTick>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001edc:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	4837      	ldr	r0, [pc, #220]	@ (8001fc4 <calibration_routine+0x174>)
 8001ee6:	f003 f961 	bl	80051ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	2110      	movs	r1, #16
 8001eee:	4835      	ldr	r0, [pc, #212]	@ (8001fc4 <calibration_routine+0x174>)
 8001ef0:	f003 f95c 	bl	80051ac <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001ef4:	bf00      	nop
 8001ef6:	f001 fce3 	bl	80038c0 <HAL_GetTick>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2200      	movs	r2, #0
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f00:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f06:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	ebb1 0a02 	subs.w	sl, r1, r2
 8001f10:	4629      	mov	r1, r5
 8001f12:	eb61 0b03 	sbc.w	fp, r1, r3
 8001f16:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8001f1a:	f17b 0300 	sbcs.w	r3, fp, #0
 8001f1e:	d3ea      	bcc.n	8001ef6 <calibration_routine+0xa6>
	  time = HAL_GetTick();
 8001f20:	f001 fcce 	bl	80038c0 <HAL_GetTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2200      	movs	r2, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	60fa      	str	r2, [r7, #12]
 8001f2c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f30:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2120      	movs	r1, #32
 8001f38:	4822      	ldr	r0, [pc, #136]	@ (8001fc4 <calibration_routine+0x174>)
 8001f3a:	f003 f937 	bl	80051ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2110      	movs	r1, #16
 8001f42:	4820      	ldr	r0, [pc, #128]	@ (8001fc4 <calibration_routine+0x174>)
 8001f44:	f003 f932 	bl	80051ac <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001f48:	bf00      	nop
 8001f4a:	f001 fcb9 	bl	80038c0 <HAL_GetTick>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2200      	movs	r2, #0
 8001f52:	623b      	str	r3, [r7, #32]
 8001f54:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f5e:	4621      	mov	r1, r4
 8001f60:	ebb1 0802 	subs.w	r8, r1, r2
 8001f64:	4629      	mov	r1, r5
 8001f66:	eb61 0903 	sbc.w	r9, r1, r3
 8001f6a:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8001f6e:	f179 0300 	sbcs.w	r3, r9, #0
 8001f72:	d3ea      	bcc.n	8001f4a <calibration_routine+0xfa>
	  time = HAL_GetTick();
 8001f74:	f001 fca4 	bl	80038c0 <HAL_GetTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f84:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	480d      	ldr	r0, [pc, #52]	@ (8001fc4 <calibration_routine+0x174>)
 8001f8e:	f003 f90d 	bl	80051ac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	2110      	movs	r1, #16
 8001f96:	480b      	ldr	r0, [pc, #44]	@ (8001fc4 <calibration_routine+0x174>)
 8001f98:	f003 f908 	bl	80051ac <HAL_GPIO_WritePin>

	  save_calibrations(axis_ptr, 2);
 8001f9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f9ee 	bl	8002384 <save_calibrations>
	  IRQ_Calibrate_Flag = false;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <calibration_routine+0x180>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]

}
 8001fae:	bf00      	nop
 8001fb0:	3748      	adds	r7, #72	@ 0x48
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb8:	0800e7f4 	.word	0x0800e7f4
 8001fbc:	200002f4 	.word	0x200002f4
 8001fc0:	20000304 	.word	0x20000304
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	200002f6 	.word	0x200002f6
 8001fcc:	2000031c 	.word	0x2000031c
 8001fd0:	200002f8 	.word	0x200002f8

08001fd4 <calibrate_axis>:

void calibrate_axis(axis_calibration_factors_t* cal, volatile uint16_t* adc_buf)	{
 8001fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd8:	b0a8      	sub	sp, #160	@ 0xa0
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001fe0:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88

	clear_calibration(cal);
 8001fe4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001fe8:	f7fe fd64 	bl	8000ab4 <clear_calibration>

	uint64_t time = HAL_GetTick();
 8001fec:	f001 fc68 	bl	80038c0 <HAL_GetTick>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	469a      	mov	sl, r3
 8001ff6:	4693      	mov	fp, r2
 8001ff8:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
	while(HAL_GetTick()-time < 250)	{;;}
 8001ffc:	bf00      	nop
 8001ffe:	f001 fc5f 	bl	80038c0 <HAL_GetTick>
 8002002:	4603      	mov	r3, r0
 8002004:	2200      	movs	r2, #0
 8002006:	4698      	mov	r8, r3
 8002008:	4691      	mov	r9, r2
 800200a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800200e:	ebb8 0402 	subs.w	r4, r8, r2
 8002012:	eb69 0503 	sbc.w	r5, r9, r3
 8002016:	2cfa      	cmp	r4, #250	@ 0xfa
 8002018:	f175 0300 	sbcs.w	r3, r5, #0
 800201c:	d3ef      	bcc.n	8001ffe <calibrate_axis+0x2a>
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 800201e:	e02a      	b.n	8002076 <calibrate_axis+0xa2>
		if(HAL_GetTick() - time > 500 ){
 8002020:	f001 fc4e 	bl	80038c0 <HAL_GetTick>
 8002024:	4603      	mov	r3, r0
 8002026:	2200      	movs	r2, #0
 8002028:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800202c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002030:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002034:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002038:	4621      	mov	r1, r4
 800203a:	1a89      	subs	r1, r1, r2
 800203c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800203e:	4629      	mov	r1, r5
 8002040:	eb61 0303 	sbc.w	r3, r1, r3
 8002044:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002046:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800204a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800204e:	4602      	mov	r2, r0
 8002050:	429a      	cmp	r2, r3
 8002052:	460b      	mov	r3, r1
 8002054:	f173 0300 	sbcs.w	r3, r3, #0
 8002058:	d30d      	bcc.n	8002076 <calibrate_axis+0xa2>
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800205a:	2110      	movs	r1, #16
 800205c:	4891      	ldr	r0, [pc, #580]	@ (80022a4 <calibrate_axis+0x2d0>)
 800205e:	f003 f8be 	bl	80051de <HAL_GPIO_TogglePin>
			time = HAL_GetTick();
 8002062:	f001 fc2d 	bl	80038c0 <HAL_GetTick>
 8002066:	4603      	mov	r3, r0
 8002068:	2200      	movs	r2, #0
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	617a      	str	r2, [r7, #20]
 800206e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002072:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 8002076:	2104      	movs	r1, #4
 8002078:	488a      	ldr	r0, [pc, #552]	@ (80022a4 <calibrate_axis+0x2d0>)
 800207a:	f003 f87f 	bl	800517c <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1cd      	bne.n	8002020 <calibrate_axis+0x4c>
		}
	}

	int16_t val1 = (int16_t)adc_buf[0];
 8002084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	while(HAL_GetTick()-time < 50)	{;;}
 8002090:	bf00      	nop
 8002092:	f001 fc15 	bl	80038c0 <HAL_GetTick>
 8002096:	4603      	mov	r3, r0
 8002098:	2200      	movs	r2, #0
 800209a:	673b      	str	r3, [r7, #112]	@ 0x70
 800209c:	677a      	str	r2, [r7, #116]	@ 0x74
 800209e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80020a2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80020a6:	4621      	mov	r1, r4
 80020a8:	1a89      	subs	r1, r1, r2
 80020aa:	66b9      	str	r1, [r7, #104]	@ 0x68
 80020ac:	4629      	mov	r1, r5
 80020ae:	eb61 0303 	sbc.w	r3, r1, r3
 80020b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020b4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80020b8:	460b      	mov	r3, r1
 80020ba:	2b32      	cmp	r3, #50	@ 0x32
 80020bc:	4613      	mov	r3, r2
 80020be:	f173 0300 	sbcs.w	r3, r3, #0
 80020c2:	d3e6      	bcc.n	8002092 <calibrate_axis+0xbe>
	int16_t val2 = (int16_t)adc_buf[0];
 80020c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	while(HAL_GetTick()-time < 50)	{;;}
 80020d0:	bf00      	nop
 80020d2:	f001 fbf5 	bl	80038c0 <HAL_GetTick>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2200      	movs	r2, #0
 80020da:	663b      	str	r3, [r7, #96]	@ 0x60
 80020dc:	667a      	str	r2, [r7, #100]	@ 0x64
 80020de:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80020e2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020e6:	4621      	mov	r1, r4
 80020e8:	1a89      	subs	r1, r1, r2
 80020ea:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020ec:	4629      	mov	r1, r5
 80020ee:	eb61 0303 	sbc.w	r3, r1, r3
 80020f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020f4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80020f8:	460b      	mov	r3, r1
 80020fa:	2b32      	cmp	r3, #50	@ 0x32
 80020fc:	4613      	mov	r3, r2
 80020fe:	f173 0300 	sbcs.w	r3, r3, #0
 8002102:	d3e6      	bcc.n	80020d2 <calibrate_axis+0xfe>
	int16_t val3 = (int16_t)adc_buf[0];
 8002104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	cal->physical_max = (val1+val2+val3)/3;
 8002110:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 8002114:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002118:	441a      	add	r2, r3
 800211a:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 800211e:	18d1      	adds	r1, r2, r3
 8002120:	4b61      	ldr	r3, [pc, #388]	@ (80022a8 <calibrate_axis+0x2d4>)
 8002122:	fb83 3201 	smull	r3, r2, r3, r1
 8002126:	17cb      	asrs	r3, r1, #31
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	b21b      	sxth	r3, r3
 800212c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002130:	8013      	strh	r3, [r2, #0]
	time = HAL_GetTick();
 8002132:	f001 fbc5 	bl	80038c0 <HAL_GetTick>
 8002136:	4603      	mov	r3, r0
 8002138:	2200      	movs	r2, #0
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	60fa      	str	r2, [r7, #12]
 800213e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002142:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GetTick()-time < 250)	{;;}
 8002146:	bf00      	nop
 8002148:	f001 fbba 	bl	80038c0 <HAL_GetTick>
 800214c:	4603      	mov	r3, r0
 800214e:	2200      	movs	r2, #0
 8002150:	653b      	str	r3, [r7, #80]	@ 0x50
 8002152:	657a      	str	r2, [r7, #84]	@ 0x54
 8002154:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002158:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800215c:	4621      	mov	r1, r4
 800215e:	1a89      	subs	r1, r1, r2
 8002160:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002162:	4629      	mov	r1, r5
 8002164:	eb61 0303 	sbc.w	r3, r1, r3
 8002168:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800216a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800216e:	460b      	mov	r3, r1
 8002170:	2bfa      	cmp	r3, #250	@ 0xfa
 8002172:	4613      	mov	r3, r2
 8002174:	f173 0300 	sbcs.w	r3, r3, #0
 8002178:	d3e6      	bcc.n	8002148 <calibrate_axis+0x174>
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 800217a:	e026      	b.n	80021ca <calibrate_axis+0x1f6>
			if(HAL_GetTick() - time > 150 ){
 800217c:	f001 fba0 	bl	80038c0 <HAL_GetTick>
 8002180:	4603      	mov	r3, r0
 8002182:	2200      	movs	r2, #0
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
 8002186:	647a      	str	r2, [r7, #68]	@ 0x44
 8002188:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800218c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002190:	4621      	mov	r1, r4
 8002192:	1a89      	subs	r1, r1, r2
 8002194:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002196:	4629      	mov	r1, r5
 8002198:	eb61 0303 	sbc.w	r3, r1, r3
 800219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800219e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80021a2:	460b      	mov	r3, r1
 80021a4:	2b97      	cmp	r3, #151	@ 0x97
 80021a6:	4613      	mov	r3, r2
 80021a8:	f173 0300 	sbcs.w	r3, r3, #0
 80021ac:	d30d      	bcc.n	80021ca <calibrate_axis+0x1f6>
				HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80021ae:	2110      	movs	r1, #16
 80021b0:	483c      	ldr	r0, [pc, #240]	@ (80022a4 <calibrate_axis+0x2d0>)
 80021b2:	f003 f814 	bl	80051de <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 80021b6:	f001 fb83 	bl	80038c0 <HAL_GetTick>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2200      	movs	r2, #0
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80021c6:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 80021ca:	2104      	movs	r1, #4
 80021cc:	4835      	ldr	r0, [pc, #212]	@ (80022a4 <calibrate_axis+0x2d0>)
 80021ce:	f002 ffd5 	bl	800517c <HAL_GPIO_ReadPin>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1d1      	bne.n	800217c <calibrate_axis+0x1a8>
			}
		}

	val1 = (int16_t)adc_buf[0];
 80021d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	while(HAL_GetTick()-time < 50)	{;;}
 80021e4:	bf00      	nop
 80021e6:	f001 fb6b 	bl	80038c0 <HAL_GetTick>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2200      	movs	r2, #0
 80021ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80021f2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80021f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021fa:	4621      	mov	r1, r4
 80021fc:	1a89      	subs	r1, r1, r2
 80021fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002200:	4629      	mov	r1, r5
 8002202:	eb61 0303 	sbc.w	r3, r1, r3
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002208:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800220c:	460b      	mov	r3, r1
 800220e:	2b32      	cmp	r3, #50	@ 0x32
 8002210:	4613      	mov	r3, r2
 8002212:	f173 0300 	sbcs.w	r3, r3, #0
 8002216:	d3e6      	bcc.n	80021e6 <calibrate_axis+0x212>
	val2 = (int16_t)adc_buf[0];
 8002218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	while(HAL_GetTick()-time < 50)	{;;}
 8002224:	bf00      	nop
 8002226:	f001 fb4b 	bl	80038c0 <HAL_GetTick>
 800222a:	4603      	mov	r3, r0
 800222c:	2200      	movs	r2, #0
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	627a      	str	r2, [r7, #36]	@ 0x24
 8002232:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002236:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800223a:	4621      	mov	r1, r4
 800223c:	1a89      	subs	r1, r1, r2
 800223e:	61b9      	str	r1, [r7, #24]
 8002240:	4629      	mov	r1, r5
 8002242:	eb61 0303 	sbc.w	r3, r1, r3
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800224c:	460b      	mov	r3, r1
 800224e:	2b32      	cmp	r3, #50	@ 0x32
 8002250:	4613      	mov	r3, r2
 8002252:	f173 0300 	sbcs.w	r3, r3, #0
 8002256:	d3e6      	bcc.n	8002226 <calibrate_axis+0x252>
	val3 = (int16_t)adc_buf[0];
 8002258:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	cal->physical_min = (val1+val2+val3)/3;
 8002264:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 8002268:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 800226c:	441a      	add	r2, r3
 800226e:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002272:	4413      	add	r3, r2
 8002274:	4a0c      	ldr	r2, [pc, #48]	@ (80022a8 <calibrate_axis+0x2d4>)
 8002276:	fb82 1203 	smull	r1, r2, r2, r3
 800227a:	17db      	asrs	r3, r3, #31
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	b21a      	sxth	r2, r3
 8002280:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002284:	805a      	strh	r2, [r3, #2]

	recalculate_calibration(cal);
 8002286:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800228a:	f7fe fc30 	bl	8000aee <recalculate_calibration>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 800228e:	2201      	movs	r2, #1
 8002290:	2110      	movs	r1, #16
 8002292:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <calibrate_axis+0x2d0>)
 8002294:	f002 ff8a 	bl	80051ac <HAL_GPIO_WritePin>
}
 8002298:	bf00      	nop
 800229a:	37a0      	adds	r7, #160	@ 0xa0
 800229c:	46bd      	mov	sp, r7
 800229e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	55555556 	.word	0x55555556

080022ac <load_calibrations>:

void load_calibrations(axis_calibration_factors_t* cal[], uint8_t calibration_count)	{
 80022ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80022b0:	b087      	sub	sp, #28
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	70fb      	strb	r3, [r7, #3]
 80022ba:	466b      	mov	r3, sp
 80022bc:	461e      	mov	r6, r3
	uint8_t buffer_size = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i < calibration_count; i++)	{
 80022c2:	2300      	movs	r3, #0
 80022c4:	75bb      	strb	r3, [r7, #22]
 80022c6:	e005      	b.n	80022d4 <load_calibrations+0x28>
		buffer_size += CALIBRATION_FACTOR_SIZE;
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	3313      	adds	r3, #19
 80022cc:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i < calibration_count; i++)	{
 80022ce:	7dbb      	ldrb	r3, [r7, #22]
 80022d0:	3301      	adds	r3, #1
 80022d2:	75bb      	strb	r3, [r7, #22]
 80022d4:	7dba      	ldrb	r2, [r7, #22]
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d3f5      	bcc.n	80022c8 <load_calibrations+0x1c>
	}
	uint8_t size_offset = buffer_size / calibration_count;
 80022dc:	7dfa      	ldrb	r2, [r7, #23]
 80022de:	78fb      	ldrb	r3, [r7, #3]
 80022e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e4:	753b      	strb	r3, [r7, #20]
	uint8_t data_buffer[buffer_size];
 80022e6:	7df9      	ldrb	r1, [r7, #23]
 80022e8:	460b      	mov	r3, r1
 80022ea:	3b01      	subs	r3, #1
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	b2cb      	uxtb	r3, r1
 80022f0:	2200      	movs	r2, #0
 80022f2:	4698      	mov	r8, r3
 80022f4:	4691      	mov	r9, r2
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800230a:	b2cb      	uxtb	r3, r1
 800230c:	2200      	movs	r2, #0
 800230e:	461c      	mov	r4, r3
 8002310:	4615      	mov	r5, r2
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	00eb      	lsls	r3, r5, #3
 800231c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002320:	00e2      	lsls	r2, r4, #3
 8002322:	460b      	mov	r3, r1
 8002324:	3307      	adds	r3, #7
 8002326:	08db      	lsrs	r3, r3, #3
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	ebad 0d03 	sub.w	sp, sp, r3
 800232e:	466b      	mov	r3, sp
 8002330:	3300      	adds	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]

	w25q16_read(&flash_handle, FLASH_CALIBRATION_ADDRESS, data_buffer, buffer_size);
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800233c:	4810      	ldr	r0, [pc, #64]	@ (8002380 <load_calibrations+0xd4>)
 800233e:	f001 f965 	bl	800360c <w25q16_read>
	for(uint8_t i=0; i< calibration_count; i++){
 8002342:	2300      	movs	r3, #0
 8002344:	757b      	strb	r3, [r7, #21]
 8002346:	e011      	b.n	800236c <load_calibrations+0xc0>
		set_calibration(cal[i], &data_buffer[i*size_offset], size_offset);
 8002348:	7d7b      	ldrb	r3, [r7, #21]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	7d7b      	ldrb	r3, [r7, #21]
 8002354:	7d3a      	ldrb	r2, [r7, #20]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4413      	add	r3, r2
 800235e:	7d3a      	ldrb	r2, [r7, #20]
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe fae4 	bl	800092e <set_calibration>
	for(uint8_t i=0; i< calibration_count; i++){
 8002366:	7d7b      	ldrb	r3, [r7, #21]
 8002368:	3301      	adds	r3, #1
 800236a:	757b      	strb	r3, [r7, #21]
 800236c:	7d7a      	ldrb	r2, [r7, #21]
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	429a      	cmp	r2, r3
 8002372:	d3e9      	bcc.n	8002348 <load_calibrations+0x9c>
 8002374:	46b5      	mov	sp, r6
	}
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002380:	20000000 	.word	0x20000000

08002384 <save_calibrations>:

void save_calibrations(axis_calibration_factors_t* cal[], uint8_t calibration_count)	{
 8002384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002388:	b08d      	sub	sp, #52	@ 0x34
 800238a:	af00      	add	r7, sp, #0
 800238c:	6178      	str	r0, [r7, #20]
 800238e:	460b      	mov	r3, r1
 8002390:	74fb      	strb	r3, [r7, #19]
 8002392:	466b      	mov	r3, sp
 8002394:	461e      	mov	r6, r3
	uint8_t buffer_size = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(uint8_t i=0; i < calibration_count; i++)	{
 800239c:	2300      	movs	r3, #0
 800239e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80023a2:	e009      	b.n	80023b8 <save_calibrations+0x34>
		buffer_size += CALIBRATION_FACTOR_SIZE;
 80023a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80023a8:	3313      	adds	r3, #19
 80023aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(uint8_t i=0; i < calibration_count; i++)	{
 80023ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023b2:	3301      	adds	r3, #1
 80023b4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80023b8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d3f0      	bcc.n	80023a4 <save_calibrations+0x20>
	}
	uint8_t size_offset = buffer_size / calibration_count;
 80023c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t data_buffer[buffer_size];
 80023d0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80023d4:	460b      	mov	r3, r1
 80023d6:	3b01      	subs	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023da:	b2cb      	uxtb	r3, r1
 80023dc:	2200      	movs	r2, #0
 80023de:	469a      	mov	sl, r3
 80023e0:	4693      	mov	fp, r2
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023f6:	b2cb      	uxtb	r3, r1
 80023f8:	2200      	movs	r2, #0
 80023fa:	4698      	mov	r8, r3
 80023fc:	4691      	mov	r9, r2
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800240a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800240e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002412:	460b      	mov	r3, r1
 8002414:	3307      	adds	r3, #7
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	ebad 0d03 	sub.w	sp, sp, r3
 800241e:	466b      	mov	r3, sp
 8002420:	3300      	adds	r3, #0
 8002422:	623b      	str	r3, [r7, #32]

	for(uint8_t i=0; i< calibration_count; i++){
 8002424:	2300      	movs	r3, #0
 8002426:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800242a:	e017      	b.n	800245c <save_calibrations+0xd8>
		get_calibration(cal[i], &data_buffer[i*size_offset], size_offset);
 800242c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4413      	add	r3, r2
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800243c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002440:	fb02 f303 	mul.w	r3, r2, r3
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	4413      	add	r3, r2
 8002448:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800244c:	4619      	mov	r1, r3
 800244e:	f7fe fad7 	bl	8000a00 <get_calibration>
	for(uint8_t i=0; i< calibration_count; i++){
 8002452:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002456:	3301      	adds	r3, #1
 8002458:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800245c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	429a      	cmp	r2, r3
 8002464:	d3e2      	bcc.n	800242c <save_calibrations+0xa8>
	}

	w25q16_sector_erase_4k(&flash_handle, FLASH_CALIBRATION_ADDRESS);
 8002466:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800246a:	4821      	ldr	r0, [pc, #132]	@ (80024f0 <save_calibrations+0x16c>)
 800246c:	f001 f94a 	bl	8003704 <w25q16_sector_erase_4k>
	uint8_t busy_flag = w25q16_read_SR1(&flash_handle)&0x01;
 8002470:	481f      	ldr	r0, [pc, #124]	@ (80024f0 <save_calibrations+0x16c>)
 8002472:	f001 f96f 	bl	8003754 <w25q16_read_SR1>
 8002476:	4603      	mov	r3, r0
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint64_t timer = HAL_GetTick();
 8002480:	f001 fa1e 	bl	80038c0 <HAL_GetTick>
 8002484:	4603      	mov	r3, r0
 8002486:	2200      	movs	r2, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002490:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while(busy_flag && HAL_GetTick()-timer<200)	{
 8002494:	e007      	b.n	80024a6 <save_calibrations+0x122>
		busy_flag = w25q16_read_SR1(&flash_handle)&0x01;
 8002496:	4816      	ldr	r0, [pc, #88]	@ (80024f0 <save_calibrations+0x16c>)
 8002498:	f001 f95c 	bl	8003754 <w25q16_read_SR1>
 800249c:	4603      	mov	r3, r0
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	while(busy_flag && HAL_GetTick()-timer<200)	{
 80024a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d012      	beq.n	80024d4 <save_calibrations+0x150>
 80024ae:	f001 fa07 	bl	80038c0 <HAL_GetTick>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2200      	movs	r2, #0
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	60fa      	str	r2, [r7, #12]
 80024ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024be:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80024c2:	4641      	mov	r1, r8
 80024c4:	1a8c      	subs	r4, r1, r2
 80024c6:	4649      	mov	r1, r9
 80024c8:	eb61 0503 	sbc.w	r5, r1, r3
 80024cc:	2cc8      	cmp	r4, #200	@ 0xc8
 80024ce:	f175 0300 	sbcs.w	r3, r5, #0
 80024d2:	d3e0      	bcc.n	8002496 <save_calibrations+0x112>
	}
	w25q16_write(&flash_handle, FLASH_CALIBRATION_ADDRESS, data_buffer, buffer_size);
 80024d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80024de:	4804      	ldr	r0, [pc, #16]	@ (80024f0 <save_calibrations+0x16c>)
 80024e0:	f001 f8c4 	bl	800366c <w25q16_write>
 80024e4:	46b5      	mov	sp, r6
}
 80024e6:	bf00      	nop
 80024e8:	3734      	adds	r7, #52	@ 0x34
 80024ea:	46bd      	mov	sp, r7
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f0:	20000000 	.word	0x20000000

080024f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)	{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	80fb      	strh	r3, [r7, #6]
	IRQ_Calibrate_Flag = true;
 80024fe:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	200002f8 	.word	0x200002f8

08002514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <Error_Handler+0x8>

08002520 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002524:	4b17      	ldr	r3, [pc, #92]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002526:	4a18      	ldr	r2, [pc, #96]	@ (8002588 <MX_SPI1_Init+0x68>)
 8002528:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800252a:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <MX_SPI1_Init+0x64>)
 800252c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002530:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002532:	4b14      	ldr	r3, [pc, #80]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002538:	4b12      	ldr	r3, [pc, #72]	@ (8002584 <MX_SPI1_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800253e:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002544:	4b0f      	ldr	r3, [pc, #60]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002546:	2200      	movs	r2, #0
 8002548:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <MX_SPI1_Init+0x64>)
 800254c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002550:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002552:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002554:	2208      	movs	r2, #8
 8002556:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002558:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <MX_SPI1_Init+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002560:	2200      	movs	r2, #0
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002564:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800256a:	4b06      	ldr	r3, [pc, #24]	@ (8002584 <MX_SPI1_Init+0x64>)
 800256c:	220a      	movs	r2, #10
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002570:	4804      	ldr	r0, [pc, #16]	@ (8002584 <MX_SPI1_Init+0x64>)
 8002572:	f004 fd39 	bl	8006fe8 <HAL_SPI_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800257c:	f7ff ffca 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000388 	.word	0x20000388
 8002588:	40013000 	.word	0x40013000

0800258c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	@ 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002620 <HAL_SPI_MspInit+0x94>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d133      	bne.n	8002616 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002624 <HAL_SPI_MspInit+0x98>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002624 <HAL_SPI_MspInit+0x98>)
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025be:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_SPI_MspInit+0x98>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b15      	ldr	r3, [pc, #84]	@ (8002624 <HAL_SPI_MspInit+0x98>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d2:	4a14      	ldr	r2, [pc, #80]	@ (8002624 <HAL_SPI_MspInit+0x98>)
 80025d4:	f043 0302 	orr.w	r3, r3, #2
 80025d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <HAL_SPI_MspInit+0x98>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80025e6:	2338      	movs	r3, #56	@ 0x38
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ea:	2302      	movs	r3, #2
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2303      	movs	r3, #3
 80025f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025f6:	2305      	movs	r3, #5
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	4809      	ldr	r0, [pc, #36]	@ (8002628 <HAL_SPI_MspInit+0x9c>)
 8002602:	f002 fc1f 	bl	8004e44 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2023      	movs	r0, #35	@ 0x23
 800260c:	f001 ff93 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002610:	2023      	movs	r0, #35	@ 0x23
 8002612:	f001 ffac 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002616:	bf00      	nop
 8002618:	3728      	adds	r7, #40	@ 0x28
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40013000 	.word	0x40013000
 8002624:	40023800 	.word	0x40023800
 8002628:	40020400 	.word	0x40020400

0800262c <stepper_enable>:
 */


#include "stepper.h"

void stepper_enable(stepper_handle_t* motor)	{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	b29b      	uxth	r3, r3
 800263e:	2201      	movs	r2, #1
 8002640:	4619      	mov	r1, r3
 8002642:	f002 fdb3 	bl	80051ac <HAL_GPIO_WritePin>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <stepper_disable>:

void stepper_disable(stepper_handle_t* motor)	{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	b29b      	uxth	r3, r3
 8002660:	2200      	movs	r2, #0
 8002662:	4619      	mov	r1, r3
 8002664:	f002 fda2 	bl	80051ac <HAL_GPIO_WritePin>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b10      	ldr	r3, [pc, #64]	@ (80026bc <HAL_MspInit+0x4c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	4a0f      	ldr	r2, [pc, #60]	@ (80026bc <HAL_MspInit+0x4c>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002684:	6453      	str	r3, [r2, #68]	@ 0x44
 8002686:	4b0d      	ldr	r3, [pc, #52]	@ (80026bc <HAL_MspInit+0x4c>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_MspInit+0x4c>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <HAL_MspInit+0x4c>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_MspInit+0x4c>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <NMI_Handler+0x4>

080026c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026cc:	bf00      	nop
 80026ce:	e7fd      	b.n	80026cc <HardFault_Handler+0x4>

080026d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <MemManage_Handler+0x4>

080026d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026dc:	bf00      	nop
 80026de:	e7fd      	b.n	80026dc <BusFault_Handler+0x4>

080026e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e4:	bf00      	nop
 80026e6:	e7fd      	b.n	80026e4 <UsageFault_Handler+0x4>

080026e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002716:	f001 f8bf 	bl	8003898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}

0800271e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_CAL_Pin);
 8002722:	2008      	movs	r0, #8
 8002724:	f002 fd76 	bl	8005214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002730:	4802      	ldr	r0, [pc, #8]	@ (800273c <DMA1_Stream1_IRQHandler+0x10>)
 8002732:	f002 f91d 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000630 	.word	0x20000630

08002740 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002744:	4802      	ldr	r0, [pc, #8]	@ (8002750 <DMA1_Stream2_IRQHandler+0x10>)
 8002746:	f002 f913 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000570 	.word	0x20000570

08002754 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002758:	4802      	ldr	r0, [pc, #8]	@ (8002764 <DMA1_Stream3_IRQHandler+0x10>)
 800275a:	f002 f909 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000690 	.word	0x20000690

08002768 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <DMA1_Stream4_IRQHandler+0x10>)
 800276e:	f002 f8ff 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200005d0 	.word	0x200005d0

0800277c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002780:	4802      	ldr	r0, [pc, #8]	@ (800278c <ADC_IRQHandler+0x10>)
 8002782:	f001 f910 	bl	80039a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000240 	.word	0x20000240

08002790 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002794:	4802      	ldr	r0, [pc, #8]	@ (80027a0 <SPI1_IRQHandler+0x10>)
 8002796:	f005 f8b7 	bl	8007908 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000388 	.word	0x20000388

080027a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027a8:	4802      	ldr	r0, [pc, #8]	@ (80027b4 <USART3_IRQHandler+0x10>)
 80027aa:	f006 fc55 	bl	8009058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000528 	.word	0x20000528

080027b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <UART4_IRQHandler+0x10>)
 80027be:	f006 fc4b 	bl	8009058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200004e0 	.word	0x200004e0

080027cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <DMA2_Stream0_IRQHandler+0x10>)
 80027d2:	f002 f8cd 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000288 	.word	0x20000288

080027e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <OTG_FS_IRQHandler+0x10>)
 80027e6:	f002 fe71 	bl	80054cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200006f0 	.word	0x200006f0

080027f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027fc:	4a14      	ldr	r2, [pc, #80]	@ (8002850 <_sbrk+0x5c>)
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <_sbrk+0x60>)
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d102      	bne.n	8002816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <_sbrk+0x64>)
 8002812:	4a12      	ldr	r2, [pc, #72]	@ (800285c <_sbrk+0x68>)
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <_sbrk+0x64>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002824:	f00b fb5a 	bl	800dedc <__errno>
 8002828:	4603      	mov	r3, r0
 800282a:	220c      	movs	r2, #12
 800282c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800282e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002832:	e009      	b.n	8002848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002834:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <_sbrk+0x64>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	4a05      	ldr	r2, [pc, #20]	@ (8002858 <_sbrk+0x64>)
 8002844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20020000 	.word	0x20020000
 8002854:	00000400 	.word	0x00000400
 8002858:	200003e0 	.word	0x200003e0
 800285c:	20001338 	.word	0x20001338

08002860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <SystemInit+0x20>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	4a05      	ldr	r2, [pc, #20]	@ (8002880 <SystemInit+0x20>)
 800286c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002870:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002898:	463b      	mov	r3, r7
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028a2:	4a1e      	ldr	r2, [pc, #120]	@ (800291c <MX_TIM3_Init+0x98>)
 80028a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028b2:	4b19      	ldr	r3, [pc, #100]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c0:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028c6:	4814      	ldr	r0, [pc, #80]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028c8:	f005 fa7e 	bl	8007dc8 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80028d2:	f7ff fe1f 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028dc:	f107 0308 	add.w	r3, r7, #8
 80028e0:	4619      	mov	r1, r3
 80028e2:	480d      	ldr	r0, [pc, #52]	@ (8002918 <MX_TIM3_Init+0x94>)
 80028e4:	f005 fd66 	bl	80083b4 <HAL_TIM_ConfigClockSource>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80028ee:	f7ff fe11 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028fa:	463b      	mov	r3, r7
 80028fc:	4619      	mov	r1, r3
 80028fe:	4806      	ldr	r0, [pc, #24]	@ (8002918 <MX_TIM3_Init+0x94>)
 8002900:	f006 fa08 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800290a:	f7ff fe03 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200003e4 	.word	0x200003e4
 800291c:	40000400 	.word	0x40000400

08002920 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b092      	sub	sp, #72	@ 0x48
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002926:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]
 800295e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002960:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002962:	4a34      	ldr	r2, [pc, #208]	@ (8002a34 <MX_TIM4_Init+0x114>)
 8002964:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8002966:	4b32      	ldr	r3, [pc, #200]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002968:	2253      	movs	r2, #83	@ 0x53
 800296a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296c:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <MX_TIM4_Init+0x110>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8002972:	4b2f      	ldr	r3, [pc, #188]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002974:	2231      	movs	r2, #49	@ 0x31
 8002976:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002978:	4b2d      	ldr	r3, [pc, #180]	@ (8002a30 <MX_TIM4_Init+0x110>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002984:	482a      	ldr	r0, [pc, #168]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002986:	f005 fa1f 	bl	8007dc8 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002990:	f7ff fdc0 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002998:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800299a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800299e:	4619      	mov	r1, r3
 80029a0:	4823      	ldr	r0, [pc, #140]	@ (8002a30 <MX_TIM4_Init+0x110>)
 80029a2:	f005 fd07 	bl	80083b4 <HAL_TIM_ConfigClockSource>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80029ac:	f7ff fdb2 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80029b0:	481f      	ldr	r0, [pc, #124]	@ (8002a30 <MX_TIM4_Init+0x110>)
 80029b2:	f005 fac1 	bl	8007f38 <HAL_TIM_PWM_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80029bc:	f7ff fdaa 	bl	8002514 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80029c0:	2305      	movs	r3, #5
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80029c4:	2330      	movs	r3, #48	@ 0x30
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80029c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4818      	ldr	r0, [pc, #96]	@ (8002a30 <MX_TIM4_Init+0x110>)
 80029d0:	f005 fdb7 	bl	8008542 <HAL_TIM_SlaveConfigSynchro>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 80029da:	f7ff fd9b 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029de:	2320      	movs	r3, #32
 80029e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029e6:	f107 031c 	add.w	r3, r7, #28
 80029ea:	4619      	mov	r1, r3
 80029ec:	4810      	ldr	r0, [pc, #64]	@ (8002a30 <MX_TIM4_Init+0x110>)
 80029ee:	f006 f991 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80029f8:	f7ff fd8c 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029fc:	2360      	movs	r3, #96	@ 0x60
 80029fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8002a00:	2319      	movs	r3, #25
 8002a02:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002a04:	2302      	movs	r3, #2
 8002a06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a0c:	463b      	mov	r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	4807      	ldr	r0, [pc, #28]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002a14:	f005 fc0c 	bl	8008230 <HAL_TIM_PWM_ConfigChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8002a1e:	f7ff fd79 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002a22:	4803      	ldr	r0, [pc, #12]	@ (8002a30 <MX_TIM4_Init+0x110>)
 8002a24:	f000 f908 	bl	8002c38 <HAL_TIM_MspPostInit>

}
 8002a28:	bf00      	nop
 8002a2a:	3748      	adds	r7, #72	@ 0x48
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	2000042c 	.word	0x2000042c
 8002a34:	40000800 	.word	0x40000800

08002a38 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a3e:	f107 030c 	add.w	r3, r7, #12
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
 8002a54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002a56:	4b23      	ldr	r3, [pc, #140]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a58:	4a23      	ldr	r2, [pc, #140]	@ (8002ae8 <MX_TIM8_Init+0xb0>)
 8002a5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002a5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002a62:	4b20      	ldr	r3, [pc, #128]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a64:	2210      	movs	r2, #16
 8002a66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2-1;
 8002a68:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a80:	4818      	ldr	r0, [pc, #96]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a82:	f005 f9a1 	bl	8007dc8 <HAL_TIM_Base_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002a8c:	f7ff fd42 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002a90:	2108      	movs	r1, #8
 8002a92:	4814      	ldr	r0, [pc, #80]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002a94:	f005 fb72 	bl	800817c <HAL_TIM_OnePulse_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8002a9e:	f7ff fd39 	bl	8002514 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4619      	mov	r1, r3
 8002ab0:	480c      	ldr	r0, [pc, #48]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002ab2:	f005 fd46 	bl	8008542 <HAL_TIM_SlaveConfigSynchro>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002abc:	f7ff fd2a 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002ac0:	2310      	movs	r3, #16
 8002ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ac8:	1d3b      	adds	r3, r7, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <MX_TIM8_Init+0xac>)
 8002ace:	f006 f921 	bl	8008d14 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002ad8:	f7ff fd1c 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000474 	.word	0x20000474
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	@ 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 031c 	add.w	r3, r7, #28
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a45      	ldr	r2, [pc, #276]	@ (8002c20 <HAL_TIM_Base_MspInit+0x134>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	4b44      	ldr	r3, [pc, #272]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	4a43      	ldr	r2, [pc, #268]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1e:	4b41      	ldr	r3, [pc, #260]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002b2a:	e075      	b.n	8002c18 <HAL_TIM_Base_MspInit+0x12c>
  else if(tim_baseHandle->Instance==TIM4)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a3d      	ldr	r2, [pc, #244]	@ (8002c28 <HAL_TIM_Base_MspInit+0x13c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d12d      	bne.n	8002b92 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	4a39      	ldr	r2, [pc, #228]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b46:	4b37      	ldr	r3, [pc, #220]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b33      	ldr	r3, [pc, #204]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	4a32      	ldr	r2, [pc, #200]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b62:	4b30      	ldr	r3, [pc, #192]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ROLL_STEP_PUL_Pin;
 8002b6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b80:	2302      	movs	r3, #2
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ROLL_STEP_PUL_GPIO_Port, &GPIO_InitStruct);
 8002b84:	f107 031c 	add.w	r3, r7, #28
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4828      	ldr	r0, [pc, #160]	@ (8002c2c <HAL_TIM_Base_MspInit+0x140>)
 8002b8c:	f002 f95a 	bl	8004e44 <HAL_GPIO_Init>
}
 8002b90:	e042      	b.n	8002c18 <HAL_TIM_Base_MspInit+0x12c>
  else if(tim_baseHandle->Instance==TIM8)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a26      	ldr	r2, [pc, #152]	@ (8002c30 <HAL_TIM_Base_MspInit+0x144>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d13d      	bne.n	8002c18 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bac:	4b1d      	ldr	r3, [pc, #116]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc8:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <HAL_TIM_Base_MspInit+0x138>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002be6:	2303      	movs	r3, #3
 8002be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bea:	f107 031c 	add.w	r3, r7, #28
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4810      	ldr	r0, [pc, #64]	@ (8002c34 <HAL_TIM_Base_MspInit+0x148>)
 8002bf2:	f002 f927 	bl	8004e44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c04:	2302      	movs	r3, #2
 8002c06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	4808      	ldr	r0, [pc, #32]	@ (8002c34 <HAL_TIM_Base_MspInit+0x148>)
 8002c14:	f002 f916 	bl	8004e44 <HAL_GPIO_Init>
}
 8002c18:	bf00      	nop
 8002c1a:	3730      	adds	r7, #48	@ 0x30
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40000800 	.word	0x40000800
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40010400 	.word	0x40010400
 8002c34:	40020800 	.word	0x40020800

08002c38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 030c 	add.w	r3, r7, #12
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <HAL_TIM_MspPostInit+0x68>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d11d      	bne.n	8002c96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	4a10      	ldr	r2, [pc, #64]	@ (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <HAL_TIM_MspPostInit+0x6c>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PITCH_STEP_PUL_Pin;
 8002c76:	2340      	movs	r3, #64	@ 0x40
 8002c78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c86:	2302      	movs	r3, #2
 8002c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PITCH_STEP_PUL_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <HAL_TIM_MspPostInit+0x70>)
 8002c92:	f002 f8d7 	bl	8004e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c96:	bf00      	nop
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40000800 	.word	0x40000800
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020400 	.word	0x40020400

08002cac <uart_init>:
/*
static void uart_dma_tx_callback(uart_handle_t* uart);
static void uart_dma_rx_callback(uart_handle_t* uart, uint16_t* new_index);
*/

uart_status_t uart_init(uart_handle_t* uart, UART_HandleTypeDef* h_uart){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]

	uart->instance_id = uart_register_instance(uart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f862 	bl	8002d80 <uart_register_instance>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	711a      	strb	r2, [r3, #4]
	if(h_uart == NULL || uart->instance_id == NULL_UART_INST)	{
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <uart_init+0x26>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	791b      	ldrb	r3, [r3, #4]
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	d105      	bne.n	8002cde <uart_init+0x32>
		uart->status = UART_INIT_FAIL;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	715a      	strb	r2, [r3, #5]
		return uart->status;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	795b      	ldrb	r3, [r3, #5]
 8002cdc:	e04c      	b.n	8002d78 <uart_init+0xcc>
	}

	uart->huart = h_uart;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	601a      	str	r2, [r3, #0]
	uart->unread_bytes = 0;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	uart->tx_busy = 0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	719a      	strb	r2, [r3, #6]
	uart->tx_remaining = 0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	609a      	str	r2, [r3, #8]
	uart->tx_size = 0;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
	memset(uart->rx_buffer, 0, UART_BUFFER_SIZE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3310      	adds	r3, #16
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f00b f8e0 	bl	800decc <memset>
	memset(uart->tx_buffer, 0, UART_BUFFER_SIZE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3390      	adds	r3, #144	@ 0x90
 8002d10:	2280      	movs	r2, #128	@ 0x80
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f00b f8d9 	bl	800decc <memset>
	fifo_init(&uart->rx_fifo, uart->rx_buffer, UART_BUFFER_SIZE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3310      	adds	r3, #16
 8002d24:	2280      	movs	r2, #128	@ 0x80
 8002d26:	4619      	mov	r1, r3
 8002d28:	f7fe f98e 	bl	8001048 <fifo_init>
	fifo_init(&uart->tx_fifo, uart->tx_buffer, UART_BUFFER_SIZE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3390      	adds	r3, #144	@ 0x90
 8002d36:	2280      	movs	r2, #128	@ 0x80
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7fe f985 	bl	8001048 <fifo_init>
	memset(uart->dma_buffer, 0, DMA_BUF_SIZE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8002d44:	2280      	movs	r2, #128	@ 0x80
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f00b f8bf 	bl	800decc <memset>
	uart->dma_index = 0;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    uart->rxlock = false;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
	HAL_UARTEx_ReceiveToIdle_DMA(h_uart, uart->dma_buffer, DMA_BUF_SIZE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8002d64:	2280      	movs	r2, #128	@ 0x80
 8002d66:	4619      	mov	r1, r3
 8002d68:	6838      	ldr	r0, [r7, #0]
 8002d6a:	f006 f91b 	bl	8008fa4 <HAL_UARTEx_ReceiveToIdle_DMA>
	uart->status = UART_OK;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	715a      	strb	r2, [r3, #5]
	return uart->status;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	795b      	ldrb	r3, [r3, #5]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <uart_register_instance>:

uint8_t uart_register_instance(uart_handle_t* uart)	{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

	for(uint8_t i =0; i < MAX_UART_COUNT; i++){
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
 8002d8c:	e020      	b.n	8002dd0 <uart_register_instance+0x50>
		if(!(uart_instance_id & (1<<i)))	{
 8002d8e:	4b15      	ldr	r3, [pc, #84]	@ (8002de4 <uart_register_instance+0x64>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	461a      	mov	r2, r3
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	fa42 f303 	asr.w	r3, r2, r3
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d113      	bne.n	8002dca <uart_register_instance+0x4a>
				uart_instance_id |= (1<<i);
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2201      	movs	r2, #1
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	b25a      	sxtb	r2, r3
 8002dac:	4b0d      	ldr	r3, [pc, #52]	@ (8002de4 <uart_register_instance+0x64>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	4313      	orrs	r3, r2
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <uart_register_instance+0x64>)
 8002dba:	701a      	strb	r2, [r3, #0]
				uart_instances[i] = uart;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	490a      	ldr	r1, [pc, #40]	@ (8002de8 <uart_register_instance+0x68>)
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return i;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	e006      	b.n	8002dd8 <uart_register_instance+0x58>
	for(uint8_t i =0; i < MAX_UART_COUNT; i++){
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b07      	cmp	r3, #7
 8002dd4:	d9db      	bls.n	8002d8e <uart_register_instance+0xe>
			}
	}
	return NULL_UART_INST;
 8002dd6:	23ff      	movs	r3, #255	@ 0xff
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	200004dc 	.word	0x200004dc
 8002de8:	200004bc 	.word	0x200004bc

08002dec <uart_update>:

void uart_unregister_instance(uart_handle_t* uart){
	uart_instance_id = uart_instance_id & ~(1<<uart->instance_id);
}

uart_status_t uart_update(uart_handle_t* uart){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

	uart->unread_bytes = fifo_bytes_available(&uart->rx_fifo);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f940 	bl	8001080 <fifo_bytes_available>
 8002e00:	4602      	mov	r2, r0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	if(uart->unread_bytes > UART_BUFFER_SIZE)	{
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d902      	bls.n	8002e18 <uart_update+0x2c>
		uart->status = UART_RX_FULL;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2205      	movs	r2, #5
 8002e16:	715a      	strb	r2, [r3, #5]
	}
	if(uart->tx_remaining > 0 && uart->tx_busy != true){
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
		}
		uart->unread_bytes += ret;
	}

*/
	return uart->status;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	795b      	ldrb	r3, [r3, #5]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <uart_write_packet>:
		uart->tx_waiting = true;
	}
	return ret;
}

uint32_t uart_write_packet(uart_handle_t* uart, com_packet_t* packet)	{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]
	uint32_t ret = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
	memset(uart->tx_buffer, 0, packet->packet_size.value);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	461a      	mov	r2, r3
 8002e44:	2100      	movs	r1, #0
 8002e46:	f00b f841 	bl	800decc <memset>
	uart->tx_buffer[0]	= packet->version;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	uart->tx_buffer[1]	= packet->packet_type;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	785a      	ldrb	r2, [r3, #1]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	uart->tx_buffer[2]	= packet->payload_length;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	789a      	ldrb	r2, [r3, #2]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	uart->tx_buffer[3]	= packet->padding;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	78da      	ldrb	r2, [r3, #3]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	memcpy(&uart->tx_buffer[4], packet->packet_size.bytes, sizeof(uint32_t));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3394      	adds	r3, #148	@ 0x94
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	3204      	adds	r2, #4
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	601a      	str	r2, [r3, #0]
	memcpy(&uart->tx_buffer[8], packet->crc32.bytes, sizeof(uint32_t));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3398      	adds	r3, #152	@ 0x98
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	3208      	adds	r2, #8
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	601a      	str	r2, [r3, #0]
	//u32_to_u8(packet->packet_size.value, &temp[4]);
	//u32_to_u8(packet->crc32.value, &temp[8]);
	memcpy(&uart->tx_buffer[12],packet->payload,packet->payload_length);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	f103 010c 	add.w	r1, r3, #12
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	789b      	ldrb	r3, [r3, #2]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f00b f84a 	bl	800df34 <memcpy>
	if(!(uart->tx_busy)){
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	799b      	ldrb	r3, [r3, #6]
 8002ea4:	f083 0301 	eor.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <uart_write_packet+0xa0>
		uart->tx_busy = 1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	719a      	strb	r2, [r3, #6]
		//ret = fifo_write(&uart->tx_fifo, uart->tx_buffer, packet->packet_size.value);
		HAL_UART_Transmit_DMA(uart->huart, uart->tx_buffer, packet->packet_size.value);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f005 fff1 	bl	8008eac <HAL_UART_Transmit_DMA>
	}
	return ret;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <get_uart_handle>:

uart_handle_t* get_uart_handle(UART_HandleTypeDef* huart)	{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i < MAX_UART_COUNT; i++)	{
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e00f      	b.n	8002f02 <get_uart_handle+0x2e>
		if(huart==uart_instances[i]->huart){
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	@ (8002f18 <get_uart_handle+0x44>)
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d104      	bne.n	8002efc <get_uart_handle+0x28>
			return uart_instances[i];
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	4a08      	ldr	r2, [pc, #32]	@ (8002f18 <get_uart_handle+0x44>)
 8002ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efa:	e006      	b.n	8002f0a <get_uart_handle+0x36>
	for(uint8_t i=0; i < MAX_UART_COUNT; i++)	{
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	3301      	adds	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b07      	cmp	r3, #7
 8002f06:	d9ec      	bls.n	8002ee2 <get_uart_handle+0xe>
		}
	}
	return (uart_handle_t*)NULL_UART_INST;
 8002f08:	23ff      	movs	r3, #255	@ 0xff
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	200004bc 	.word	0x200004bc

08002f1c <HAL_UARTEx_RxEventCallback>:
		HAL_UARTEx_ReceiveToIdle_DMA(uart->huart, uart->dma_buffer, DMA_BUF_SIZE);
	}
}
*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)	{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]

	switch(huart->RxEventType)	{
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_UARTEx_RxEventCallback+0x1a>
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d138      	bne.n	8002fa6 <HAL_UARTEx_RxEventCallback+0x8a>
		case HAL_UART_RXEVENT_HT:	{
			// Do nothing
			break;
 8002f34:	e0af      	b.n	8003096 <HAL_UARTEx_RxEventCallback+0x17a>
		}
		case HAL_UART_RXEVENT_TC:	{
            uart_handle_t* uart = get_uart_handle(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ffcc 	bl	8002ed4 <get_uart_handle>
 8002f3c:	6138      	str	r0, [r7, #16]
            if(uart != NULL)	{
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80a7 	beq.w	8003094 <HAL_UARTEx_RxEventCallback+0x178>
                if(!uart->rxlock&&uart->dma_index!=DMA_BUF_SIZE)   {
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8002f4c:	f083 0301 	eor.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 809e 	beq.w	8003094 <HAL_UARTEx_RxEventCallback+0x178>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f5e:	2b80      	cmp	r3, #128	@ 0x80
 8002f60:	f000 8098 	beq.w	8003094 <HAL_UARTEx_RxEventCallback+0x178>
                      uart->rxlock = true;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                      uint32_t new_bytes = fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (DMA_BUF_SIZE - uart->dma_index));
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f78:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	1c59      	adds	r1, r3, #1
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f88:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f7fe f895 	bl	80010bc <fifo_write>
 8002f92:	60f8      	str	r0, [r7, #12]
                      uart->dma_index = Size;
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
                     uart->rxlock = false;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                 }
              }
			break;
 8002fa4:	e076      	b.n	8003094 <HAL_UARTEx_RxEventCallback+0x178>
		}
		default:	{
			uart_handle_t* uart = get_uart_handle(huart);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ff94 	bl	8002ed4 <get_uart_handle>
 8002fac:	60b8      	str	r0, [r7, #8]
            if(uart != NULL)	{
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d070      	beq.n	8003096 <HAL_UARTEx_RxEventCallback+0x17a>
                if(!uart->rxlock)   {
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d068      	beq.n	8003096 <HAL_UARTEx_RxEventCallback+0x17a>
                    uart->rxlock = true;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                    uint32_t new_bytes = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
                    if(Size !=0)	{
 8002fd0:	887b      	ldrh	r3, [r7, #2]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d059      	beq.n	800308a <HAL_UARTEx_RxEventCallback+0x16e>
                        if(Size > uart->dma_index){
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d91f      	bls.n	8003022 <HAL_UARTEx_RxEventCallback+0x106>
                            new_bytes += fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (Size - uart->dma_index));
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002fee:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	1c59      	adds	r1, r3, #1
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	461a      	mov	r2, r3
 8003004:	f7fe f85a 	bl	80010bc <fifo_write>
 8003008:	4602      	mov	r2, r0
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	4413      	add	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
                            uart->dma_index += new_bytes;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	441a      	add	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 8003020:	e033      	b.n	800308a <HAL_UARTEx_RxEventCallback+0x16e>
                        }
                        else if(Size <= uart->dma_index){
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800302a:	429a      	cmp	r2, r3
 800302c:	d82d      	bhi.n	800308a <HAL_UARTEx_RxEventCallback+0x16e>
                            if(uart->dma_index < DMA_BUF_SIZE)	{
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003034:	2b7f      	cmp	r3, #127	@ 0x7f
 8003036:	d816      	bhi.n	8003066 <HAL_UARTEx_RxEventCallback+0x14a>
                            	new_bytes += fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (DMA_BUF_SIZE - uart->dma_index));
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003044:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	4413      	add	r3, r2
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003054:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003058:	461a      	mov	r2, r3
 800305a:	f7fe f82f 	bl	80010bc <fifo_write>
 800305e:	4602      	mov	r2, r0
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	4413      	add	r3, r2
 8003064:	617b      	str	r3, [r7, #20]
                            }
                            new_bytes += fifo_write(&uart->rx_fifo, uart->dma_buffer, Size);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8003072:	887a      	ldrh	r2, [r7, #2]
 8003074:	4619      	mov	r1, r3
 8003076:	f7fe f821 	bl	80010bc <fifo_write>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	4413      	add	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
                            uart->dma_index = Size;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
                        }
                    }
                    uart->rxlock = false;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                }
            }
		}
	}
}
 8003092:	e000      	b.n	8003096 <HAL_UARTEx_RxEventCallback+0x17a>
			break;
 8003094:	bf00      	nop
}
 8003096:	bf00      	nop
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)	{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	uart_handle_t* uart = get_uart_handle(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff14 	bl	8002ed4 <get_uart_handle>
 80030ac:	60f8      	str	r0, [r7, #12]
	if(uart != NULL)	{
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d054      	beq.n	800315e <HAL_UART_TxCpltCallback+0xc0>

		if(uart->tx_waiting == false)	{
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	79db      	ldrb	r3, [r3, #7]
 80030b8:	f083 0301 	eor.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00f      	beq.n	80030e2 <HAL_UART_TxCpltCallback+0x44>
			//fifo_flush_unread(&uart->tx_fifo);
			fifo_push_read_index(&uart->tx_fifo, uart->tx_size);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fe f86a 	bl	80011a8 <fifo_push_read_index>
			uart->tx_remaining = 0;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
			uart->tx_busy = 0;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	719a      	strb	r2, [r3, #6]
			else	{
				uart->tx_busy = false;
			}
		}
	}
}
 80030e0:	e03d      	b.n	800315e <HAL_UART_TxCpltCallback+0xc0>
			fifo_push_read_index(&uart->tx_fifo, uart->tx_size);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7fe f85a 	bl	80011a8 <fifo_push_read_index>
			if(uart->tx_remaining > UART_BUFFER_SIZE - uart->tx_fifo.read_index)	{
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80030fe:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003102:	429a      	cmp	r2, r3
 8003104:	d907      	bls.n	8003116 <HAL_UART_TxCpltCallback+0x78>
				uart->tx_size = UART_BUFFER_SIZE - uart->tx_fifo.read_index;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800310c:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	e006      	b.n	8003124 <HAL_UART_TxCpltCallback+0x86>
				uart->tx_size = uart->tx_remaining;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	60da      	str	r2, [r3, #12]
				uart->tx_waiting = false;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	71da      	strb	r2, [r3, #7]
			uart->tx_remaining -= uart->tx_size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	1ad2      	subs	r2, r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	609a      	str	r2, [r3, #8]
			if(uart->tx_size>0)	{
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <HAL_UART_TxCpltCallback+0xba>
				HAL_UART_Transmit_DMA(uart->huart, &uart->tx_buffer[uart->tx_fifo.read_index], uart->tx_size);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003144:	3390      	adds	r3, #144	@ 0x90
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	18d1      	adds	r1, r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	f005 feab 	bl	8008eac <HAL_UART_Transmit_DMA>
}
 8003156:	e002      	b.n	800315e <HAL_UART_TxCpltCallback+0xc0>
				uart->tx_busy = false;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	719a      	strb	r2, [r3, #6]
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800316c:	4b11      	ldr	r3, [pc, #68]	@ (80031b4 <MX_UART4_Init+0x4c>)
 800316e:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <MX_UART4_Init+0x50>)
 8003170:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 460800;
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <MX_UART4_Init+0x4c>)
 8003174:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8003178:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <MX_UART4_Init+0x4c>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003180:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <MX_UART4_Init+0x4c>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <MX_UART4_Init+0x4c>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800318c:	4b09      	ldr	r3, [pc, #36]	@ (80031b4 <MX_UART4_Init+0x4c>)
 800318e:	220c      	movs	r2, #12
 8003190:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003192:	4b08      	ldr	r3, [pc, #32]	@ (80031b4 <MX_UART4_Init+0x4c>)
 8003194:	2200      	movs	r2, #0
 8003196:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <MX_UART4_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	@ (80031b4 <MX_UART4_Init+0x4c>)
 80031a0:	f005 fe34 	bl	8008e0c <HAL_UART_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80031aa:	f7ff f9b3 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	200004e0 	.word	0x200004e0
 80031b8:	40004c00 	.word	0x40004c00

080031bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <MX_USART3_UART_Init+0x50>)
 80031c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80031c6:	4b10      	ldr	r3, [pc, #64]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031da:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031dc:	2200      	movs	r2, #0
 80031de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031e2:	220c      	movs	r2, #12
 80031e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031f2:	4805      	ldr	r0, [pc, #20]	@ (8003208 <MX_USART3_UART_Init+0x4c>)
 80031f4:	f005 fe0a 	bl	8008e0c <HAL_UART_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031fe:	f7ff f989 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000528 	.word	0x20000528
 800320c:	40004800 	.word	0x40004800

08003210 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	@ 0x30
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a98      	ldr	r2, [pc, #608]	@ (8003490 <HAL_UART_MspInit+0x280>)
 800322e:	4293      	cmp	r3, r2
 8003230:	f040 8092 	bne.w	8003358 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003234:	2300      	movs	r3, #0
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	4b96      	ldr	r3, [pc, #600]	@ (8003494 <HAL_UART_MspInit+0x284>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	4a95      	ldr	r2, [pc, #596]	@ (8003494 <HAL_UART_MspInit+0x284>)
 800323e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003242:	6413      	str	r3, [r2, #64]	@ 0x40
 8003244:	4b93      	ldr	r3, [pc, #588]	@ (8003494 <HAL_UART_MspInit+0x284>)
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	4b8f      	ldr	r3, [pc, #572]	@ (8003494 <HAL_UART_MspInit+0x284>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003258:	4a8e      	ldr	r2, [pc, #568]	@ (8003494 <HAL_UART_MspInit+0x284>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003260:	4b8c      	ldr	r3, [pc, #560]	@ (8003494 <HAL_UART_MspInit+0x284>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800326c:	2303      	movs	r3, #3
 800326e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003270:	2302      	movs	r3, #2
 8003272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	2300      	movs	r3, #0
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003278:	2303      	movs	r3, #3
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800327c:	2308      	movs	r3, #8
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003280:	f107 031c 	add.w	r3, r7, #28
 8003284:	4619      	mov	r1, r3
 8003286:	4884      	ldr	r0, [pc, #528]	@ (8003498 <HAL_UART_MspInit+0x288>)
 8003288:	f001 fddc 	bl	8004e44 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800328c:	4b83      	ldr	r3, [pc, #524]	@ (800349c <HAL_UART_MspInit+0x28c>)
 800328e:	4a84      	ldr	r2, [pc, #528]	@ (80034a0 <HAL_UART_MspInit+0x290>)
 8003290:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003292:	4b82      	ldr	r3, [pc, #520]	@ (800349c <HAL_UART_MspInit+0x28c>)
 8003294:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003298:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329a:	4b80      	ldr	r3, [pc, #512]	@ (800349c <HAL_UART_MspInit+0x28c>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a0:	4b7e      	ldr	r3, [pc, #504]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032a6:	4b7d      	ldr	r3, [pc, #500]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032ac:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032ae:	4b7b      	ldr	r3, [pc, #492]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b4:	4b79      	ldr	r3, [pc, #484]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80032ba:	4b78      	ldr	r3, [pc, #480]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032c2:	4b76      	ldr	r3, [pc, #472]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032c8:	4b74      	ldr	r3, [pc, #464]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80032ce:	4873      	ldr	r0, [pc, #460]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032d0:	f001 f9b6 	bl	8004640 <HAL_DMA_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80032da:	f7ff f91b 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a6e      	ldr	r2, [pc, #440]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80032e4:	4a6d      	ldr	r2, [pc, #436]	@ (800349c <HAL_UART_MspInit+0x28c>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80032ea:	4b6e      	ldr	r3, [pc, #440]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 80032ec:	4a6e      	ldr	r2, [pc, #440]	@ (80034a8 <HAL_UART_MspInit+0x298>)
 80032ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80032f0:	4b6c      	ldr	r3, [pc, #432]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 80032f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80032f6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032f8:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 80032fa:	2240      	movs	r2, #64	@ 0x40
 80032fc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032fe:	4b69      	ldr	r3, [pc, #420]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003304:	4b67      	ldr	r3, [pc, #412]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 8003306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800330a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800330c:	4b65      	ldr	r3, [pc, #404]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003312:	4b64      	ldr	r3, [pc, #400]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 8003314:	2200      	movs	r2, #0
 8003316:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003318:	4b62      	ldr	r3, [pc, #392]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800331e:	4b61      	ldr	r3, [pc, #388]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 8003320:	2200      	movs	r2, #0
 8003322:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003324:	4b5f      	ldr	r3, [pc, #380]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 8003326:	2200      	movs	r2, #0
 8003328:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800332a:	485e      	ldr	r0, [pc, #376]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 800332c:	f001 f988 	bl	8004640 <HAL_DMA_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003336:	f7ff f8ed 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a59      	ldr	r2, [pc, #356]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003340:	4a58      	ldr	r2, [pc, #352]	@ (80034a4 <HAL_UART_MspInit+0x294>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	2034      	movs	r0, #52	@ 0x34
 800334c:	f001 f8f3 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003350:	2034      	movs	r0, #52	@ 0x34
 8003352:	f001 f90c 	bl	800456e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003356:	e097      	b.n	8003488 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==USART3)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a53      	ldr	r2, [pc, #332]	@ (80034ac <HAL_UART_MspInit+0x29c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f040 8092 	bne.w	8003488 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003364:	2300      	movs	r3, #0
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	4b4a      	ldr	r3, [pc, #296]	@ (8003494 <HAL_UART_MspInit+0x284>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_UART_MspInit+0x284>)
 800336e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003372:	6413      	str	r3, [r2, #64]	@ 0x40
 8003374:	4b47      	ldr	r3, [pc, #284]	@ (8003494 <HAL_UART_MspInit+0x284>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_UART_MspInit+0x284>)
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	4a42      	ldr	r2, [pc, #264]	@ (8003494 <HAL_UART_MspInit+0x284>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003390:	4b40      	ldr	r3, [pc, #256]	@ (8003494 <HAL_UART_MspInit+0x284>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800339c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033aa:	2303      	movs	r3, #3
 80033ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ae:	2307      	movs	r3, #7
 80033b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033b2:	f107 031c 	add.w	r3, r7, #28
 80033b6:	4619      	mov	r1, r3
 80033b8:	483d      	ldr	r0, [pc, #244]	@ (80034b0 <HAL_UART_MspInit+0x2a0>)
 80033ba:	f001 fd43 	bl	8004e44 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80033be:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033c0:	4a3d      	ldr	r2, [pc, #244]	@ (80034b8 <HAL_UART_MspInit+0x2a8>)
 80033c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80033c4:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033cc:	4b39      	ldr	r3, [pc, #228]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d2:	4b38      	ldr	r3, [pc, #224]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033d8:	4b36      	ldr	r3, [pc, #216]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033de:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033e0:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033e6:	4b33      	ldr	r3, [pc, #204]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80033ec:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033f2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033f4:	4b2f      	ldr	r3, [pc, #188]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033fa:	4b2e      	ldr	r3, [pc, #184]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003400:	482c      	ldr	r0, [pc, #176]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 8003402:	f001 f91d 	bl	8004640 <HAL_DMA_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_MspInit+0x200>
      Error_Handler();
 800340c:	f7ff f882 	bl	8002514 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a28      	ldr	r2, [pc, #160]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 8003414:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003416:	4a27      	ldr	r2, [pc, #156]	@ (80034b4 <HAL_UART_MspInit+0x2a4>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800341c:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 800341e:	4a28      	ldr	r2, [pc, #160]	@ (80034c0 <HAL_UART_MspInit+0x2b0>)
 8003420:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003422:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003424:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003428:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800342a:	4b24      	ldr	r3, [pc, #144]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 800342c:	2240      	movs	r2, #64	@ 0x40
 800342e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003430:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003436:	4b21      	ldr	r3, [pc, #132]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003438:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800343c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800343e:	4b1f      	ldr	r3, [pc, #124]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800344a:	4b1c      	ldr	r3, [pc, #112]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003450:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003456:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003458:	2200      	movs	r2, #0
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800345c:	4817      	ldr	r0, [pc, #92]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 800345e:	f001 f8ef 	bl	8004640 <HAL_DMA_Init>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8003468:	f7ff f854 	bl	8002514 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a13      	ldr	r2, [pc, #76]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
 8003472:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <HAL_UART_MspInit+0x2ac>)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003478:	2200      	movs	r2, #0
 800347a:	2100      	movs	r1, #0
 800347c:	2027      	movs	r0, #39	@ 0x27
 800347e:	f001 f85a 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003482:	2027      	movs	r0, #39	@ 0x27
 8003484:	f001 f873 	bl	800456e <HAL_NVIC_EnableIRQ>
}
 8003488:	bf00      	nop
 800348a:	3730      	adds	r7, #48	@ 0x30
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40004c00 	.word	0x40004c00
 8003494:	40023800 	.word	0x40023800
 8003498:	40020000 	.word	0x40020000
 800349c:	20000570 	.word	0x20000570
 80034a0:	40026040 	.word	0x40026040
 80034a4:	200005d0 	.word	0x200005d0
 80034a8:	40026070 	.word	0x40026070
 80034ac:	40004800 	.word	0x40004800
 80034b0:	40020800 	.word	0x40020800
 80034b4:	20000630 	.word	0x20000630
 80034b8:	40026028 	.word	0x40026028
 80034bc:	20000690 	.word	0x20000690
 80034c0:	40026058 	.word	0x40026058

080034c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80034c8:	4b14      	ldr	r3, [pc, #80]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80034ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034d2:	2204      	movs	r2, #4
 80034d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80034d6:	4b11      	ldr	r3, [pc, #68]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034d8:	2202      	movs	r2, #2
 80034da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034de:	2200      	movs	r2, #0
 80034e0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80034e2:	4b0e      	ldr	r3, [pc, #56]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034e4:	2202      	movs	r2, #2
 80034e6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80034ee:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80034fa:	4b08      	ldr	r3, [pc, #32]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003502:	2200      	movs	r2, #0
 8003504:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003506:	4805      	ldr	r0, [pc, #20]	@ (800351c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003508:	f001 fe9c 	bl	8005244 <HAL_PCD_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003512:	f7fe ffff 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200006f0 	.word	0x200006f0

08003520 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	@ 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 0314 	add.w	r3, r7, #20
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003540:	d13a      	bne.n	80035b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	4b1e      	ldr	r3, [pc, #120]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354a:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6313      	str	r3, [r2, #48]	@ 0x30
 8003552:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	613b      	str	r3, [r7, #16]
 800355c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800355e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003564:	2302      	movs	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800356c:	2303      	movs	r3, #3
 800356e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003570:	230a      	movs	r3, #10
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	4812      	ldr	r0, [pc, #72]	@ (80035c4 <HAL_PCD_MspInit+0xa4>)
 800357c:	f001 fc62 	bl	8004e44 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003580:	4b0f      	ldr	r3, [pc, #60]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	4a0e      	ldr	r2, [pc, #56]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 8003586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800358a:	6353      	str	r3, [r2, #52]	@ 0x34
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 8003592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003594:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 8003596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800359a:	6453      	str	r3, [r2, #68]	@ 0x44
 800359c:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <HAL_PCD_MspInit+0xa0>)
 800359e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2043      	movs	r0, #67	@ 0x43
 80035ae:	f000 ffc2 	bl	8004536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80035b2:	2043      	movs	r0, #67	@ 0x43
 80035b4:	f000 ffdb 	bl	800456e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80035b8:	bf00      	nop
 80035ba:	3728      	adds	r7, #40	@ 0x28
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020000 	.word	0x40020000

080035c8 <cs_enable>:
 *      Author: zuidec
 */

#include "w25q16jv.h"

static void cs_enable(w25q16_handle_t* flash_dev)	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash_dev->cs_port, flash_dev->cs_pin, GPIO_PIN_RESET);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6858      	ldr	r0, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	4619      	mov	r1, r3
 80035de:	f001 fde5 	bl	80051ac <HAL_GPIO_WritePin>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <cs_release>:

static void cs_release(w25q16_handle_t* flash_dev)	{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash_dev->cs_port, flash_dev->cs_pin, GPIO_PIN_SET);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6858      	ldr	r0, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2201      	movs	r2, #1
 80035fe:	4619      	mov	r1, r3
 8003600:	f001 fdd4 	bl	80051ac <HAL_GPIO_WritePin>
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <w25q16_read>:

void w25q16_read(w25q16_handle_t* flash_dev, uint32_t address, uint8_t* buffer, uint8_t buffer_size)	{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	70fb      	strb	r3, [r7, #3]
	uint8_t data[4] = {W25Q16_READ_DATA, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 800361a:	2303      	movs	r3, #3
 800361c:	753b      	strb	r3, [r7, #20]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	b2db      	uxtb	r3, r3
 8003624:	757b      	strb	r3, [r7, #21]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	b2db      	uxtb	r3, r3
 800362c:	75bb      	strb	r3, [r7, #22]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	75fb      	strb	r3, [r7, #23]
	cs_enable(flash_dev);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ffc7 	bl	80035c8 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data),W25Q16_SPI_TIMEOUT);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	f107 0114 	add.w	r1, r7, #20
 8003642:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003646:	2204      	movs	r2, #4
 8003648:	f003 fd57 	bl	80070fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(flash_dev->spi, buffer, buffer_size, W25Q16_SPI_TIMEOUT);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	b29a      	uxth	r2, r3
 8003654:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	f003 fe92 	bl	8007382 <HAL_SPI_Receive>
	cs_release(flash_dev);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff ffc3 	bl	80035ea <cs_release>
}
 8003664:	bf00      	nop
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <w25q16_write>:

void w25q16_write(w25q16_handle_t* flash_dev, uint32_t address, uint8_t* buffer, uint8_t bytes_to_write)	{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	70fb      	strb	r3, [r7, #3]
	uint8_t data[4] = {W25Q16_PAGE_PROGRAM, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 800367a:	2302      	movs	r3, #2
 800367c:	753b      	strb	r3, [r7, #20]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b2db      	uxtb	r3, r3
 8003684:	757b      	strb	r3, [r7, #21]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	b2db      	uxtb	r3, r3
 800368c:	75bb      	strb	r3, [r7, #22]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	75fb      	strb	r3, [r7, #23]
	w25q16_enable_write(flash_dev);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f81c 	bl	80036d2 <w25q16_enable_write>
	cs_enable(flash_dev);
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7ff ff94 	bl	80035c8 <cs_enable>
	if(bytes_to_write > 256){
		HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
		HAL_SPI_Transmit(flash_dev->spi, buffer, 256, W25Q16_SPI_TIMEOUT);
	}
	else 	{
		HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	f107 0114 	add.w	r1, r7, #20
 80036a8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036ac:	2204      	movs	r2, #4
 80036ae:	f003 fd24 	bl	80070fa <HAL_SPI_Transmit>
		HAL_SPI_Transmit(flash_dev->spi, buffer, bytes_to_write, W25Q16_SPI_TIMEOUT);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	f003 fd1b 	bl	80070fa <HAL_SPI_Transmit>
	}
	cs_release(flash_dev);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff ff90 	bl	80035ea <cs_release>
	// Write is disabled by chip once programming page is complete
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <w25q16_enable_write>:

void w25q16_enable_write(w25q16_handle_t* flash_dev)	{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
	uint8_t data = (uint8_t)W25Q16_WRITE_ENABLE;
 80036da:	2306      	movs	r3, #6
 80036dc:	73fb      	strb	r3, [r7, #15]
	cs_enable(flash_dev);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff72 	bl	80035c8 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	f107 010f 	add.w	r1, r7, #15
 80036ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036f0:	2201      	movs	r2, #1
 80036f2:	f003 fd02 	bl	80070fa <HAL_SPI_Transmit>
	cs_release(flash_dev);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff77 	bl	80035ea <cs_release>
}
 80036fc:	bf00      	nop
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <w25q16_sector_erase_4k>:
	cs_enable(flash_dev);
	HAL_SPI_Transmit(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
	cs_release(flash_dev);
}

void w25q16_sector_erase_4k(w25q16_handle_t* flash_dev, uint32_t address)	{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	uint8_t data[4] = {W25Q16_SECTOR_ERASE_4K, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 800370e:	2320      	movs	r3, #32
 8003710:	733b      	strb	r3, [r7, #12]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b2db      	uxtb	r3, r3
 8003718:	737b      	strb	r3, [r7, #13]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	b2db      	uxtb	r3, r3
 8003720:	73bb      	strb	r3, [r7, #14]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	73fb      	strb	r3, [r7, #15]
	w25q16_enable_write(flash_dev);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ffd2 	bl	80036d2 <w25q16_enable_write>
	cs_enable(flash_dev);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff4a 	bl	80035c8 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	f107 010c 	add.w	r1, r7, #12
 800373c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003740:	2204      	movs	r2, #4
 8003742:	f003 fcda 	bl	80070fa <HAL_SPI_Transmit>
	cs_release(flash_dev);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff ff4f 	bl	80035ea <cs_release>
	// Write is disabled by chip once erase is complete

}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <w25q16_read_SR1>:

void w25q16_block_erase_64k(w25q16_handle_t* flash_dev, uint32_t address)	{

}

uint8_t w25q16_read_SR1(w25q16_handle_t* flash_dev)	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
	uint8_t payload = W25Q16_READ_SR1;
 8003760:	2305      	movs	r3, #5
 8003762:	73bb      	strb	r3, [r7, #14]
	cs_enable(flash_dev);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7ff ff2f 	bl	80035c8 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, &payload, sizeof(payload),W25Q16_SPI_TIMEOUT);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f107 010e 	add.w	r1, r7, #14
 8003772:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003776:	2201      	movs	r2, #1
 8003778:	f003 fcbf 	bl	80070fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	f107 010f 	add.w	r1, r7, #15
 8003784:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003788:	2201      	movs	r2, #1
 800378a:	f003 fdfa 	bl	8007382 <HAL_SPI_Receive>
	cs_release(flash_dev);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff2b 	bl	80035ea <cs_release>

	return data;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80037a4:	f7ff f85c 	bl	8002860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037a8:	480c      	ldr	r0, [pc, #48]	@ (80037dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037aa:	490d      	ldr	r1, [pc, #52]	@ (80037e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037ac:	4a0d      	ldr	r2, [pc, #52]	@ (80037e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b0:	e002      	b.n	80037b8 <LoopCopyDataInit>

080037b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b6:	3304      	adds	r3, #4

080037b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037bc:	d3f9      	bcc.n	80037b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037be:	4a0a      	ldr	r2, [pc, #40]	@ (80037e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c0:	4c0a      	ldr	r4, [pc, #40]	@ (80037ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80037c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037c4:	e001      	b.n	80037ca <LoopFillZerobss>

080037c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037c8:	3204      	adds	r2, #4

080037ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037cc:	d3fb      	bcc.n	80037c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037ce:	f00a fb8b 	bl	800dee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037d2:	f7fd ff15 	bl	8001600 <main>
  bx  lr    
 80037d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e0:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 80037e4:	0800e8c4 	.word	0x0800e8c4
  ldr r2, =_sbss
 80037e8:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 80037ec:	20001334 	.word	0x20001334

080037f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037f0:	e7fe      	b.n	80037f0 <CAN1_RX0_IRQHandler>
	...

080037f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <HAL_Init+0x40>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <HAL_Init+0x40>)
 80037fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003802:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003804:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_Init+0x40>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a0a      	ldr	r2, [pc, #40]	@ (8003834 <HAL_Init+0x40>)
 800380a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800380e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003810:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <HAL_Init+0x40>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a07      	ldr	r2, [pc, #28]	@ (8003834 <HAL_Init+0x40>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800381c:	2003      	movs	r0, #3
 800381e:	f000 fe7f 	bl	8004520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003822:	200f      	movs	r0, #15
 8003824:	f000 f808 	bl	8003838 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003828:	f7fe ff22 	bl	8002670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40023c00 	.word	0x40023c00

08003838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003840:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_InitTick+0x54>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <HAL_InitTick+0x58>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4619      	mov	r1, r3
 800384a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800384e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fe97 	bl	800458a <HAL_SYSTICK_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e00e      	b.n	8003884 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d80a      	bhi.n	8003882 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800386c:	2200      	movs	r2, #0
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003874:	f000 fe5f 	bl	8004536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003878:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <HAL_InitTick+0x5c>)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
 8003880:	e000      	b.n	8003884 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	2000000c 	.word	0x2000000c
 8003890:	20000014 	.word	0x20000014
 8003894:	20000010 	.word	0x20000010

08003898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800389c:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_IncTick+0x20>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b06      	ldr	r3, [pc, #24]	@ (80038bc <HAL_IncTick+0x24>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4413      	add	r3, r2
 80038a8:	4a04      	ldr	r2, [pc, #16]	@ (80038bc <HAL_IncTick+0x24>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	20000014 	.word	0x20000014
 80038bc:	20000bd4 	.word	0x20000bd4

080038c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return uwTick;
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <HAL_GetTick+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000bd4 	.word	0x20000bd4

080038d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038e0:	f7ff ffee 	bl	80038c0 <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038f0:	d005      	beq.n	80038fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038f2:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <HAL_Delay+0x44>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038fe:	bf00      	nop
 8003900:	f7ff ffde 	bl	80038c0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d8f7      	bhi.n	8003900 <HAL_Delay+0x28>
  {
  }
}
 8003910:	bf00      	nop
 8003912:	bf00      	nop
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	20000014 	.word	0x20000014

08003920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e033      	b.n	800399e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fc fe8c 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003966:	f023 0302 	bic.w	r3, r3, #2
 800396a:	f043 0202 	orr.w	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb7c 	bl	8004070 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	641a      	str	r2, [r3, #64]	@ 0x40
 800398e:	e001      	b.n	8003994 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d049      	beq.n	8003a70 <HAL_ADC_IRQHandler+0xca>
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d046      	beq.n	8003a70 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d12b      	bne.n	8003a60 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d127      	bne.n	8003a60 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d006      	beq.n	8003a2c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d119      	bne.n	8003a60 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0220 	bic.w	r2, r2, #32
 8003a3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d105      	bne.n	8003a60 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	f043 0201 	orr.w	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fe f9ab 	bl	8001dbc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0212 	mvn.w	r2, #18
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0304 	and.w	r3, r3, #4
 8003a76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d057      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x190>
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d054      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d105      	bne.n	8003aa4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d139      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12b      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d124      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11d      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d119      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b00:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d105      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fc20 	bl	800436c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 020c 	mvn.w	r2, #12
 8003b34:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d017      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x1d6>
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d10d      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f949 	bl	8003e04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0201 	mvn.w	r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d015      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x218>
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d012      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9c:	f043 0202 	orr.w	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0220 	mvn.w	r2, #32
 8003bac:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f932 	bl	8003e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0220 	mvn.w	r2, #32
 8003bbc:	601a      	str	r2, [r3, #0]
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_Start_DMA+0x22>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e0eb      	b.n	8003dc2 <HAL_ADC_Start_DMA+0x1fa>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d018      	beq.n	8003c32 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c10:	4b6e      	ldr	r3, [pc, #440]	@ (8003dcc <HAL_ADC_Start_DMA+0x204>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6e      	ldr	r2, [pc, #440]	@ (8003dd0 <HAL_ADC_Start_DMA+0x208>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0c9a      	lsrs	r2, r3, #18
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003c24:	e002      	b.n	8003c2c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f9      	bne.n	8003c26 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c40:	d107      	bne.n	8003c52 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 80a3 	bne.w	8003da8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c6a:	f023 0301 	bic.w	r3, r3, #1
 8003c6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c8c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca0:	d106      	bne.n	8003cb0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f023 0206 	bic.w	r2, r3, #6
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cae:	e002      	b.n	8003cb6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003cbe:	4b45      	ldr	r3, [pc, #276]	@ (8003dd4 <HAL_ADC_Start_DMA+0x20c>)
 8003cc0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc6:	4a44      	ldr	r2, [pc, #272]	@ (8003dd8 <HAL_ADC_Start_DMA+0x210>)
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	4a43      	ldr	r2, [pc, #268]	@ (8003ddc <HAL_ADC_Start_DMA+0x214>)
 8003cd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	4a42      	ldr	r2, [pc, #264]	@ (8003de0 <HAL_ADC_Start_DMA+0x218>)
 8003cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003cf2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d02:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	334c      	adds	r3, #76	@ 0x4c
 8003d0e:	4619      	mov	r1, r3
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f000 fd42 	bl	800479c <HAL_DMA_Start_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d12a      	bne.n	8003d7e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <HAL_ADC_Start_DMA+0x21c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d015      	beq.n	8003d5e <HAL_ADC_Start_DMA+0x196>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <HAL_ADC_Start_DMA+0x220>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d105      	bne.n	8003d48 <HAL_ADC_Start_DMA+0x180>
 8003d3c:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_ADC_Start_DMA+0x20c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	@ (8003dec <HAL_ADC_Start_DMA+0x224>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d136      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
 8003d52:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_ADC_Start_DMA+0x20c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d130      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d129      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	e020      	b.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a18      	ldr	r2, [pc, #96]	@ (8003de4 <HAL_ADC_Start_DMA+0x21c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d11b      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d114      	bne.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	e00b      	b.n	8003dc0 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	f043 0210 	orr.w	r2, r3, #16
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	f043 0201 	orr.w	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003dc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	431bde83 	.word	0x431bde83
 8003dd4:	40012300 	.word	0x40012300
 8003dd8:	08004269 	.word	0x08004269
 8003ddc:	08004323 	.word	0x08004323
 8003de0:	0800433f 	.word	0x0800433f
 8003de4:	40012000 	.word	0x40012000
 8003de8:	40012100 	.word	0x40012100
 8003dec:	40012200 	.word	0x40012200

08003df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x1c>
 8003e44:	2302      	movs	r3, #2
 8003e46:	e105      	b.n	8004054 <HAL_ADC_ConfigChannel+0x228>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b09      	cmp	r3, #9
 8003e56:	d925      	bls.n	8003ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68d9      	ldr	r1, [r3, #12]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b1e      	subs	r3, #30
 8003e6e:	2207      	movs	r2, #7
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43da      	mvns	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68d9      	ldr	r1, [r3, #12]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	4603      	mov	r3, r0
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4403      	add	r3, r0
 8003e96:	3b1e      	subs	r3, #30
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	e022      	b.n	8003eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	4413      	add	r3, r2
 8003eb8:	2207      	movs	r2, #7
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	4618      	mov	r0, r3
 8003eda:	4603      	mov	r3, r0
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4403      	add	r3, r0
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d824      	bhi.n	8003f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	3b05      	subs	r3, #5
 8003f04:	221f      	movs	r2, #31
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	400a      	ands	r2, r1
 8003f12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3b05      	subs	r3, #5
 8003f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f3a:	e04c      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d824      	bhi.n	8003f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	3b23      	subs	r3, #35	@ 0x23
 8003f56:	221f      	movs	r2, #31
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43da      	mvns	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	400a      	ands	r2, r1
 8003f64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3b23      	subs	r3, #35	@ 0x23
 8003f80:	fa00 f203 	lsl.w	r2, r0, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f8c:	e023      	b.n	8003fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3b41      	subs	r3, #65	@ 0x41
 8003fa0:	221f      	movs	r2, #31
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	400a      	ands	r2, r1
 8003fae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3b41      	subs	r3, #65	@ 0x41
 8003fca:	fa00 f203 	lsl.w	r2, r0, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	@ (8004060 <HAL_ADC_ConfigChannel+0x234>)
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a21      	ldr	r2, [pc, #132]	@ (8004064 <HAL_ADC_ConfigChannel+0x238>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d109      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x1cc>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b12      	cmp	r3, #18
 8003fea:	d105      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <HAL_ADC_ConfigChannel+0x238>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d123      	bne.n	800404a <HAL_ADC_ConfigChannel+0x21e>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b10      	cmp	r3, #16
 8004008:	d003      	beq.n	8004012 <HAL_ADC_ConfigChannel+0x1e6>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b11      	cmp	r3, #17
 8004010:	d11b      	bne.n	800404a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b10      	cmp	r3, #16
 8004024:	d111      	bne.n	800404a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <HAL_ADC_ConfigChannel+0x23c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a10      	ldr	r2, [pc, #64]	@ (800406c <HAL_ADC_ConfigChannel+0x240>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	0c9a      	lsrs	r2, r3, #18
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800403c:	e002      	b.n	8004044 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3b01      	subs	r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1f9      	bne.n	800403e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40012300 	.word	0x40012300
 8004064:	40012000 	.word	0x40012000
 8004068:	2000000c 	.word	0x2000000c
 800406c:	431bde83 	.word	0x431bde83

08004070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004078:	4b79      	ldr	r3, [pc, #484]	@ (8004260 <ADC_Init+0x1f0>)
 800407a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80040c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	4a58      	ldr	r2, [pc, #352]	@ (8004264 <ADC_Init+0x1f4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e00f      	b.n	800416e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800415c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800416c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0202 	bic.w	r2, r2, #2
 800417c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7e1b      	ldrb	r3, [r3, #24]
 8004188:	005a      	lsls	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	3b01      	subs	r3, #1
 80041c8:	035a      	lsls	r2, r3, #13
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	e007      	b.n	80041e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80041f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	3b01      	subs	r3, #1
 8004200:	051a      	lsls	r2, r3, #20
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004226:	025a      	lsls	r2, r3, #9
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	029a      	lsls	r2, r3, #10
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012300 	.word	0x40012300
 8004264:	0f000001 	.word	0x0f000001

08004268 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800427e:	2b00      	cmp	r3, #0
 8004280:	d13c      	bne.n	80042fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d12b      	bne.n	80042f4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d127      	bne.n	80042f4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d119      	bne.n	80042f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0220 	bic.w	r2, r2, #32
 80042ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f7fd fd61 	bl	8001dbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042fa:	e00e      	b.n	800431a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff fd85 	bl	8003e18 <HAL_ADC_ErrorCallback>
}
 800430e:	e004      	b.n	800431a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	4798      	blx	r3
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b084      	sub	sp, #16
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fd5d 	bl	8003df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004336:	bf00      	nop
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b084      	sub	sp, #16
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2240      	movs	r2, #64	@ 0x40
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f043 0204 	orr.w	r2, r3, #4
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7ff fd5a 	bl	8003e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004390:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800439c:	4013      	ands	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80043ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043b2:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <__NVIC_SetPriorityGrouping+0x44>)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	60d3      	str	r3, [r2, #12]
}
 80043b8:	bf00      	nop
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <__NVIC_GetPriorityGrouping+0x18>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	f003 0307 	and.w	r3, r3, #7
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	db0b      	blt.n	800440e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	f003 021f 	and.w	r2, r3, #31
 80043fc:	4907      	ldr	r1, [pc, #28]	@ (800441c <__NVIC_EnableIRQ+0x38>)
 80043fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004402:	095b      	lsrs	r3, r3, #5
 8004404:	2001      	movs	r0, #1
 8004406:	fa00 f202 	lsl.w	r2, r0, r2
 800440a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800440e:	bf00      	nop
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	e000e100 	.word	0xe000e100

08004420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800442c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004430:	2b00      	cmp	r3, #0
 8004432:	db0a      	blt.n	800444a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	b2da      	uxtb	r2, r3
 8004438:	490c      	ldr	r1, [pc, #48]	@ (800446c <__NVIC_SetPriority+0x4c>)
 800443a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	440b      	add	r3, r1
 8004444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004448:	e00a      	b.n	8004460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4908      	ldr	r1, [pc, #32]	@ (8004470 <__NVIC_SetPriority+0x50>)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	3b04      	subs	r3, #4
 8004458:	0112      	lsls	r2, r2, #4
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	440b      	add	r3, r1
 800445e:	761a      	strb	r2, [r3, #24]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	e000e100 	.word	0xe000e100
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	@ 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f1c3 0307 	rsb	r3, r3, #7
 800448e:	2b04      	cmp	r3, #4
 8004490:	bf28      	it	cs
 8004492:	2304      	movcs	r3, #4
 8004494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3304      	adds	r3, #4
 800449a:	2b06      	cmp	r3, #6
 800449c:	d902      	bls.n	80044a4 <NVIC_EncodePriority+0x30>
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	3b03      	subs	r3, #3
 80044a2:	e000      	b.n	80044a6 <NVIC_EncodePriority+0x32>
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	401a      	ands	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	43d9      	mvns	r1, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	4313      	orrs	r3, r2
         );
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3724      	adds	r7, #36	@ 0x24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ec:	d301      	bcc.n	80044f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044ee:	2301      	movs	r3, #1
 80044f0:	e00f      	b.n	8004512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044f2:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <SysTick_Config+0x40>)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044fa:	210f      	movs	r1, #15
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004500:	f7ff ff8e 	bl	8004420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <SysTick_Config+0x40>)
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800450a:	4b04      	ldr	r3, [pc, #16]	@ (800451c <SysTick_Config+0x40>)
 800450c:	2207      	movs	r2, #7
 800450e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	e000e010 	.word	0xe000e010

08004520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff ff29 	bl	8004380 <__NVIC_SetPriorityGrouping>
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	4603      	mov	r3, r0
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	607a      	str	r2, [r7, #4]
 8004542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004548:	f7ff ff3e 	bl	80043c8 <__NVIC_GetPriorityGrouping>
 800454c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	6978      	ldr	r0, [r7, #20]
 8004554:	f7ff ff8e 	bl	8004474 <NVIC_EncodePriority>
 8004558:	4602      	mov	r2, r0
 800455a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff5d 	bl	8004420 <__NVIC_SetPriority>
}
 8004566:	bf00      	nop
 8004568:	3718      	adds	r7, #24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff ff31 	bl	80043e4 <__NVIC_EnableIRQ>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ffa2 	bl	80044dc <SysTick_Config>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e00e      	b.n	80045d2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	795b      	ldrb	r3, [r3, #5]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d105      	bne.n	80045ca <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fc fccf 	bl	8000f68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80045da:	b480      	push	{r7}
 80045dc:	b087      	sub	sp, #28
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80045e6:	2300      	movs	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2202      	movs	r2, #2
 80045ee:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004600:	2300      	movs	r3, #0
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e00a      	b.n	800461c <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	441a      	add	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3301      	adds	r3, #1
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d3f0      	bcc.n	8004606 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8004632:	693b      	ldr	r3, [r7, #16]
}
 8004634:	4618      	mov	r0, r3
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800464c:	f7ff f938 	bl	80038c0 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e099      	b.n	8004790 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f022 0201 	bic.w	r2, r2, #1
 800467a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800467c:	e00f      	b.n	800469e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800467e:	f7ff f91f 	bl	80038c0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b05      	cmp	r3, #5
 800468a:	d908      	bls.n	800469e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2203      	movs	r2, #3
 8004696:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e078      	b.n	8004790 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e8      	bne.n	800467e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	4b38      	ldr	r3, [pc, #224]	@ (8004798 <HAL_DMA_Init+0x158>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d107      	bne.n	8004708 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	4313      	orrs	r3, r2
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	4313      	orrs	r3, r2
 8004728:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	2b04      	cmp	r3, #4
 8004730:	d117      	bne.n	8004762 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fb01 	bl	8004d4c <DMA_CheckFifoParam>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2240      	movs	r2, #64	@ 0x40
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800475e:	2301      	movs	r3, #1
 8004760:	e016      	b.n	8004790 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fab8 	bl	8004ce0 <DMA_CalcBaseAndBitshift>
 8004770:	4603      	mov	r3, r0
 8004772:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	223f      	movs	r2, #63	@ 0x3f
 800477a:	409a      	lsls	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	f010803f 	.word	0xf010803f

0800479c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_DMA_Start_IT+0x26>
 80047be:	2302      	movs	r3, #2
 80047c0:	e040      	b.n	8004844 <HAL_DMA_Start_IT+0xa8>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d12f      	bne.n	8004836 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa4a 	bl	8004c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f4:	223f      	movs	r2, #63	@ 0x3f
 80047f6:	409a      	lsls	r2, r3
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0216 	orr.w	r2, r2, #22
 800480a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e005      	b.n	8004842 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800483e:	2302      	movs	r3, #2
 8004840:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004842:	7dfb      	ldrb	r3, [r7, #23]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004858:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800485a:	f7ff f831 	bl	80038c0 <HAL_GetTick>
 800485e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d008      	beq.n	800487e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2280      	movs	r2, #128	@ 0x80
 8004870:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e052      	b.n	8004924 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0216 	bic.w	r2, r2, #22
 800488c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695a      	ldr	r2, [r3, #20]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800489c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d103      	bne.n	80048ae <HAL_DMA_Abort+0x62>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0208 	bic.w	r2, r2, #8
 80048bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048ce:	e013      	b.n	80048f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048d0:	f7fe fff6 	bl	80038c0 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d90c      	bls.n	80048f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2203      	movs	r2, #3
 80048e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e015      	b.n	8004924 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e4      	bne.n	80048d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490a:	223f      	movs	r2, #63	@ 0x3f
 800490c:	409a      	lsls	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d004      	beq.n	800494a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2280      	movs	r2, #128	@ 0x80
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e00c      	b.n	8004964 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2205      	movs	r2, #5
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0201 	bic.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800497c:	4b8e      	ldr	r3, [pc, #568]	@ (8004bb8 <HAL_DMA_IRQHandler+0x248>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a8e      	ldr	r2, [pc, #568]	@ (8004bbc <HAL_DMA_IRQHandler+0x24c>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0a9b      	lsrs	r3, r3, #10
 8004988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499a:	2208      	movs	r2, #8
 800499c:	409a      	lsls	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d01a      	beq.n	80049dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0204 	bic.w	r2, r2, #4
 80049c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	2208      	movs	r2, #8
 80049ca:	409a      	lsls	r2, r3
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d4:	f043 0201 	orr.w	r2, r3, #1
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e0:	2201      	movs	r2, #1
 80049e2:	409a      	lsls	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d012      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fe:	2201      	movs	r2, #1
 8004a00:	409a      	lsls	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	f043 0202 	orr.w	r2, r3, #2
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a16:	2204      	movs	r2, #4
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00b      	beq.n	8004a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a34:	2204      	movs	r2, #4
 8004a36:	409a      	lsls	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	f043 0204 	orr.w	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4013      	ands	r3, r2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d043      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03c      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	409a      	lsls	r2, r3
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d018      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d024      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
 8004a9e:	e01f      	b.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01b      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
 8004ab0:	e016      	b.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d107      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0208 	bic.w	r2, r2, #8
 8004ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 808f 	beq.w	8004c10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8087 	beq.w	8004c10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b06:	2220      	movs	r2, #32
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b05      	cmp	r3, #5
 8004b18:	d136      	bne.n	8004b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0216 	bic.w	r2, r2, #22
 8004b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d103      	bne.n	8004b4a <HAL_DMA_IRQHandler+0x1da>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d007      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0208 	bic.w	r2, r2, #8
 8004b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b5e:	223f      	movs	r2, #63	@ 0x3f
 8004b60:	409a      	lsls	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d07e      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
        }
        return;
 8004b86:	e079      	b.n	8004c7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01d      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10d      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d031      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
 8004bb4:	e02c      	b.n	8004c10 <HAL_DMA_IRQHandler+0x2a0>
 8004bb6:	bf00      	nop
 8004bb8:	2000000c 	.word	0x2000000c
 8004bbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d023      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
 8004bd0:	e01e      	b.n	8004c10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10f      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0210 	bic.w	r2, r2, #16
 8004bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d032      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d022      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2205      	movs	r2, #5
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0201 	bic.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60bb      	str	r3, [r7, #8]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d307      	bcc.n	8004c58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f2      	bne.n	8004c3c <HAL_DMA_IRQHandler+0x2cc>
 8004c56:	e000      	b.n	8004c5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	4798      	blx	r3
 8004c7a:	e000      	b.n	8004c7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c7c:	bf00      	nop
    }
  }
}
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b40      	cmp	r3, #64	@ 0x40
 8004cb0:	d108      	bne.n	8004cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cc2:	e007      	b.n	8004cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	60da      	str	r2, [r3, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	3b10      	subs	r3, #16
 8004cf0:	4a14      	ldr	r2, [pc, #80]	@ (8004d44 <DMA_CalcBaseAndBitshift+0x64>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cfa:	4a13      	ldr	r2, [pc, #76]	@ (8004d48 <DMA_CalcBaseAndBitshift+0x68>)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d909      	bls.n	8004d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	1d1a      	adds	r2, r3, #4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d20:	e007      	b.n	8004d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	aaaaaaab 	.word	0xaaaaaaab
 8004d48:	0800e878 	.word	0x0800e878

08004d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11f      	bne.n	8004da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d856      	bhi.n	8004e1a <DMA_CheckFifoParam+0xce>
 8004d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <DMA_CheckFifoParam+0x28>)
 8004d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d72:	bf00      	nop
 8004d74:	08004d85 	.word	0x08004d85
 8004d78:	08004d97 	.word	0x08004d97
 8004d7c:	08004d85 	.word	0x08004d85
 8004d80:	08004e1b 	.word	0x08004e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d046      	beq.n	8004e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d94:	e043      	b.n	8004e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d9e:	d140      	bne.n	8004e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da4:	e03d      	b.n	8004e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dae:	d121      	bne.n	8004df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d837      	bhi.n	8004e26 <DMA_CheckFifoParam+0xda>
 8004db6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <DMA_CheckFifoParam+0x70>)
 8004db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbc:	08004dcd 	.word	0x08004dcd
 8004dc0:	08004dd3 	.word	0x08004dd3
 8004dc4:	08004dcd 	.word	0x08004dcd
 8004dc8:	08004de5 	.word	0x08004de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd0:	e030      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d025      	beq.n	8004e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de2:	e022      	b.n	8004e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dec:	d11f      	bne.n	8004e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004df2:	e01c      	b.n	8004e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d903      	bls.n	8004e02 <DMA_CheckFifoParam+0xb6>
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d003      	beq.n	8004e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e00:	e018      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
      break;
 8004e06:	e015      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00e      	beq.n	8004e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	73fb      	strb	r3, [r7, #15]
      break;
 8004e18:	e00b      	b.n	8004e32 <DMA_CheckFifoParam+0xe6>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e00a      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e008      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      break;
 8004e22:	bf00      	nop
 8004e24:	e006      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e004      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e002      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e2e:	bf00      	nop
 8004e30:	e000      	b.n	8004e34 <DMA_CheckFifoParam+0xe8>
      break;
 8004e32:	bf00      	nop
    }
  } 
  
  return status; 
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop

08004e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b089      	sub	sp, #36	@ 0x24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	e16b      	b.n	8005138 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e60:	2201      	movs	r2, #1
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4013      	ands	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	f040 815a 	bne.w	8005132 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d005      	beq.n	8004e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d130      	bne.n	8004ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ecc:	2201      	movs	r2, #1
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	f003 0201 	and.w	r2, r3, #1
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0303 	and.w	r3, r3, #3
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d017      	beq.n	8004f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	2203      	movs	r2, #3
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	43db      	mvns	r3, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 0303 	and.w	r3, r3, #3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d123      	bne.n	8004f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	08da      	lsrs	r2, r3, #3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3208      	adds	r2, #8
 8004f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	220f      	movs	r2, #15
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	08da      	lsrs	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3208      	adds	r2, #8
 8004f82:	69b9      	ldr	r1, [r7, #24]
 8004f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	2203      	movs	r2, #3
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 0203 	and.w	r2, r3, #3
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	69ba      	ldr	r2, [r7, #24]
 8004fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80b4 	beq.w	8005132 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <HAL_GPIO_Init+0x30c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8005150 <HAL_GPIO_Init+0x30c>)
 8004fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fda:	4b5d      	ldr	r3, [pc, #372]	@ (8005150 <HAL_GPIO_Init+0x30c>)
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8005154 <HAL_GPIO_Init+0x310>)
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	089b      	lsrs	r3, r3, #2
 8004fec:	3302      	adds	r3, #2
 8004fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a52      	ldr	r2, [pc, #328]	@ (8005158 <HAL_GPIO_Init+0x314>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02b      	beq.n	800506a <HAL_GPIO_Init+0x226>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a51      	ldr	r2, [pc, #324]	@ (800515c <HAL_GPIO_Init+0x318>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d025      	beq.n	8005066 <HAL_GPIO_Init+0x222>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a50      	ldr	r2, [pc, #320]	@ (8005160 <HAL_GPIO_Init+0x31c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01f      	beq.n	8005062 <HAL_GPIO_Init+0x21e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a4f      	ldr	r2, [pc, #316]	@ (8005164 <HAL_GPIO_Init+0x320>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d019      	beq.n	800505e <HAL_GPIO_Init+0x21a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a4e      	ldr	r2, [pc, #312]	@ (8005168 <HAL_GPIO_Init+0x324>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_GPIO_Init+0x216>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a4d      	ldr	r2, [pc, #308]	@ (800516c <HAL_GPIO_Init+0x328>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_GPIO_Init+0x212>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a4c      	ldr	r2, [pc, #304]	@ (8005170 <HAL_GPIO_Init+0x32c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <HAL_GPIO_Init+0x20e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a4b      	ldr	r2, [pc, #300]	@ (8005174 <HAL_GPIO_Init+0x330>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_GPIO_Init+0x20a>
 800504a:	2307      	movs	r3, #7
 800504c:	e00e      	b.n	800506c <HAL_GPIO_Init+0x228>
 800504e:	2308      	movs	r3, #8
 8005050:	e00c      	b.n	800506c <HAL_GPIO_Init+0x228>
 8005052:	2306      	movs	r3, #6
 8005054:	e00a      	b.n	800506c <HAL_GPIO_Init+0x228>
 8005056:	2305      	movs	r3, #5
 8005058:	e008      	b.n	800506c <HAL_GPIO_Init+0x228>
 800505a:	2304      	movs	r3, #4
 800505c:	e006      	b.n	800506c <HAL_GPIO_Init+0x228>
 800505e:	2303      	movs	r3, #3
 8005060:	e004      	b.n	800506c <HAL_GPIO_Init+0x228>
 8005062:	2302      	movs	r3, #2
 8005064:	e002      	b.n	800506c <HAL_GPIO_Init+0x228>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_GPIO_Init+0x228>
 800506a:	2300      	movs	r3, #0
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	f002 0203 	and.w	r2, r2, #3
 8005072:	0092      	lsls	r2, r2, #2
 8005074:	4093      	lsls	r3, r2
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800507c:	4935      	ldr	r1, [pc, #212]	@ (8005154 <HAL_GPIO_Init+0x310>)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	3302      	adds	r3, #2
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800508a:	4b3b      	ldr	r3, [pc, #236]	@ (8005178 <HAL_GPIO_Init+0x334>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ae:	4a32      	ldr	r2, [pc, #200]	@ (8005178 <HAL_GPIO_Init+0x334>)
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050b4:	4b30      	ldr	r3, [pc, #192]	@ (8005178 <HAL_GPIO_Init+0x334>)
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	43db      	mvns	r3, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4013      	ands	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050d8:	4a27      	ldr	r2, [pc, #156]	@ (8005178 <HAL_GPIO_Init+0x334>)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050de:	4b26      	ldr	r3, [pc, #152]	@ (8005178 <HAL_GPIO_Init+0x334>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005102:	4a1d      	ldr	r2, [pc, #116]	@ (8005178 <HAL_GPIO_Init+0x334>)
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_GPIO_Init+0x334>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800512c:	4a12      	ldr	r2, [pc, #72]	@ (8005178 <HAL_GPIO_Init+0x334>)
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3301      	adds	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	f67f ae90 	bls.w	8004e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	3724      	adds	r7, #36	@ 0x24
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800
 8005154:	40013800 	.word	0x40013800
 8005158:	40020000 	.word	0x40020000
 800515c:	40020400 	.word	0x40020400
 8005160:	40020800 	.word	0x40020800
 8005164:	40020c00 	.word	0x40020c00
 8005168:	40021000 	.word	0x40021000
 800516c:	40021400 	.word	0x40021400
 8005170:	40021800 	.word	0x40021800
 8005174:	40021c00 	.word	0x40021c00
 8005178:	40013c00 	.word	0x40013c00

0800517c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	887b      	ldrh	r3, [r7, #2]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
 8005198:	e001      	b.n	800519e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800519e:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3714      	adds	r7, #20
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	807b      	strh	r3, [r7, #2]
 80051b8:	4613      	mov	r3, r2
 80051ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051bc:	787b      	ldrb	r3, [r7, #1]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051c8:	e003      	b.n	80051d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051ca:	887b      	ldrh	r3, [r7, #2]
 80051cc:	041a      	lsls	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	619a      	str	r2, [r3, #24]
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051f0:	887a      	ldrh	r2, [r7, #2]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4013      	ands	r3, r2
 80051f6:	041a      	lsls	r2, r3, #16
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	43d9      	mvns	r1, r3
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	400b      	ands	r3, r1
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	619a      	str	r2, [r3, #24]
}
 8005206:	bf00      	nop
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
	...

08005214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800521e:	4b08      	ldr	r3, [pc, #32]	@ (8005240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	88fb      	ldrh	r3, [r7, #6]
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d006      	beq.n	8005238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800522a:	4a05      	ldr	r2, [pc, #20]	@ (8005240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800522c:	88fb      	ldrh	r3, [r7, #6]
 800522e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd f95e 	bl	80024f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40013c00 	.word	0x40013c00

08005244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e101      	b.n	800545a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fe f955 	bl	8003520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2203      	movs	r2, #3
 800527a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005284:	d102      	bne.n	800528c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f005 f900 	bl	800a496 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7c1a      	ldrb	r2, [r3, #16]
 800529e:	f88d 2000 	strb.w	r2, [sp]
 80052a2:	3304      	adds	r3, #4
 80052a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a6:	f004 ffdf 	bl	800a268 <USB_CoreInit>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0ce      	b.n	800545a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f005 f8f8 	bl	800a4b8 <USB_SetCurrentMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0bf      	b.n	800545a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e04a      	b.n	8005376 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	3315      	adds	r3, #21
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3314      	adds	r3, #20
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	b298      	uxth	r0, r3
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	332e      	adds	r3, #46	@ 0x2e
 800531c:	4602      	mov	r2, r0
 800531e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005320:	7bfa      	ldrb	r2, [r7, #15]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3318      	adds	r3, #24
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	331c      	adds	r3, #28
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	3320      	adds	r3, #32
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	3324      	adds	r3, #36	@ 0x24
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	791b      	ldrb	r3, [r3, #4]
 800537a:	7bfa      	ldrb	r2, [r7, #15]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3af      	bcc.n	80052e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e044      	b.n	8005410 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053b2:	7bfa      	ldrb	r2, [r7, #15]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3301      	adds	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	791b      	ldrb	r3, [r3, #4]
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3b5      	bcc.n	8005386 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7c1a      	ldrb	r2, [r3, #16]
 8005422:	f88d 2000 	strb.w	r2, [sp]
 8005426:	3304      	adds	r3, #4
 8005428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542a:	f005 f891 	bl	800a550 <USB_DevInit>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e00c      	b.n	800545a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f006 f8db 	bl	800b60e <USB_DevDisconnect>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <HAL_PCD_Start+0x1c>
 800547a:	2302      	movs	r3, #2
 800547c:	e022      	b.n	80054c4 <HAL_PCD_Start+0x62>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005496:	2b01      	cmp	r3, #1
 8005498:	d105      	bne.n	80054a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f004 ffe2 	bl	800a474 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f006 f889 	bl	800b5cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80054cc:	b590      	push	{r4, r7, lr}
 80054ce:	b08d      	sub	sp, #52	@ 0x34
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f006 f947 	bl	800b776 <USB_GetMode>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 848c 	bne.w	8005e08 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f006 f8ab 	bl	800b650 <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 8482 	beq.w	8005e06 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f006 f898 	bl	800b650 <USB_ReadInterrupts>
 8005520:	4603      	mov	r3, r0
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d107      	bne.n	800553a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f002 0202 	and.w	r2, r2, #2
 8005538:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f006 f886 	bl	800b650 <USB_ReadInterrupts>
 8005544:	4603      	mov	r3, r0
 8005546:	f003 0310 	and.w	r3, r3, #16
 800554a:	2b10      	cmp	r3, #16
 800554c:	d161      	bne.n	8005612 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699a      	ldr	r2, [r3, #24]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f022 0210 	bic.w	r2, r2, #16
 800555c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f003 020f 	and.w	r2, r3, #15
 800556a:	4613      	mov	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	4413      	add	r3, r2
 800557a:	3304      	adds	r3, #4
 800557c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005584:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005588:	d124      	bne.n	80055d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d035      	beq.n	8005602 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	091b      	lsrs	r3, r3, #4
 800559e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80055a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	6a38      	ldr	r0, [r7, #32]
 80055aa:	f005 febd 	bl	800b328 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ba:	441a      	add	r2, r3
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	695a      	ldr	r2, [r3, #20]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055cc:	441a      	add	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	615a      	str	r2, [r3, #20]
 80055d2:	e016      	b.n	8005602 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80055da:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80055de:	d110      	bne.n	8005602 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80055e6:	2208      	movs	r2, #8
 80055e8:	4619      	mov	r1, r3
 80055ea:	6a38      	ldr	r0, [r7, #32]
 80055ec:	f005 fe9c 	bl	800b328 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	695a      	ldr	r2, [r3, #20]
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	091b      	lsrs	r3, r3, #4
 80055f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fc:	441a      	add	r2, r3
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699a      	ldr	r2, [r3, #24]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f042 0210 	orr.w	r2, r2, #16
 8005610:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f006 f81a 	bl	800b650 <USB_ReadInterrupts>
 800561c:	4603      	mov	r3, r0
 800561e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005622:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005626:	f040 80a7 	bne.w	8005778 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800562a:	2300      	movs	r3, #0
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4618      	mov	r0, r3
 8005634:	f006 f81f 	bl	800b676 <USB_ReadDevAllOutEpInterrupt>
 8005638:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800563a:	e099      	b.n	8005770 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 808e 	beq.w	8005764 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800564e:	b2d2      	uxtb	r2, r2
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f006 f843 	bl	800b6de <USB_ReadDevOutEPInterrupt>
 8005658:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005670:	461a      	mov	r2, r3
 8005672:	2301      	movs	r3, #1
 8005674:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005676:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fe8b 	bl	8006394 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f003 0308 	and.w	r3, r3, #8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005694:	461a      	mov	r2, r3
 8005696:	2308      	movs	r3, #8
 8005698:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800569a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 ff61 	bl	8006564 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b8:	461a      	mov	r2, r3
 80056ba:	2310      	movs	r3, #16
 80056bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d030      	beq.n	800572a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d0:	2b80      	cmp	r3, #128	@ 0x80
 80056d2:	d109      	bne.n	80056e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	69fa      	ldr	r2, [r7, #28]
 80056de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80056e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ea:	4613      	mov	r3, r2
 80056ec:	00db      	lsls	r3, r3, #3
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	4413      	add	r3, r2
 80056fa:	3304      	adds	r3, #4
 80056fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	78db      	ldrb	r3, [r3, #3]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d108      	bne.n	8005718 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	b2db      	uxtb	r3, r3
 8005710:	4619      	mov	r1, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f008 f9d2 	bl	800dabc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005724:	461a      	mov	r2, r3
 8005726:	2302      	movs	r3, #2
 8005728:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f003 0320 	and.w	r3, r3, #32
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	461a      	mov	r2, r3
 8005742:	2320      	movs	r3, #32
 8005744:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800575c:	461a      	mov	r2, r3
 800575e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005762:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	3301      	adds	r3, #1
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	2b00      	cmp	r3, #0
 8005774:	f47f af62 	bne.w	800563c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f005 ff67 	bl	800b650 <USB_ReadInterrupts>
 8005782:	4603      	mov	r3, r0
 8005784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005788:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800578c:	f040 80db 	bne.w	8005946 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f005 ff88 	bl	800b6aa <USB_ReadDevAllInEpInterrupt>
 800579a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80057a0:	e0cd      	b.n	800593e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80c2 	beq.w	8005932 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f005 ffae 	bl	800b71a <USB_ReadDevInEPInterrupt>
 80057be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d057      	beq.n	800587a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	f003 030f 	and.w	r3, r3, #15
 80057d0:	2201      	movs	r2, #1
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69f9      	ldr	r1, [r7, #28]
 80057e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ea:	4013      	ands	r3, r2
 80057ec:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fa:	461a      	mov	r2, r3
 80057fc:	2301      	movs	r3, #1
 80057fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	799b      	ldrb	r3, [r3, #6]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d132      	bne.n	800586e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005808:	6879      	ldr	r1, [r7, #4]
 800580a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580c:	4613      	mov	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	3320      	adds	r3, #32
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4403      	add	r3, r0
 8005828:	331c      	adds	r3, #28
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4419      	add	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4403      	add	r3, r0
 800583c:	3320      	adds	r3, #32
 800583e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	d113      	bne.n	800586e <HAL_PCD_IRQHandler+0x3a2>
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	440b      	add	r3, r1
 8005854:	3324      	adds	r3, #36	@ 0x24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d108      	bne.n	800586e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005866:	461a      	mov	r2, r3
 8005868:	2101      	movs	r1, #1
 800586a:	f005 ffb5 	bl	800b7d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	b2db      	uxtb	r3, r3
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f008 f89c 	bl	800d9b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005890:	461a      	mov	r2, r3
 8005892:	2308      	movs	r3, #8
 8005894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d008      	beq.n	80058b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ac:	461a      	mov	r2, r3
 80058ae:	2310      	movs	r3, #16
 80058b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	461a      	mov	r2, r3
 80058ca:	2340      	movs	r3, #64	@ 0x40
 80058cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d023      	beq.n	8005920 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80058d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058da:	6a38      	ldr	r0, [r7, #32]
 80058dc:	f004 ff9c 	bl	800a818 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80058e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e2:	4613      	mov	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4413      	add	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	3310      	adds	r3, #16
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	3304      	adds	r3, #4
 80058f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	78db      	ldrb	r3, [r3, #3]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d108      	bne.n	800590e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2200      	movs	r2, #0
 8005900:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	b2db      	uxtb	r3, r3
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f008 f8e9 	bl	800dae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591a:	461a      	mov	r2, r3
 800591c:	2302      	movs	r3, #2
 800591e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800592a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fca5 	bl	800627c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	3301      	adds	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	085b      	lsrs	r3, r3, #1
 800593c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	2b00      	cmp	r3, #0
 8005942:	f47f af2e 	bne.w	80057a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4618      	mov	r0, r3
 800594c:	f005 fe80 	bl	800b650 <USB_ReadInterrupts>
 8005950:	4603      	mov	r3, r0
 8005952:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005956:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800595a:	d122      	bne.n	80059a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005976:	2b01      	cmp	r3, #1
 8005978:	d108      	bne.n	800598c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005982:	2100      	movs	r1, #0
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fe8b 	bl	80066a0 <HAL_PCDEx_LPM_Callback>
 800598a:	e002      	b.n	8005992 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f008 f887 	bl	800daa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80059a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f005 fe52 	bl	800b650 <USB_ReadInterrupts>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059b6:	d112      	bne.n	80059de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d102      	bne.n	80059ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f008 f843 	bl	800da54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80059dc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f005 fe34 	bl	800b650 <USB_ReadInterrupts>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f2:	f040 80b7 	bne.w	8005b64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2110      	movs	r1, #16
 8005a10:	4618      	mov	r0, r3
 8005a12:	f004 ff01 	bl	800a818 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a1a:	e046      	b.n	8005aaa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005aa2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	791b      	ldrb	r3, [r3, #4]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d3b2      	bcc.n	8005a1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005ac8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7bdb      	ldrb	r3, [r3, #15]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae2:	f043 030b 	orr.w	r3, r3, #11
 8005ae6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005af8:	f043 030b 	orr.w	r3, r3, #11
 8005afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005afe:	e015      	b.n	8005b2c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b0e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005b12:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005b16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b26:	f043 030b 	orr.w	r3, r3, #11
 8005b2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005b3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f005 fe42 	bl	800b7d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f005 fd71 	bl	800b650 <USB_ReadInterrupts>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b78:	d123      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f005 fe07 	bl	800b792 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f004 febe 	bl	800a90a <USB_GetDevSpeed>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681c      	ldr	r4, [r3, #0]
 8005b9a:	f001 f9f1 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8005b9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f004 fbc2 	bl	800a330 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f007 ff28 	bl	800da02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f005 fd42 	bl	800b650 <USB_ReadInterrupts>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d10a      	bne.n	8005bec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f007 ff05 	bl	800d9e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695a      	ldr	r2, [r3, #20]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f002 0208 	and.w	r2, r2, #8
 8005bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f005 fd2d 	bl	800b650 <USB_ReadInterrupts>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfc:	2b80      	cmp	r3, #128	@ 0x80
 8005bfe:	d123      	bne.n	8005c48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c10:	e014      	b.n	8005c3c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	4619      	mov	r1, r3
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 faf2 	bl	800621a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	3301      	adds	r3, #1
 8005c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	791b      	ldrb	r3, [r3, #4]
 8005c40:	461a      	mov	r2, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d3e4      	bcc.n	8005c12 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f005 fcff 	bl	800b650 <USB_ReadInterrupts>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c5c:	d13c      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c5e:	2301      	movs	r3, #1
 8005c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c62:	e02b      	b.n	8005cbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	3318      	adds	r3, #24
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d115      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da12      	bge.n	8005cb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c94:	4613      	mov	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3317      	adds	r3, #23
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fab2 	bl	800621a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	3301      	adds	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	791b      	ldrb	r3, [r3, #4]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d3cd      	bcc.n	8005c64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f005 fcb7 	bl	800b650 <USB_ReadInterrupts>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ce8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cec:	d156      	bne.n	8005d9c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cee:	2301      	movs	r3, #1
 8005cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf2:	e045      	b.n	8005d80 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d08:	4613      	mov	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d12e      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	da2b      	bge.n	8005d7a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	0c1a      	lsrs	r2, r3, #16
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005d2c:	4053      	eors	r3, r2
 8005d2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d121      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d76:	6053      	str	r3, [r2, #4]
            break;
 8005d78:	e008      	b.n	8005d8c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	791b      	ldrb	r3, [r3, #4]
 8005d84:	461a      	mov	r2, r3
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d3b3      	bcc.n	8005cf4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005d9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f005 fc55 	bl	800b650 <USB_ReadInterrupts>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db0:	d10a      	bne.n	8005dc8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f007 fea6 	bl	800db04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f005 fc3f 	bl	800b650 <USB_ReadInterrupts>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d115      	bne.n	8005e08 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d002      	beq.n	8005df4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f007 fe96 	bl	800db20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6859      	ldr	r1, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	e000      	b.n	8005e08 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005e06:	bf00      	nop
    }
  }
}
 8005e08:	3734      	adds	r7, #52	@ 0x34
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd90      	pop	{r4, r7, pc}

08005e0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	460b      	mov	r3, r1
 8005e18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_PCD_SetAddress+0x1a>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e012      	b.n	8005e4e <HAL_PCD_SetAddress+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	78fa      	ldrb	r2, [r7, #3]
 8005e34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f005 fb9e 	bl	800b580 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	4608      	mov	r0, r1
 8005e60:	4611      	mov	r1, r2
 8005e62:	461a      	mov	r2, r3
 8005e64:	4603      	mov	r3, r0
 8005e66:	70fb      	strb	r3, [r7, #3]
 8005e68:	460b      	mov	r3, r1
 8005e6a:	803b      	strh	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	da0f      	bge.n	8005e9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e7c:	78fb      	ldrb	r3, [r7, #3]
 8005e7e:	f003 020f 	and.w	r2, r3, #15
 8005e82:	4613      	mov	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	3310      	adds	r3, #16
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4413      	add	r3, r2
 8005e90:	3304      	adds	r3, #4
 8005e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	705a      	strb	r2, [r3, #1]
 8005e9a:	e00f      	b.n	8005ebc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005ec8:	883b      	ldrh	r3, [r7, #0]
 8005eca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	78ba      	ldrb	r2, [r7, #2]
 8005ed6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	785b      	ldrb	r3, [r3, #1]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005eea:	78bb      	ldrb	r3, [r7, #2]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d102      	bne.n	8005ef6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_PCD_EP_Open+0xae>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e00e      	b.n	8005f22 <HAL_PCD_EP_Open+0xcc>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 fd1e 	bl	800a954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005f20:	7afb      	ldrb	r3, [r7, #11]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da0f      	bge.n	8005f5e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	4413      	add	r3, r2
 8005f52:	3304      	adds	r3, #4
 8005f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	705a      	strb	r2, [r3, #1]
 8005f5c:	e00f      	b.n	8005f7e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 020f 	and.w	r2, r3, #15
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	4413      	add	r3, r2
 8005f74:	3304      	adds	r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f7e:	78fb      	ldrb	r3, [r7, #3]
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d101      	bne.n	8005f98 <HAL_PCD_EP_Close+0x6e>
 8005f94:	2302      	movs	r3, #2
 8005f96:	e00e      	b.n	8005fb6 <HAL_PCD_EP_Close+0x8c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68f9      	ldr	r1, [r7, #12]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f004 fd5c 	bl	800aa64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fce:	7afb      	ldrb	r3, [r7, #11]
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006000:	7afb      	ldrb	r3, [r7, #11]
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	b2da      	uxtb	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	799b      	ldrb	r3, [r3, #6]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d102      	bne.n	800601a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	799b      	ldrb	r3, [r3, #6]
 8006022:	461a      	mov	r2, r3
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	f004 fdf9 	bl	800ac1c <USB_EPStartXfer>

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3718      	adds	r7, #24
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	460b      	mov	r3, r1
 8006042:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	f003 020f 	and.w	r2, r3, #15
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	3310      	adds	r3, #16
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	3304      	adds	r3, #4
 800605a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2201      	movs	r2, #1
 8006072:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	f003 030f 	and.w	r3, r3, #15
 800607a:	b2da      	uxtb	r2, r3
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	799b      	ldrb	r3, [r3, #6]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d102      	bne.n	800608e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	799b      	ldrb	r3, [r3, #6]
 8006096:	461a      	mov	r2, r3
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	f004 fdbf 	bl	800ac1c <USB_EPStartXfer>

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060b4:	78fb      	ldrb	r3, [r7, #3]
 80060b6:	f003 030f 	and.w	r3, r3, #15
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	7912      	ldrb	r2, [r2, #4]
 80060be:	4293      	cmp	r3, r2
 80060c0:	d901      	bls.n	80060c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e04f      	b.n	8006166 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	da0f      	bge.n	80060ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	f003 020f 	and.w	r2, r3, #15
 80060d4:	4613      	mov	r3, r2
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	3310      	adds	r3, #16
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	3304      	adds	r3, #4
 80060e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	705a      	strb	r2, [r3, #1]
 80060ec:	e00d      	b.n	800610a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	4613      	mov	r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	3304      	adds	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	f003 030f 	and.w	r3, r3, #15
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_PCD_EP_SetStall+0x82>
 8006126:	2302      	movs	r3, #2
 8006128:	e01d      	b.n	8006166 <HAL_PCD_EP_SetStall+0xbe>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	4618      	mov	r0, r3
 800613a:	f005 f94d 	bl	800b3d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7999      	ldrb	r1, [r3, #6]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006156:	461a      	mov	r2, r3
 8006158:	f005 fb3e 	bl	800b7d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 030f 	and.w	r3, r3, #15
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	7912      	ldrb	r2, [r2, #4]
 8006184:	4293      	cmp	r3, r2
 8006186:	d901      	bls.n	800618c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e042      	b.n	8006212 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800618c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006190:	2b00      	cmp	r3, #0
 8006192:	da0f      	bge.n	80061b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	f003 020f 	and.w	r2, r3, #15
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	3310      	adds	r3, #16
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	4413      	add	r3, r2
 80061a8:	3304      	adds	r3, #4
 80061aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	705a      	strb	r2, [r3, #1]
 80061b2:	e00f      	b.n	80061d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061b4:	78fb      	ldrb	r3, [r7, #3]
 80061b6:	f003 020f 	and.w	r2, r3, #15
 80061ba:	4613      	mov	r3, r2
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	3304      	adds	r3, #4
 80061cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_PCD_EP_ClrStall+0x86>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e00e      	b.n	8006212 <HAL_PCD_EP_ClrStall+0xa4>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	4618      	mov	r0, r3
 8006204:	f005 f956 	bl	800b4b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800622a:	2b00      	cmp	r3, #0
 800622c:	da0c      	bge.n	8006248 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	4613      	mov	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	3310      	adds	r3, #16
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	3304      	adds	r3, #4
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e00c      	b.n	8006262 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	4613      	mov	r3, r2
 8006250:	00db      	lsls	r3, r3, #3
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	4618      	mov	r0, r3
 800626a:	f004 ff75 	bl	800b158 <USB_EPStopXfer>
 800626e:	4603      	mov	r3, r0
 8006270:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006272:	7afb      	ldrb	r3, [r7, #11]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006290:	683a      	ldr	r2, [r7, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	3310      	adds	r3, #16
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	4413      	add	r3, r2
 80062a0:	3304      	adds	r3, #4
 80062a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	695a      	ldr	r2, [r3, #20]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d901      	bls.n	80062b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e06b      	b.n	800638c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d902      	bls.n	80062d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	3303      	adds	r3, #3
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062d8:	e02a      	b.n	8006330 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d902      	bls.n	80062f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3303      	adds	r3, #3
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	68d9      	ldr	r1, [r3, #12]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4603      	mov	r3, r0
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f004 ffca 	bl	800b2ac <USB_WritePacket>

    ep->xfer_buff  += len;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	441a      	add	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	441a      	add	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	429a      	cmp	r2, r3
 8006344:	d809      	bhi.n	800635a <PCD_WriteEmptyTxFifo+0xde>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	695a      	ldr	r2, [r3, #20]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800634e:	429a      	cmp	r2, r3
 8006350:	d203      	bcs.n	800635a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1bf      	bne.n	80062da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	429a      	cmp	r2, r3
 8006364:	d811      	bhi.n	800638a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	2201      	movs	r2, #1
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	43db      	mvns	r3, r3
 8006380:	6939      	ldr	r1, [r7, #16]
 8006382:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006386:	4013      	ands	r3, r2
 8006388:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	333c      	adds	r3, #60	@ 0x3c
 80063ac:	3304      	adds	r3, #4
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	799b      	ldrb	r3, [r3, #6]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d17b      	bne.n	80064c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d015      	beq.n	8006400 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4a61      	ldr	r2, [pc, #388]	@ (800655c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	f240 80b9 	bls.w	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80b3 	beq.w	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f6:	461a      	mov	r2, r3
 80063f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fc:	6093      	str	r3, [r2, #8]
 80063fe:	e0a7      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f003 0320 	and.w	r3, r3, #32
 8006406:	2b00      	cmp	r3, #0
 8006408:	d009      	beq.n	800641e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	461a      	mov	r2, r3
 8006418:	2320      	movs	r3, #32
 800641a:	6093      	str	r3, [r2, #8]
 800641c:	e098      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006424:	2b00      	cmp	r3, #0
 8006426:	f040 8093 	bne.w	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4a4b      	ldr	r2, [pc, #300]	@ (800655c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d90f      	bls.n	8006452 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006448:	461a      	mov	r2, r3
 800644a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800644e:	6093      	str	r3, [r2, #8]
 8006450:	e07e      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	4413      	add	r3, r2
 8006464:	3304      	adds	r3, #4
 8006466:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	0159      	lsls	r1, r3, #5
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	440b      	add	r3, r1
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647e:	1ad2      	subs	r2, r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d114      	bne.n	80064b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800649c:	461a      	mov	r2, r3
 800649e:	2101      	movs	r1, #1
 80064a0:	f005 f99a 	bl	800b7d8 <USB_EP0_OutStart>
 80064a4:	e006      	b.n	80064b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	441a      	add	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f007 fa5e 	bl	800d97c <HAL_PCD_DataOutStageCallback>
 80064c0:	e046      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4a26      	ldr	r2, [pc, #152]	@ (8006560 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d124      	bne.n	8006514 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064e0:	461a      	mov	r2, r3
 80064e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064e6:	6093      	str	r3, [r2, #8]
 80064e8:	e032      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f003 0320 	and.w	r3, r3, #32
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d008      	beq.n	8006506 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	2320      	movs	r3, #32
 8006504:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f007 fa35 	bl	800d97c <HAL_PCD_DataOutStageCallback>
 8006512:	e01d      	b.n	8006550 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d114      	bne.n	8006544 <PCD_EP_OutXfrComplete_int+0x1b0>
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d108      	bne.n	8006544 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800653c:	461a      	mov	r2, r3
 800653e:	2100      	movs	r1, #0
 8006540:	f005 f94a 	bl	800b7d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f007 fa16 	bl	800d97c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	4f54300a 	.word	0x4f54300a
 8006560:	4f54310a 	.word	0x4f54310a

08006564 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	333c      	adds	r3, #60	@ 0x3c
 800657c:	3304      	adds	r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4a15      	ldr	r2, [pc, #84]	@ (80065ec <PCD_EP_OutSetupPacket_int+0x88>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d90e      	bls.n	80065b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d009      	beq.n	80065b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b0:	461a      	mov	r2, r3
 80065b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f007 f9cd 	bl	800d958 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a0a      	ldr	r2, [pc, #40]	@ (80065ec <PCD_EP_OutSetupPacket_int+0x88>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d90c      	bls.n	80065e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	799b      	ldrb	r3, [r3, #6]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d108      	bne.n	80065e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065d8:	461a      	mov	r2, r3
 80065da:	2101      	movs	r1, #1
 80065dc:	f005 f8fc 	bl	800b7d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	4f54300a 	.word	0x4f54300a

080065f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
 80065fc:	4613      	mov	r3, r2
 80065fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800660e:	883b      	ldrh	r3, [r7, #0]
 8006610:	0419      	lsls	r1, r3, #16
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	430a      	orrs	r2, r1
 800661a:	629a      	str	r2, [r3, #40]	@ 0x28
 800661c:	e028      	b.n	8006670 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006624:	0c1b      	lsrs	r3, r3, #16
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4413      	add	r3, r2
 800662a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
 8006630:	e00d      	b.n	800664e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	3340      	adds	r3, #64	@ 0x40
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	4413      	add	r3, r2
 8006646:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	3301      	adds	r3, #1
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	7bfa      	ldrb	r2, [r7, #15]
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	3b01      	subs	r3, #1
 8006654:	429a      	cmp	r2, r3
 8006656:	d3ec      	bcc.n	8006632 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006658:	883b      	ldrh	r3, [r7, #0]
 800665a:	0418      	lsls	r0, r3, #16
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6819      	ldr	r1, [r3, #0]
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	3b01      	subs	r3, #1
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	4302      	orrs	r2, r0
 8006668:	3340      	adds	r3, #64	@ 0x40
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	887a      	ldrh	r2, [r7, #2]
 8006690:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e267      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d075      	beq.n	80067c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066d6:	4b88      	ldr	r3, [pc, #544]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00c      	beq.n	80066fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066e2:	4b85      	ldr	r3, [pc, #532]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d112      	bne.n	8006714 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066ee:	4b82      	ldr	r3, [pc, #520]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066fa:	d10b      	bne.n	8006714 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fc:	4b7e      	ldr	r3, [pc, #504]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d05b      	beq.n	80067c0 <HAL_RCC_OscConfig+0x108>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d157      	bne.n	80067c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e242      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800671c:	d106      	bne.n	800672c <HAL_RCC_OscConfig+0x74>
 800671e:	4b76      	ldr	r3, [pc, #472]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a75      	ldr	r2, [pc, #468]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006728:	6013      	str	r3, [r2, #0]
 800672a:	e01d      	b.n	8006768 <HAL_RCC_OscConfig+0xb0>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0x98>
 8006736:	4b70      	ldr	r3, [pc, #448]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a6f      	ldr	r2, [pc, #444]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800673c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	4b6d      	ldr	r3, [pc, #436]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6c      	ldr	r2, [pc, #432]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0xb0>
 8006750:	4b69      	ldr	r3, [pc, #420]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a68      	ldr	r2, [pc, #416]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800675a:	6013      	str	r3, [r2, #0]
 800675c:	4b66      	ldr	r3, [pc, #408]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a65      	ldr	r2, [pc, #404]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006762:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d013      	beq.n	8006798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7fd f8a6 	bl	80038c0 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fd f8a2 	bl	80038c0 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	@ 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e207      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678a:	4b5b      	ldr	r3, [pc, #364]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f0      	beq.n	8006778 <HAL_RCC_OscConfig+0xc0>
 8006796:	e014      	b.n	80067c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006798:	f7fd f892 	bl	80038c0 <HAL_GetTick>
 800679c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800679e:	e008      	b.n	80067b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a0:	f7fd f88e 	bl	80038c0 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	2b64      	cmp	r3, #100	@ 0x64
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e1f3      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b2:	4b51      	ldr	r3, [pc, #324]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f0      	bne.n	80067a0 <HAL_RCC_OscConfig+0xe8>
 80067be:	e000      	b.n	80067c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d063      	beq.n	8006896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067ce:	4b4a      	ldr	r3, [pc, #296]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 030c 	and.w	r3, r3, #12
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067da:	4b47      	ldr	r3, [pc, #284]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d11c      	bne.n	8006820 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067e6:	4b44      	ldr	r3, [pc, #272]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d116      	bne.n	8006820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f2:	4b41      	ldr	r3, [pc, #260]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d005      	beq.n	800680a <HAL_RCC_OscConfig+0x152>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d001      	beq.n	800680a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e1c7      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	4b3b      	ldr	r3, [pc, #236]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4937      	ldr	r1, [pc, #220]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800681a:	4313      	orrs	r3, r2
 800681c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800681e:	e03a      	b.n	8006896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d020      	beq.n	800686a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006828:	4b34      	ldr	r3, [pc, #208]	@ (80068fc <HAL_RCC_OscConfig+0x244>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7fd f847 	bl	80038c0 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006834:	e008      	b.n	8006848 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006836:	f7fd f843 	bl	80038c0 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2b02      	cmp	r3, #2
 8006842:	d901      	bls.n	8006848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e1a8      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006848:	4b2b      	ldr	r3, [pc, #172]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0f0      	beq.n	8006836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006854:	4b28      	ldr	r3, [pc, #160]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	4925      	ldr	r1, [pc, #148]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 8006864:	4313      	orrs	r3, r2
 8006866:	600b      	str	r3, [r1, #0]
 8006868:	e015      	b.n	8006896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686a:	4b24      	ldr	r3, [pc, #144]	@ (80068fc <HAL_RCC_OscConfig+0x244>)
 800686c:	2200      	movs	r2, #0
 800686e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006870:	f7fd f826 	bl	80038c0 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006878:	f7fd f822 	bl	80038c0 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e187      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688a:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d036      	beq.n	8006910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d016      	beq.n	80068d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068aa:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <HAL_RCC_OscConfig+0x248>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b0:	f7fd f806 	bl	80038c0 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068b8:	f7fd f802 	bl	80038c0 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e167      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ca:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <HAL_RCC_OscConfig+0x240>)
 80068cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0x200>
 80068d6:	e01b      	b.n	8006910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068d8:	4b09      	ldr	r3, [pc, #36]	@ (8006900 <HAL_RCC_OscConfig+0x248>)
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068de:	f7fc ffef 	bl	80038c0 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e4:	e00e      	b.n	8006904 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068e6:	f7fc ffeb 	bl	80038c0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d907      	bls.n	8006904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e150      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
 80068f8:	40023800 	.word	0x40023800
 80068fc:	42470000 	.word	0x42470000
 8006900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006904:	4b88      	ldr	r3, [pc, #544]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1ea      	bne.n	80068e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	f000 8097 	beq.w	8006a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800691e:	2300      	movs	r3, #0
 8006920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006922:	4b81      	ldr	r3, [pc, #516]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10f      	bne.n	800694e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	60bb      	str	r3, [r7, #8]
 8006932:	4b7d      	ldr	r3, [pc, #500]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006936:	4a7c      	ldr	r2, [pc, #496]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800693c:	6413      	str	r3, [r2, #64]	@ 0x40
 800693e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006946:	60bb      	str	r3, [r7, #8]
 8006948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800694e:	4b77      	ldr	r3, [pc, #476]	@ (8006b2c <HAL_RCC_OscConfig+0x474>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006956:	2b00      	cmp	r3, #0
 8006958:	d118      	bne.n	800698c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800695a:	4b74      	ldr	r3, [pc, #464]	@ (8006b2c <HAL_RCC_OscConfig+0x474>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a73      	ldr	r2, [pc, #460]	@ (8006b2c <HAL_RCC_OscConfig+0x474>)
 8006960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006966:	f7fc ffab 	bl	80038c0 <HAL_GetTick>
 800696a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800696c:	e008      	b.n	8006980 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800696e:	f7fc ffa7 	bl	80038c0 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e10c      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006980:	4b6a      	ldr	r3, [pc, #424]	@ (8006b2c <HAL_RCC_OscConfig+0x474>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0f0      	beq.n	800696e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	2b01      	cmp	r3, #1
 8006992:	d106      	bne.n	80069a2 <HAL_RCC_OscConfig+0x2ea>
 8006994:	4b64      	ldr	r3, [pc, #400]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006998:	4a63      	ldr	r2, [pc, #396]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a0:	e01c      	b.n	80069dc <HAL_RCC_OscConfig+0x324>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	2b05      	cmp	r3, #5
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCC_OscConfig+0x30c>
 80069aa:	4b5f      	ldr	r3, [pc, #380]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069b0:	f043 0304 	orr.w	r3, r3, #4
 80069b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80069b6:	4b5c      	ldr	r3, [pc, #368]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ba:	4a5b      	ldr	r2, [pc, #364]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80069c2:	e00b      	b.n	80069dc <HAL_RCC_OscConfig+0x324>
 80069c4:	4b58      	ldr	r3, [pc, #352]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069c8:	4a57      	ldr	r2, [pc, #348]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80069d0:	4b55      	ldr	r3, [pc, #340]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d4:	4a54      	ldr	r2, [pc, #336]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 80069d6:	f023 0304 	bic.w	r3, r3, #4
 80069da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d015      	beq.n	8006a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e4:	f7fc ff6c 	bl	80038c0 <HAL_GetTick>
 80069e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ea:	e00a      	b.n	8006a02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ec:	f7fc ff68 	bl	80038c0 <HAL_GetTick>
 80069f0:	4602      	mov	r2, r0
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d901      	bls.n	8006a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e0cb      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a02:	4b49      	ldr	r3, [pc, #292]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0ee      	beq.n	80069ec <HAL_RCC_OscConfig+0x334>
 8006a0e:	e014      	b.n	8006a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a10:	f7fc ff56 	bl	80038c0 <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a16:	e00a      	b.n	8006a2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a18:	f7fc ff52 	bl	80038c0 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e0b5      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1ee      	bne.n	8006a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d105      	bne.n	8006a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a40:	4b39      	ldr	r3, [pc, #228]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	4a38      	ldr	r2, [pc, #224]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a1 	beq.w	8006b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a56:	4b34      	ldr	r3, [pc, #208]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	f003 030c 	and.w	r3, r3, #12
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d05c      	beq.n	8006b1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d141      	bne.n	8006aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6a:	4b31      	ldr	r3, [pc, #196]	@ (8006b30 <HAL_RCC_OscConfig+0x478>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a70:	f7fc ff26 	bl	80038c0 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a78:	f7fc ff22 	bl	80038c0 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e087      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a8a:	4b27      	ldr	r3, [pc, #156]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69da      	ldr	r2, [r3, #28]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab8:	061b      	lsls	r3, r3, #24
 8006aba:	491b      	ldr	r1, [pc, #108]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8006b30 <HAL_RCC_OscConfig+0x478>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac6:	f7fc fefb 	bl	80038c0 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ace:	f7fc fef7 	bl	80038c0 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e05c      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ae0:	4b11      	ldr	r3, [pc, #68]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x416>
 8006aec:	e054      	b.n	8006b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aee:	4b10      	ldr	r3, [pc, #64]	@ (8006b30 <HAL_RCC_OscConfig+0x478>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af4:	f7fc fee4 	bl	80038c0 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006afc:	f7fc fee0 	bl	80038c0 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e045      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b0e:	4b06      	ldr	r3, [pc, #24]	@ (8006b28 <HAL_RCC_OscConfig+0x470>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x444>
 8006b1a:	e03d      	b.n	8006b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d107      	bne.n	8006b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e038      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40007000 	.word	0x40007000
 8006b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b34:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba4 <HAL_RCC_OscConfig+0x4ec>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d028      	beq.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d121      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d11a      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d111      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d107      	bne.n	8006b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	40023800 	.word	0x40023800

08006ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0cc      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bbc:	4b68      	ldr	r3, [pc, #416]	@ (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d90c      	bls.n	8006be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bca:	4b65      	ldr	r3, [pc, #404]	@ (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd2:	4b63      	ldr	r3, [pc, #396]	@ (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d001      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0b8      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d020      	beq.n	8006c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bfc:	4b59      	ldr	r3, [pc, #356]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	4a58      	ldr	r2, [pc, #352]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006c06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0308 	and.w	r3, r3, #8
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c14:	4b53      	ldr	r3, [pc, #332]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4a52      	ldr	r2, [pc, #328]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c20:	4b50      	ldr	r3, [pc, #320]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	494d      	ldr	r1, [pc, #308]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d044      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d107      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c46:	4b47      	ldr	r3, [pc, #284]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d119      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e07f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d107      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c66:	4b3f      	ldr	r3, [pc, #252]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e06f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c76:	4b3b      	ldr	r3, [pc, #236]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e067      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c86:	4b37      	ldr	r3, [pc, #220]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f023 0203 	bic.w	r2, r3, #3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	4934      	ldr	r1, [pc, #208]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c98:	f7fc fe12 	bl	80038c0 <HAL_GetTick>
 8006c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca0:	f7fc fe0e 	bl	80038c0 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e04f      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 020c 	and.w	r2, r3, #12
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d1eb      	bne.n	8006ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cc8:	4b25      	ldr	r3, [pc, #148]	@ (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d20c      	bcs.n	8006cf0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd6:	4b22      	ldr	r3, [pc, #136]	@ (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cde:	4b20      	ldr	r3, [pc, #128]	@ (8006d60 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e032      	b.n	8006d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0304 	and.w	r3, r3, #4
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d008      	beq.n	8006d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cfc:	4b19      	ldr	r3, [pc, #100]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	4916      	ldr	r1, [pc, #88]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0308 	and.w	r3, r3, #8
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d009      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d1a:	4b12      	ldr	r3, [pc, #72]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	490e      	ldr	r1, [pc, #56]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d2e:	f000 f821 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006d32:	4602      	mov	r2, r0
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	091b      	lsrs	r3, r3, #4
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	490a      	ldr	r1, [pc, #40]	@ (8006d68 <HAL_RCC_ClockConfig+0x1c0>)
 8006d40:	5ccb      	ldrb	r3, [r1, r3]
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	4a09      	ldr	r2, [pc, #36]	@ (8006d6c <HAL_RCC_ClockConfig+0x1c4>)
 8006d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d4a:	4b09      	ldr	r3, [pc, #36]	@ (8006d70 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fc fd72 	bl	8003838 <HAL_InitTick>

  return HAL_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40023c00 	.word	0x40023c00
 8006d64:	40023800 	.word	0x40023800
 8006d68:	0800e860 	.word	0x0800e860
 8006d6c:	2000000c 	.word	0x2000000c
 8006d70:	20000010 	.word	0x20000010

08006d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d78:	b094      	sub	sp, #80	@ 0x50
 8006d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d8c:	4b79      	ldr	r3, [pc, #484]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f003 030c 	and.w	r3, r3, #12
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d00d      	beq.n	8006db4 <HAL_RCC_GetSysClockFreq+0x40>
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	f200 80e1 	bhi.w	8006f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <HAL_RCC_GetSysClockFreq+0x34>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d003      	beq.n	8006dae <HAL_RCC_GetSysClockFreq+0x3a>
 8006da6:	e0db      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006da8:	4b73      	ldr	r3, [pc, #460]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006daa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dac:	e0db      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dae:	4b73      	ldr	r3, [pc, #460]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8006db0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006db2:	e0d8      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db4:	4b6f      	ldr	r3, [pc, #444]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dbc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d063      	beq.n	8006e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dca:	4b6a      	ldr	r3, [pc, #424]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ddc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dde:	2300      	movs	r3, #0
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	0159      	lsls	r1, r3, #5
 8006df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df8:	0150      	lsls	r0, r2, #5
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4621      	mov	r1, r4
 8006e00:	1a51      	subs	r1, r2, r1
 8006e02:	6139      	str	r1, [r7, #16]
 8006e04:	4629      	mov	r1, r5
 8006e06:	eb63 0301 	sbc.w	r3, r3, r1
 8006e0a:	617b      	str	r3, [r7, #20]
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e18:	4659      	mov	r1, fp
 8006e1a:	018b      	lsls	r3, r1, #6
 8006e1c:	4651      	mov	r1, sl
 8006e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e22:	4651      	mov	r1, sl
 8006e24:	018a      	lsls	r2, r1, #6
 8006e26:	4651      	mov	r1, sl
 8006e28:	ebb2 0801 	subs.w	r8, r2, r1
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e46:	4690      	mov	r8, r2
 8006e48:	4699      	mov	r9, r3
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	eb18 0303 	adds.w	r3, r8, r3
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	462b      	mov	r3, r5
 8006e54:	eb49 0303 	adc.w	r3, r9, r3
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e66:	4629      	mov	r1, r5
 8006e68:	024b      	lsls	r3, r1, #9
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e70:	4621      	mov	r1, r4
 8006e72:	024a      	lsls	r2, r1, #9
 8006e74:	4610      	mov	r0, r2
 8006e76:	4619      	mov	r1, r3
 8006e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e84:	f7f9 f9f4 	bl	8000270 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e90:	e058      	b.n	8006f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e92:	4b38      	ldr	r3, [pc, #224]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	099b      	lsrs	r3, r3, #6
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ea2:	623b      	str	r3, [r7, #32]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	f04f 0000 	mov.w	r0, #0
 8006eb4:	f04f 0100 	mov.w	r1, #0
 8006eb8:	0159      	lsls	r1, r3, #5
 8006eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ebe:	0150      	lsls	r0, r2, #5
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006eca:	4649      	mov	r1, r9
 8006ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8006ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	00eb      	lsls	r3, r5, #3
 8006ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006efa:	00e2      	lsls	r2, r4, #3
 8006efc:	4614      	mov	r4, r2
 8006efe:	461d      	mov	r5, r3
 8006f00:	4643      	mov	r3, r8
 8006f02:	18e3      	adds	r3, r4, r3
 8006f04:	603b      	str	r3, [r7, #0]
 8006f06:	464b      	mov	r3, r9
 8006f08:	eb45 0303 	adc.w	r3, r5, r3
 8006f0c:	607b      	str	r3, [r7, #4]
 8006f0e:	f04f 0200 	mov.w	r2, #0
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	028b      	lsls	r3, r1, #10
 8006f1e:	4621      	mov	r1, r4
 8006f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f24:	4621      	mov	r1, r4
 8006f26:	028a      	lsls	r2, r1, #10
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f2e:	2200      	movs	r2, #0
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	61fa      	str	r2, [r7, #28]
 8006f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f38:	f7f9 f99a 	bl	8000270 <__aeabi_uldivmod>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4613      	mov	r3, r2
 8006f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006f44:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	3301      	adds	r3, #1
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006f54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f5e:	e002      	b.n	8006f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f60:	4b05      	ldr	r3, [pc, #20]	@ (8006f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3750      	adds	r7, #80	@ 0x50
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f72:	bf00      	nop
 8006f74:	40023800 	.word	0x40023800
 8006f78:	00f42400 	.word	0x00f42400
 8006f7c:	007a1200 	.word	0x007a1200

08006f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f84:	4b03      	ldr	r3, [pc, #12]	@ (8006f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f86:	681b      	ldr	r3, [r3, #0]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000000c 	.word	0x2000000c

08006f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f9c:	f7ff fff0 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	0a9b      	lsrs	r3, r3, #10
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	4903      	ldr	r1, [pc, #12]	@ (8006fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fae:	5ccb      	ldrb	r3, [r1, r3]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	0800e870 	.word	0x0800e870

08006fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fc4:	f7ff ffdc 	bl	8006f80 <HAL_RCC_GetHCLKFreq>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	0b5b      	lsrs	r3, r3, #13
 8006fd0:	f003 0307 	and.w	r3, r3, #7
 8006fd4:	4903      	ldr	r1, [pc, #12]	@ (8006fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fd6:	5ccb      	ldrb	r3, [r1, r3]
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	40023800 	.word	0x40023800
 8006fe4:	0800e870 	.word	0x0800e870

08006fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e07b      	b.n	80070f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d108      	bne.n	8007014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800700a:	d009      	beq.n	8007020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	61da      	str	r2, [r3, #28]
 8007012:	e005      	b.n	8007020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fb faa6 	bl	800258c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2202      	movs	r2, #2
 8007044:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	431a      	orrs	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	431a      	orrs	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007090:	431a      	orrs	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a4:	ea42 0103 	orr.w	r1, r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	0c1b      	lsrs	r3, r3, #16
 80070be:	f003 0104 	and.w	r1, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	f003 0210 	and.w	r2, r3, #16
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69da      	ldr	r2, [r3, #28]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b088      	sub	sp, #32
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	603b      	str	r3, [r7, #0]
 8007106:	4613      	mov	r3, r2
 8007108:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800710a:	f7fc fbd9 	bl	80038c0 <HAL_GetTick>
 800710e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	d001      	beq.n	8007124 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007120:	2302      	movs	r3, #2
 8007122:	e12a      	b.n	800737a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_SPI_Transmit+0x36>
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e122      	b.n	800737a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_SPI_Transmit+0x48>
 800713e:	2302      	movs	r3, #2
 8007140:	e11b      	b.n	800737a <HAL_SPI_Transmit+0x280>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2203      	movs	r2, #3
 800714e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	88fa      	ldrh	r2, [r7, #6]
 8007168:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007190:	d10f      	bne.n	80071b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071bc:	2b40      	cmp	r3, #64	@ 0x40
 80071be:	d007      	beq.n	80071d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071d8:	d152      	bne.n	8007280 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_SPI_Transmit+0xee>
 80071e2:	8b7b      	ldrh	r3, [r7, #26]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d145      	bne.n	8007274 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	881a      	ldrh	r2, [r3, #0]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f8:	1c9a      	adds	r2, r3, #2
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	3b01      	subs	r3, #1
 8007206:	b29a      	uxth	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800720c:	e032      	b.n	8007274 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 0302 	and.w	r3, r3, #2
 8007218:	2b02      	cmp	r3, #2
 800721a:	d112      	bne.n	8007242 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007220:	881a      	ldrh	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722c:	1c9a      	adds	r2, r3, #2
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007236:	b29b      	uxth	r3, r3
 8007238:	3b01      	subs	r3, #1
 800723a:	b29a      	uxth	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007240:	e018      	b.n	8007274 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007242:	f7fc fb3d 	bl	80038c0 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d803      	bhi.n	800725a <HAL_SPI_Transmit+0x160>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007258:	d102      	bne.n	8007260 <HAL_SPI_Transmit+0x166>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d109      	bne.n	8007274 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e082      	b.n	800737a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007278:	b29b      	uxth	r3, r3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1c7      	bne.n	800720e <HAL_SPI_Transmit+0x114>
 800727e:	e053      	b.n	8007328 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_SPI_Transmit+0x194>
 8007288:	8b7b      	ldrh	r3, [r7, #26]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d147      	bne.n	800731e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	7812      	ldrb	r2, [r2, #0]
 800729a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	3b01      	subs	r3, #1
 80072ae:	b29a      	uxth	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072b4:	e033      	b.n	800731e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d113      	bne.n	80072ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	7812      	ldrb	r2, [r2, #0]
 80072d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072ea:	e018      	b.n	800731e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072ec:	f7fc fae8 	bl	80038c0 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d803      	bhi.n	8007304 <HAL_SPI_Transmit+0x20a>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007302:	d102      	bne.n	800730a <HAL_SPI_Transmit+0x210>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e02d      	b.n	800737a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1c6      	bne.n	80072b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fcf7 	bl	8007d20 <SPI_EndRxTxTransaction>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007370:	2b00      	cmp	r3, #0
 8007372:	d001      	beq.n	8007378 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007378:	2300      	movs	r3, #0
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b088      	sub	sp, #32
 8007386:	af02      	add	r7, sp, #8
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b01      	cmp	r3, #1
 800739c:	d001      	beq.n	80073a2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
 80073a0:	e104      	b.n	80075ac <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SPI_Receive+0x2c>
 80073a8:	88fb      	ldrh	r3, [r7, #6]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e0fc      	b.n	80075ac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073ba:	d112      	bne.n	80073e2 <HAL_SPI_Receive+0x60>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10e      	bne.n	80073e2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2204      	movs	r2, #4
 80073c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f8eb 	bl	80075b4 <HAL_SPI_TransmitReceive>
 80073de:	4603      	mov	r3, r0
 80073e0:	e0e4      	b.n	80075ac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e2:	f7fc fa6d 	bl	80038c0 <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_SPI_Receive+0x74>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e0da      	b.n	80075ac <HAL_SPI_Receive+0x22a>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2204      	movs	r2, #4
 8007402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	88fa      	ldrh	r2, [r7, #6]
 8007416:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	88fa      	ldrh	r2, [r7, #6]
 800741c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007444:	d10f      	bne.n	8007466 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007454:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007464:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007470:	2b40      	cmp	r3, #64	@ 0x40
 8007472:	d007      	beq.n	8007484 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007482:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d170      	bne.n	800756e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800748c:	e035      	b.n	80074fa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	d115      	bne.n	80074c8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f103 020c 	add.w	r2, r3, #12
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074c6:	e018      	b.n	80074fa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074c8:	f7fc f9fa 	bl	80038c0 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d803      	bhi.n	80074e0 <HAL_SPI_Receive+0x15e>
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074de:	d102      	bne.n	80074e6 <HAL_SPI_Receive+0x164>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e058      	b.n	80075ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1c4      	bne.n	800748e <HAL_SPI_Receive+0x10c>
 8007504:	e038      	b.n	8007578 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b01      	cmp	r3, #1
 8007512:	d113      	bne.n	800753c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	b292      	uxth	r2, r2
 8007520:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007526:	1c9a      	adds	r2, r3, #2
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800753a:	e018      	b.n	800756e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753c:	f7fc f9c0 	bl	80038c0 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d803      	bhi.n	8007554 <HAL_SPI_Receive+0x1d2>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007552:	d102      	bne.n	800755a <HAL_SPI_Receive+0x1d8>
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e01e      	b.n	80075ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1c6      	bne.n	8007506 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fb69 	bl	8007c54 <SPI_EndRxTransaction>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80075aa:	2300      	movs	r3, #0
  }
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	@ 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80075c2:	2301      	movs	r3, #1
 80075c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075c6:	f7fc f97b 	bl	80038c0 <HAL_GetTick>
 80075ca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075d2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80075da:	887b      	ldrh	r3, [r7, #2]
 80075dc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80075de:	7ffb      	ldrb	r3, [r7, #31]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d00c      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x4a>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ea:	d106      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x46>
 80075f4:	7ffb      	ldrb	r3, [r7, #31]
 80075f6:	2b04      	cmp	r3, #4
 80075f8:	d001      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80075fa:	2302      	movs	r3, #2
 80075fc:	e17f      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x5c>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_TransmitReceive+0x5c>
 800760a:	887b      	ldrh	r3, [r7, #2]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e174      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <HAL_SPI_TransmitReceive+0x6e>
 800761e:	2302      	movs	r3, #2
 8007620:	e16d      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b04      	cmp	r3, #4
 8007634:	d003      	beq.n	800763e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2205      	movs	r2, #5
 800763a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	887a      	ldrh	r2, [r7, #2]
 800764e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	887a      	ldrh	r2, [r7, #2]
 8007654:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	887a      	ldrh	r2, [r7, #2]
 8007660:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800767e:	2b40      	cmp	r3, #64	@ 0x40
 8007680:	d007      	beq.n	8007692 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800769a:	d17e      	bne.n	800779a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_TransmitReceive+0xf6>
 80076a4:	8afb      	ldrh	r3, [r7, #22]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d16c      	bne.n	8007784 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	881a      	ldrh	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ba:	1c9a      	adds	r2, r3, #2
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ce:	e059      	b.n	8007784 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d11b      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x162>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x162>
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d113      	bne.n	8007716 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076f2:	881a      	ldrh	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076fe:	1c9a      	adds	r2, r3, #2
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b01      	cmp	r3, #1
 8007722:	d119      	bne.n	8007758 <HAL_SPI_TransmitReceive+0x1a4>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007728:	b29b      	uxth	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d014      	beq.n	8007758 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007738:	b292      	uxth	r2, r2
 800773a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	1c9a      	adds	r2, r3, #2
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774a:	b29b      	uxth	r3, r3
 800774c:	3b01      	subs	r3, #1
 800774e:	b29a      	uxth	r2, r3
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007754:	2301      	movs	r3, #1
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007758:	f7fc f8b2 	bl	80038c0 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007764:	429a      	cmp	r2, r3
 8007766:	d80d      	bhi.n	8007784 <HAL_SPI_TransmitReceive+0x1d0>
 8007768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800776e:	d009      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e0bc      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007788:	b29b      	uxth	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1a0      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x11c>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d19b      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x11c>
 8007798:	e082      	b.n	80078a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x1f4>
 80077a2:	8afb      	ldrh	r3, [r7, #22]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d171      	bne.n	800788c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	330c      	adds	r3, #12
 80077b2:	7812      	ldrb	r2, [r2, #0]
 80077b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ce:	e05d      	b.n	800788c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d11c      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x264>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d017      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x264>
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d114      	bne.n	8007818 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	330c      	adds	r3, #12
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007814:	2300      	movs	r3, #0
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b01      	cmp	r3, #1
 8007824:	d119      	bne.n	800785a <HAL_SPI_TransmitReceive+0x2a6>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d014      	beq.n	800785a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007842:	1c5a      	adds	r2, r3, #1
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784c:	b29b      	uxth	r3, r3
 800784e:	3b01      	subs	r3, #1
 8007850:	b29a      	uxth	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007856:	2301      	movs	r3, #1
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800785a:	f7fc f831 	bl	80038c0 <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007866:	429a      	cmp	r2, r3
 8007868:	d803      	bhi.n	8007872 <HAL_SPI_TransmitReceive+0x2be>
 800786a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007870:	d102      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x2c4>
 8007872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e038      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d19c      	bne.n	80077d0 <HAL_SPI_TransmitReceive+0x21c>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d197      	bne.n	80077d0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078a0:	6a3a      	ldr	r2, [r7, #32]
 80078a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 fa3b 	bl	8007d20 <SPI_EndRxTxTransaction>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d008      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e01d      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d10a      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	613b      	str	r3, [r7, #16]
 80078de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d001      	beq.n	80078fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80078fc:	2300      	movs	r3, #0
  }
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3728      	adds	r7, #40	@ 0x28
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	099b      	lsrs	r3, r3, #6
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10f      	bne.n	800794c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00a      	beq.n	800794c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	099b      	lsrs	r3, r3, #6
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
    return;
 800794a:	e0d7      	b.n	8007afc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00a      	beq.n	800796e <HAL_SPI_IRQHandler+0x66>
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	09db      	lsrs	r3, r3, #7
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	d004      	beq.n	800796e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	4798      	blx	r3
    return;
 800796c:	e0c6      	b.n	8007afc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10c      	bne.n	8007994 <HAL_SPI_IRQHandler+0x8c>
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	0a1b      	lsrs	r3, r3, #8
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80b4 	beq.w	8007afc <HAL_SPI_IRQHandler+0x1f4>
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	095b      	lsrs	r3, r3, #5
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 80ad 	beq.w	8007afc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	099b      	lsrs	r3, r3, #6
 80079a6:	f003 0301 	and.w	r3, r3, #1
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d023      	beq.n	80079f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d011      	beq.n	80079de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079be:	f043 0204 	orr.w	r2, r3, #4
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	617b      	str	r3, [r7, #20]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	e00b      	b.n	80079f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079de:	2300      	movs	r3, #0
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	613b      	str	r3, [r7, #16]
 80079f2:	693b      	ldr	r3, [r7, #16]
        return;
 80079f4:	e082      	b.n	8007afc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	095b      	lsrs	r3, r3, #5
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d014      	beq.n	8007a2c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a06:	f043 0201 	orr.w	r2, r3, #1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	0a1b      	lsrs	r3, r3, #8
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00c      	beq.n	8007a52 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a3c:	f043 0208 	orr.w	r2, r3, #8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a44:	2300      	movs	r3, #0
 8007a46:	60bb      	str	r3, [r7, #8]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	60bb      	str	r3, [r7, #8]
 8007a50:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d04f      	beq.n	8007afa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <HAL_SPI_IRQHandler+0x17e>
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d034      	beq.n	8007af0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0203 	bic.w	r2, r2, #3
 8007a94:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d011      	beq.n	8007ac2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa2:	4a18      	ldr	r2, [pc, #96]	@ (8007b04 <HAL_SPI_IRQHandler+0x1fc>)
 8007aa4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fc ff3e 	bl	800492c <HAL_DMA_Abort_IT>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ace:	4a0d      	ldr	r2, [pc, #52]	@ (8007b04 <HAL_SPI_IRQHandler+0x1fc>)
 8007ad0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fc ff28 	bl	800492c <HAL_DMA_Abort_IT>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007aee:	e003      	b.n	8007af8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f809 	bl	8007b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007af6:	e000      	b.n	8007afa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007af8:	bf00      	nop
    return;
 8007afa:	bf00      	nop
  }
}
 8007afc:	3720      	adds	r7, #32
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	08007b1d 	.word	0x08007b1d

08007b08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff ffe6 	bl	8007b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007b3c:	bf00      	nop
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b088      	sub	sp, #32
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	603b      	str	r3, [r7, #0]
 8007b50:	4613      	mov	r3, r2
 8007b52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b54:	f7fb feb4 	bl	80038c0 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	1a9b      	subs	r3, r3, r2
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4413      	add	r3, r2
 8007b62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b64:	f7fb feac 	bl	80038c0 <HAL_GetTick>
 8007b68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b6a:	4b39      	ldr	r3, [pc, #228]	@ (8007c50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	015b      	lsls	r3, r3, #5
 8007b70:	0d1b      	lsrs	r3, r3, #20
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b7a:	e055      	b.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b82:	d051      	beq.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b84:	f7fb fe9c 	bl	80038c0 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d902      	bls.n	8007b9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d13d      	bne.n	8007c16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ba8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bb2:	d111      	bne.n	8007bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bbc:	d004      	beq.n	8007bc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bc6:	d107      	bne.n	8007bd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007be0:	d10f      	bne.n	8007c02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e018      	b.n	8007c48 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d102      	bne.n	8007c22 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	e002      	b.n	8007c28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	689a      	ldr	r2, [r3, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	4013      	ands	r3, r2
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	461a      	mov	r2, r3
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d19a      	bne.n	8007b7c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	2000000c 	.word	0x2000000c

08007c54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c68:	d111      	bne.n	8007c8e <SPI_EndRxTransaction+0x3a>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c72:	d004      	beq.n	8007c7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c7c:	d107      	bne.n	8007c8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c8c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c96:	d12a      	bne.n	8007cee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ca0:	d012      	beq.n	8007cc8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2180      	movs	r1, #128	@ 0x80
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff ff49 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d02d      	beq.n	8007d14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e026      	b.n	8007d16 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff ff36 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01a      	beq.n	8007d14 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce2:	f043 0220 	orr.w	r2, r3, #32
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e013      	b.n	8007d16 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff ff23 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d007      	beq.n	8007d14 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e000      	b.n	8007d16 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2201      	movs	r2, #1
 8007d34:	2102      	movs	r1, #2
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff ff04 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d46:	f043 0220 	orr.w	r2, r3, #32
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e032      	b.n	8007db8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d52:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc0 <SPI_EndRxTxTransaction+0xa0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc4 <SPI_EndRxTxTransaction+0xa4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	0d5b      	lsrs	r3, r3, #21
 8007d5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007d62:	fb02 f303 	mul.w	r3, r2, r3
 8007d66:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d70:	d112      	bne.n	8007d98 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2180      	movs	r1, #128	@ 0x80
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fee1 	bl	8007b44 <SPI_WaitFlagStateUntilTimeout>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d016      	beq.n	8007db6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d8c:	f043 0220 	orr.w	r2, r3, #32
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e00f      	b.n	8007db8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dae:	2b80      	cmp	r3, #128	@ 0x80
 8007db0:	d0f2      	beq.n	8007d98 <SPI_EndRxTxTransaction+0x78>
 8007db2:	e000      	b.n	8007db6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007db4:	bf00      	nop
  }

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	2000000c 	.word	0x2000000c
 8007dc4:	165e9f81 	.word	0x165e9f81

08007dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e041      	b.n	8007e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d106      	bne.n	8007df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f7fa fe7c 	bl	8002aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3304      	adds	r3, #4
 8007e04:	4619      	mov	r1, r3
 8007e06:	4610      	mov	r0, r2
 8007e08:	f000 fbde 	bl	80085c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d001      	beq.n	8007e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e046      	b.n	8007f0e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2202      	movs	r2, #2
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a23      	ldr	r2, [pc, #140]	@ (8007f1c <HAL_TIM_Base_Start+0xb4>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d022      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e9a:	d01d      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f20 <HAL_TIM_Base_Start+0xb8>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d018      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8007f24 <HAL_TIM_Base_Start+0xbc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d013      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f28 <HAL_TIM_Base_Start+0xc0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00e      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8007f2c <HAL_TIM_Base_Start+0xc4>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d009      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a19      	ldr	r2, [pc, #100]	@ (8007f30 <HAL_TIM_Base_Start+0xc8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d004      	beq.n	8007ed8 <HAL_TIM_Base_Start+0x70>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a18      	ldr	r2, [pc, #96]	@ (8007f34 <HAL_TIM_Base_Start+0xcc>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d111      	bne.n	8007efc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b06      	cmp	r3, #6
 8007ee8:	d010      	beq.n	8007f0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 0201 	orr.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007efa:	e007      	b.n	8007f0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0201 	orr.w	r2, r2, #1
 8007f0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40000c00 	.word	0x40000c00
 8007f2c:	40010400 	.word	0x40010400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40001800 	.word	0x40001800

08007f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e041      	b.n	8007fce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f839 	bl	8007fd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4619      	mov	r1, r3
 8007f76:	4610      	mov	r0, r2
 8007f78:	f000 fb26 	bl	80085c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b083      	sub	sp, #12
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
	...

08007fec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d109      	bne.n	8008010 <HAL_TIM_PWM_Start+0x24>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b01      	cmp	r3, #1
 8008006:	bf14      	ite	ne
 8008008:	2301      	movne	r3, #1
 800800a:	2300      	moveq	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	e022      	b.n	8008056 <HAL_TIM_PWM_Start+0x6a>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	2b04      	cmp	r3, #4
 8008014:	d109      	bne.n	800802a <HAL_TIM_PWM_Start+0x3e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b01      	cmp	r3, #1
 8008020:	bf14      	ite	ne
 8008022:	2301      	movne	r3, #1
 8008024:	2300      	moveq	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	e015      	b.n	8008056 <HAL_TIM_PWM_Start+0x6a>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d109      	bne.n	8008044 <HAL_TIM_PWM_Start+0x58>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	e008      	b.n	8008056 <HAL_TIM_PWM_Start+0x6a>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b01      	cmp	r3, #1
 800804e:	bf14      	ite	ne
 8008050:	2301      	movne	r3, #1
 8008052:	2300      	moveq	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e07c      	b.n	8008158 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <HAL_TIM_PWM_Start+0x82>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2202      	movs	r2, #2
 8008068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800806c:	e013      	b.n	8008096 <HAL_TIM_PWM_Start+0xaa>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2b04      	cmp	r3, #4
 8008072:	d104      	bne.n	800807e <HAL_TIM_PWM_Start+0x92>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800807c:	e00b      	b.n	8008096 <HAL_TIM_PWM_Start+0xaa>
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	2b08      	cmp	r3, #8
 8008082:	d104      	bne.n	800808e <HAL_TIM_PWM_Start+0xa2>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800808c:	e003      	b.n	8008096 <HAL_TIM_PWM_Start+0xaa>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2202      	movs	r2, #2
 8008092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2201      	movs	r2, #1
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fe13 	bl	8008cca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008160 <HAL_TIM_PWM_Start+0x174>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <HAL_TIM_PWM_Start+0xcc>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008164 <HAL_TIM_PWM_Start+0x178>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d101      	bne.n	80080bc <HAL_TIM_PWM_Start+0xd0>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <HAL_TIM_PWM_Start+0xd2>
 80080bc:	2300      	movs	r3, #0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d007      	beq.n	80080d2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a22      	ldr	r2, [pc, #136]	@ (8008160 <HAL_TIM_PWM_Start+0x174>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d022      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e4:	d01d      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008168 <HAL_TIM_PWM_Start+0x17c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d018      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1d      	ldr	r2, [pc, #116]	@ (800816c <HAL_TIM_PWM_Start+0x180>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d013      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008170 <HAL_TIM_PWM_Start+0x184>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00e      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a16      	ldr	r2, [pc, #88]	@ (8008164 <HAL_TIM_PWM_Start+0x178>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d009      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a18      	ldr	r2, [pc, #96]	@ (8008174 <HAL_TIM_PWM_Start+0x188>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d004      	beq.n	8008122 <HAL_TIM_PWM_Start+0x136>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <HAL_TIM_PWM_Start+0x18c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d111      	bne.n	8008146 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0307 	and.w	r3, r3, #7
 800812c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b06      	cmp	r3, #6
 8008132:	d010      	beq.n	8008156 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008144:	e007      	b.n	8008156 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f042 0201 	orr.w	r2, r2, #1
 8008154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40010000 	.word	0x40010000
 8008164:	40010400 	.word	0x40010400
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014000 	.word	0x40014000
 8008178:	40001800 	.word	0x40001800

0800817c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e041      	b.n	8008214 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008196:	b2db      	uxtb	r3, r3
 8008198:	2b00      	cmp	r3, #0
 800819a:	d106      	bne.n	80081aa <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f839 	bl	800821c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f000 fa03 	bl	80085c8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0208 	bic.w	r2, r2, #8
 80081d0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6819      	ldr	r1, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800824a:	2302      	movs	r3, #2
 800824c:	e0ae      	b.n	80083ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2b0c      	cmp	r3, #12
 800825a:	f200 809f 	bhi.w	800839c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800825e:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	08008299 	.word	0x08008299
 8008268:	0800839d 	.word	0x0800839d
 800826c:	0800839d 	.word	0x0800839d
 8008270:	0800839d 	.word	0x0800839d
 8008274:	080082d9 	.word	0x080082d9
 8008278:	0800839d 	.word	0x0800839d
 800827c:	0800839d 	.word	0x0800839d
 8008280:	0800839d 	.word	0x0800839d
 8008284:	0800831b 	.word	0x0800831b
 8008288:	0800839d 	.word	0x0800839d
 800828c:	0800839d 	.word	0x0800839d
 8008290:	0800839d 	.word	0x0800839d
 8008294:	0800835b 	.word	0x0800835b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68b9      	ldr	r1, [r7, #8]
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fa38 	bl	8008714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	699a      	ldr	r2, [r3, #24]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0208 	orr.w	r2, r2, #8
 80082b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699a      	ldr	r2, [r3, #24]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0204 	bic.w	r2, r2, #4
 80082c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6999      	ldr	r1, [r3, #24]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	691a      	ldr	r2, [r3, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	619a      	str	r2, [r3, #24]
      break;
 80082d6:	e064      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68b9      	ldr	r1, [r7, #8]
 80082de:	4618      	mov	r0, r3
 80082e0:	f000 fa88 	bl	80087f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6999      	ldr	r1, [r3, #24]
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	021a      	lsls	r2, r3, #8
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	430a      	orrs	r2, r1
 8008316:	619a      	str	r2, [r3, #24]
      break;
 8008318:	e043      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fadd 	bl	80088e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	69da      	ldr	r2, [r3, #28]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0208 	orr.w	r2, r2, #8
 8008334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	69da      	ldr	r2, [r3, #28]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0204 	bic.w	r2, r2, #4
 8008344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	69d9      	ldr	r1, [r3, #28]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	691a      	ldr	r2, [r3, #16]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	61da      	str	r2, [r3, #28]
      break;
 8008358:	e023      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68b9      	ldr	r1, [r7, #8]
 8008360:	4618      	mov	r0, r3
 8008362:	f000 fb31 	bl	80089c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69d9      	ldr	r1, [r3, #28]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	021a      	lsls	r2, r3, #8
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	61da      	str	r2, [r3, #28]
      break;
 800839a:	e002      	b.n	80083a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	75fb      	strb	r3, [r7, #23]
      break;
 80083a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3718      	adds	r7, #24
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d101      	bne.n	80083d0 <HAL_TIM_ConfigClockSource+0x1c>
 80083cc:	2302      	movs	r3, #2
 80083ce:	e0b4      	b.n	800853a <HAL_TIM_ConfigClockSource+0x186>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008408:	d03e      	beq.n	8008488 <HAL_TIM_ConfigClockSource+0xd4>
 800840a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800840e:	f200 8087 	bhi.w	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008416:	f000 8086 	beq.w	8008526 <HAL_TIM_ConfigClockSource+0x172>
 800841a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800841e:	d87f      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008420:	2b70      	cmp	r3, #112	@ 0x70
 8008422:	d01a      	beq.n	800845a <HAL_TIM_ConfigClockSource+0xa6>
 8008424:	2b70      	cmp	r3, #112	@ 0x70
 8008426:	d87b      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008428:	2b60      	cmp	r3, #96	@ 0x60
 800842a:	d050      	beq.n	80084ce <HAL_TIM_ConfigClockSource+0x11a>
 800842c:	2b60      	cmp	r3, #96	@ 0x60
 800842e:	d877      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008430:	2b50      	cmp	r3, #80	@ 0x50
 8008432:	d03c      	beq.n	80084ae <HAL_TIM_ConfigClockSource+0xfa>
 8008434:	2b50      	cmp	r3, #80	@ 0x50
 8008436:	d873      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008438:	2b40      	cmp	r3, #64	@ 0x40
 800843a:	d058      	beq.n	80084ee <HAL_TIM_ConfigClockSource+0x13a>
 800843c:	2b40      	cmp	r3, #64	@ 0x40
 800843e:	d86f      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008440:	2b30      	cmp	r3, #48	@ 0x30
 8008442:	d064      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x15a>
 8008444:	2b30      	cmp	r3, #48	@ 0x30
 8008446:	d86b      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008448:	2b20      	cmp	r3, #32
 800844a:	d060      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x15a>
 800844c:	2b20      	cmp	r3, #32
 800844e:	d867      	bhi.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d05c      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x15a>
 8008454:	2b10      	cmp	r3, #16
 8008456:	d05a      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x15a>
 8008458:	e062      	b.n	8008520 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800846a:	f000 fc0e 	bl	8008c8a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800847c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	609a      	str	r2, [r3, #8]
      break;
 8008486:	e04f      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008498:	f000 fbf7 	bl	8008c8a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084aa:	609a      	str	r2, [r3, #8]
      break;
 80084ac:	e03c      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ba:	461a      	mov	r2, r3
 80084bc:	f000 fb6b 	bl	8008b96 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2150      	movs	r1, #80	@ 0x50
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 fbc4 	bl	8008c54 <TIM_ITRx_SetConfig>
      break;
 80084cc:	e02c      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084da:	461a      	mov	r2, r3
 80084dc:	f000 fb8a 	bl	8008bf4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2160      	movs	r1, #96	@ 0x60
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fbb4 	bl	8008c54 <TIM_ITRx_SetConfig>
      break;
 80084ec:	e01c      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084fa:	461a      	mov	r2, r3
 80084fc:	f000 fb4b 	bl	8008b96 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2140      	movs	r1, #64	@ 0x40
 8008506:	4618      	mov	r0, r3
 8008508:	f000 fba4 	bl	8008c54 <TIM_ITRx_SetConfig>
      break;
 800850c:	e00c      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f000 fb9b 	bl	8008c54 <TIM_ITRx_SetConfig>
      break;
 800851e:	e003      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
      break;
 8008524:	e000      	b.n	8008528 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_TIM_SlaveConfigSynchro+0x18>
 8008556:	2302      	movs	r3, #2
 8008558:	e031      	b.n	80085be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2202      	movs	r2, #2
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800856a:	6839      	ldr	r1, [r7, #0]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fa81 	bl	8008a74 <TIM_SlaveTimer_SetConfig>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d009      	beq.n	800858c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e018      	b.n	80085be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800859a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80085aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a43      	ldr	r2, [pc, #268]	@ (80086e8 <TIM_Base_SetConfig+0x120>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d013      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085e6:	d00f      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a40      	ldr	r2, [pc, #256]	@ (80086ec <TIM_Base_SetConfig+0x124>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d00b      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a3f      	ldr	r2, [pc, #252]	@ (80086f0 <TIM_Base_SetConfig+0x128>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d007      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a3e      	ldr	r2, [pc, #248]	@ (80086f4 <TIM_Base_SetConfig+0x12c>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d003      	beq.n	8008608 <TIM_Base_SetConfig+0x40>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a3d      	ldr	r2, [pc, #244]	@ (80086f8 <TIM_Base_SetConfig+0x130>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d108      	bne.n	800861a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800860e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	4313      	orrs	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a32      	ldr	r2, [pc, #200]	@ (80086e8 <TIM_Base_SetConfig+0x120>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d02b      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008628:	d027      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a2f      	ldr	r2, [pc, #188]	@ (80086ec <TIM_Base_SetConfig+0x124>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d023      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a2e      	ldr	r2, [pc, #184]	@ (80086f0 <TIM_Base_SetConfig+0x128>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d01f      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a2d      	ldr	r2, [pc, #180]	@ (80086f4 <TIM_Base_SetConfig+0x12c>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d01b      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a2c      	ldr	r2, [pc, #176]	@ (80086f8 <TIM_Base_SetConfig+0x130>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d017      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a2b      	ldr	r2, [pc, #172]	@ (80086fc <TIM_Base_SetConfig+0x134>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d013      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a2a      	ldr	r2, [pc, #168]	@ (8008700 <TIM_Base_SetConfig+0x138>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d00f      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a29      	ldr	r2, [pc, #164]	@ (8008704 <TIM_Base_SetConfig+0x13c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00b      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a28      	ldr	r2, [pc, #160]	@ (8008708 <TIM_Base_SetConfig+0x140>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d007      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a27      	ldr	r2, [pc, #156]	@ (800870c <TIM_Base_SetConfig+0x144>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d003      	beq.n	800867a <TIM_Base_SetConfig+0xb2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a26      	ldr	r2, [pc, #152]	@ (8008710 <TIM_Base_SetConfig+0x148>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d108      	bne.n	800868c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	4313      	orrs	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a0e      	ldr	r2, [pc, #56]	@ (80086e8 <TIM_Base_SetConfig+0x120>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_Base_SetConfig+0xf2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a10      	ldr	r2, [pc, #64]	@ (80086f8 <TIM_Base_SetConfig+0x130>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d103      	bne.n	80086c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f043 0204 	orr.w	r2, r3, #4
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]
}
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40010000 	.word	0x40010000
 80086ec:	40000400 	.word	0x40000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	40000c00 	.word	0x40000c00
 80086f8:	40010400 	.word	0x40010400
 80086fc:	40014000 	.word	0x40014000
 8008700:	40014400 	.word	0x40014400
 8008704:	40014800 	.word	0x40014800
 8008708:	40001800 	.word	0x40001800
 800870c:	40001c00 	.word	0x40001c00
 8008710:	40002000 	.word	0x40002000

08008714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	f023 0201 	bic.w	r2, r3, #1
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f023 0302 	bic.w	r3, r3, #2
 800875c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a20      	ldr	r2, [pc, #128]	@ (80087ec <TIM_OC1_SetConfig+0xd8>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <TIM_OC1_SetConfig+0x64>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a1f      	ldr	r2, [pc, #124]	@ (80087f0 <TIM_OC1_SetConfig+0xdc>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d10c      	bne.n	8008792 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f023 0308 	bic.w	r3, r3, #8
 800877e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	697a      	ldr	r2, [r7, #20]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a15      	ldr	r2, [pc, #84]	@ (80087ec <TIM_OC1_SetConfig+0xd8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d003      	beq.n	80087a2 <TIM_OC1_SetConfig+0x8e>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a14      	ldr	r2, [pc, #80]	@ (80087f0 <TIM_OC1_SetConfig+0xdc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d111      	bne.n	80087c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	621a      	str	r2, [r3, #32]
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40010400 	.word	0x40010400

080087f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b087      	sub	sp, #28
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a1b      	ldr	r3, [r3, #32]
 8008802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	f023 0210 	bic.w	r2, r3, #16
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	699b      	ldr	r3, [r3, #24]
 800881a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800882a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	021b      	lsls	r3, r3, #8
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4313      	orrs	r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f023 0320 	bic.w	r3, r3, #32
 800883e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a22      	ldr	r2, [pc, #136]	@ (80088d8 <TIM_OC2_SetConfig+0xe4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d003      	beq.n	800885c <TIM_OC2_SetConfig+0x68>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a21      	ldr	r2, [pc, #132]	@ (80088dc <TIM_OC2_SetConfig+0xe8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d10d      	bne.n	8008878 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	011b      	lsls	r3, r3, #4
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	4313      	orrs	r3, r2
 800886e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a17      	ldr	r2, [pc, #92]	@ (80088d8 <TIM_OC2_SetConfig+0xe4>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_OC2_SetConfig+0x94>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a16      	ldr	r2, [pc, #88]	@ (80088dc <TIM_OC2_SetConfig+0xe8>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d113      	bne.n	80088b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800888e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40010400 	.word	0x40010400

080088e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a21      	ldr	r2, [pc, #132]	@ (80089c0 <TIM_OC3_SetConfig+0xe0>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_OC3_SetConfig+0x66>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a20      	ldr	r2, [pc, #128]	@ (80089c4 <TIM_OC3_SetConfig+0xe4>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d10d      	bne.n	8008962 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800894c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	021b      	lsls	r3, r3, #8
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a16      	ldr	r2, [pc, #88]	@ (80089c0 <TIM_OC3_SetConfig+0xe0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_OC3_SetConfig+0x92>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a15      	ldr	r2, [pc, #84]	@ (80089c4 <TIM_OC3_SetConfig+0xe4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d113      	bne.n	800899a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	621a      	str	r2, [r3, #32]
}
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	40010000 	.word	0x40010000
 80089c4:	40010400 	.word	0x40010400

080089c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	031b      	lsls	r3, r3, #12
 8008a1a:	693a      	ldr	r2, [r7, #16]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a12      	ldr	r2, [pc, #72]	@ (8008a6c <TIM_OC4_SetConfig+0xa4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d003      	beq.n	8008a30 <TIM_OC4_SetConfig+0x68>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a11      	ldr	r2, [pc, #68]	@ (8008a70 <TIM_OC4_SetConfig+0xa8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d109      	bne.n	8008a44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	019b      	lsls	r3, r3, #6
 8008a3e:	697a      	ldr	r2, [r7, #20]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685a      	ldr	r2, [r3, #4]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40010000 	.word	0x40010000
 8008a70:	40010400 	.word	0x40010400

08008a74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f023 0307 	bic.w	r3, r3, #7
 8008aa2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b70      	cmp	r3, #112	@ 0x70
 8008abc:	d01a      	beq.n	8008af4 <TIM_SlaveTimer_SetConfig+0x80>
 8008abe:	2b70      	cmp	r3, #112	@ 0x70
 8008ac0:	d860      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ac2:	2b60      	cmp	r3, #96	@ 0x60
 8008ac4:	d054      	beq.n	8008b70 <TIM_SlaveTimer_SetConfig+0xfc>
 8008ac6:	2b60      	cmp	r3, #96	@ 0x60
 8008ac8:	d85c      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008aca:	2b50      	cmp	r3, #80	@ 0x50
 8008acc:	d046      	beq.n	8008b5c <TIM_SlaveTimer_SetConfig+0xe8>
 8008ace:	2b50      	cmp	r3, #80	@ 0x50
 8008ad0:	d858      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ad2:	2b40      	cmp	r3, #64	@ 0x40
 8008ad4:	d019      	beq.n	8008b0a <TIM_SlaveTimer_SetConfig+0x96>
 8008ad6:	2b40      	cmp	r3, #64	@ 0x40
 8008ad8:	d854      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ada:	2b30      	cmp	r3, #48	@ 0x30
 8008adc:	d055      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008ade:	2b30      	cmp	r3, #48	@ 0x30
 8008ae0:	d850      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d051      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d84c      	bhi.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d04d      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d04b      	beq.n	8008b8a <TIM_SlaveTimer_SetConfig+0x116>
 8008af2:	e047      	b.n	8008b84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008b04:	f000 f8c1 	bl	8008c8a <TIM_ETR_SetConfig>
      break;
 8008b08:	e040      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d101      	bne.n	8008b16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e03b      	b.n	8008b8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6a1a      	ldr	r2, [r3, #32]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0201 	bic.w	r2, r2, #1
 8008b2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	621a      	str	r2, [r3, #32]
      break;
 8008b5a:	e017      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f000 f814 	bl	8008b96 <TIM_TI1_ConfigInputStage>
      break;
 8008b6e:	e00d      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	f000 f839 	bl	8008bf4 <TIM_TI2_ConfigInputStage>
      break;
 8008b82:	e003      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	75fb      	strb	r3, [r7, #23]
      break;
 8008b88:	e000      	b.n	8008b8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008b8a:	bf00      	nop
  }

  return status;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b087      	sub	sp, #28
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	f023 0201 	bic.w	r2, r3, #1
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f023 030a 	bic.w	r3, r3, #10
 8008bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bd4:	697a      	ldr	r2, [r7, #20]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	621a      	str	r2, [r3, #32]
}
 8008be8:	bf00      	nop
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	f023 0210 	bic.w	r2, r3, #16
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	699b      	ldr	r3, [r3, #24]
 8008c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	031b      	lsls	r3, r3, #12
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c30:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	011b      	lsls	r3, r3, #4
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	621a      	str	r2, [r3, #32]
}
 8008c48:	bf00      	nop
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	f043 0307 	orr.w	r3, r3, #7
 8008c76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	609a      	str	r2, [r3, #8]
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b087      	sub	sp, #28
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
 8008c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	021a      	lsls	r2, r3, #8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	609a      	str	r2, [r3, #8]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b087      	sub	sp, #28
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f003 031f 	and.w	r3, r3, #31
 8008cdc:	2201      	movs	r2, #1
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6a1a      	ldr	r2, [r3, #32]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	43db      	mvns	r3, r3
 8008cec:	401a      	ands	r2, r3
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a1a      	ldr	r2, [r3, #32]
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f003 031f 	and.w	r3, r3, #31
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008d02:	431a      	orrs	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	621a      	str	r2, [r3, #32]
}
 8008d08:	bf00      	nop
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	e05a      	b.n	8008de2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2202      	movs	r2, #2
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a21      	ldr	r2, [pc, #132]	@ (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d022      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d78:	d01d      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d018      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a1b      	ldr	r2, [pc, #108]	@ (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a1a      	ldr	r2, [pc, #104]	@ (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00e      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a18      	ldr	r2, [pc, #96]	@ (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d009      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a17      	ldr	r2, [pc, #92]	@ (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d004      	beq.n	8008db6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a15      	ldr	r2, [pc, #84]	@ (8008e08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d10c      	bne.n	8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40010000 	.word	0x40010000
 8008df4:	40000400 	.word	0x40000400
 8008df8:	40000800 	.word	0x40000800
 8008dfc:	40000c00 	.word	0x40000c00
 8008e00:	40010400 	.word	0x40010400
 8008e04:	40014000 	.word	0x40014000
 8008e08:	40001800 	.word	0x40001800

08008e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e042      	b.n	8008ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fa f9ec 	bl	8003210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2224      	movs	r2, #36	@ 0x24
 8008e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68da      	ldr	r2, [r3, #12]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 ff95 	bl	8009d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	695a      	ldr	r2, [r3, #20]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08c      	sub	sp, #48	@ 0x30
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b20      	cmp	r3, #32
 8008ec4:	d162      	bne.n	8008f8c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <HAL_UART_Transmit_DMA+0x26>
 8008ecc:	88fb      	ldrh	r3, [r7, #6]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e05b      	b.n	8008f8e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	88fa      	ldrh	r2, [r7, #6]
 8008ee0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	88fa      	ldrh	r2, [r7, #6]
 8008ee6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2221      	movs	r2, #33	@ 0x21
 8008ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efa:	4a27      	ldr	r2, [pc, #156]	@ (8008f98 <HAL_UART_Transmit_DMA+0xec>)
 8008efc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f02:	4a26      	ldr	r2, [pc, #152]	@ (8008f9c <HAL_UART_Transmit_DMA+0xf0>)
 8008f04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0a:	4a25      	ldr	r2, [pc, #148]	@ (8008fa0 <HAL_UART_Transmit_DMA+0xf4>)
 8008f0c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f12:	2200      	movs	r2, #0
 8008f14:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3304      	adds	r3, #4
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	88fb      	ldrh	r3, [r7, #6]
 8008f2e:	f7fb fc35 	bl	800479c <HAL_DMA_Start_IT>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2210      	movs	r2, #16
 8008f3c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e021      	b.n	8008f8e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f52:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3314      	adds	r3, #20
 8008f5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	617b      	str	r3, [r7, #20]
   return(result);
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3314      	adds	r3, #20
 8008f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f74:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6a39      	ldr	r1, [r7, #32]
 8008f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e5      	bne.n	8008f54 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	e000      	b.n	8008f8e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008f8c:	2302      	movs	r3, #2
  }
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3730      	adds	r7, #48	@ 0x30
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	080095fd 	.word	0x080095fd
 8008f9c:	08009697 	.word	0x08009697
 8008fa0:	0800981b 	.word	0x0800981b

08008fa4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08c      	sub	sp, #48	@ 0x30
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d146      	bne.n	800904c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008fc4:	88fb      	ldrh	r3, [r7, #6]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d101      	bne.n	8008fce <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e03f      	b.n	800904e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008fda:	88fb      	ldrh	r3, [r7, #6]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	68b9      	ldr	r1, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fc65 	bl	80098b0 <UART_Start_Receive_DMA>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d125      	bne.n	8009040 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	613b      	str	r3, [r7, #16]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	613b      	str	r3, [r7, #16]
 8009008:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	330c      	adds	r3, #12
 8009010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	e853 3f00 	ldrex	r3, [r3]
 8009018:	617b      	str	r3, [r7, #20]
   return(result);
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f043 0310 	orr.w	r3, r3, #16
 8009020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	330c      	adds	r3, #12
 8009028:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800902a:	627a      	str	r2, [r7, #36]	@ 0x24
 800902c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902e:	6a39      	ldr	r1, [r7, #32]
 8009030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	61fb      	str	r3, [r7, #28]
   return(result);
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e5      	bne.n	800900a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800903e:	e002      	b.n	8009046 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8009046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800904a:	e000      	b.n	800904e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800904c:	2302      	movs	r3, #2
  }
}
 800904e:	4618      	mov	r0, r3
 8009050:	3730      	adds	r7, #48	@ 0x30
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
	...

08009058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b0ba      	sub	sp, #232	@ 0xe8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800907e:	2300      	movs	r3, #0
 8009080:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009084:	2300      	movs	r3, #0
 8009086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10f      	bne.n	80090be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800909e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d009      	beq.n	80090be <HAL_UART_IRQHandler+0x66>
 80090aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fda4 	bl	8009c04 <UART_Receive_IT>
      return;
 80090bc:	e273      	b.n	80095a6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 80de 	beq.w	8009284 <HAL_UART_IRQHandler+0x22c>
 80090c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d106      	bne.n	80090e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 80d1 	beq.w	8009284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <HAL_UART_IRQHandler+0xae>
 80090ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090fe:	f043 0201 	orr.w	r2, r3, #1
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00b      	beq.n	800912a <HAL_UART_IRQHandler+0xd2>
 8009112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009122:	f043 0202 	orr.w	r2, r3, #2
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800912a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00b      	beq.n	800914e <HAL_UART_IRQHandler+0xf6>
 8009136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800913a:	f003 0301 	and.w	r3, r3, #1
 800913e:	2b00      	cmp	r3, #0
 8009140:	d005      	beq.n	800914e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009146:	f043 0204 	orr.w	r2, r3, #4
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800914e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d011      	beq.n	800917e <HAL_UART_IRQHandler+0x126>
 800915a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d105      	bne.n	8009172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009176:	f043 0208 	orr.w	r2, r3, #8
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 820a 	beq.w	800959c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800918c:	f003 0320 	and.w	r3, r3, #32
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <HAL_UART_IRQHandler+0x14e>
 8009194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fd2f 	bl	8009c04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b0:	2b40      	cmp	r3, #64	@ 0x40
 80091b2:	bf0c      	ite	eq
 80091b4:	2301      	moveq	r3, #1
 80091b6:	2300      	movne	r3, #0
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d103      	bne.n	80091d2 <HAL_UART_IRQHandler+0x17a>
 80091ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d04f      	beq.n	8009272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 fc3a 	bl	8009a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e2:	2b40      	cmp	r3, #64	@ 0x40
 80091e4:	d141      	bne.n	800926a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80091fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3314      	adds	r3, #20
 800920e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009212:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009216:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800921e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009222:	e841 2300 	strex	r3, r2, [r1]
 8009226:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800922a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1d9      	bne.n	80091e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d013      	beq.n	8009262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800923e:	4a8a      	ldr	r2, [pc, #552]	@ (8009468 <HAL_UART_IRQHandler+0x410>)
 8009240:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009246:	4618      	mov	r0, r3
 8009248:	f7fb fb70 	bl	800492c <HAL_DMA_Abort_IT>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d016      	beq.n	8009280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009260:	e00e      	b.n	8009280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f9c0 	bl	80095e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009268:	e00a      	b.n	8009280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f9bc 	bl	80095e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009270:	e006      	b.n	8009280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f9b8 	bl	80095e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800927e:	e18d      	b.n	800959c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009280:	bf00      	nop
    return;
 8009282:	e18b      	b.n	800959c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009288:	2b01      	cmp	r3, #1
 800928a:	f040 8167 	bne.w	800955c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009292:	f003 0310 	and.w	r3, r3, #16
 8009296:	2b00      	cmp	r3, #0
 8009298:	f000 8160 	beq.w	800955c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800929c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8159 	beq.w	800955c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092aa:	2300      	movs	r3, #0
 80092ac:	60bb      	str	r3, [r7, #8]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60bb      	str	r3, [r7, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	60bb      	str	r3, [r7, #8]
 80092be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ca:	2b40      	cmp	r3, #64	@ 0x40
 80092cc:	f040 80ce 	bne.w	800946c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 80a9 	beq.w	8009438 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092ee:	429a      	cmp	r2, r3
 80092f0:	f080 80a2 	bcs.w	8009438 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80092fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009306:	f000 8088 	beq.w	800941a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	330c      	adds	r3, #12
 8009310:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009314:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009320:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	330c      	adds	r3, #12
 8009332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009336:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800933a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009342:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800934e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1d9      	bne.n	800930a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3314      	adds	r3, #20
 800935c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009366:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009368:	f023 0301 	bic.w	r3, r3, #1
 800936c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	3314      	adds	r3, #20
 8009376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800937a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800937e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009382:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009386:	e841 2300 	strex	r3, r2, [r1]
 800938a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800938c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1e1      	bne.n	8009356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3314      	adds	r3, #20
 8009398:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80093a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3314      	adds	r3, #20
 80093b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80093b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80093b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80093c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e3      	bne.n	8009392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093e2:	e853 3f00 	ldrex	r3, [r3]
 80093e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093ea:	f023 0310 	bic.w	r3, r3, #16
 80093ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	330c      	adds	r3, #12
 80093f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80093fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80093fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800940a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e3      	bne.n	80093d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009414:	4618      	mov	r0, r3
 8009416:	f7fb fa19 	bl	800484c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2202      	movs	r2, #2
 800941e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009428:	b29b      	uxth	r3, r3
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7f9 fd73 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009436:	e0b3      	b.n	80095a0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800943c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009440:	429a      	cmp	r2, r3
 8009442:	f040 80ad 	bne.w	80095a0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009450:	f040 80a6 	bne.w	80095a0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7f9 fd5b 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
      return;
 8009466:	e09b      	b.n	80095a0 <HAL_UART_IRQHandler+0x548>
 8009468:	08009b13 	.word	0x08009b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009474:	b29b      	uxth	r3, r3
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009480:	b29b      	uxth	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 808e 	beq.w	80095a4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009488:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 8089 	beq.w	80095a4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80094b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80094b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094be:	e841 2300 	strex	r3, r2, [r1]
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1e3      	bne.n	8009492 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3314      	adds	r3, #20
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	623b      	str	r3, [r7, #32]
   return(result);
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	3314      	adds	r3, #20
 80094ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80094ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80094f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094f6:	e841 2300 	strex	r3, r2, [r1]
 80094fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1e3      	bne.n	80094ca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2220      	movs	r2, #32
 8009506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	330c      	adds	r3, #12
 8009516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	e853 3f00 	ldrex	r3, [r3]
 800951e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f023 0310 	bic.w	r3, r3, #16
 8009526:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	330c      	adds	r3, #12
 8009530:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009534:	61fa      	str	r2, [r7, #28]
 8009536:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009538:	69b9      	ldr	r1, [r7, #24]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	e841 2300 	strex	r3, r2, [r1]
 8009540:	617b      	str	r3, [r7, #20]
   return(result);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e3      	bne.n	8009510 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800954e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7f9 fce1 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800955a:	e023      	b.n	80095a4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800955c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009564:	2b00      	cmp	r3, #0
 8009566:	d009      	beq.n	800957c <HAL_UART_IRQHandler+0x524>
 8009568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800956c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009570:	2b00      	cmp	r3, #0
 8009572:	d003      	beq.n	800957c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fadd 	bl	8009b34 <UART_Transmit_IT>
    return;
 800957a:	e014      	b.n	80095a6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800957c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00e      	beq.n	80095a6 <HAL_UART_IRQHandler+0x54e>
 8009588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800958c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009590:	2b00      	cmp	r3, #0
 8009592:	d008      	beq.n	80095a6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fb1d 	bl	8009bd4 <UART_EndTransmit_IT>
    return;
 800959a:	e004      	b.n	80095a6 <HAL_UART_IRQHandler+0x54e>
    return;
 800959c:	bf00      	nop
 800959e:	e002      	b.n	80095a6 <HAL_UART_IRQHandler+0x54e>
      return;
 80095a0:	bf00      	nop
 80095a2:	e000      	b.n	80095a6 <HAL_UART_IRQHandler+0x54e>
      return;
 80095a4:	bf00      	nop
  }
}
 80095a6:	37e8      	adds	r7, #232	@ 0xe8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b090      	sub	sp, #64	@ 0x40
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009614:	2b00      	cmp	r3, #0
 8009616:	d137      	bne.n	8009688 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800961a:	2200      	movs	r2, #0
 800961c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800961e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3314      	adds	r3, #20
 8009624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	623b      	str	r3, [r7, #32]
   return(result);
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3314      	adds	r3, #20
 800963c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800963e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009640:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e5      	bne.n	800961e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	330c      	adds	r3, #12
 8009658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	60fb      	str	r3, [r7, #12]
   return(result);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009668:	637b      	str	r3, [r7, #52]	@ 0x34
 800966a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	330c      	adds	r3, #12
 8009670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009672:	61fa      	str	r2, [r7, #28]
 8009674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	617b      	str	r3, [r7, #20]
   return(result);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009686:	e002      	b.n	800968e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009688:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800968a:	f7f9 fd08 	bl	800309e <HAL_UART_TxCpltCallback>
}
 800968e:	bf00      	nop
 8009690:	3740      	adds	r7, #64	@ 0x40
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b084      	sub	sp, #16
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff ff81 	bl	80095ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096aa:	bf00      	nop
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b09c      	sub	sp, #112	@ 0x70
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d172      	bne.n	80097b4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80096ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d0:	2200      	movs	r2, #0
 80096d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	330c      	adds	r3, #12
 80096da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	330c      	adds	r3, #12
 80096f2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80096f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80096f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e5      	bne.n	80096d4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3314      	adds	r3, #20
 800970e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3314      	adds	r3, #20
 8009726:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009728:	647a      	str	r2, [r7, #68]	@ 0x44
 800972a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800972e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e5      	bne.n	8009708 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800973c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3314      	adds	r3, #20
 8009742:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	623b      	str	r3, [r7, #32]
   return(result);
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009752:	663b      	str	r3, [r7, #96]	@ 0x60
 8009754:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3314      	adds	r3, #20
 800975a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800975c:	633a      	str	r2, [r7, #48]	@ 0x30
 800975e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800976a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e5      	bne.n	800973c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009770:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009772:	2220      	movs	r2, #32
 8009774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009778:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800977a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977c:	2b01      	cmp	r3, #1
 800977e:	d119      	bne.n	80097b4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009780:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	330c      	adds	r3, #12
 8009786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0310 	bic.w	r3, r3, #16
 8009796:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	330c      	adds	r3, #12
 800979e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80097a0:	61fa      	str	r2, [r7, #28]
 80097a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	69b9      	ldr	r1, [r7, #24]
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	617b      	str	r3, [r7, #20]
   return(result);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e5      	bne.n	8009780 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097b6:	2200      	movs	r2, #0
 80097b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d106      	bne.n	80097d0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097c6:	4619      	mov	r1, r3
 80097c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097ca:	f7f9 fba7 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097ce:	e002      	b.n	80097d6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80097d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80097d2:	f7ff fef5 	bl	80095c0 <HAL_UART_RxCpltCallback>
}
 80097d6:	bf00      	nop
 80097d8:	3770      	adds	r7, #112	@ 0x70
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2201      	movs	r2, #1
 80097f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d108      	bne.n	800980c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097fe:	085b      	lsrs	r3, r3, #1
 8009800:	b29b      	uxth	r3, r3
 8009802:	4619      	mov	r1, r3
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f7f9 fb89 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800980a:	e002      	b.n	8009812 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff fee1 	bl	80095d4 <HAL_UART_RxHalfCpltCallback>
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009822:	2300      	movs	r3, #0
 8009824:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800982a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009836:	2b80      	cmp	r3, #128	@ 0x80
 8009838:	bf0c      	ite	eq
 800983a:	2301      	moveq	r3, #1
 800983c:	2300      	movne	r3, #0
 800983e:	b2db      	uxtb	r3, r3
 8009840:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b21      	cmp	r3, #33	@ 0x21
 800984c:	d108      	bne.n	8009860 <UART_DMAError+0x46>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d005      	beq.n	8009860 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800985a:	68b8      	ldr	r0, [r7, #8]
 800985c:	f000 f8ce 	bl	80099fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800986a:	2b40      	cmp	r3, #64	@ 0x40
 800986c:	bf0c      	ite	eq
 800986e:	2301      	moveq	r3, #1
 8009870:	2300      	movne	r3, #0
 8009872:	b2db      	uxtb	r3, r3
 8009874:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b22      	cmp	r3, #34	@ 0x22
 8009880:	d108      	bne.n	8009894 <UART_DMAError+0x7a>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d005      	beq.n	8009894 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2200      	movs	r2, #0
 800988c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800988e:	68b8      	ldr	r0, [r7, #8]
 8009890:	f000 f8dc 	bl	8009a4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009898:	f043 0210 	orr.w	r2, r3, #16
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098a0:	68b8      	ldr	r0, [r7, #8]
 80098a2:	f7ff fea1 	bl	80095e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b098      	sub	sp, #96	@ 0x60
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2222      	movs	r2, #34	@ 0x22
 80098d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098dc:	4a44      	ldr	r2, [pc, #272]	@ (80099f0 <UART_Start_Receive_DMA+0x140>)
 80098de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098e4:	4a43      	ldr	r2, [pc, #268]	@ (80099f4 <UART_Start_Receive_DMA+0x144>)
 80098e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098ec:	4a42      	ldr	r2, [pc, #264]	@ (80099f8 <UART_Start_Receive_DMA+0x148>)
 80098ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f4:	2200      	movs	r2, #0
 80098f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80098f8:	f107 0308 	add.w	r3, r7, #8
 80098fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3304      	adds	r3, #4
 8009908:	4619      	mov	r1, r3
 800990a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	88fb      	ldrh	r3, [r7, #6]
 8009910:	f7fa ff44 	bl	800479c <HAL_DMA_Start_IT>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2210      	movs	r2, #16
 800991e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2220      	movs	r2, #32
 8009924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e05d      	b.n	80099e8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800992c:	2300      	movs	r3, #0
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	613b      	str	r3, [r7, #16]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	613b      	str	r3, [r7, #16]
 8009940:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d019      	beq.n	800997e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	330c      	adds	r3, #12
 8009950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800995a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	330c      	adds	r3, #12
 8009968:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800996a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800996c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e5      	bne.n	800994a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3314      	adds	r3, #20
 8009984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800998e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009990:	f043 0301 	orr.w	r3, r3, #1
 8009994:	657b      	str	r3, [r7, #84]	@ 0x54
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	3314      	adds	r3, #20
 800999c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800999e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80099a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80099a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e5      	bne.n	800997e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	3314      	adds	r3, #20
 80099b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	617b      	str	r3, [r7, #20]
   return(result);
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	3314      	adds	r3, #20
 80099d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80099d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6a39      	ldr	r1, [r7, #32]
 80099d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e5      	bne.n	80099b2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3760      	adds	r7, #96	@ 0x60
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	080096b3 	.word	0x080096b3
 80099f4:	080097df 	.word	0x080097df
 80099f8:	0800981b 	.word	0x0800981b

080099fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b089      	sub	sp, #36	@ 0x24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	69fa      	ldr	r2, [r7, #28]
 8009a24:	61ba      	str	r2, [r7, #24]
 8009a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	6979      	ldr	r1, [r7, #20]
 8009a2a:	69ba      	ldr	r2, [r7, #24]
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	613b      	str	r3, [r7, #16]
   return(result);
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e5      	bne.n	8009a04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009a40:	bf00      	nop
 8009a42:	3724      	adds	r7, #36	@ 0x24
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b095      	sub	sp, #84	@ 0x54
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	330c      	adds	r3, #12
 8009a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	330c      	adds	r3, #12
 8009a72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a74:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a7c:	e841 2300 	strex	r3, r2, [r1]
 8009a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1e5      	bne.n	8009a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3314      	adds	r3, #20
 8009a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	f023 0301 	bic.w	r3, r3, #1
 8009a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3314      	adds	r3, #20
 8009aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e5      	bne.n	8009a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d119      	bne.n	8009af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	330c      	adds	r3, #12
 8009aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f023 0310 	bic.w	r3, r3, #16
 8009ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	330c      	adds	r3, #12
 8009ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ae4:	61ba      	str	r2, [r7, #24]
 8009ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae8:	6979      	ldr	r1, [r7, #20]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	e841 2300 	strex	r3, r2, [r1]
 8009af0:	613b      	str	r3, [r7, #16]
   return(result);
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e5      	bne.n	8009ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2220      	movs	r2, #32
 8009afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009b06:	bf00      	nop
 8009b08:	3754      	adds	r7, #84	@ 0x54
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b084      	sub	sp, #16
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fd5e 	bl	80095e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b21      	cmp	r3, #33	@ 0x21
 8009b46:	d13e      	bne.n	8009bc6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b50:	d114      	bne.n	8009b7c <UART_Transmit_IT+0x48>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d110      	bne.n	8009b7c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b6e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	1c9a      	adds	r2, r3, #2
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	621a      	str	r2, [r3, #32]
 8009b7a:	e008      	b.n	8009b8e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	1c59      	adds	r1, r3, #1
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	6211      	str	r1, [r2, #32]
 8009b86:	781a      	ldrb	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	3b01      	subs	r3, #1
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d10f      	bne.n	8009bc2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bb0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e000      	b.n	8009bc8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009bc6:	2302      	movs	r3, #2
  }
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68da      	ldr	r2, [r3, #12]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7f9 fa52 	bl	800309e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b08c      	sub	sp, #48	@ 0x30
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009c10:	2300      	movs	r3, #0
 8009c12:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b22      	cmp	r3, #34	@ 0x22
 8009c1e:	f040 80aa 	bne.w	8009d76 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c2a:	d115      	bne.n	8009c58 <UART_Receive_IT+0x54>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	691b      	ldr	r3, [r3, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d111      	bne.n	8009c58 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c38:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c50:	1c9a      	adds	r2, r3, #2
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	629a      	str	r2, [r3, #40]	@ 0x28
 8009c56:	e024      	b.n	8009ca2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c66:	d007      	beq.n	8009c78 <UART_Receive_IT+0x74>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <UART_Receive_IT+0x82>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d106      	bne.n	8009c86 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c82:	701a      	strb	r2, [r3, #0]
 8009c84:	e008      	b.n	8009c98 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c96:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c9c:	1c5a      	adds	r2, r3, #1
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	4619      	mov	r1, r3
 8009cb0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d15d      	bne.n	8009d72 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f022 0220 	bic.w	r2, r2, #32
 8009cc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009cd4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	695a      	ldr	r2, [r3, #20]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f022 0201 	bic.w	r2, r2, #1
 8009ce4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d135      	bne.n	8009d68 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	330c      	adds	r3, #12
 8009d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	e853 3f00 	ldrex	r3, [r3]
 8009d10:	613b      	str	r3, [r7, #16]
   return(result);
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f023 0310 	bic.w	r3, r3, #16
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d22:	623a      	str	r2, [r7, #32]
 8009d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d26:	69f9      	ldr	r1, [r7, #28]
 8009d28:	6a3a      	ldr	r2, [r7, #32]
 8009d2a:	e841 2300 	strex	r3, r2, [r1]
 8009d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1e5      	bne.n	8009d02 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 0310 	and.w	r3, r3, #16
 8009d40:	2b10      	cmp	r3, #16
 8009d42:	d10a      	bne.n	8009d5a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	60fb      	str	r3, [r7, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	60fb      	str	r3, [r7, #12]
 8009d58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7f9 f8db 	bl	8002f1c <HAL_UARTEx_RxEventCallback>
 8009d66:	e002      	b.n	8009d6e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f7ff fc29 	bl	80095c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e002      	b.n	8009d78 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	e000      	b.n	8009d78 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d76:	2302      	movs	r3, #2
  }
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3730      	adds	r7, #48	@ 0x30
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d84:	b0c0      	sub	sp, #256	@ 0x100
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9c:	68d9      	ldr	r1, [r3, #12]
 8009d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	ea40 0301 	orr.w	r3, r0, r1
 8009da8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	431a      	orrs	r2, r3
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009dd8:	f021 010c 	bic.w	r1, r1, #12
 8009ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009de6:	430b      	orrs	r3, r1
 8009de8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dfa:	6999      	ldr	r1, [r3, #24]
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	ea40 0301 	orr.w	r3, r0, r1
 8009e06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800a04c <UART_SetConfig+0x2cc>)
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d005      	beq.n	8009e20 <UART_SetConfig+0xa0>
 8009e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	4b8d      	ldr	r3, [pc, #564]	@ (800a050 <UART_SetConfig+0x2d0>)
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d104      	bne.n	8009e2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009e20:	f7fd f8ce 	bl	8006fc0 <HAL_RCC_GetPCLK2Freq>
 8009e24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009e28:	e003      	b.n	8009e32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009e2a:	f7fd f8b5 	bl	8006f98 <HAL_RCC_GetPCLK1Freq>
 8009e2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e3c:	f040 810c 	bne.w	800a058 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e44:	2200      	movs	r2, #0
 8009e46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009e4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009e4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009e52:	4622      	mov	r2, r4
 8009e54:	462b      	mov	r3, r5
 8009e56:	1891      	adds	r1, r2, r2
 8009e58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009e5a:	415b      	adcs	r3, r3
 8009e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009e62:	4621      	mov	r1, r4
 8009e64:	eb12 0801 	adds.w	r8, r2, r1
 8009e68:	4629      	mov	r1, r5
 8009e6a:	eb43 0901 	adc.w	r9, r3, r1
 8009e6e:	f04f 0200 	mov.w	r2, #0
 8009e72:	f04f 0300 	mov.w	r3, #0
 8009e76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e82:	4690      	mov	r8, r2
 8009e84:	4699      	mov	r9, r3
 8009e86:	4623      	mov	r3, r4
 8009e88:	eb18 0303 	adds.w	r3, r8, r3
 8009e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e90:	462b      	mov	r3, r5
 8009e92:	eb49 0303 	adc.w	r3, r9, r3
 8009e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ea6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009eaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009eae:	460b      	mov	r3, r1
 8009eb0:	18db      	adds	r3, r3, r3
 8009eb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eb4:	4613      	mov	r3, r2
 8009eb6:	eb42 0303 	adc.w	r3, r2, r3
 8009eba:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ebc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009ec0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009ec4:	f7f6 f9d4 	bl	8000270 <__aeabi_uldivmod>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4b61      	ldr	r3, [pc, #388]	@ (800a054 <UART_SetConfig+0x2d4>)
 8009ece:	fba3 2302 	umull	r2, r3, r3, r2
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	011c      	lsls	r4, r3, #4
 8009ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009eda:	2200      	movs	r2, #0
 8009edc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ee0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ee4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009ee8:	4642      	mov	r2, r8
 8009eea:	464b      	mov	r3, r9
 8009eec:	1891      	adds	r1, r2, r2
 8009eee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009ef0:	415b      	adcs	r3, r3
 8009ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009ef8:	4641      	mov	r1, r8
 8009efa:	eb12 0a01 	adds.w	sl, r2, r1
 8009efe:	4649      	mov	r1, r9
 8009f00:	eb43 0b01 	adc.w	fp, r3, r1
 8009f04:	f04f 0200 	mov.w	r2, #0
 8009f08:	f04f 0300 	mov.w	r3, #0
 8009f0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f18:	4692      	mov	sl, r2
 8009f1a:	469b      	mov	fp, r3
 8009f1c:	4643      	mov	r3, r8
 8009f1e:	eb1a 0303 	adds.w	r3, sl, r3
 8009f22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f26:	464b      	mov	r3, r9
 8009f28:	eb4b 0303 	adc.w	r3, fp, r3
 8009f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009f3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009f40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009f44:	460b      	mov	r3, r1
 8009f46:	18db      	adds	r3, r3, r3
 8009f48:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	eb42 0303 	adc.w	r3, r2, r3
 8009f50:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009f56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009f5a:	f7f6 f989 	bl	8000270 <__aeabi_uldivmod>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	4b3b      	ldr	r3, [pc, #236]	@ (800a054 <UART_SetConfig+0x2d4>)
 8009f66:	fba3 2301 	umull	r2, r3, r3, r1
 8009f6a:	095b      	lsrs	r3, r3, #5
 8009f6c:	2264      	movs	r2, #100	@ 0x64
 8009f6e:	fb02 f303 	mul.w	r3, r2, r3
 8009f72:	1acb      	subs	r3, r1, r3
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009f7a:	4b36      	ldr	r3, [pc, #216]	@ (800a054 <UART_SetConfig+0x2d4>)
 8009f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8009f80:	095b      	lsrs	r3, r3, #5
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009f88:	441c      	add	r4, r3
 8009f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009f98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	1891      	adds	r1, r2, r2
 8009fa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009fa4:	415b      	adcs	r3, r3
 8009fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009fac:	4641      	mov	r1, r8
 8009fae:	1851      	adds	r1, r2, r1
 8009fb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009fb2:	4649      	mov	r1, r9
 8009fb4:	414b      	adcs	r3, r1
 8009fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fb8:	f04f 0200 	mov.w	r2, #0
 8009fbc:	f04f 0300 	mov.w	r3, #0
 8009fc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009fc4:	4659      	mov	r1, fp
 8009fc6:	00cb      	lsls	r3, r1, #3
 8009fc8:	4651      	mov	r1, sl
 8009fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009fce:	4651      	mov	r1, sl
 8009fd0:	00ca      	lsls	r2, r1, #3
 8009fd2:	4610      	mov	r0, r2
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	4642      	mov	r2, r8
 8009fda:	189b      	adds	r3, r3, r2
 8009fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	460a      	mov	r2, r1
 8009fe4:	eb42 0303 	adc.w	r3, r2, r3
 8009fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009ff8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a000:	460b      	mov	r3, r1
 800a002:	18db      	adds	r3, r3, r3
 800a004:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a006:	4613      	mov	r3, r2
 800a008:	eb42 0303 	adc.w	r3, r2, r3
 800a00c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a00e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a012:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a016:	f7f6 f92b 	bl	8000270 <__aeabi_uldivmod>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4b0d      	ldr	r3, [pc, #52]	@ (800a054 <UART_SetConfig+0x2d4>)
 800a020:	fba3 1302 	umull	r1, r3, r3, r2
 800a024:	095b      	lsrs	r3, r3, #5
 800a026:	2164      	movs	r1, #100	@ 0x64
 800a028:	fb01 f303 	mul.w	r3, r1, r3
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	00db      	lsls	r3, r3, #3
 800a030:	3332      	adds	r3, #50	@ 0x32
 800a032:	4a08      	ldr	r2, [pc, #32]	@ (800a054 <UART_SetConfig+0x2d4>)
 800a034:	fba2 2303 	umull	r2, r3, r2, r3
 800a038:	095b      	lsrs	r3, r3, #5
 800a03a:	f003 0207 	and.w	r2, r3, #7
 800a03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4422      	add	r2, r4
 800a046:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a048:	e106      	b.n	800a258 <UART_SetConfig+0x4d8>
 800a04a:	bf00      	nop
 800a04c:	40011000 	.word	0x40011000
 800a050:	40011400 	.word	0x40011400
 800a054:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a062:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a066:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a06a:	4642      	mov	r2, r8
 800a06c:	464b      	mov	r3, r9
 800a06e:	1891      	adds	r1, r2, r2
 800a070:	6239      	str	r1, [r7, #32]
 800a072:	415b      	adcs	r3, r3
 800a074:	627b      	str	r3, [r7, #36]	@ 0x24
 800a076:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a07a:	4641      	mov	r1, r8
 800a07c:	1854      	adds	r4, r2, r1
 800a07e:	4649      	mov	r1, r9
 800a080:	eb43 0501 	adc.w	r5, r3, r1
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	00eb      	lsls	r3, r5, #3
 800a08e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a092:	00e2      	lsls	r2, r4, #3
 800a094:	4614      	mov	r4, r2
 800a096:	461d      	mov	r5, r3
 800a098:	4643      	mov	r3, r8
 800a09a:	18e3      	adds	r3, r4, r3
 800a09c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	eb45 0303 	adc.w	r3, r5, r3
 800a0a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a0ba:	f04f 0200 	mov.w	r2, #0
 800a0be:	f04f 0300 	mov.w	r3, #0
 800a0c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	008b      	lsls	r3, r1, #2
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	008a      	lsls	r2, r1, #2
 800a0d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a0d8:	f7f6 f8ca 	bl	8000270 <__aeabi_uldivmod>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4b60      	ldr	r3, [pc, #384]	@ (800a264 <UART_SetConfig+0x4e4>)
 800a0e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	011c      	lsls	r4, r3, #4
 800a0ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a0f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a0f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	1891      	adds	r1, r2, r2
 800a102:	61b9      	str	r1, [r7, #24]
 800a104:	415b      	adcs	r3, r3
 800a106:	61fb      	str	r3, [r7, #28]
 800a108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a10c:	4641      	mov	r1, r8
 800a10e:	1851      	adds	r1, r2, r1
 800a110:	6139      	str	r1, [r7, #16]
 800a112:	4649      	mov	r1, r9
 800a114:	414b      	adcs	r3, r1
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	f04f 0300 	mov.w	r3, #0
 800a120:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a124:	4659      	mov	r1, fp
 800a126:	00cb      	lsls	r3, r1, #3
 800a128:	4651      	mov	r1, sl
 800a12a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a12e:	4651      	mov	r1, sl
 800a130:	00ca      	lsls	r2, r1, #3
 800a132:	4610      	mov	r0, r2
 800a134:	4619      	mov	r1, r3
 800a136:	4603      	mov	r3, r0
 800a138:	4642      	mov	r2, r8
 800a13a:	189b      	adds	r3, r3, r2
 800a13c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a140:	464b      	mov	r3, r9
 800a142:	460a      	mov	r2, r1
 800a144:	eb42 0303 	adc.w	r3, r2, r3
 800a148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a156:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a158:	f04f 0200 	mov.w	r2, #0
 800a15c:	f04f 0300 	mov.w	r3, #0
 800a160:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a164:	4649      	mov	r1, r9
 800a166:	008b      	lsls	r3, r1, #2
 800a168:	4641      	mov	r1, r8
 800a16a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a16e:	4641      	mov	r1, r8
 800a170:	008a      	lsls	r2, r1, #2
 800a172:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a176:	f7f6 f87b 	bl	8000270 <__aeabi_uldivmod>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4611      	mov	r1, r2
 800a180:	4b38      	ldr	r3, [pc, #224]	@ (800a264 <UART_SetConfig+0x4e4>)
 800a182:	fba3 2301 	umull	r2, r3, r3, r1
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	2264      	movs	r2, #100	@ 0x64
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
 800a18e:	1acb      	subs	r3, r1, r3
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	3332      	adds	r3, #50	@ 0x32
 800a194:	4a33      	ldr	r2, [pc, #204]	@ (800a264 <UART_SetConfig+0x4e4>)
 800a196:	fba2 2303 	umull	r2, r3, r2, r3
 800a19a:	095b      	lsrs	r3, r3, #5
 800a19c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1a0:	441c      	add	r4, r3
 800a1a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a1aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800a1ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	1891      	adds	r1, r2, r2
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	415b      	adcs	r3, r3
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1c0:	4641      	mov	r1, r8
 800a1c2:	1851      	adds	r1, r2, r1
 800a1c4:	6039      	str	r1, [r7, #0]
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	414b      	adcs	r3, r1
 800a1ca:	607b      	str	r3, [r7, #4]
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1d8:	4659      	mov	r1, fp
 800a1da:	00cb      	lsls	r3, r1, #3
 800a1dc:	4651      	mov	r1, sl
 800a1de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1e2:	4651      	mov	r1, sl
 800a1e4:	00ca      	lsls	r2, r1, #3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	189b      	adds	r3, r3, r2
 800a1f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a1f2:	464b      	mov	r3, r9
 800a1f4:	460a      	mov	r2, r1
 800a1f6:	eb42 0303 	adc.w	r3, r2, r3
 800a1fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	663b      	str	r3, [r7, #96]	@ 0x60
 800a206:	667a      	str	r2, [r7, #100]	@ 0x64
 800a208:	f04f 0200 	mov.w	r2, #0
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a214:	4649      	mov	r1, r9
 800a216:	008b      	lsls	r3, r1, #2
 800a218:	4641      	mov	r1, r8
 800a21a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a21e:	4641      	mov	r1, r8
 800a220:	008a      	lsls	r2, r1, #2
 800a222:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a226:	f7f6 f823 	bl	8000270 <__aeabi_uldivmod>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	4b0d      	ldr	r3, [pc, #52]	@ (800a264 <UART_SetConfig+0x4e4>)
 800a230:	fba3 1302 	umull	r1, r3, r3, r2
 800a234:	095b      	lsrs	r3, r3, #5
 800a236:	2164      	movs	r1, #100	@ 0x64
 800a238:	fb01 f303 	mul.w	r3, r1, r3
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	3332      	adds	r3, #50	@ 0x32
 800a242:	4a08      	ldr	r2, [pc, #32]	@ (800a264 <UART_SetConfig+0x4e4>)
 800a244:	fba2 2303 	umull	r2, r3, r2, r3
 800a248:	095b      	lsrs	r3, r3, #5
 800a24a:	f003 020f 	and.w	r2, r3, #15
 800a24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4422      	add	r2, r4
 800a256:	609a      	str	r2, [r3, #8]
}
 800a258:	bf00      	nop
 800a25a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a25e:	46bd      	mov	sp, r7
 800a260:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a264:	51eb851f 	.word	0x51eb851f

0800a268 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a268:	b084      	sub	sp, #16
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b084      	sub	sp, #16
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	f107 001c 	add.w	r0, r7, #28
 800a276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a27a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d123      	bne.n	800a2ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a286:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a2aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d105      	bne.n	800a2be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 fae8 	bl	800b894 <USB_CoreReset>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	73fb      	strb	r3, [r7, #15]
 800a2c8:	e01b      	b.n	800a302 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f001 fadc 	bl	800b894 <USB_CoreReset>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a2e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d106      	bne.n	800a2f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	639a      	str	r2, [r3, #56]	@ 0x38
 800a2f4:	e005      	b.n	800a302 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a302:	7fbb      	ldrb	r3, [r7, #30]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d10b      	bne.n	800a320 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f043 0206 	orr.w	r2, r3, #6
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f043 0220 	orr.w	r2, r3, #32
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a320:	7bfb      	ldrb	r3, [r7, #15]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a32c:	b004      	add	sp, #16
 800a32e:	4770      	bx	lr

0800a330 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a33e:	79fb      	ldrb	r3, [r7, #7]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d165      	bne.n	800a410 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4a41      	ldr	r2, [pc, #260]	@ (800a44c <USB_SetTurnaroundTime+0x11c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d906      	bls.n	800a35a <USB_SetTurnaroundTime+0x2a>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4a40      	ldr	r2, [pc, #256]	@ (800a450 <USB_SetTurnaroundTime+0x120>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d202      	bcs.n	800a35a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a354:	230f      	movs	r3, #15
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	e062      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	4a3c      	ldr	r2, [pc, #240]	@ (800a450 <USB_SetTurnaroundTime+0x120>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d306      	bcc.n	800a370 <USB_SetTurnaroundTime+0x40>
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	4a3b      	ldr	r2, [pc, #236]	@ (800a454 <USB_SetTurnaroundTime+0x124>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d202      	bcs.n	800a370 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a36a:	230e      	movs	r3, #14
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e057      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	4a38      	ldr	r2, [pc, #224]	@ (800a454 <USB_SetTurnaroundTime+0x124>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d306      	bcc.n	800a386 <USB_SetTurnaroundTime+0x56>
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	4a37      	ldr	r2, [pc, #220]	@ (800a458 <USB_SetTurnaroundTime+0x128>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d202      	bcs.n	800a386 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a380:	230d      	movs	r3, #13
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	e04c      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	4a33      	ldr	r2, [pc, #204]	@ (800a458 <USB_SetTurnaroundTime+0x128>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d306      	bcc.n	800a39c <USB_SetTurnaroundTime+0x6c>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	4a32      	ldr	r2, [pc, #200]	@ (800a45c <USB_SetTurnaroundTime+0x12c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d802      	bhi.n	800a39c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a396:	230c      	movs	r3, #12
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	e041      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4a2f      	ldr	r2, [pc, #188]	@ (800a45c <USB_SetTurnaroundTime+0x12c>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d906      	bls.n	800a3b2 <USB_SetTurnaroundTime+0x82>
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	4a2e      	ldr	r2, [pc, #184]	@ (800a460 <USB_SetTurnaroundTime+0x130>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d802      	bhi.n	800a3b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a3ac:	230b      	movs	r3, #11
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	e036      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	4a2a      	ldr	r2, [pc, #168]	@ (800a460 <USB_SetTurnaroundTime+0x130>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d906      	bls.n	800a3c8 <USB_SetTurnaroundTime+0x98>
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4a29      	ldr	r2, [pc, #164]	@ (800a464 <USB_SetTurnaroundTime+0x134>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d802      	bhi.n	800a3c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a3c2:	230a      	movs	r3, #10
 800a3c4:	617b      	str	r3, [r7, #20]
 800a3c6:	e02b      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4a26      	ldr	r2, [pc, #152]	@ (800a464 <USB_SetTurnaroundTime+0x134>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d906      	bls.n	800a3de <USB_SetTurnaroundTime+0xae>
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	4a25      	ldr	r2, [pc, #148]	@ (800a468 <USB_SetTurnaroundTime+0x138>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d202      	bcs.n	800a3de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a3d8:	2309      	movs	r3, #9
 800a3da:	617b      	str	r3, [r7, #20]
 800a3dc:	e020      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	4a21      	ldr	r2, [pc, #132]	@ (800a468 <USB_SetTurnaroundTime+0x138>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d306      	bcc.n	800a3f4 <USB_SetTurnaroundTime+0xc4>
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	4a20      	ldr	r2, [pc, #128]	@ (800a46c <USB_SetTurnaroundTime+0x13c>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d802      	bhi.n	800a3f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a3ee:	2308      	movs	r3, #8
 800a3f0:	617b      	str	r3, [r7, #20]
 800a3f2:	e015      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4a1d      	ldr	r2, [pc, #116]	@ (800a46c <USB_SetTurnaroundTime+0x13c>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d906      	bls.n	800a40a <USB_SetTurnaroundTime+0xda>
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	4a1c      	ldr	r2, [pc, #112]	@ (800a470 <USB_SetTurnaroundTime+0x140>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d202      	bcs.n	800a40a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a404:	2307      	movs	r3, #7
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	e00a      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a40a:	2306      	movs	r3, #6
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	e007      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a410:	79fb      	ldrb	r3, [r7, #7]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a416:	2309      	movs	r3, #9
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e001      	b.n	800a420 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a41c:	2309      	movs	r3, #9
 800a41e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	68da      	ldr	r2, [r3, #12]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	029b      	lsls	r3, r3, #10
 800a434:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a438:	431a      	orrs	r2, r3
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	00d8acbf 	.word	0x00d8acbf
 800a450:	00e4e1c0 	.word	0x00e4e1c0
 800a454:	00f42400 	.word	0x00f42400
 800a458:	01067380 	.word	0x01067380
 800a45c:	011a499f 	.word	0x011a499f
 800a460:	01312cff 	.word	0x01312cff
 800a464:	014ca43f 	.word	0x014ca43f
 800a468:	016e3600 	.word	0x016e3600
 800a46c:	01a6ab1f 	.word	0x01a6ab1f
 800a470:	01e84800 	.word	0x01e84800

0800a474 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f043 0201 	orr.w	r2, r3, #1
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	f023 0201 	bic.w	r2, r3, #1
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a4d4:	78fb      	ldrb	r3, [r7, #3]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d115      	bne.n	800a506 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a4e6:	200a      	movs	r0, #10
 800a4e8:	f7f9 f9f6 	bl	80038d8 <HAL_Delay>
      ms += 10U;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	330a      	adds	r3, #10
 800a4f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f001 f93f 	bl	800b776 <USB_GetMode>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d01e      	beq.n	800a53c <USB_SetCurrentMode+0x84>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2bc7      	cmp	r3, #199	@ 0xc7
 800a502:	d9f0      	bls.n	800a4e6 <USB_SetCurrentMode+0x2e>
 800a504:	e01a      	b.n	800a53c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a506:	78fb      	ldrb	r3, [r7, #3]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d115      	bne.n	800a538 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a518:	200a      	movs	r0, #10
 800a51a:	f7f9 f9dd 	bl	80038d8 <HAL_Delay>
      ms += 10U;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	330a      	adds	r3, #10
 800a522:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f001 f926 	bl	800b776 <USB_GetMode>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d005      	beq.n	800a53c <USB_SetCurrentMode+0x84>
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2bc7      	cmp	r3, #199	@ 0xc7
 800a534:	d9f0      	bls.n	800a518 <USB_SetCurrentMode+0x60>
 800a536:	e001      	b.n	800a53c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e005      	b.n	800a548 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2bc8      	cmp	r3, #200	@ 0xc8
 800a540:	d101      	bne.n	800a546 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e000      	b.n	800a548 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a550:	b084      	sub	sp, #16
 800a552:	b580      	push	{r7, lr}
 800a554:	b086      	sub	sp, #24
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a55e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a56a:	2300      	movs	r3, #0
 800a56c:	613b      	str	r3, [r7, #16]
 800a56e:	e009      	b.n	800a584 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3340      	adds	r3, #64	@ 0x40
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	4413      	add	r3, r2
 800a57a:	2200      	movs	r2, #0
 800a57c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	3301      	adds	r3, #1
 800a582:	613b      	str	r3, [r7, #16]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2b0e      	cmp	r3, #14
 800a588:	d9f2      	bls.n	800a570 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a58a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d11c      	bne.n	800a5cc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5a0:	f043 0302 	orr.w	r3, r3, #2
 800a5a4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	639a      	str	r2, [r3, #56]	@ 0x38
 800a5ca:	e00b      	b.n	800a5e4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d10d      	bne.n	800a614 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d104      	bne.n	800a60a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a600:	2100      	movs	r1, #0
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f968 	bl	800a8d8 <USB_SetDevSpeed>
 800a608:	e008      	b.n	800a61c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a60a:	2101      	movs	r1, #1
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f963 	bl	800a8d8 <USB_SetDevSpeed>
 800a612:	e003      	b.n	800a61c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a614:	2103      	movs	r1, #3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f95e 	bl	800a8d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a61c:	2110      	movs	r1, #16
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 f8fa 	bl	800a818 <USB_FlushTxFifo>
 800a624:	4603      	mov	r3, r0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f924 	bl	800a87c <USB_FlushRxFifo>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a644:	461a      	mov	r2, r3
 800a646:	2300      	movs	r3, #0
 800a648:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a650:	461a      	mov	r2, r3
 800a652:	2300      	movs	r3, #0
 800a654:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a65c:	461a      	mov	r2, r3
 800a65e:	2300      	movs	r3, #0
 800a660:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a662:	2300      	movs	r3, #0
 800a664:	613b      	str	r3, [r7, #16]
 800a666:	e043      	b.n	800a6f0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a67a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a67e:	d118      	bne.n	800a6b2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d10a      	bne.n	800a69c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a692:	461a      	mov	r2, r3
 800a694:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a698:	6013      	str	r3, [r2, #0]
 800a69a:	e013      	b.n	800a6c4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	015a      	lsls	r2, r3, #5
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4413      	add	r3, r2
 800a6a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	e008      	b.n	800a6c4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6be:	461a      	mov	r2, r3
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a6e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
 800a6f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d3b5      	bcc.n	800a668 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	613b      	str	r3, [r7, #16]
 800a700:	e043      	b.n	800a78a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a718:	d118      	bne.n	800a74c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	015a      	lsls	r2, r3, #5
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4413      	add	r3, r2
 800a728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72c:	461a      	mov	r2, r3
 800a72e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a732:	6013      	str	r3, [r2, #0]
 800a734:	e013      	b.n	800a75e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a742:	461a      	mov	r2, r3
 800a744:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a748:	6013      	str	r3, [r2, #0]
 800a74a:	e008      	b.n	800a75e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a758:	461a      	mov	r2, r3
 800a75a:	2300      	movs	r3, #0
 800a75c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a76a:	461a      	mov	r2, r3
 800a76c:	2300      	movs	r3, #0
 800a76e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77c:	461a      	mov	r2, r3
 800a77e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	3301      	adds	r3, #1
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a78e:	461a      	mov	r2, r3
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4293      	cmp	r3, r2
 800a794:	d3b5      	bcc.n	800a702 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a7a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a7b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	f043 0210 	orr.w	r2, r3, #16
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	699a      	ldr	r2, [r3, #24]
 800a7d0:	4b10      	ldr	r3, [pc, #64]	@ (800a814 <USB_DevInit+0x2c4>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f043 0208 	orr.w	r2, r3, #8
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a7ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d107      	bne.n	800a804 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7fc:	f043 0304 	orr.w	r3, r3, #4
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a804:	7dfb      	ldrb	r3, [r7, #23]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a810:	b004      	add	sp, #16
 800a812:	4770      	bx	lr
 800a814:	803c3800 	.word	0x803c3800

0800a818 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a818:	b480      	push	{r7}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	3301      	adds	r3, #1
 800a82a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a832:	d901      	bls.n	800a838 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e01b      	b.n	800a870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	daf2      	bge.n	800a826 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	019b      	lsls	r3, r3, #6
 800a848:	f043 0220 	orr.w	r2, r3, #32
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a85c:	d901      	bls.n	800a862 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a85e:	2303      	movs	r3, #3
 800a860:	e006      	b.n	800a870 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b20      	cmp	r3, #32
 800a86c:	d0f0      	beq.n	800a850 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	3301      	adds	r3, #1
 800a88c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a894:	d901      	bls.n	800a89a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e018      	b.n	800a8cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	daf2      	bge.n	800a888 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2210      	movs	r2, #16
 800a8aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8b8:	d901      	bls.n	800a8be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e006      	b.n	800a8cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	f003 0310 	and.w	r3, r3, #16
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d0f0      	beq.n	800a8ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	68f9      	ldr	r1, [r7, #12]
 800a8f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3714      	adds	r7, #20
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b087      	sub	sp, #28
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f003 0306 	and.w	r3, r3, #6
 800a922:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]
 800a92e:	e00a      	b.n	800a946 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b02      	cmp	r3, #2
 800a934:	d002      	beq.n	800a93c <USB_GetDevSpeed+0x32>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2b06      	cmp	r3, #6
 800a93a:	d102      	bne.n	800a942 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a93c:	2302      	movs	r3, #2
 800a93e:	75fb      	strb	r3, [r7, #23]
 800a940:	e001      	b.n	800a946 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a942:	230f      	movs	r3, #15
 800a944:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a946:	7dfb      	ldrb	r3, [r7, #23]
}
 800a948:	4618      	mov	r0, r3
 800a94a:	371c      	adds	r7, #28
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr

0800a954 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	785b      	ldrb	r3, [r3, #1]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d13a      	bne.n	800a9e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a976:	69da      	ldr	r2, [r3, #28]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	2101      	movs	r1, #1
 800a982:	fa01 f303 	lsl.w	r3, r1, r3
 800a986:	b29b      	uxth	r3, r3
 800a988:	68f9      	ldr	r1, [r7, #12]
 800a98a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a98e:	4313      	orrs	r3, r2
 800a990:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d155      	bne.n	800aa54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	015a      	lsls	r2, r3, #5
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	791b      	ldrb	r3, [r3, #4]
 800a9c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	059b      	lsls	r3, r3, #22
 800a9ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	68ba      	ldr	r2, [r7, #8]
 800a9d0:	0151      	lsls	r1, r2, #5
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	440a      	add	r2, r1
 800a9d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	e036      	b.n	800aa54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ec:	69da      	ldr	r2, [r3, #28]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	f003 030f 	and.w	r3, r3, #15
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9fc:	041b      	lsls	r3, r3, #16
 800a9fe:	68f9      	ldr	r1, [r7, #12]
 800aa00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa04:	4313      	orrs	r3, r2
 800aa06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	015a      	lsls	r2, r3, #5
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11a      	bne.n	800aa54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	791b      	ldrb	r3, [r3, #4]
 800aa38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	0151      	lsls	r1, r2, #5
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	440a      	add	r2, r1
 800aa46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aa4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3714      	adds	r7, #20
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
	...

0800aa64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	785b      	ldrb	r3, [r3, #1]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d161      	bne.n	800ab44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa96:	d11f      	bne.n	800aad8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aab2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aab6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aad2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	f003 030f 	and.w	r3, r3, #15
 800aae8:	2101      	movs	r1, #1
 800aaea:	fa01 f303 	lsl.w	r3, r1, r3
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	43db      	mvns	r3, r3
 800aaf2:	68f9      	ldr	r1, [r7, #12]
 800aaf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aaf8:	4013      	ands	r3, r2
 800aafa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab02:	69da      	ldr	r2, [r3, #28]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	781b      	ldrb	r3, [r3, #0]
 800ab08:	f003 030f 	and.w	r3, r3, #15
 800ab0c:	2101      	movs	r1, #1
 800ab0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	43db      	mvns	r3, r3
 800ab16:	68f9      	ldr	r1, [r7, #12]
 800ab18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	0159      	lsls	r1, r3, #5
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	440b      	add	r3, r1
 800ab36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	4b35      	ldr	r3, [pc, #212]	@ (800ac14 <USB_DeactivateEndpoint+0x1b0>)
 800ab3e:	4013      	ands	r3, r2
 800ab40:	600b      	str	r3, [r1, #0]
 800ab42:	e060      	b.n	800ac06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	015a      	lsls	r2, r3, #5
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab5a:	d11f      	bne.n	800ab9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	0151      	lsls	r1, r2, #5
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	440a      	add	r2, r1
 800ab72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	f003 030f 	and.w	r3, r3, #15
 800abac:	2101      	movs	r1, #1
 800abae:	fa01 f303 	lsl.w	r3, r1, r3
 800abb2:	041b      	lsls	r3, r3, #16
 800abb4:	43db      	mvns	r3, r3
 800abb6:	68f9      	ldr	r1, [r7, #12]
 800abb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abbc:	4013      	ands	r3, r2
 800abbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc6:	69da      	ldr	r2, [r3, #28]
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	f003 030f 	and.w	r3, r3, #15
 800abd0:	2101      	movs	r1, #1
 800abd2:	fa01 f303 	lsl.w	r3, r1, r3
 800abd6:	041b      	lsls	r3, r3, #16
 800abd8:	43db      	mvns	r3, r3
 800abda:	68f9      	ldr	r1, [r7, #12]
 800abdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abe0:	4013      	ands	r3, r2
 800abe2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	0159      	lsls	r1, r3, #5
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	440b      	add	r3, r1
 800abfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abfe:	4619      	mov	r1, r3
 800ac00:	4b05      	ldr	r3, [pc, #20]	@ (800ac18 <USB_DeactivateEndpoint+0x1b4>)
 800ac02:	4013      	ands	r3, r2
 800ac04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	ec337800 	.word	0xec337800
 800ac18:	eff37800 	.word	0xeff37800

0800ac1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	@ 0x28
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	4613      	mov	r3, r2
 800ac28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	785b      	ldrb	r3, [r3, #1]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	f040 817f 	bne.w	800af3c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d132      	bne.n	800acac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	015a      	lsls	r2, r3, #5
 800ac4a:	69fb      	ldr	r3, [r7, #28]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	0151      	lsls	r1, r2, #5
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	440a      	add	r2, r1
 800ac5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	015a      	lsls	r2, r3, #5
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	69ba      	ldr	r2, [r7, #24]
 800ac7a:	0151      	lsls	r1, r2, #5
 800ac7c:	69fa      	ldr	r2, [r7, #28]
 800ac7e:	440a      	add	r2, r1
 800ac80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	0151      	lsls	r1, r2, #5
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	440a      	add	r2, r1
 800aca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aca4:	0cdb      	lsrs	r3, r3, #19
 800aca6:	04db      	lsls	r3, r3, #19
 800aca8:	6113      	str	r3, [r2, #16]
 800acaa:	e097      	b.n	800addc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	015a      	lsls	r2, r3, #5
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	4413      	add	r3, r2
 800acb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	69ba      	ldr	r2, [r7, #24]
 800acbc:	0151      	lsls	r1, r2, #5
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	440a      	add	r2, r1
 800acc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acc6:	0cdb      	lsrs	r3, r3, #19
 800acc8:	04db      	lsls	r3, r3, #19
 800acca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	015a      	lsls	r2, r3, #5
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	4413      	add	r3, r2
 800acd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	69ba      	ldr	r2, [r7, #24]
 800acdc:	0151      	lsls	r1, r2, #5
 800acde:	69fa      	ldr	r2, [r7, #28]
 800ace0:	440a      	add	r2, r1
 800ace2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ace6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800acea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800acee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d11a      	bne.n	800ad2c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	691a      	ldr	r2, [r3, #16]
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d903      	bls.n	800ad0a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	689a      	ldr	r2, [r3, #8]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	69ba      	ldr	r2, [r7, #24]
 800ad1a:	0151      	lsls	r1, r2, #5
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	440a      	add	r2, r1
 800ad20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad28:	6113      	str	r3, [r2, #16]
 800ad2a:	e044      	b.n	800adb6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	691a      	ldr	r2, [r3, #16]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	4413      	add	r3, r2
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad40:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	015a      	lsls	r2, r3, #5
 800ad46:	69fb      	ldr	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad4e:	691a      	ldr	r2, [r3, #16]
 800ad50:	8afb      	ldrh	r3, [r7, #22]
 800ad52:	04d9      	lsls	r1, r3, #19
 800ad54:	4ba4      	ldr	r3, [pc, #656]	@ (800afe8 <USB_EPStartXfer+0x3cc>)
 800ad56:	400b      	ands	r3, r1
 800ad58:	69b9      	ldr	r1, [r7, #24]
 800ad5a:	0148      	lsls	r0, r1, #5
 800ad5c:	69f9      	ldr	r1, [r7, #28]
 800ad5e:	4401      	add	r1, r0
 800ad60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad64:	4313      	orrs	r3, r2
 800ad66:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	791b      	ldrb	r3, [r3, #4]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d122      	bne.n	800adb6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	69ba      	ldr	r2, [r7, #24]
 800ad80:	0151      	lsls	r1, r2, #5
 800ad82:	69fa      	ldr	r2, [r7, #28]
 800ad84:	440a      	add	r2, r1
 800ad86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad8a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ad8e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad9c:	691a      	ldr	r2, [r3, #16]
 800ad9e:	8afb      	ldrh	r3, [r7, #22]
 800ada0:	075b      	lsls	r3, r3, #29
 800ada2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ada6:	69b9      	ldr	r1, [r7, #24]
 800ada8:	0148      	lsls	r0, r1, #5
 800adaa:	69f9      	ldr	r1, [r7, #28]
 800adac:	4401      	add	r1, r0
 800adae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800adb2:	4313      	orrs	r3, r2
 800adb4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	015a      	lsls	r2, r3, #5
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	4413      	add	r3, r2
 800adbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adcc:	69b9      	ldr	r1, [r7, #24]
 800adce:	0148      	lsls	r0, r1, #5
 800add0:	69f9      	ldr	r1, [r7, #28]
 800add2:	4401      	add	r1, r0
 800add4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800add8:	4313      	orrs	r3, r2
 800adda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d14b      	bne.n	800ae7a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	69db      	ldr	r3, [r3, #28]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d009      	beq.n	800adfe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adf6:	461a      	mov	r2, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	791b      	ldrb	r3, [r3, #4]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d128      	bne.n	800ae58 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d110      	bne.n	800ae38 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	69ba      	ldr	r2, [r7, #24]
 800ae26:	0151      	lsls	r1, r2, #5
 800ae28:	69fa      	ldr	r2, [r7, #28]
 800ae2a:	440a      	add	r2, r1
 800ae2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	e00f      	b.n	800ae58 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	015a      	lsls	r2, r3, #5
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	4413      	add	r3, r2
 800ae40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	0151      	lsls	r1, r2, #5
 800ae4a:	69fa      	ldr	r2, [r7, #28]
 800ae4c:	440a      	add	r2, r1
 800ae4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae56:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69ba      	ldr	r2, [r7, #24]
 800ae68:	0151      	lsls	r1, r2, #5
 800ae6a:	69fa      	ldr	r2, [r7, #28]
 800ae6c:	440a      	add	r2, r1
 800ae6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae76:	6013      	str	r3, [r2, #0]
 800ae78:	e166      	b.n	800b148 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	0151      	lsls	r1, r2, #5
 800ae8c:	69fa      	ldr	r2, [r7, #28]
 800ae8e:	440a      	add	r2, r1
 800ae90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae98:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	791b      	ldrb	r3, [r3, #4]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d015      	beq.n	800aece <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 814e 	beq.w	800b148 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	f003 030f 	and.w	r3, r3, #15
 800aebc:	2101      	movs	r1, #1
 800aebe:	fa01 f303 	lsl.w	r3, r1, r3
 800aec2:	69f9      	ldr	r1, [r7, #28]
 800aec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aec8:	4313      	orrs	r3, r2
 800aeca:	634b      	str	r3, [r1, #52]	@ 0x34
 800aecc:	e13c      	b.n	800b148 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d110      	bne.n	800af00 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	69ba      	ldr	r2, [r7, #24]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	69fa      	ldr	r2, [r7, #28]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aef8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	e00f      	b.n	800af20 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af00:	69bb      	ldr	r3, [r7, #24]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	0151      	lsls	r1, r2, #5
 800af12:	69fa      	ldr	r2, [r7, #28]
 800af14:	440a      	add	r2, r1
 800af16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af1e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	68d9      	ldr	r1, [r3, #12]
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	781a      	ldrb	r2, [r3, #0]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	691b      	ldr	r3, [r3, #16]
 800af2c:	b298      	uxth	r0, r3
 800af2e:	79fb      	ldrb	r3, [r7, #7]
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	4603      	mov	r3, r0
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f000 f9b9 	bl	800b2ac <USB_WritePacket>
 800af3a:	e105      	b.n	800b148 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	0151      	lsls	r1, r2, #5
 800af4e:	69fa      	ldr	r2, [r7, #28]
 800af50:	440a      	add	r2, r1
 800af52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af56:	0cdb      	lsrs	r3, r3, #19
 800af58:	04db      	lsls	r3, r3, #19
 800af5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	0151      	lsls	r1, r2, #5
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	440a      	add	r2, r1
 800af72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af76:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af7a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800af7e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d132      	bne.n	800afec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	691b      	ldr	r3, [r3, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d003      	beq.n	800af96 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	689a      	ldr	r2, [r3, #8]
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	689a      	ldr	r2, [r3, #8]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	015a      	lsls	r2, r3, #5
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	4413      	add	r3, r2
 800afa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afaa:	691a      	ldr	r2, [r3, #16]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afb4:	69b9      	ldr	r1, [r7, #24]
 800afb6:	0148      	lsls	r0, r1, #5
 800afb8:	69f9      	ldr	r1, [r7, #28]
 800afba:	4401      	add	r1, r0
 800afbc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800afc0:	4313      	orrs	r3, r2
 800afc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	015a      	lsls	r2, r3, #5
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	4413      	add	r3, r2
 800afcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	0151      	lsls	r1, r2, #5
 800afd6:	69fa      	ldr	r2, [r7, #28]
 800afd8:	440a      	add	r2, r1
 800afda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afe2:	6113      	str	r3, [r2, #16]
 800afe4:	e062      	b.n	800b0ac <USB_EPStartXfer+0x490>
 800afe6:	bf00      	nop
 800afe8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d123      	bne.n	800b03c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b000:	691a      	ldr	r2, [r3, #16]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b00a:	69b9      	ldr	r1, [r7, #24]
 800b00c:	0148      	lsls	r0, r1, #5
 800b00e:	69f9      	ldr	r1, [r7, #28]
 800b010:	4401      	add	r1, r0
 800b012:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b016:	4313      	orrs	r3, r2
 800b018:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	0151      	lsls	r1, r2, #5
 800b02c:	69fa      	ldr	r2, [r7, #28]
 800b02e:	440a      	add	r2, r1
 800b030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b034:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b038:	6113      	str	r3, [r2, #16]
 800b03a:	e037      	b.n	800b0ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	691a      	ldr	r2, [r3, #16]
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	4413      	add	r3, r2
 800b046:	1e5a      	subs	r2, r3, #1
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b050:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	8afa      	ldrh	r2, [r7, #22]
 800b058:	fb03 f202 	mul.w	r2, r3, r2
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	015a      	lsls	r2, r3, #5
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	4413      	add	r3, r2
 800b068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b06c:	691a      	ldr	r2, [r3, #16]
 800b06e:	8afb      	ldrh	r3, [r7, #22]
 800b070:	04d9      	lsls	r1, r3, #19
 800b072:	4b38      	ldr	r3, [pc, #224]	@ (800b154 <USB_EPStartXfer+0x538>)
 800b074:	400b      	ands	r3, r1
 800b076:	69b9      	ldr	r1, [r7, #24]
 800b078:	0148      	lsls	r0, r1, #5
 800b07a:	69f9      	ldr	r1, [r7, #28]
 800b07c:	4401      	add	r1, r0
 800b07e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b082:	4313      	orrs	r3, r2
 800b084:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6a1b      	ldr	r3, [r3, #32]
 800b098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b09c:	69b9      	ldr	r1, [r7, #24]
 800b09e:	0148      	lsls	r0, r1, #5
 800b0a0:	69f9      	ldr	r1, [r7, #28]
 800b0a2:	4401      	add	r1, r0
 800b0a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d10d      	bne.n	800b0ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d009      	beq.n	800b0ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	68d9      	ldr	r1, [r3, #12]
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ca:	460a      	mov	r2, r1
 800b0cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	791b      	ldrb	r3, [r3, #4]
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d128      	bne.n	800b128 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d110      	bne.n	800b108 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	0151      	lsls	r1, r2, #5
 800b0f8:	69fa      	ldr	r2, [r7, #28]
 800b0fa:	440a      	add	r2, r1
 800b0fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b104:	6013      	str	r3, [r2, #0]
 800b106:	e00f      	b.n	800b128 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	69ba      	ldr	r2, [r7, #24]
 800b118:	0151      	lsls	r1, r2, #5
 800b11a:	69fa      	ldr	r2, [r7, #28]
 800b11c:	440a      	add	r2, r1
 800b11e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b126:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b128:	69bb      	ldr	r3, [r7, #24]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	69fa      	ldr	r2, [r7, #28]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b142:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b146:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b148:	2300      	movs	r3, #0
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	1ff80000 	.word	0x1ff80000

0800b158 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b158:	b480      	push	{r7}
 800b15a:	b087      	sub	sp, #28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	785b      	ldrb	r3, [r3, #1]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d14a      	bne.n	800b20c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b18a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b18e:	f040 8086 	bne.w	800b29e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	781b      	ldrb	r3, [r3, #0]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	683a      	ldr	r2, [r7, #0]
 800b1a4:	7812      	ldrb	r2, [r2, #0]
 800b1a6:	0151      	lsls	r1, r2, #5
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	440a      	add	r2, r1
 800b1ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	7812      	ldrb	r2, [r2, #0]
 800b1ca:	0151      	lsls	r1, r2, #5
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	440a      	add	r2, r1
 800b1d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b1d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	3301      	adds	r3, #1
 800b1de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d902      	bls.n	800b1f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b1ee:	e056      	b.n	800b29e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	015a      	lsls	r2, r3, #5
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b204:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b208:	d0e7      	beq.n	800b1da <USB_EPStopXfer+0x82>
 800b20a:	e048      	b.n	800b29e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	015a      	lsls	r2, r3, #5
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	4413      	add	r3, r2
 800b216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b224:	d13b      	bne.n	800b29e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	683a      	ldr	r2, [r7, #0]
 800b238:	7812      	ldrb	r2, [r2, #0]
 800b23a:	0151      	lsls	r1, r2, #5
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	440a      	add	r2, r1
 800b240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b244:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b248:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	7812      	ldrb	r2, [r2, #0]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	440a      	add	r2, r1
 800b264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b268:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b26c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d902      	bls.n	800b284 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	75fb      	strb	r3, [r7, #23]
          break;
 800b282:	e00c      	b.n	800b29e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b29c:	d0e7      	beq.n	800b26e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	371c      	adds	r7, #28
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b089      	sub	sp, #36	@ 0x24
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	4611      	mov	r1, r2
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	71fb      	strb	r3, [r7, #7]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b2ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d123      	bne.n	800b31a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b2d2:	88bb      	ldrh	r3, [r7, #4]
 800b2d4:	3303      	adds	r3, #3
 800b2d6:	089b      	lsrs	r3, r3, #2
 800b2d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61bb      	str	r3, [r7, #24]
 800b2de:	e018      	b.n	800b312 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b2e0:	79fb      	ldrb	r3, [r7, #7]
 800b2e2:	031a      	lsls	r2, r3, #12
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	3301      	adds	r3, #1
 800b304:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	3301      	adds	r3, #1
 800b30a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	3301      	adds	r3, #1
 800b310:	61bb      	str	r3, [r7, #24]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	429a      	cmp	r2, r3
 800b318:	d3e2      	bcc.n	800b2e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3724      	adds	r7, #36	@ 0x24
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr

0800b328 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b328:	b480      	push	{r7}
 800b32a:	b08b      	sub	sp, #44	@ 0x2c
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	4613      	mov	r3, r2
 800b334:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b33e:	88fb      	ldrh	r3, [r7, #6]
 800b340:	089b      	lsrs	r3, r3, #2
 800b342:	b29b      	uxth	r3, r3
 800b344:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	f003 0303 	and.w	r3, r3, #3
 800b34c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b34e:	2300      	movs	r3, #0
 800b350:	623b      	str	r3, [r7, #32]
 800b352:	e014      	b.n	800b37e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b35a:	681a      	ldr	r2, [r3, #0]
 800b35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b35e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	3301      	adds	r3, #1
 800b364:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b368:	3301      	adds	r3, #1
 800b36a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36e:	3301      	adds	r3, #1
 800b370:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b374:	3301      	adds	r3, #1
 800b376:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	3301      	adds	r3, #1
 800b37c:	623b      	str	r3, [r7, #32]
 800b37e:	6a3a      	ldr	r2, [r7, #32]
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	429a      	cmp	r2, r3
 800b384:	d3e6      	bcc.n	800b354 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b386:	8bfb      	ldrh	r3, [r7, #30]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d01e      	beq.n	800b3ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b396:	461a      	mov	r2, r3
 800b398:	f107 0310 	add.w	r3, r7, #16
 800b39c:	6812      	ldr	r2, [r2, #0]
 800b39e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	00db      	lsls	r3, r3, #3
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b0:	701a      	strb	r2, [r3, #0]
      i++;
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	623b      	str	r3, [r7, #32]
      pDest++;
 800b3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b3be:	8bfb      	ldrh	r3, [r7, #30]
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b3c4:	8bfb      	ldrh	r3, [r7, #30]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1ea      	bne.n	800b3a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	372c      	adds	r7, #44	@ 0x2c
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d12c      	bne.n	800b44e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	db12      	blt.n	800b42c <USB_EPSetStall+0x54>
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00f      	beq.n	800b42c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68ba      	ldr	r2, [r7, #8]
 800b41c:	0151      	lsls	r1, r2, #5
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	440a      	add	r2, r1
 800b422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b426:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b42a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	0151      	lsls	r1, r2, #5
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	440a      	add	r2, r1
 800b442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b446:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	e02b      	b.n	800b4a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	db12      	blt.n	800b486 <USB_EPSetStall+0xae>
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00f      	beq.n	800b486 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	015a      	lsls	r2, r3, #5
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b480:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b484:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	015a      	lsls	r2, r3, #5
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	4413      	add	r3, r2
 800b48e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	0151      	lsls	r1, r2, #5
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	440a      	add	r2, r1
 800b49c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d128      	bne.n	800b522 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	015a      	lsls	r2, r3, #5
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	0151      	lsls	r1, r2, #5
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	440a      	add	r2, r1
 800b4e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b4ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	791b      	ldrb	r3, [r3, #4]
 800b4f4:	2b03      	cmp	r3, #3
 800b4f6:	d003      	beq.n	800b500 <USB_EPClearStall+0x4c>
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	791b      	ldrb	r3, [r3, #4]
 800b4fc:	2b02      	cmp	r3, #2
 800b4fe:	d138      	bne.n	800b572 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	015a      	lsls	r2, r3, #5
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4413      	add	r3, r2
 800b508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	0151      	lsls	r1, r2, #5
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	440a      	add	r2, r1
 800b516:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b51a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	e027      	b.n	800b572 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	0151      	lsls	r1, r2, #5
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	440a      	add	r2, r1
 800b538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b53c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b540:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	791b      	ldrb	r3, [r3, #4]
 800b546:	2b03      	cmp	r3, #3
 800b548:	d003      	beq.n	800b552 <USB_EPClearStall+0x9e>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	791b      	ldrb	r3, [r3, #4]
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d10f      	bne.n	800b572 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	015a      	lsls	r2, r3, #5
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	4413      	add	r3, r2
 800b55a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	68ba      	ldr	r2, [r7, #8]
 800b562:	0151      	lsls	r1, r2, #5
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	440a      	add	r2, r1
 800b568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b56c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b570:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b59e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b5a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	78fb      	ldrb	r3, [r7, #3]
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b5b4:	68f9      	ldr	r1, [r7, #12]
 800b5b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b5e6:	f023 0303 	bic.w	r3, r3, #3
 800b5ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5fa:	f023 0302 	bic.w	r3, r3, #2
 800b5fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b60e:	b480      	push	{r7}
 800b610:	b085      	sub	sp, #20
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b628:	f023 0303 	bic.w	r3, r3, #3
 800b62c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b63c:	f043 0302 	orr.w	r3, r3, #2
 800b640:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3714      	adds	r7, #20
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b650:	b480      	push	{r7}
 800b652:	b085      	sub	sp, #20
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	4013      	ands	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b668:	68fb      	ldr	r3, [r7, #12]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b676:	b480      	push	{r7}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	4013      	ands	r3, r2
 800b698:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	0c1b      	lsrs	r3, r3, #16
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3714      	adds	r7, #20
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b085      	sub	sp, #20
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	68ba      	ldr	r2, [r7, #8]
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	b29b      	uxth	r3, r3
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b085      	sub	sp, #20
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b6ee:	78fb      	ldrb	r3, [r7, #3]
 800b6f0:	015a      	lsls	r2, r3, #5
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	4413      	add	r3, r2
 800b6f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	4013      	ands	r3, r2
 800b70a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b70c:	68bb      	ldr	r3, [r7, #8]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b087      	sub	sp, #28
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b73c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	f003 030f 	and.w	r3, r3, #15
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	fa22 f303 	lsr.w	r3, r2, r3
 800b74a:	01db      	lsls	r3, r3, #7
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b754:	78fb      	ldrb	r3, [r7, #3]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	4013      	ands	r3, r2
 800b766:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b768:	68bb      	ldr	r3, [r7, #8]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr

0800b776 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	f003 0301 	and.w	r3, r3, #1
}
 800b786:	4618      	mov	r0, r3
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr

0800b792 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b792:	b480      	push	{r7}
 800b794:	b085      	sub	sp, #20
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b7b0:	f023 0307 	bic.w	r3, r3, #7
 800b7b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b7c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	607a      	str	r2, [r7, #4]
 800b7e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	333c      	adds	r3, #60	@ 0x3c
 800b7ee:	3304      	adds	r3, #4
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	4a26      	ldr	r2, [pc, #152]	@ (800b890 <USB_EP0_OutStart+0xb8>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d90a      	bls.n	800b812 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b80c:	d101      	bne.n	800b812 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	e037      	b.n	800b882 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b818:	461a      	mov	r2, r3
 800b81a:	2300      	movs	r3, #0
 800b81c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b824:	691b      	ldr	r3, [r3, #16]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b82c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b840:	f043 0318 	orr.w	r3, r3, #24
 800b844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	697a      	ldr	r2, [r7, #20]
 800b850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b854:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b858:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b85a:	7afb      	ldrb	r3, [r7, #11]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d10f      	bne.n	800b880 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b866:	461a      	mov	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b87a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b87e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	4f54300a 	.word	0x4f54300a

0800b894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8ac:	d901      	bls.n	800b8b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8ae:	2303      	movs	r3, #3
 800b8b0:	e022      	b.n	800b8f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	daf2      	bge.n	800b8a0 <USB_CoreReset+0xc>

  count = 10U;
 800b8ba:	230a      	movs	r3, #10
 800b8bc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b8be:	e002      	b.n	800b8c6 <USB_CoreReset+0x32>
  {
    count--;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1f9      	bne.n	800b8c0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f043 0201 	orr.w	r2, r3, #1
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8e4:	d901      	bls.n	800b8ea <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e006      	b.n	800b8f8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d0f0      	beq.n	800b8d8 <USB_CoreReset+0x44>

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3714      	adds	r7, #20
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800b908:	f000 fa80 	bl	800be0c <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800b90c:	2201      	movs	r2, #1
 800b90e:	4912      	ldr	r1, [pc, #72]	@ (800b958 <MX_USB_DEVICE_Init+0x54>)
 800b910:	4812      	ldr	r0, [pc, #72]	@ (800b95c <MX_USB_DEVICE_Init+0x58>)
 800b912:	f000 fe71 	bl	800c5f8 <USBD_Init>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800b91c:	f7f6 fdfa 	bl	8002514 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800b920:	490f      	ldr	r1, [pc, #60]	@ (800b960 <MX_USB_DEVICE_Init+0x5c>)
 800b922:	480e      	ldr	r0, [pc, #56]	@ (800b95c <MX_USB_DEVICE_Init+0x58>)
 800b924:	f000 fe94 	bl	800c650 <USBD_RegisterClass>
 800b928:	4603      	mov	r3, r0
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800b92e:	f7f6 fdf1 	bl	8002514 <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 800b932:	490c      	ldr	r1, [pc, #48]	@ (800b964 <MX_USB_DEVICE_Init+0x60>)
 800b934:	4809      	ldr	r0, [pc, #36]	@ (800b95c <MX_USB_DEVICE_Init+0x58>)
 800b936:	f000 fddf 	bl	800c4f8 <USBD_CUSTOM_HID_RegisterInterface>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b940:	f7f6 fde8 	bl	8002514 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800b944:	4805      	ldr	r0, [pc, #20]	@ (800b95c <MX_USB_DEVICE_Init+0x58>)
 800b946:	f000 fec1 	bl	800c6cc <USBD_Start>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b950:	f7f6 fde0 	bl	8002514 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b954:	bf00      	nop
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000018 	.word	0x20000018
 800b95c:	20000bd8 	.word	0x20000bd8
 800b960:	200000ac 	.word	0x200000ac
 800b964:	2000009c 	.word	0x2000009c

0800b968 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	4603      	mov	r3, r0
 800b970:	6039      	str	r1, [r7, #0]
 800b972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2212      	movs	r2, #18
 800b978:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800b97a:	4b03      	ldr	r3, [pc, #12]	@ (800b988 <USBD_DeviceDescriptor+0x20>)
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	20000038 	.word	0x20000038

0800b98c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	6039      	str	r1, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	2204      	movs	r2, #4
 800b99c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b99e:	4b03      	ldr	r3, [pc, #12]	@ (800b9ac <USBD_LangIDStrDescriptor+0x20>)
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	2000004c 	.word	0x2000004c

0800b9b0 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	6039      	str	r1, [r7, #0]
 800b9ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d105      	bne.n	800b9ce <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b9c2:	683a      	ldr	r2, [r7, #0]
 800b9c4:	4907      	ldr	r1, [pc, #28]	@ (800b9e4 <USBD_ProductStrDescriptor+0x34>)
 800b9c6:	4808      	ldr	r0, [pc, #32]	@ (800b9e8 <USBD_ProductStrDescriptor+0x38>)
 800b9c8:	f001 febf 	bl	800d74a <USBD_GetString>
 800b9cc:	e004      	b.n	800b9d8 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b9ce:	683a      	ldr	r2, [r7, #0]
 800b9d0:	4904      	ldr	r1, [pc, #16]	@ (800b9e4 <USBD_ProductStrDescriptor+0x34>)
 800b9d2:	4805      	ldr	r0, [pc, #20]	@ (800b9e8 <USBD_ProductStrDescriptor+0x38>)
 800b9d4:	f001 feb9 	bl	800d74a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9d8:	4b02      	ldr	r3, [pc, #8]	@ (800b9e4 <USBD_ProductStrDescriptor+0x34>)
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20000ef4 	.word	0x20000ef4
 800b9e8:	0800e7fc 	.word	0x0800e7fc

0800b9ec <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	4904      	ldr	r1, [pc, #16]	@ (800ba0c <USBD_ManufacturerStrDescriptor+0x20>)
 800b9fc:	4804      	ldr	r0, [pc, #16]	@ (800ba10 <USBD_ManufacturerStrDescriptor+0x24>)
 800b9fe:	f001 fea4 	bl	800d74a <USBD_GetString>
  return USBD_StrDesc;
 800ba02:	4b02      	ldr	r3, [pc, #8]	@ (800ba0c <USBD_ManufacturerStrDescriptor+0x20>)
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000ef4 	.word	0x20000ef4
 800ba10:	0800e814 	.word	0x0800e814

0800ba14 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	6039      	str	r1, [r7, #0]
 800ba1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	221a      	movs	r2, #26
 800ba24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba26:	f000 f843 	bl	800bab0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ba2a:	4b02      	ldr	r3, [pc, #8]	@ (800ba34 <USBD_SerialStrDescriptor+0x20>)
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20000050 	.word	0x20000050

0800ba38 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	6039      	str	r1, [r7, #0]
 800ba42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d105      	bne.n	800ba56 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	4907      	ldr	r1, [pc, #28]	@ (800ba6c <USBD_ConfigStrDescriptor+0x34>)
 800ba4e:	4808      	ldr	r0, [pc, #32]	@ (800ba70 <USBD_ConfigStrDescriptor+0x38>)
 800ba50:	f001 fe7b 	bl	800d74a <USBD_GetString>
 800ba54:	e004      	b.n	800ba60 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	4904      	ldr	r1, [pc, #16]	@ (800ba6c <USBD_ConfigStrDescriptor+0x34>)
 800ba5a:	4805      	ldr	r0, [pc, #20]	@ (800ba70 <USBD_ConfigStrDescriptor+0x38>)
 800ba5c:	f001 fe75 	bl	800d74a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba60:	4b02      	ldr	r3, [pc, #8]	@ (800ba6c <USBD_ConfigStrDescriptor+0x34>)
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000ef4 	.word	0x20000ef4
 800ba70:	0800e828 	.word	0x0800e828

0800ba74 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	6039      	str	r1, [r7, #0]
 800ba7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba80:	79fb      	ldrb	r3, [r7, #7]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d105      	bne.n	800ba92 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4907      	ldr	r1, [pc, #28]	@ (800baa8 <USBD_InterfaceStrDescriptor+0x34>)
 800ba8a:	4808      	ldr	r0, [pc, #32]	@ (800baac <USBD_InterfaceStrDescriptor+0x38>)
 800ba8c:	f001 fe5d 	bl	800d74a <USBD_GetString>
 800ba90:	e004      	b.n	800ba9c <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	4904      	ldr	r1, [pc, #16]	@ (800baa8 <USBD_InterfaceStrDescriptor+0x34>)
 800ba96:	4805      	ldr	r0, [pc, #20]	@ (800baac <USBD_InterfaceStrDescriptor+0x38>)
 800ba98:	f001 fe57 	bl	800d74a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba9c:	4b02      	ldr	r3, [pc, #8]	@ (800baa8 <USBD_InterfaceStrDescriptor+0x34>)
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3708      	adds	r7, #8
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20000ef4 	.word	0x20000ef4
 800baac:	0800e838 	.word	0x0800e838

0800bab0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bab6:	4b0f      	ldr	r3, [pc, #60]	@ (800baf4 <Get_SerialNum+0x44>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800babc:	4b0e      	ldr	r3, [pc, #56]	@ (800baf8 <Get_SerialNum+0x48>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bac2:	4b0e      	ldr	r3, [pc, #56]	@ (800bafc <Get_SerialNum+0x4c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4413      	add	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d009      	beq.n	800baea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bad6:	2208      	movs	r2, #8
 800bad8:	4909      	ldr	r1, [pc, #36]	@ (800bb00 <Get_SerialNum+0x50>)
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 f814 	bl	800bb08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bae0:	2204      	movs	r2, #4
 800bae2:	4908      	ldr	r1, [pc, #32]	@ (800bb04 <Get_SerialNum+0x54>)
 800bae4:	68b8      	ldr	r0, [r7, #8]
 800bae6:	f000 f80f 	bl	800bb08 <IntToUnicode>
  }
}
 800baea:	bf00      	nop
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	1fff7a10 	.word	0x1fff7a10
 800baf8:	1fff7a14 	.word	0x1fff7a14
 800bafc:	1fff7a18 	.word	0x1fff7a18
 800bb00:	20000052 	.word	0x20000052
 800bb04:	20000062 	.word	0x20000062

0800bb08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b087      	sub	sp, #28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	4613      	mov	r3, r2
 800bb14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	75fb      	strb	r3, [r7, #23]
 800bb1e:	e027      	b.n	800bb70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	0f1b      	lsrs	r3, r3, #28
 800bb24:	2b09      	cmp	r3, #9
 800bb26:	d80b      	bhi.n	800bb40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	0f1b      	lsrs	r3, r3, #28
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	4619      	mov	r1, r3
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	440b      	add	r3, r1
 800bb38:	3230      	adds	r2, #48	@ 0x30
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	701a      	strb	r2, [r3, #0]
 800bb3e:	e00a      	b.n	800bb56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	0f1b      	lsrs	r3, r3, #28
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
 800bb48:	005b      	lsls	r3, r3, #1
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	440b      	add	r3, r1
 800bb50:	3237      	adds	r2, #55	@ 0x37
 800bb52:	b2d2      	uxtb	r2, r2
 800bb54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	011b      	lsls	r3, r3, #4
 800bb5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb5c:	7dfb      	ldrb	r3, [r7, #23]
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	3301      	adds	r3, #1
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	4413      	add	r3, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb6a:	7dfb      	ldrb	r3, [r7, #23]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	75fb      	strb	r3, [r7, #23]
 800bb70:	7dfa      	ldrb	r2, [r7, #23]
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d3d3      	bcc.n	800bb20 <IntToUnicode+0x18>
  }
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	371c      	adds	r7, #28
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800bb86:	b480      	push	{r7}
 800bb88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb8a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800bb96:	b480      	push	{r7}
 800bb98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bb9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b083      	sub	sp, #12
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	4603      	mov	r3, r0
 800bbae:	460a      	mov	r2, r1
 800bbb0:	71fb      	strb	r3, [r7, #7]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800bbb6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800bbd0:	4b05      	ldr	r3, [pc, #20]	@ (800bbe8 <USBD_COMPOSITE_Init+0x24>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	78fa      	ldrb	r2, [r7, #3]
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	200000fc 	.word	0x200000fc

0800bbec <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800bbf8:	4b05      	ldr	r3, [pc, #20]	@ (800bc10 <USBD_COMPOSITE_DeInit+0x24>)
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200000fc 	.word	0x200000fc

0800bc14 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	889b      	ldrh	r3, [r3, #4]
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	4b07      	ldr	r3, [pc, #28]	@ (800bc44 <USBD_COMPOSITE_Setup+0x30>)
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d106      	bne.n	800bc3a <USBD_COMPOSITE_Setup+0x26>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800bc2c:	4b06      	ldr	r3, [pc, #24]	@ (800bc48 <USBD_COMPOSITE_Setup+0x34>)
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	4798      	blx	r3
 800bc36:	4603      	mov	r3, r0
 800bc38:	e000      	b.n	800bc3c <USBD_COMPOSITE_Setup+0x28>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800bc3a:	2303      	movs	r3, #3
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	2000118c 	.word	0x2000118c
 800bc48:	200000fc 	.word	0x200000fc

0800bc4c <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	70fb      	strb	r3, [r7, #3]
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800bc58:	78fa      	ldrb	r2, [r7, #3]
 800bc5a:	4b09      	ldr	r3, [pc, #36]	@ (800bc80 <USBD_COMPOSITE_DataIn+0x34>)
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d107      	bne.n	800bc76 <USBD_COMPOSITE_DataIn+0x2a>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800bc66:	4b07      	ldr	r3, [pc, #28]	@ (800bc84 <USBD_COMPOSITE_DataIn+0x38>)
 800bc68:	695b      	ldr	r3, [r3, #20]
 800bc6a:	78fa      	ldrb	r2, [r7, #3]
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	4798      	blx	r3
 800bc72:	4603      	mov	r3, r0
 800bc74:	e000      	b.n	800bc78 <USBD_COMPOSITE_DataIn+0x2c>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800bc76:	2303      	movs	r3, #3
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	200000f6 	.word	0x200000f6
 800bc84:	200000fc 	.word	0x200000fc

0800bc88 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800bc90:	4b04      	ldr	r3, [pc, #16]	@ (800bca4 <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	200000fc 	.word	0x200000fc

0800bca8 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800bcbe:	b480      	push	{r7}
 800bcc0:	b083      	sub	sp, #12
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b083      	sub	sp, #12
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	370c      	adds	r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800bd14:	4b08      	ldr	r3, [pc, #32]	@ (800bd38 <USBD_COMPOSITE_DataOut+0x30>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	78fa      	ldrb	r2, [r7, #3]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d107      	bne.n	800bd2e <USBD_COMPOSITE_DataOut+0x26>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800bd1e:	4b07      	ldr	r3, [pc, #28]	@ (800bd3c <USBD_COMPOSITE_DataOut+0x34>)
 800bd20:	699b      	ldr	r3, [r3, #24]
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	4611      	mov	r1, r2
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	4798      	blx	r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	e000      	b.n	800bd30 <USBD_COMPOSITE_DataOut+0x28>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800bd2e:	2303      	movs	r3, #3
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	200000f7 	.word	0x200000f7
 800bd3c:	200000fc 	.word	0x200000fc

0800bd40 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b083      	sub	sp, #12
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	2229      	movs	r2, #41	@ 0x29
 800bd4c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800bd4e:	4b03      	ldr	r3, [pc, #12]	@ (800bd5c <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr
 800bd5c:	20001120 	.word	0x20001120

0800bd60 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2229      	movs	r2, #41	@ 0x29
 800bd6c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	@ (800bd7c <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	200010f4 	.word	0x200010f4

0800bd80 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2229      	movs	r2, #41	@ 0x29
 800bd8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800bd8e:	4b03      	ldr	r3, [pc, #12]	@ (800bd9c <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr
 800bd9c:	20001120 	.word	0x20001120

0800bda0 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	220a      	movs	r2, #10
 800bdac:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800bdae:	4b03      	ldr	r3, [pc, #12]	@ (800bdbc <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	200000ec 	.word	0x200000ec

0800bdc0 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800bdce:	4b0b      	ldr	r3, [pc, #44]	@ (800bdfc <USBD_COMPOSITE_GetUsrStringDesc+0x3c>)
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	7afa      	ldrb	r2, [r7, #11]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d80b      	bhi.n	800bdf0 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800bdd8:	4b09      	ldr	r3, [pc, #36]	@ (800be00 <USBD_COMPOSITE_GetUsrStringDesc+0x40>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	7afa      	ldrb	r2, [r7, #11]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d104      	bne.n	800bdec <USBD_COMPOSITE_GetUsrStringDesc+0x2c>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	4907      	ldr	r1, [pc, #28]	@ (800be04 <USBD_COMPOSITE_GetUsrStringDesc+0x44>)
 800bde6:	4808      	ldr	r0, [pc, #32]	@ (800be08 <USBD_COMPOSITE_GetUsrStringDesc+0x48>)
 800bde8:	f001 fcaf 	bl	800d74a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800bdec:	4b05      	ldr	r3, [pc, #20]	@ (800be04 <USBD_COMPOSITE_GetUsrStringDesc+0x44>)
 800bdee:	e000      	b.n	800bdf2 <USBD_COMPOSITE_GetUsrStringDesc+0x32>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800bdf0:	2300      	movs	r3, #0
  }
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3710      	adds	r7, #16
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	200000e8 	.word	0x200000e8
 800be00:	200000f8 	.word	0x200000f8
 800be04:	2000114c 	.word	0x2000114c
 800be08:	0800e84c 	.word	0x0800e84c

0800be0c <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af02      	add	r7, sp, #8
  uint16_t len = 0;
 800be12:	2300      	movs	r3, #0
 800be14:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800be16:	2300      	movs	r3, #0
 800be18:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800be1a:	2381      	movs	r3, #129	@ 0x81
 800be1c:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800be1e:	2301      	movs	r3, #1
 800be20:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800be22:	2300      	movs	r3, #0
 800be24:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800be26:	4b4b      	ldr	r3, [pc, #300]	@ (800bf54 <USBD_COMPOSITE_Mount_Class+0x148>)
 800be28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2a:	1d3a      	adds	r2, r7, #4
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800be32:	4b49      	ldr	r3, [pc, #292]	@ (800bf58 <USBD_COMPOSITE_Mount_Class+0x14c>)
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	7ab8      	ldrb	r0, [r7, #10]
 800be38:	7afa      	ldrb	r2, [r7, #11]
 800be3a:	7a79      	ldrb	r1, [r7, #9]
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	4603      	mov	r3, r0
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f000 fb6f 	bl	800c524 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3309      	adds	r3, #9
 800be4a:	88ba      	ldrh	r2, [r7, #4]
 800be4c:	3a09      	subs	r2, #9
 800be4e:	4619      	mov	r1, r3
 800be50:	4842      	ldr	r0, [pc, #264]	@ (800bf5c <USBD_COMPOSITE_Mount_Class+0x150>)
 800be52:	f002 f86f 	bl	800df34 <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800be56:	4b3f      	ldr	r3, [pc, #252]	@ (800bf54 <USBD_COMPOSITE_Mount_Class+0x148>)
 800be58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be5a:	1d3a      	adds	r2, r7, #4
 800be5c:	4610      	mov	r0, r2
 800be5e:	4798      	blx	r3
 800be60:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800be62:	4b3d      	ldr	r3, [pc, #244]	@ (800bf58 <USBD_COMPOSITE_Mount_Class+0x14c>)
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	7ab8      	ldrb	r0, [r7, #10]
 800be68:	7afa      	ldrb	r2, [r7, #11]
 800be6a:	7a79      	ldrb	r1, [r7, #9]
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	4603      	mov	r3, r0
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f000 fb57 	bl	800c524 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3309      	adds	r3, #9
 800be7a:	88ba      	ldrh	r2, [r7, #4]
 800be7c:	3a09      	subs	r2, #9
 800be7e:	4619      	mov	r1, r3
 800be80:	4837      	ldr	r0, [pc, #220]	@ (800bf60 <USBD_COMPOSITE_Mount_Class+0x154>)
 800be82:	f002 f857 	bl	800df34 <memcpy>

  in_ep_track += 1;
 800be86:	7afb      	ldrb	r3, [r7, #11]
 800be88:	3301      	adds	r3, #1
 800be8a:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800be8c:	7abb      	ldrb	r3, [r7, #10]
 800be8e:	3301      	adds	r3, #1
 800be90:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800be92:	7a7b      	ldrb	r3, [r7, #9]
 800be94:	3301      	adds	r3, #1
 800be96:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800be98:	4b2f      	ldr	r3, [pc, #188]	@ (800bf58 <USBD_COMPOSITE_Mount_Class+0x14c>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	3301      	adds	r3, #1
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	4b2d      	ldr	r3, [pc, #180]	@ (800bf58 <USBD_COMPOSITE_Mount_Class+0x14c>)
 800bea2:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800bea4:	2329      	movs	r3, #41	@ 0x29
 800bea6:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800bea8:	4b2e      	ldr	r3, [pc, #184]	@ (800bf64 <USBD_COMPOSITE_Mount_Class+0x158>)
 800beaa:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2209      	movs	r2, #9
 800beb0:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3301      	adds	r3, #1
 800beb6:	2202      	movs	r2, #2
 800beb8:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3302      	adds	r3, #2
 800bebe:	88fa      	ldrh	r2, [r7, #6]
 800bec0:	b2d2      	uxtb	r2, r2
 800bec2:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800bec4:	88fb      	ldrh	r3, [r7, #6]
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	b29a      	uxth	r2, r3
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3303      	adds	r3, #3
 800bece:	b2d2      	uxtb	r2, r2
 800bed0:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3304      	adds	r3, #4
 800bed6:	7a7a      	ldrb	r2, [r7, #9]
 800bed8:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3305      	adds	r3, #5
 800bede:	2201      	movs	r2, #1
 800bee0:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3306      	adds	r3, #6
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3307      	adds	r3, #7
 800beee:	22c0      	movs	r2, #192	@ 0xc0
 800bef0:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	3308      	adds	r3, #8
 800bef6:	2232      	movs	r2, #50	@ 0x32
 800bef8:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800befa:	4b1b      	ldr	r3, [pc, #108]	@ (800bf68 <USBD_COMPOSITE_Mount_Class+0x15c>)
 800befc:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2209      	movs	r2, #9
 800bf02:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	3301      	adds	r3, #1
 800bf08:	2202      	movs	r2, #2
 800bf0a:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	3302      	adds	r3, #2
 800bf10:	88fa      	ldrh	r2, [r7, #6]
 800bf12:	b2d2      	uxtb	r2, r2
 800bf14:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800bf16:	88fb      	ldrh	r3, [r7, #6]
 800bf18:	0a1b      	lsrs	r3, r3, #8
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3303      	adds	r3, #3
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	3304      	adds	r3, #4
 800bf28:	7a7a      	ldrb	r2, [r7, #9]
 800bf2a:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	3305      	adds	r3, #5
 800bf30:	2201      	movs	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	3306      	adds	r3, #6
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	3307      	adds	r3, #7
 800bf40:	22c0      	movs	r2, #192	@ 0xc0
 800bf42:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3308      	adds	r3, #8
 800bf48:	2232      	movs	r2, #50	@ 0x32
 800bf4a:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800bf4c:	bf00      	nop
 800bf4e:	3710      	adds	r7, #16
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	200000fc 	.word	0x200000fc
 800bf58:	200000e8 	.word	0x200000e8
 800bf5c:	200010fd 	.word	0x200010fd
 800bf60:	20001129 	.word	0x20001129
 800bf64:	20001120 	.word	0x20001120
 800bf68:	200010f4 	.word	0x200010f4

0800bf6c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	460b      	mov	r3, r1
 800bf76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800bf78:	4b43      	ldr	r3, [pc, #268]	@ (800c088 <USBD_CUSTOM_HID_Init+0x11c>)
 800bf7a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e078      	b.n	800c080 <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	7c1b      	ldrb	r3, [r3, #16]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d11b      	bne.n	800bfd6 <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800bf9e:	4b3b      	ldr	r3, [pc, #236]	@ (800c08c <USBD_CUSTOM_HID_Init+0x120>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	f003 020f 	and.w	r2, r3, #15
 800bfa6:	6879      	ldr	r1, [r7, #4]
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	4413      	add	r3, r2
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	440b      	add	r3, r1
 800bfb2:	3326      	adds	r3, #38	@ 0x26
 800bfb4:	2205      	movs	r2, #5
 800bfb6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800bfb8:	4b35      	ldr	r3, [pc, #212]	@ (800c090 <USBD_CUSTOM_HID_Init+0x124>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 020f 	and.w	r2, r3, #15
 800bfc0:	6879      	ldr	r1, [r7, #4]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4413      	add	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	440b      	add	r3, r1
 800bfcc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800bfd0:	2205      	movs	r2, #5
 800bfd2:	801a      	strh	r2, [r3, #0]
 800bfd4:	e01a      	b.n	800c00c <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bfd6:	4b2d      	ldr	r3, [pc, #180]	@ (800c08c <USBD_CUSTOM_HID_Init+0x120>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	f003 020f 	and.w	r2, r3, #15
 800bfde:	6879      	ldr	r1, [r7, #4]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	3326      	adds	r3, #38	@ 0x26
 800bfec:	2205      	movs	r2, #5
 800bfee:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bff0:	4b27      	ldr	r3, [pc, #156]	@ (800c090 <USBD_CUSTOM_HID_Init+0x124>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	4613      	mov	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	4413      	add	r3, r2
 800c000:	009b      	lsls	r3, r3, #2
 800c002:	440b      	add	r3, r1
 800c004:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c008:	2205      	movs	r2, #5
 800c00a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800c00c:	4b1f      	ldr	r3, [pc, #124]	@ (800c08c <USBD_CUSTOM_HID_Init+0x120>)
 800c00e:	7819      	ldrb	r1, [r3, #0]
 800c010:	2340      	movs	r3, #64	@ 0x40
 800c012:	2203      	movs	r2, #3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f001 fde6 	bl	800dbe6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800c01a:	4b1c      	ldr	r3, [pc, #112]	@ (800c08c <USBD_CUSTOM_HID_Init+0x120>)
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	f003 020f 	and.w	r2, r3, #15
 800c022:	6879      	ldr	r1, [r7, #4]
 800c024:	4613      	mov	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	440b      	add	r3, r1
 800c02e:	3324      	adds	r3, #36	@ 0x24
 800c030:	2201      	movs	r2, #1
 800c032:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800c034:	4b16      	ldr	r3, [pc, #88]	@ (800c090 <USBD_CUSTOM_HID_Init+0x124>)
 800c036:	7819      	ldrb	r1, [r3, #0]
 800c038:	2340      	movs	r3, #64	@ 0x40
 800c03a:	2203      	movs	r2, #3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f001 fdd2 	bl	800dbe6 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800c042:	4b13      	ldr	r3, [pc, #76]	@ (800c090 <USBD_CUSTOM_HID_Init+0x124>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	f003 020f 	and.w	r2, r3, #15
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	440b      	add	r3, r1
 800c056:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c05a:	2201      	movs	r2, #1
 800c05c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800c070:	4b07      	ldr	r3, [pc, #28]	@ (800c090 <USBD_CUSTOM_HID_Init+0x124>)
 800c072:	7819      	ldrb	r1, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	2340      	movs	r3, #64	@ 0x40
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 fea3 	bl	800ddc4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20001190 	.word	0x20001190
 800c08c:	200000f6 	.word	0x200000f6
 800c090:	200000f7 	.word	0x200000f7

0800c094 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	460b      	mov	r3, r1
 800c09e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800c0a0:	4b2a      	ldr	r3, [pc, #168]	@ (800c14c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f001 fdc3 	bl	800dc32 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800c0ac:	4b27      	ldr	r3, [pc, #156]	@ (800c14c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f003 020f 	and.w	r2, r3, #15
 800c0b4:	6879      	ldr	r1, [r7, #4]
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	440b      	add	r3, r1
 800c0c0:	3324      	adds	r3, #36	@ 0x24
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800c0c6:	4b21      	ldr	r3, [pc, #132]	@ (800c14c <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	f003 020f 	and.w	r2, r3, #15
 800c0ce:	6879      	ldr	r1, [r7, #4]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	440b      	add	r3, r1
 800c0da:	3326      	adds	r3, #38	@ 0x26
 800c0dc:	2200      	movs	r2, #0
 800c0de:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800c0e0:	4b1b      	ldr	r3, [pc, #108]	@ (800c150 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 fda3 	bl	800dc32 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800c0ec:	4b18      	ldr	r3, [pc, #96]	@ (800c150 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f003 020f 	and.w	r2, r3, #15
 800c0f4:	6879      	ldr	r1, [r7, #4]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	440b      	add	r3, r1
 800c100:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c104:	2200      	movs	r2, #0
 800c106:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800c108:	4b11      	ldr	r3, [pc, #68]	@ (800c150 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	f003 020f 	and.w	r2, r3, #15
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	4613      	mov	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4413      	add	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	440b      	add	r3, r1
 800c11c:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c120:	2200      	movs	r2, #0
 800c122:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d008      	beq.n	800c140 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c134:	689b      	ldr	r3, [r3, #8]
 800c136:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	200000f6 	.word	0x200000f6
 800c150:	200000f7 	.word	0x200000f7

0800c154 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b088      	sub	sp, #32
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c164:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800c166:	2300      	movs	r3, #0
 800c168:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800c16a:	2300      	movs	r3, #0
 800c16c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800c16e:	2300      	movs	r3, #0
 800c170:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e0ed      	b.n	800c35c <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d052      	beq.n	800c232 <USBD_CUSTOM_HID_Setup+0xde>
 800c18c:	2b20      	cmp	r3, #32
 800c18e:	f040 80dd 	bne.w	800c34c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785b      	ldrb	r3, [r3, #1]
 800c196:	3b02      	subs	r3, #2
 800c198:	2b09      	cmp	r3, #9
 800c19a:	d842      	bhi.n	800c222 <USBD_CUSTOM_HID_Setup+0xce>
 800c19c:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a4 <USBD_CUSTOM_HID_Setup+0x50>)
 800c19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a2:	bf00      	nop
 800c1a4:	0800c1fd 	.word	0x0800c1fd
 800c1a8:	0800c1db 	.word	0x0800c1db
 800c1ac:	0800c223 	.word	0x0800c223
 800c1b0:	0800c223 	.word	0x0800c223
 800c1b4:	0800c223 	.word	0x0800c223
 800c1b8:	0800c223 	.word	0x0800c223
 800c1bc:	0800c223 	.word	0x0800c223
 800c1c0:	0800c20d 	.word	0x0800c20d
 800c1c4:	0800c1eb 	.word	0x0800c1eb
 800c1c8:	0800c1cd 	.word	0x0800c1cd
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	885b      	ldrh	r3, [r3, #2]
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c1d8:	e02a      	b.n	800c230 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	3340      	adds	r3, #64	@ 0x40
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 fb11 	bl	800d80a <USBD_CtlSendData>
      break;
 800c1e8:	e022      	b.n	800c230 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	885b      	ldrh	r3, [r3, #2]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	461a      	mov	r2, r3
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800c1fa:	e019      	b.n	800c230 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	3344      	adds	r3, #68	@ 0x44
 800c200:	2201      	movs	r2, #1
 800c202:	4619      	mov	r1, r3
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f001 fb00 	bl	800d80a <USBD_CtlSendData>
      break;
 800c20a:	e011      	b.n	800c230 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2201      	movs	r2, #1
 800c210:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800c212:	6939      	ldr	r1, [r7, #16]
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	88db      	ldrh	r3, [r3, #6]
 800c218:	461a      	mov	r2, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f001 fb21 	bl	800d862 <USBD_CtlPrepareRx>
      break;
 800c220:	e006      	b.n	800c230 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f001 fa7f 	bl	800d728 <USBD_CtlError>
      ret = USBD_FAIL;
 800c22a:	2303      	movs	r3, #3
 800c22c:	75fb      	strb	r3, [r7, #23]
      break;
 800c22e:	bf00      	nop
    }
    break;
 800c230:	e093      	b.n	800c35a <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	785b      	ldrb	r3, [r3, #1]
 800c236:	2b0b      	cmp	r3, #11
 800c238:	d87f      	bhi.n	800c33a <USBD_CUSTOM_HID_Setup+0x1e6>
 800c23a:	a201      	add	r2, pc, #4	@ (adr r2, 800c240 <USBD_CUSTOM_HID_Setup+0xec>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c271 	.word	0x0800c271
 800c244:	0800c349 	.word	0x0800c349
 800c248:	0800c33b 	.word	0x0800c33b
 800c24c:	0800c33b 	.word	0x0800c33b
 800c250:	0800c33b 	.word	0x0800c33b
 800c254:	0800c33b 	.word	0x0800c33b
 800c258:	0800c29b 	.word	0x0800c29b
 800c25c:	0800c33b 	.word	0x0800c33b
 800c260:	0800c33b 	.word	0x0800c33b
 800c264:	0800c33b 	.word	0x0800c33b
 800c268:	0800c2e9 	.word	0x0800c2e9
 800c26c:	0800c313 	.word	0x0800c313
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d107      	bne.n	800c28c <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c27c:	f107 030e 	add.w	r3, r7, #14
 800c280:	2202      	movs	r2, #2
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f001 fac0 	bl	800d80a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c28a:	e05e      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f001 fa4a 	bl	800d728 <USBD_CtlError>
        ret = USBD_FAIL;
 800c294:	2303      	movs	r3, #3
 800c296:	75fb      	strb	r3, [r7, #23]
      break;
 800c298:	e057      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	0a1b      	lsrs	r3, r3, #8
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	2b22      	cmp	r3, #34	@ 0x22
 800c2a4:	d10b      	bne.n	800c2be <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	88db      	ldrh	r3, [r3, #6]
 800c2aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ac:	bf28      	it	cs
 800c2ae:	232e      	movcs	r3, #46	@ 0x2e
 800c2b0:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	61bb      	str	r3, [r7, #24]
 800c2bc:	e00d      	b.n	800c2da <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	0a1b      	lsrs	r3, r3, #8
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	2b21      	cmp	r3, #33	@ 0x21
 800c2c8:	d107      	bne.n	800c2da <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800c2ca:	4b26      	ldr	r3, [pc, #152]	@ (800c364 <USBD_CUSTOM_HID_Setup+0x210>)
 800c2cc:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	88db      	ldrh	r3, [r3, #6]
 800c2d2:	2b09      	cmp	r3, #9
 800c2d4:	bf28      	it	cs
 800c2d6:	2309      	movcs	r3, #9
 800c2d8:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2da:	8bfb      	ldrh	r3, [r7, #30]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	69b9      	ldr	r1, [r7, #24]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f001 fa92 	bl	800d80a <USBD_CtlSendData>
      break;
 800c2e6:	e030      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d107      	bne.n	800c304 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	3348      	adds	r3, #72	@ 0x48
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 fa84 	bl	800d80a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c302:	e022      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f001 fa0e 	bl	800d728 <USBD_CtlError>
        ret = USBD_FAIL;
 800c30c:	2303      	movs	r3, #3
 800c30e:	75fb      	strb	r3, [r7, #23]
      break;
 800c310:	e01b      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d106      	bne.n	800c32c <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	885b      	ldrh	r3, [r3, #2]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	461a      	mov	r2, r3
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c32a:	e00e      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f001 f9fa 	bl	800d728 <USBD_CtlError>
        ret = USBD_FAIL;
 800c334:	2303      	movs	r3, #3
 800c336:	75fb      	strb	r3, [r7, #23]
      break;
 800c338:	e007      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f001 f9f3 	bl	800d728 <USBD_CtlError>
      ret = USBD_FAIL;
 800c342:	2303      	movs	r3, #3
 800c344:	75fb      	strb	r3, [r7, #23]
      break;
 800c346:	e000      	b.n	800c34a <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800c348:	bf00      	nop
    }
    break;
 800c34a:	e006      	b.n	800c35a <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f001 f9ea 	bl	800d728 <USBD_CtlError>
    ret = USBD_FAIL;
 800c354:	2303      	movs	r3, #3
 800c356:	75fb      	strb	r3, [r7, #23]
    break;
 800c358:	bf00      	nop
  }
  return (uint8_t)ret;
 800c35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3720      	adds	r7, #32
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	200001bc 	.word	0x200001bc

0800c368 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b086      	sub	sp, #24
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	4613      	mov	r3, r2
 800c374:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	e01d      	b.n	800c3c0 <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c38a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b03      	cmp	r3, #3
 800c396:	d112      	bne.n	800c3be <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10b      	bne.n	800c3ba <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800c3aa:	4b07      	ldr	r3, [pc, #28]	@ (800c3c8 <USBD_CUSTOM_HID_SendReport+0x60>)
 800c3ac:	7819      	ldrb	r1, [r3, #0]
 800c3ae:	88fb      	ldrh	r3, [r7, #6]
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f001 fce5 	bl	800dd82 <USBD_LL_Transmit>
 800c3b8:	e001      	b.n	800c3be <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	e000      	b.n	800c3c0 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}
 800c3c8:	200000f6 	.word	0x200000f6

0800c3cc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2229      	movs	r2, #41	@ 0x29
 800c3d8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800c3da:	4b03      	ldr	r3, [pc, #12]	@ (800c3e8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	370c      	adds	r7, #12
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr
 800c3e8:	20000138 	.word	0x20000138

0800c3ec <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2229      	movs	r2, #41	@ 0x29
 800c3f8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800c3fa:	4b03      	ldr	r3, [pc, #12]	@ (800c408 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	20000164 	.word	0x20000164

0800c40c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2229      	movs	r2, #41	@ 0x29
 800c418:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800c41a:	4b03      	ldr	r3, [pc, #12]	@ (800c428 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr
 800c428:	20000190 	.word	0x20000190

0800c42c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	460b      	mov	r3, r1
 800c436:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c43e:	2200      	movs	r2, #0
 800c440:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800c444:	2300      	movs	r3, #0
}
 800c446:	4618      	mov	r0, r3
 800c448:	370c      	adds	r7, #12
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c452:	b580      	push	{r7, lr}
 800c454:	b084      	sub	sp, #16
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	460b      	mov	r3, r1
 800c45c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c464:	2b00      	cmp	r3, #0
 800c466:	d101      	bne.n	800c46c <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c468:	2303      	movs	r3, #3
 800c46a:	e00e      	b.n	800c48a <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c472:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	7810      	ldrb	r0, [r2, #0]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	7852      	ldrb	r2, [r2, #1]
 800c484:	4611      	mov	r1, r2
 800c486:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b084      	sub	sp, #16
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c4a0:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d101      	bne.n	800c4ac <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	e011      	b.n	800c4d0 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d10c      	bne.n	800c4ce <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	7810      	ldrb	r0, [r2, #0]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	7852      	ldrb	r2, [r2, #1]
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	220a      	movs	r2, #10
 800c4e4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800c4e6:	4b03      	ldr	r3, [pc, #12]	@ (800c4f4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	200001c8 	.word	0x200001c8

0800c4f8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c508:	2303      	movs	r3, #3
 800c50a:	e004      	b.n	800c516 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
	...

0800c524 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800c524:	b480      	push	{r7}
 800c526:	b083      	sub	sp, #12
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	461a      	mov	r2, r3
 800c532:	4603      	mov	r3, r0
 800c534:	70fb      	strb	r3, [r7, #3]
 800c536:	460b      	mov	r3, r1
 800c538:	70bb      	strb	r3, [r7, #2]
 800c53a:	4613      	mov	r3, r2
 800c53c:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	330b      	adds	r3, #11
 800c542:	78fa      	ldrb	r2, [r7, #3]
 800c544:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3311      	adds	r3, #17
 800c54a:	7c3a      	ldrb	r2, [r7, #16]
 800c54c:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	331d      	adds	r3, #29
 800c552:	78ba      	ldrb	r2, [r7, #2]
 800c554:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3324      	adds	r3, #36	@ 0x24
 800c55a:	787a      	ldrb	r2, [r7, #1]
 800c55c:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800c55e:	4a09      	ldr	r2, [pc, #36]	@ (800c584 <USBD_Update_HID_Custom_DESC+0x60>)
 800c560:	78bb      	ldrb	r3, [r7, #2]
 800c562:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800c564:	4a08      	ldr	r2, [pc, #32]	@ (800c588 <USBD_Update_HID_Custom_DESC+0x64>)
 800c566:	787b      	ldrb	r3, [r7, #1]
 800c568:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800c56a:	4a08      	ldr	r2, [pc, #32]	@ (800c58c <USBD_Update_HID_Custom_DESC+0x68>)
 800c56c:	78fb      	ldrb	r3, [r7, #3]
 800c56e:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800c570:	4a07      	ldr	r2, [pc, #28]	@ (800c590 <USBD_Update_HID_Custom_DESC+0x6c>)
 800c572:	7c3b      	ldrb	r3, [r7, #16]
 800c574:	7013      	strb	r3, [r2, #0]
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	200000f6 	.word	0x200000f6
 800c588:	200000f7 	.word	0x200000f7
 800c58c:	2000118c 	.word	0x2000118c
 800c590:	200000f8 	.word	0x200000f8

0800c594 <USBD_CUSTOM_HID2_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID2_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b086      	sub	sp, #24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	60f8      	str	r0, [r7, #12]
 800c59c:	60b9      	str	r1, [r7, #8]
 800c59e:	4613      	mov	r3, r2
 800c5a0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID2_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom2 == NULL)
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <USBD_CUSTOM_HID2_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e01d      	b.n	800c5ec <USBD_CUSTOM_HID2_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID2_HandleTypeDef *)pdev->pClassData_HID_Custom2;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c5b6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d112      	bne.n	800c5ea <USBD_CUSTOM_HID2_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID2_IDLE)
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d10b      	bne.n	800c5e6 <USBD_CUSTOM_HID2_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID2_BUSY;
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID2_IN_EP, report, len);
 800c5d6:	4b07      	ldr	r3, [pc, #28]	@ (800c5f4 <USBD_CUSTOM_HID2_SendReport+0x60>)
 800c5d8:	7819      	ldrb	r1, [r3, #0]
 800c5da:	88fb      	ldrh	r3, [r7, #6]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f001 fbcf 	bl	800dd82 <USBD_LL_Transmit>
 800c5e4:	e001      	b.n	800c5ea <USBD_CUSTOM_HID2_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <USBD_CUSTOM_HID2_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800c5ea:	2300      	movs	r3, #0
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	200001d2 	.word	0x200001d2

0800c5f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	4613      	mov	r3, r2
 800c604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d101      	bne.n	800c610 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e01b      	b.n	800c648 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	68ba      	ldr	r2, [r7, #8]
 800c62a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	79fa      	ldrb	r2, [r7, #7]
 800c63a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f001 fa7d 	bl	800db3c <USBD_LL_Init>
 800c642:	4603      	mov	r3, r0
 800c644:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c646:	7dfb      	ldrb	r3, [r7, #23]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c65a:	2300      	movs	r3, #0
 800c65c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c664:	2303      	movs	r3, #3
 800c666:	e02d      	b.n	800c6c4 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	7c1b      	ldrb	r3, [r3, #16]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d112      	bne.n	800c69e <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c67e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01e      	beq.n	800c6c2 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c68c:	f107 020e 	add.w	r2, r7, #14
 800c690:	4610      	mov	r0, r2
 800c692:	4798      	blx	r3
 800c694:	4602      	mov	r2, r0
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800c69c:	e011      	b.n	800c6c2 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d00b      	beq.n	800c6c2 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b2:	f107 020e 	add.w	r2, r7, #14
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	4798      	blx	r3
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 fa6b 	bl	800dbb0 <USBD_LL_Start>
 800c6da:	4603      	mov	r3, r0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	370c      	adds	r7, #12
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr

0800c6fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b084      	sub	sp, #16
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
 800c702:	460b      	mov	r3, r1
 800c704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c706:	2303      	movs	r3, #3
 800c708:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c710:	2b00      	cmp	r3, #0
 800c712:	d009      	beq.n	800c728 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	78fa      	ldrb	r2, [r7, #3]
 800c71e:	4611      	mov	r1, r2
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	4798      	blx	r3
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c728:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b082      	sub	sp, #8
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	460b      	mov	r3, r1
 800c73c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c744:	2b00      	cmp	r3, #0
 800c746:	d007      	beq.n	800c758 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	78fa      	ldrb	r2, [r7, #3]
 800c752:	4611      	mov	r1, r2
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	4798      	blx	r3
  }

  return USBD_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3708      	adds	r7, #8
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b084      	sub	sp, #16
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 ff9d 	bl	800d6b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c788:	461a      	mov	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c796:	f003 031f 	and.w	r3, r3, #31
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d01a      	beq.n	800c7d4 <USBD_LL_SetupStage+0x72>
 800c79e:	2b02      	cmp	r3, #2
 800c7a0:	d822      	bhi.n	800c7e8 <USBD_LL_SetupStage+0x86>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d002      	beq.n	800c7ac <USBD_LL_SetupStage+0x4a>
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d00a      	beq.n	800c7c0 <USBD_LL_SetupStage+0x5e>
 800c7aa:	e01d      	b.n	800c7e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 fa5d 	bl	800cc74 <USBD_StdDevReq>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7be:	e020      	b.n	800c802 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f000 fac1 	bl	800cd50 <USBD_StdItfReq>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d2:	e016      	b.n	800c802 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fb00 	bl	800cde2 <USBD_StdEPReq>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e6:	e00c      	b.n	800c802 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c7ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f001 fa3a 	bl	800dc70 <USBD_LL_StallEP>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c800:	bf00      	nop
  }

  return ret;
 800c802:	7bfb      	ldrb	r3, [r7, #15]
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	460b      	mov	r3, r1
 800c816:	607a      	str	r2, [r7, #4]
 800c818:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c81a:	7afb      	ldrb	r3, [r7, #11]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d138      	bne.n	800c892 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c82e:	2b03      	cmp	r3, #3
 800c830:	d14a      	bne.n	800c8c8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	689a      	ldr	r2, [r3, #8]
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d913      	bls.n	800c866 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	689a      	ldr	r2, [r3, #8]
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	1ad2      	subs	r2, r2, r3
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	4293      	cmp	r3, r2
 800c856:	bf28      	it	cs
 800c858:	4613      	movcs	r3, r2
 800c85a:	461a      	mov	r2, r3
 800c85c:	6879      	ldr	r1, [r7, #4]
 800c85e:	68f8      	ldr	r0, [r7, #12]
 800c860:	f001 f81c 	bl	800d89c <USBD_CtlContinueRx>
 800c864:	e030      	b.n	800c8c8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b03      	cmp	r3, #3
 800c870:	d10b      	bne.n	800c88a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d005      	beq.n	800c88a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f001 f817 	bl	800d8be <USBD_CtlSendStatus>
 800c890:	e01a      	b.n	800c8c8 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d114      	bne.n	800c8c8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00e      	beq.n	800c8c8 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8b0:	699b      	ldr	r3, [r3, #24]
 800c8b2:	7afa      	ldrb	r2, [r7, #11]
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	4798      	blx	r3
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c8c4:	7dfb      	ldrb	r3, [r7, #23]
 800c8c6:	e000      	b.n	800c8ca <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b086      	sub	sp, #24
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	60f8      	str	r0, [r7, #12]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	607a      	str	r2, [r7, #4]
 800c8de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c8e0:	7afb      	ldrb	r3, [r7, #11]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d16b      	bne.n	800c9be <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	3314      	adds	r3, #20
 800c8ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d156      	bne.n	800c9a4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	689a      	ldr	r2, [r3, #8]
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d914      	bls.n	800c92c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	689a      	ldr	r2, [r3, #8]
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	1ad2      	subs	r2, r2, r3
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	689b      	ldr	r3, [r3, #8]
 800c914:	461a      	mov	r2, r3
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 ff91 	bl	800d840 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c91e:	2300      	movs	r3, #0
 800c920:	2200      	movs	r2, #0
 800c922:	2100      	movs	r1, #0
 800c924:	68f8      	ldr	r0, [r7, #12]
 800c926:	f001 fa4d 	bl	800ddc4 <USBD_LL_PrepareReceive>
 800c92a:	e03b      	b.n	800c9a4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	429a      	cmp	r2, r3
 800c936:	d11c      	bne.n	800c972 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c940:	429a      	cmp	r2, r3
 800c942:	d316      	bcc.n	800c972 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	685a      	ldr	r2, [r3, #4]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c94e:	429a      	cmp	r2, r3
 800c950:	d20f      	bcs.n	800c972 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c952:	2200      	movs	r2, #0
 800c954:	2100      	movs	r1, #0
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f000 ff72 	bl	800d840 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	2200      	movs	r2, #0
 800c960:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c964:	2300      	movs	r3, #0
 800c966:	2200      	movs	r2, #0
 800c968:	2100      	movs	r1, #0
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f001 fa2a 	bl	800ddc4 <USBD_LL_PrepareReceive>
 800c970:	e018      	b.n	800c9a4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c978:	b2db      	uxtb	r3, r3
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d10b      	bne.n	800c996 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d005      	beq.n	800c996 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c996:	2180      	movs	r1, #128	@ 0x80
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f001 f969 	bl	800dc70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f000 ffa0 	bl	800d8e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d122      	bne.n	800c9f4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c9ae:	68f8      	ldr	r0, [r7, #12]
 800c9b0:	f7ff fe98 	bl	800c6e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c9bc:	e01a      	b.n	800c9f4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	d114      	bne.n	800c9f4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00e      	beq.n	800c9f4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	7afa      	ldrb	r2, [r7, #11]
 800c9e0:	4611      	mov	r1, r2
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	4798      	blx	r3
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c9ea:	7dfb      	ldrb	r3, [r7, #23]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
 800c9f2:	e000      	b.n	800c9f6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	e02a      	b.n	800ca88 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d009      	beq.n	800ca52 <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	6852      	ldr	r2, [r2, #4]
 800ca4a:	b2d2      	uxtb	r2, r2
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca52:	2340      	movs	r3, #64	@ 0x40
 800ca54:	2200      	movs	r2, #0
 800ca56:	2100      	movs	r1, #0
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 f8c4 	bl	800dbe6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2240      	movs	r2, #64	@ 0x40
 800ca6a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca6e:	2340      	movs	r3, #64	@ 0x40
 800ca70:	2200      	movs	r2, #0
 800ca72:	2180      	movs	r1, #128	@ 0x80
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f001 f8b6 	bl	800dbe6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2240      	movs	r2, #64	@ 0x40
 800ca84:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	78fa      	ldrb	r2, [r7, #3]
 800caa0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b083      	sub	sp, #12
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2204      	movs	r2, #4
 800caca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b04      	cmp	r3, #4
 800caee:	d106      	bne.n	800cafe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d101      	bne.n	800cb22 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	e012      	b.n	800cb48 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	2b03      	cmp	r3, #3
 800cb2c:	d10b      	bne.n	800cb46 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb34:	69db      	ldr	r3, [r3, #28]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d005      	beq.n	800cb46 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d101      	bne.n	800cb6a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cb66:	2303      	movs	r3, #3
 800cb68:	e014      	b.n	800cb94 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	2b03      	cmp	r3, #3
 800cb74:	d10d      	bne.n	800cb92 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d007      	beq.n	800cb92 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb88:	6a1b      	ldr	r3, [r3, #32]
 800cb8a:	78fa      	ldrb	r2, [r7, #3]
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	460b      	mov	r3, r1
 800cba6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e014      	b.n	800cbe0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d10d      	bne.n	800cbde <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d007      	beq.n	800cbde <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbd6:	78fa      	ldrb	r2, [r7, #3]
 800cbd8:	4611      	mov	r1, r2
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3708      	adds	r7, #8
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d009      	beq.n	800cc2c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	6852      	ldr	r2, [r2, #4]
 800cc24:	b2d2      	uxtb	r2, r2
 800cc26:	4611      	mov	r1, r2
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	4798      	blx	r3
  }

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cc36:	b480      	push	{r7}
 800cc38:	b087      	sub	sp, #28
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cc54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cc58:	021b      	lsls	r3, r3, #8
 800cc5a:	b21a      	sxth	r2, r3
 800cc5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc60:	4313      	orrs	r3, r2
 800cc62:	b21b      	sxth	r3, r3
 800cc64:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cc66:	89fb      	ldrh	r3, [r7, #14]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	371c      	adds	r7, #28
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc8a:	2b40      	cmp	r3, #64	@ 0x40
 800cc8c:	d005      	beq.n	800cc9a <USBD_StdDevReq+0x26>
 800cc8e:	2b40      	cmp	r3, #64	@ 0x40
 800cc90:	d853      	bhi.n	800cd3a <USBD_StdDevReq+0xc6>
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00b      	beq.n	800ccae <USBD_StdDevReq+0x3a>
 800cc96:	2b20      	cmp	r3, #32
 800cc98:	d14f      	bne.n	800cd3a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	4798      	blx	r3
 800cca8:	4603      	mov	r3, r0
 800ccaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ccac:	e04a      	b.n	800cd44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	785b      	ldrb	r3, [r3, #1]
 800ccb2:	2b09      	cmp	r3, #9
 800ccb4:	d83b      	bhi.n	800cd2e <USBD_StdDevReq+0xba>
 800ccb6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccbc <USBD_StdDevReq+0x48>)
 800ccb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbc:	0800cd11 	.word	0x0800cd11
 800ccc0:	0800cd25 	.word	0x0800cd25
 800ccc4:	0800cd2f 	.word	0x0800cd2f
 800ccc8:	0800cd1b 	.word	0x0800cd1b
 800cccc:	0800cd2f 	.word	0x0800cd2f
 800ccd0:	0800ccef 	.word	0x0800ccef
 800ccd4:	0800cce5 	.word	0x0800cce5
 800ccd8:	0800cd2f 	.word	0x0800cd2f
 800ccdc:	0800cd07 	.word	0x0800cd07
 800cce0:	0800ccf9 	.word	0x0800ccf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cce4:	6839      	ldr	r1, [r7, #0]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f000 f9de 	bl	800d0a8 <USBD_GetDescriptor>
          break;
 800ccec:	e024      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fb55 	bl	800d3a0 <USBD_SetAddress>
          break;
 800ccf6:	e01f      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 fb94 	bl	800d428 <USBD_SetConfig>
 800cd00:	4603      	mov	r3, r0
 800cd02:	73fb      	strb	r3, [r7, #15]
          break;
 800cd04:	e018      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fc33 	bl	800d574 <USBD_GetConfig>
          break;
 800cd0e:	e013      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cd10:	6839      	ldr	r1, [r7, #0]
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fc64 	bl	800d5e0 <USBD_GetStatus>
          break;
 800cd18:	e00e      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fc93 	bl	800d648 <USBD_SetFeature>
          break;
 800cd22:	e009      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fca2 	bl	800d670 <USBD_ClrFeature>
          break;
 800cd2c:	e004      	b.n	800cd38 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fcf9 	bl	800d728 <USBD_CtlError>
          break;
 800cd36:	bf00      	nop
      }
      break;
 800cd38:	e004      	b.n	800cd44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cd3a:	6839      	ldr	r1, [r7, #0]
 800cd3c:	6878      	ldr	r0, [r7, #4]
 800cd3e:	f000 fcf3 	bl	800d728 <USBD_CtlError>
      break;
 800cd42:	bf00      	nop
  }

  return ret;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop

0800cd50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd66:	2b40      	cmp	r3, #64	@ 0x40
 800cd68:	d005      	beq.n	800cd76 <USBD_StdItfReq+0x26>
 800cd6a:	2b40      	cmp	r3, #64	@ 0x40
 800cd6c:	d82f      	bhi.n	800cdce <USBD_StdItfReq+0x7e>
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <USBD_StdItfReq+0x26>
 800cd72:	2b20      	cmp	r3, #32
 800cd74:	d12b      	bne.n	800cdce <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d81d      	bhi.n	800cdc0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	889b      	ldrh	r3, [r3, #4]
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b0f      	cmp	r3, #15
 800cd8c:	d813      	bhi.n	800cdb6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	6839      	ldr	r1, [r7, #0]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	4798      	blx	r3
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	88db      	ldrh	r3, [r3, #6]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d110      	bne.n	800cdca <USBD_StdItfReq+0x7a>
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10d      	bne.n	800cdca <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f000 fd85 	bl	800d8be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cdb4:	e009      	b.n	800cdca <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fcb5 	bl	800d728 <USBD_CtlError>
          break;
 800cdbe:	e004      	b.n	800cdca <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cdc0:	6839      	ldr	r1, [r7, #0]
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fcb0 	bl	800d728 <USBD_CtlError>
          break;
 800cdc8:	e000      	b.n	800cdcc <USBD_StdItfReq+0x7c>
          break;
 800cdca:	bf00      	nop
      }
      break;
 800cdcc:	e004      	b.n	800cdd8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cdce:	6839      	ldr	r1, [r7, #0]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f000 fca9 	bl	800d728 <USBD_CtlError>
      break;
 800cdd6:	bf00      	nop
  }

  return ret;
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b084      	sub	sp, #16
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
 800cdea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	889b      	ldrh	r3, [r3, #4]
 800cdf4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdfe:	2b40      	cmp	r3, #64	@ 0x40
 800ce00:	d007      	beq.n	800ce12 <USBD_StdEPReq+0x30>
 800ce02:	2b40      	cmp	r3, #64	@ 0x40
 800ce04:	f200 8145 	bhi.w	800d092 <USBD_StdEPReq+0x2b0>
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00c      	beq.n	800ce26 <USBD_StdEPReq+0x44>
 800ce0c:	2b20      	cmp	r3, #32
 800ce0e:	f040 8140 	bne.w	800d092 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	6839      	ldr	r1, [r7, #0]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	4798      	blx	r3
 800ce20:	4603      	mov	r3, r0
 800ce22:	73fb      	strb	r3, [r7, #15]
      break;
 800ce24:	e13a      	b.n	800d09c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	785b      	ldrb	r3, [r3, #1]
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d007      	beq.n	800ce3e <USBD_StdEPReq+0x5c>
 800ce2e:	2b03      	cmp	r3, #3
 800ce30:	f300 8129 	bgt.w	800d086 <USBD_StdEPReq+0x2a4>
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d07f      	beq.n	800cf38 <USBD_StdEPReq+0x156>
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d03c      	beq.n	800ceb6 <USBD_StdEPReq+0xd4>
 800ce3c:	e123      	b.n	800d086 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	2b02      	cmp	r3, #2
 800ce48:	d002      	beq.n	800ce50 <USBD_StdEPReq+0x6e>
 800ce4a:	2b03      	cmp	r3, #3
 800ce4c:	d016      	beq.n	800ce7c <USBD_StdEPReq+0x9a>
 800ce4e:	e02c      	b.n	800ceaa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00d      	beq.n	800ce72 <USBD_StdEPReq+0x90>
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	2b80      	cmp	r3, #128	@ 0x80
 800ce5a:	d00a      	beq.n	800ce72 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 ff05 	bl	800dc70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce66:	2180      	movs	r1, #128	@ 0x80
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f000 ff01 	bl	800dc70 <USBD_LL_StallEP>
 800ce6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce70:	e020      	b.n	800ceb4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f000 fc57 	bl	800d728 <USBD_CtlError>
              break;
 800ce7a:	e01b      	b.n	800ceb4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	885b      	ldrh	r3, [r3, #2]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10e      	bne.n	800cea2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00b      	beq.n	800cea2 <USBD_StdEPReq+0xc0>
 800ce8a:	7bbb      	ldrb	r3, [r7, #14]
 800ce8c:	2b80      	cmp	r3, #128	@ 0x80
 800ce8e:	d008      	beq.n	800cea2 <USBD_StdEPReq+0xc0>
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	88db      	ldrh	r3, [r3, #6]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d104      	bne.n	800cea2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce98:	7bbb      	ldrb	r3, [r7, #14]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fee7 	bl	800dc70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 fd0b 	bl	800d8be <USBD_CtlSendStatus>

              break;
 800cea8:	e004      	b.n	800ceb4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fc3b 	bl	800d728 <USBD_CtlError>
              break;
 800ceb2:	bf00      	nop
          }
          break;
 800ceb4:	e0ec      	b.n	800d090 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cebc:	b2db      	uxtb	r3, r3
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d002      	beq.n	800cec8 <USBD_StdEPReq+0xe6>
 800cec2:	2b03      	cmp	r3, #3
 800cec4:	d016      	beq.n	800cef4 <USBD_StdEPReq+0x112>
 800cec6:	e030      	b.n	800cf2a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cec8:	7bbb      	ldrb	r3, [r7, #14]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00d      	beq.n	800ceea <USBD_StdEPReq+0x108>
 800cece:	7bbb      	ldrb	r3, [r7, #14]
 800ced0:	2b80      	cmp	r3, #128	@ 0x80
 800ced2:	d00a      	beq.n	800ceea <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 fec9 	bl	800dc70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cede:	2180      	movs	r1, #128	@ 0x80
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 fec5 	bl	800dc70 <USBD_LL_StallEP>
 800cee6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cee8:	e025      	b.n	800cf36 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fc1b 	bl	800d728 <USBD_CtlError>
              break;
 800cef2:	e020      	b.n	800cf36 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	885b      	ldrh	r3, [r3, #2]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d11b      	bne.n	800cf34 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cefc:	7bbb      	ldrb	r3, [r7, #14]
 800cefe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d004      	beq.n	800cf10 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf06:	7bbb      	ldrb	r3, [r7, #14]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fecf 	bl	800dcae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 fcd4 	bl	800d8be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	4798      	blx	r3
 800cf24:	4603      	mov	r3, r0
 800cf26:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cf28:	e004      	b.n	800cf34 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cf2a:	6839      	ldr	r1, [r7, #0]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fbfb 	bl	800d728 <USBD_CtlError>
              break;
 800cf32:	e000      	b.n	800cf36 <USBD_StdEPReq+0x154>
              break;
 800cf34:	bf00      	nop
          }
          break;
 800cf36:	e0ab      	b.n	800d090 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	d002      	beq.n	800cf4a <USBD_StdEPReq+0x168>
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d032      	beq.n	800cfae <USBD_StdEPReq+0x1cc>
 800cf48:	e097      	b.n	800d07a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d007      	beq.n	800cf60 <USBD_StdEPReq+0x17e>
 800cf50:	7bbb      	ldrb	r3, [r7, #14]
 800cf52:	2b80      	cmp	r3, #128	@ 0x80
 800cf54:	d004      	beq.n	800cf60 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 fbe5 	bl	800d728 <USBD_CtlError>
                break;
 800cf5e:	e091      	b.n	800d084 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	da0b      	bge.n	800cf80 <USBD_StdEPReq+0x19e>
 800cf68:	7bbb      	ldrb	r3, [r7, #14]
 800cf6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	3310      	adds	r3, #16
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	e00b      	b.n	800cf98 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf80:	7bbb      	ldrb	r3, [r7, #14]
 800cf82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf86:	4613      	mov	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	009b      	lsls	r3, r3, #2
 800cf8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	4413      	add	r3, r2
 800cf96:	3304      	adds	r3, #4
 800cf98:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	4619      	mov	r1, r3
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 fc2f 	bl	800d80a <USBD_CtlSendData>
              break;
 800cfac:	e06a      	b.n	800d084 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cfae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	da11      	bge.n	800cfda <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cfb6:	7bbb      	ldrb	r3, [r7, #14]
 800cfb8:	f003 020f 	and.w	r2, r3, #15
 800cfbc:	6879      	ldr	r1, [r7, #4]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	4413      	add	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3324      	adds	r3, #36	@ 0x24
 800cfca:	881b      	ldrh	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d117      	bne.n	800d000 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 fba8 	bl	800d728 <USBD_CtlError>
                  break;
 800cfd8:	e054      	b.n	800d084 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cfda:	7bbb      	ldrb	r3, [r7, #14]
 800cfdc:	f003 020f 	and.w	r2, r3, #15
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	440b      	add	r3, r1
 800cfec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cff0:	881b      	ldrh	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d104      	bne.n	800d000 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 fb95 	bl	800d728 <USBD_CtlError>
                  break;
 800cffe:	e041      	b.n	800d084 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d004:	2b00      	cmp	r3, #0
 800d006:	da0b      	bge.n	800d020 <USBD_StdEPReq+0x23e>
 800d008:	7bbb      	ldrb	r3, [r7, #14]
 800d00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d00e:	4613      	mov	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	4413      	add	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	3310      	adds	r3, #16
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	4413      	add	r3, r2
 800d01c:	3304      	adds	r3, #4
 800d01e:	e00b      	b.n	800d038 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d020:	7bbb      	ldrb	r3, [r7, #14]
 800d022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d026:	4613      	mov	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	4413      	add	r3, r2
 800d036:	3304      	adds	r3, #4
 800d038:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <USBD_StdEPReq+0x264>
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	2b80      	cmp	r3, #128	@ 0x80
 800d044:	d103      	bne.n	800d04e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	2200      	movs	r2, #0
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	e00e      	b.n	800d06c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d04e:	7bbb      	ldrb	r3, [r7, #14]
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fe4a 	bl	800dcec <USBD_LL_IsStallEP>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d003      	beq.n	800d066 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	2201      	movs	r2, #1
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	e002      	b.n	800d06c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2200      	movs	r2, #0
 800d06a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	2202      	movs	r2, #2
 800d070:	4619      	mov	r1, r3
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fbc9 	bl	800d80a <USBD_CtlSendData>
              break;
 800d078:	e004      	b.n	800d084 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d07a:	6839      	ldr	r1, [r7, #0]
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f000 fb53 	bl	800d728 <USBD_CtlError>
              break;
 800d082:	bf00      	nop
          }
          break;
 800d084:	e004      	b.n	800d090 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d086:	6839      	ldr	r1, [r7, #0]
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 fb4d 	bl	800d728 <USBD_CtlError>
          break;
 800d08e:	bf00      	nop
      }
      break;
 800d090:	e004      	b.n	800d09c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fb47 	bl	800d728 <USBD_CtlError>
      break;
 800d09a:	bf00      	nop
  }

  return ret;
 800d09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3710      	adds	r7, #16
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}
	...

0800d0a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	885b      	ldrh	r3, [r3, #2]
 800d0c2:	0a1b      	lsrs	r3, r3, #8
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	2b06      	cmp	r3, #6
 800d0ca:	f200 813b 	bhi.w	800d344 <USBD_GetDescriptor+0x29c>
 800d0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d0d4 <USBD_GetDescriptor+0x2c>)
 800d0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d4:	0800d0f1 	.word	0x0800d0f1
 800d0d8:	0800d109 	.word	0x0800d109
 800d0dc:	0800d149 	.word	0x0800d149
 800d0e0:	0800d345 	.word	0x0800d345
 800d0e4:	0800d345 	.word	0x0800d345
 800d0e8:	0800d2e5 	.word	0x0800d2e5
 800d0ec:	0800d311 	.word	0x0800d311
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	7c12      	ldrb	r2, [r2, #16]
 800d0fc:	f107 0108 	add.w	r1, r7, #8
 800d100:	4610      	mov	r0, r2
 800d102:	4798      	blx	r3
 800d104:	60f8      	str	r0, [r7, #12]
      break;
 800d106:	e125      	b.n	800d354 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	7c1b      	ldrb	r3, [r3, #16]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10d      	bne.n	800d12c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d118:	f107 0208 	add.w	r2, r7, #8
 800d11c:	4610      	mov	r0, r2
 800d11e:	4798      	blx	r3
 800d120:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3301      	adds	r3, #1
 800d126:	2202      	movs	r2, #2
 800d128:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d12a:	e113      	b.n	800d354 <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d134:	f107 0208 	add.w	r2, r7, #8
 800d138:	4610      	mov	r0, r2
 800d13a:	4798      	blx	r3
 800d13c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	3301      	adds	r3, #1
 800d142:	2202      	movs	r2, #2
 800d144:	701a      	strb	r2, [r3, #0]
      break;
 800d146:	e105      	b.n	800d354 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	885b      	ldrh	r3, [r3, #2]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b05      	cmp	r3, #5
 800d150:	f200 80ac 	bhi.w	800d2ac <USBD_GetDescriptor+0x204>
 800d154:	a201      	add	r2, pc, #4	@ (adr r2, 800d15c <USBD_GetDescriptor+0xb4>)
 800d156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15a:	bf00      	nop
 800d15c:	0800d175 	.word	0x0800d175
 800d160:	0800d1a9 	.word	0x0800d1a9
 800d164:	0800d1dd 	.word	0x0800d1dd
 800d168:	0800d211 	.word	0x0800d211
 800d16c:	0800d245 	.word	0x0800d245
 800d170:	0800d279 	.word	0x0800d279
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d00b      	beq.n	800d198 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	7c12      	ldrb	r2, [r2, #16]
 800d18c:	f107 0108 	add.w	r1, r7, #8
 800d190:	4610      	mov	r0, r2
 800d192:	4798      	blx	r3
 800d194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d196:	e0a4      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 fac4 	bl	800d728 <USBD_CtlError>
            err++;
 800d1a0:	7afb      	ldrb	r3, [r7, #11]
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d1a6:	e09c      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d00b      	beq.n	800d1cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	7c12      	ldrb	r2, [r2, #16]
 800d1c0:	f107 0108 	add.w	r1, r7, #8
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	4798      	blx	r3
 800d1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ca:	e08a      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d1cc:	6839      	ldr	r1, [r7, #0]
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f000 faaa 	bl	800d728 <USBD_CtlError>
            err++;
 800d1d4:	7afb      	ldrb	r3, [r7, #11]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d1da:	e082      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d00b      	beq.n	800d200 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	7c12      	ldrb	r2, [r2, #16]
 800d1f4:	f107 0108 	add.w	r1, r7, #8
 800d1f8:	4610      	mov	r0, r2
 800d1fa:	4798      	blx	r3
 800d1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1fe:	e070      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d200:	6839      	ldr	r1, [r7, #0]
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fa90 	bl	800d728 <USBD_CtlError>
            err++;
 800d208:	7afb      	ldrb	r3, [r7, #11]
 800d20a:	3301      	adds	r3, #1
 800d20c:	72fb      	strb	r3, [r7, #11]
          break;
 800d20e:	e068      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d216:	691b      	ldr	r3, [r3, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d00b      	beq.n	800d234 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	7c12      	ldrb	r2, [r2, #16]
 800d228:	f107 0108 	add.w	r1, r7, #8
 800d22c:	4610      	mov	r0, r2
 800d22e:	4798      	blx	r3
 800d230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d232:	e056      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 fa76 	bl	800d728 <USBD_CtlError>
            err++;
 800d23c:	7afb      	ldrb	r3, [r7, #11]
 800d23e:	3301      	adds	r3, #1
 800d240:	72fb      	strb	r3, [r7, #11]
          break;
 800d242:	e04e      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d00b      	beq.n	800d268 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d256:	695b      	ldr	r3, [r3, #20]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	7c12      	ldrb	r2, [r2, #16]
 800d25c:	f107 0108 	add.w	r1, r7, #8
 800d260:	4610      	mov	r0, r2
 800d262:	4798      	blx	r3
 800d264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d266:	e03c      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fa5c 	bl	800d728 <USBD_CtlError>
            err++;
 800d270:	7afb      	ldrb	r3, [r7, #11]
 800d272:	3301      	adds	r3, #1
 800d274:	72fb      	strb	r3, [r7, #11]
          break;
 800d276:	e034      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00b      	beq.n	800d29c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	7c12      	ldrb	r2, [r2, #16]
 800d290:	f107 0108 	add.w	r1, r7, #8
 800d294:	4610      	mov	r0, r2
 800d296:	4798      	blx	r3
 800d298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d29a:	e022      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800d29c:	6839      	ldr	r1, [r7, #0]
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 fa42 	bl	800d728 <USBD_CtlError>
            err++;
 800d2a4:	7afb      	ldrb	r3, [r7, #11]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d2aa:	e01a      	b.n	800d2e2 <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d00c      	beq.n	800d2d2 <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c0:	683a      	ldr	r2, [r7, #0]
 800d2c2:	8852      	ldrh	r2, [r2, #2]
 800d2c4:	b2d1      	uxtb	r1, r2
 800d2c6:	f107 0208 	add.w	r2, r7, #8
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	4798      	blx	r3
 800d2ce:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800d2d0:	e006      	b.n	800d2e0 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 fa27 	bl	800d728 <USBD_CtlError>
            err++;
 800d2da:	7afb      	ldrb	r3, [r7, #11]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	72fb      	strb	r3, [r7, #11]
          break;
 800d2e0:	bf00      	nop
      }
      break;
 800d2e2:	e037      	b.n	800d354 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	7c1b      	ldrb	r3, [r3, #16]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d109      	bne.n	800d300 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2f4:	f107 0208 	add.w	r2, r7, #8
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	4798      	blx	r3
 800d2fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2fe:	e029      	b.n	800d354 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fa10 	bl	800d728 <USBD_CtlError>
        err++;
 800d308:	7afb      	ldrb	r3, [r7, #11]
 800d30a:	3301      	adds	r3, #1
 800d30c:	72fb      	strb	r3, [r7, #11]
      break;
 800d30e:	e021      	b.n	800d354 <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	7c1b      	ldrb	r3, [r3, #16]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10d      	bne.n	800d334 <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d320:	f107 0208 	add.w	r2, r7, #8
 800d324:	4610      	mov	r0, r2
 800d326:	4798      	blx	r3
 800d328:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3301      	adds	r3, #1
 800d32e:	2207      	movs	r2, #7
 800d330:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d332:	e00f      	b.n	800d354 <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f9f6 	bl	800d728 <USBD_CtlError>
        err++;
 800d33c:	7afb      	ldrb	r3, [r7, #11]
 800d33e:	3301      	adds	r3, #1
 800d340:	72fb      	strb	r3, [r7, #11]
      break;
 800d342:	e007      	b.n	800d354 <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f9ee 	bl	800d728 <USBD_CtlError>
      err++;
 800d34c:	7afb      	ldrb	r3, [r7, #11]
 800d34e:	3301      	adds	r3, #1
 800d350:	72fb      	strb	r3, [r7, #11]
      break;
 800d352:	bf00      	nop
  }

  if (err != 0U)
 800d354:	7afb      	ldrb	r3, [r7, #11]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d11e      	bne.n	800d398 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	88db      	ldrh	r3, [r3, #6]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d016      	beq.n	800d390 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800d362:	893b      	ldrh	r3, [r7, #8]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d00e      	beq.n	800d386 <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	88da      	ldrh	r2, [r3, #6]
 800d36c:	893b      	ldrh	r3, [r7, #8]
 800d36e:	4293      	cmp	r3, r2
 800d370:	bf28      	it	cs
 800d372:	4613      	movcs	r3, r2
 800d374:	b29b      	uxth	r3, r3
 800d376:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d378:	893b      	ldrh	r3, [r7, #8]
 800d37a:	461a      	mov	r2, r3
 800d37c:	68f9      	ldr	r1, [r7, #12]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fa43 	bl	800d80a <USBD_CtlSendData>
 800d384:	e009      	b.n	800d39a <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d386:	6839      	ldr	r1, [r7, #0]
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f000 f9cd 	bl	800d728 <USBD_CtlError>
 800d38e:	e004      	b.n	800d39a <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fa94 	bl	800d8be <USBD_CtlSendStatus>
 800d396:	e000      	b.n	800d39a <USBD_GetDescriptor+0x2f2>
    return;
 800d398:	bf00      	nop
  }
}
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b084      	sub	sp, #16
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	889b      	ldrh	r3, [r3, #4]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d131      	bne.n	800d416 <USBD_SetAddress+0x76>
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	88db      	ldrh	r3, [r3, #6]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d12d      	bne.n	800d416 <USBD_SetAddress+0x76>
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	885b      	ldrh	r3, [r3, #2]
 800d3be:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3c0:	d829      	bhi.n	800d416 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	2b03      	cmp	r3, #3
 800d3d8:	d104      	bne.n	800d3e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 f9a3 	bl	800d728 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3e2:	e01d      	b.n	800d420 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	7bfa      	ldrb	r2, [r7, #15]
 800d3e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 fca7 	bl	800dd44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fa61 	bl	800d8be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d004      	beq.n	800d40c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2202      	movs	r2, #2
 800d406:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d40a:	e009      	b.n	800d420 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2201      	movs	r2, #1
 800d410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d414:	e004      	b.n	800d420 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d416:	6839      	ldr	r1, [r7, #0]
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f000 f985 	bl	800d728 <USBD_CtlError>
  }
}
 800d41e:	bf00      	nop
 800d420:	bf00      	nop
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	885b      	ldrh	r3, [r3, #2]
 800d43a:	b2da      	uxtb	r2, r3
 800d43c:	4b4c      	ldr	r3, [pc, #304]	@ (800d570 <USBD_SetConfig+0x148>)
 800d43e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d440:	4b4b      	ldr	r3, [pc, #300]	@ (800d570 <USBD_SetConfig+0x148>)
 800d442:	781b      	ldrb	r3, [r3, #0]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d905      	bls.n	800d454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f96c 	bl	800d728 <USBD_CtlError>
    return USBD_FAIL;
 800d450:	2303      	movs	r3, #3
 800d452:	e088      	b.n	800d566 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	2b02      	cmp	r3, #2
 800d45e:	d002      	beq.n	800d466 <USBD_SetConfig+0x3e>
 800d460:	2b03      	cmp	r3, #3
 800d462:	d025      	beq.n	800d4b0 <USBD_SetConfig+0x88>
 800d464:	e071      	b.n	800d54a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d466:	4b42      	ldr	r3, [pc, #264]	@ (800d570 <USBD_SetConfig+0x148>)
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d01c      	beq.n	800d4a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d46e:	4b40      	ldr	r3, [pc, #256]	@ (800d570 <USBD_SetConfig+0x148>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	461a      	mov	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d478:	4b3d      	ldr	r3, [pc, #244]	@ (800d570 <USBD_SetConfig+0x148>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	4619      	mov	r1, r3
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff f93b 	bl	800c6fa <USBD_SetClassConfig>
 800d484:	4603      	mov	r3, r0
 800d486:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d488:	7bfb      	ldrb	r3, [r7, #15]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d004      	beq.n	800d498 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 f949 	bl	800d728 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d496:	e065      	b.n	800d564 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fa10 	bl	800d8be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4a6:	e05d      	b.n	800d564 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fa08 	bl	800d8be <USBD_CtlSendStatus>
      break;
 800d4ae:	e059      	b.n	800d564 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d4b0:	4b2f      	ldr	r3, [pc, #188]	@ (800d570 <USBD_SetConfig+0x148>)
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d112      	bne.n	800d4de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d4c0:	4b2b      	ldr	r3, [pc, #172]	@ (800d570 <USBD_SetConfig+0x148>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4ca:	4b29      	ldr	r3, [pc, #164]	@ (800d570 <USBD_SetConfig+0x148>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff f92e 	bl	800c732 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f000 f9f1 	bl	800d8be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4dc:	e042      	b.n	800d564 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d4de:	4b24      	ldr	r3, [pc, #144]	@ (800d570 <USBD_SetConfig+0x148>)
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d02a      	beq.n	800d542 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff f91c 	bl	800c732 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d4fa:	4b1d      	ldr	r3, [pc, #116]	@ (800d570 <USBD_SetConfig+0x148>)
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	461a      	mov	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d504:	4b1a      	ldr	r3, [pc, #104]	@ (800d570 <USBD_SetConfig+0x148>)
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	4619      	mov	r1, r3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7ff f8f5 	bl	800c6fa <USBD_SetClassConfig>
 800d510:	4603      	mov	r3, r0
 800d512:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d514:	7bfb      	ldrb	r3, [r7, #15]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00f      	beq.n	800d53a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 f903 	bl	800d728 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	b2db      	uxtb	r3, r3
 800d528:	4619      	mov	r1, r3
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7ff f901 	bl	800c732 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d538:	e014      	b.n	800d564 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 f9bf 	bl	800d8be <USBD_CtlSendStatus>
      break;
 800d540:	e010      	b.n	800d564 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f9bb 	bl	800d8be <USBD_CtlSendStatus>
      break;
 800d548:	e00c      	b.n	800d564 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d54a:	6839      	ldr	r1, [r7, #0]
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f8eb 	bl	800d728 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d552:	4b07      	ldr	r3, [pc, #28]	@ (800d570 <USBD_SetConfig+0x148>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff f8ea 	bl	800c732 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d55e:	2303      	movs	r3, #3
 800d560:	73fb      	strb	r3, [r7, #15]
      break;
 800d562:	bf00      	nop
  }

  return ret;
 800d564:	7bfb      	ldrb	r3, [r7, #15]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3710      	adds	r7, #16
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	200011e4 	.word	0x200011e4

0800d574 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	88db      	ldrh	r3, [r3, #6]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d004      	beq.n	800d590 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d586:	6839      	ldr	r1, [r7, #0]
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f8cd 	bl	800d728 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d58e:	e023      	b.n	800d5d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d596:	b2db      	uxtb	r3, r3
 800d598:	2b02      	cmp	r3, #2
 800d59a:	dc02      	bgt.n	800d5a2 <USBD_GetConfig+0x2e>
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	dc03      	bgt.n	800d5a8 <USBD_GetConfig+0x34>
 800d5a0:	e015      	b.n	800d5ce <USBD_GetConfig+0x5a>
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d00b      	beq.n	800d5be <USBD_GetConfig+0x4a>
 800d5a6:	e012      	b.n	800d5ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3308      	adds	r3, #8
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f927 	bl	800d80a <USBD_CtlSendData>
        break;
 800d5bc:	e00c      	b.n	800d5d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	3304      	adds	r3, #4
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f91f 	bl	800d80a <USBD_CtlSendData>
        break;
 800d5cc:	e004      	b.n	800d5d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 f8a9 	bl	800d728 <USBD_CtlError>
        break;
 800d5d6:	bf00      	nop
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5f0:	b2db      	uxtb	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	d81e      	bhi.n	800d636 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	88db      	ldrh	r3, [r3, #6]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	d004      	beq.n	800d60a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f890 	bl	800d728 <USBD_CtlError>
        break;
 800d608:	e01a      	b.n	800d640 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2201      	movs	r2, #1
 800d60e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	f043 0202 	orr.w	r2, r3, #2
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	330c      	adds	r3, #12
 800d62a:	2202      	movs	r2, #2
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f8eb 	bl	800d80a <USBD_CtlSendData>
      break;
 800d634:	e004      	b.n	800d640 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f875 	bl	800d728 <USBD_CtlError>
      break;
 800d63e:	bf00      	nop
  }
}
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	885b      	ldrh	r3, [r3, #2]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d106      	bne.n	800d668 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 f92b 	bl	800d8be <USBD_CtlSendStatus>
  }
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d680:	b2db      	uxtb	r3, r3
 800d682:	3b01      	subs	r3, #1
 800d684:	2b02      	cmp	r3, #2
 800d686:	d80b      	bhi.n	800d6a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	885b      	ldrh	r3, [r3, #2]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d10c      	bne.n	800d6aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 f910 	bl	800d8be <USBD_CtlSendStatus>
      }
      break;
 800d69e:	e004      	b.n	800d6aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d6a0:	6839      	ldr	r1, [r7, #0]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f840 	bl	800d728 <USBD_CtlError>
      break;
 800d6a8:	e000      	b.n	800d6ac <USBD_ClrFeature+0x3c>
      break;
 800d6aa:	bf00      	nop
  }
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	781a      	ldrb	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	781a      	ldrb	r2, [r3, #0]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	3301      	adds	r3, #1
 800d6dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7ff faa9 	bl	800cc36 <SWAPBYTE>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d6f8:	68f8      	ldr	r0, [r7, #12]
 800d6fa:	f7ff fa9c 	bl	800cc36 <SWAPBYTE>
 800d6fe:	4603      	mov	r3, r0
 800d700:	461a      	mov	r2, r3
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	3301      	adds	r3, #1
 800d70a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	3301      	adds	r3, #1
 800d710:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f7ff fa8f 	bl	800cc36 <SWAPBYTE>
 800d718:	4603      	mov	r3, r0
 800d71a:	461a      	mov	r2, r3
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	80da      	strh	r2, [r3, #6]
}
 800d720:	bf00      	nop
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d732:	2180      	movs	r1, #128	@ 0x80
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fa9b 	bl	800dc70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d73a:	2100      	movs	r1, #0
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fa97 	bl	800dc70 <USBD_LL_StallEP>
}
 800d742:	bf00      	nop
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b086      	sub	sp, #24
 800d74e:	af00      	add	r7, sp, #0
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d756:	2300      	movs	r3, #0
 800d758:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d036      	beq.n	800d7ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d764:	6938      	ldr	r0, [r7, #16]
 800d766:	f000 f836 	bl	800d7d6 <USBD_GetLen>
 800d76a:	4603      	mov	r3, r0
 800d76c:	3301      	adds	r3, #1
 800d76e:	b29b      	uxth	r3, r3
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	b29a      	uxth	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d778:	7dfb      	ldrb	r3, [r7, #23]
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	4413      	add	r3, r2
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	7812      	ldrb	r2, [r2, #0]
 800d782:	701a      	strb	r2, [r3, #0]
  idx++;
 800d784:	7dfb      	ldrb	r3, [r7, #23]
 800d786:	3301      	adds	r3, #1
 800d788:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	4413      	add	r3, r2
 800d790:	2203      	movs	r2, #3
 800d792:	701a      	strb	r2, [r3, #0]
  idx++;
 800d794:	7dfb      	ldrb	r3, [r7, #23]
 800d796:	3301      	adds	r3, #1
 800d798:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d79a:	e013      	b.n	800d7c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	68ba      	ldr	r2, [r7, #8]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	7812      	ldrb	r2, [r2, #0]
 800d7a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	613b      	str	r3, [r7, #16]
    idx++;
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
    idx++;
 800d7be:	7dfb      	ldrb	r3, [r7, #23]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1e7      	bne.n	800d79c <USBD_GetString+0x52>
 800d7cc:	e000      	b.n	800d7d0 <USBD_GetString+0x86>
    return;
 800d7ce:	bf00      	nop
  }
}
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b085      	sub	sp, #20
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d7e6:	e005      	b.n	800d7f4 <USBD_GetLen+0x1e>
  {
    len++;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d1f5      	bne.n	800d7e8 <USBD_GetLen+0x12>
  }

  return len;
 800d7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3714      	adds	r7, #20
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b084      	sub	sp, #16
 800d80e:	af00      	add	r7, sp, #0
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	60b9      	str	r1, [r7, #8]
 800d814:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2202      	movs	r2, #2
 800d81a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	2100      	movs	r1, #0
 800d830:	68f8      	ldr	r0, [r7, #12]
 800d832:	f000 faa6 	bl	800dd82 <USBD_LL_Transmit>

  return USBD_OK;
 800d836:	2300      	movs	r3, #0
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	60b9      	str	r1, [r7, #8]
 800d84a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	68ba      	ldr	r2, [r7, #8]
 800d850:	2100      	movs	r1, #0
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 fa95 	bl	800dd82 <USBD_LL_Transmit>

  return USBD_OK;
 800d858:	2300      	movs	r3, #0
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3710      	adds	r7, #16
 800d85e:	46bd      	mov	sp, r7
 800d860:	bd80      	pop	{r7, pc}

0800d862 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b084      	sub	sp, #16
 800d866:	af00      	add	r7, sp, #0
 800d868:	60f8      	str	r0, [r7, #12]
 800d86a:	60b9      	str	r1, [r7, #8]
 800d86c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2203      	movs	r2, #3
 800d872:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68ba      	ldr	r2, [r7, #8]
 800d88a:	2100      	movs	r1, #0
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f000 fa99 	bl	800ddc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f000 fa88 	bl	800ddc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b082      	sub	sp, #8
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2204      	movs	r2, #4
 800d8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fa54 	bl	800dd82 <USBD_LL_Transmit>

  return USBD_OK;
 800d8da:	2300      	movs	r3, #0
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2205      	movs	r2, #5
 800d8f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fa62 	bl	800ddc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d900:	2300      	movs	r3, #0
}
 800d902:	4618      	mov	r0, r3
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	70fb      	strb	r3, [r7, #3]
 800d916:	4613      	mov	r3, r2
 800d918:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800d91a:	883b      	ldrh	r3, [r7, #0]
 800d91c:	089b      	lsrs	r3, r3, #2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	78fb      	ldrb	r3, [r7, #3]
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f7f8 fe63 	bl	80065f0 <HAL_PCDEx_SetTxFiFo>
 800d92a:	4603      	mov	r3, r0
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}

0800d934 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	460b      	mov	r3, r1
 800d93e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800d940:	887b      	ldrh	r3, [r7, #2]
 800d942:	089b      	lsrs	r3, r3, #2
 800d944:	b29b      	uxth	r3, r3
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7f8 fe98 	bl	800667e <HAL_PCDEx_SetRxFiFo>
 800d94e:	4603      	mov	r3, r0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d96c:	4619      	mov	r1, r3
 800d96e:	4610      	mov	r0, r2
 800d970:	f7fe fef7 	bl	800c762 <USBD_LL_SetupStage>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d98e:	78fa      	ldrb	r2, [r7, #3]
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	4613      	mov	r3, r2
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	4413      	add	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	440b      	add	r3, r1
 800d99c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	78fb      	ldrb	r3, [r7, #3]
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	f7fe ff31 	bl	800c80c <USBD_LL_DataOutStage>
}
 800d9aa:	bf00      	nop
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b082      	sub	sp, #8
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d9c4:	78fa      	ldrb	r2, [r7, #3]
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	4413      	add	r3, r2
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	440b      	add	r3, r1
 800d9d2:	3320      	adds	r3, #32
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	78fb      	ldrb	r3, [r7, #3]
 800d9d8:	4619      	mov	r1, r3
 800d9da:	f7fe ff7a 	bl	800c8d2 <USBD_LL_DataInStage>
}
 800d9de:	bf00      	nop
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7ff f889 	bl	800cb0c <USBD_LL_SOF>
}
 800d9fa:	bf00      	nop
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800da0a:	2301      	movs	r3, #1
 800da0c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	79db      	ldrb	r3, [r3, #7]
 800da12:	2b02      	cmp	r3, #2
 800da14:	d102      	bne.n	800da1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800da16:	2301      	movs	r3, #1
 800da18:	73fb      	strb	r3, [r7, #15]
 800da1a:	e008      	b.n	800da2e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	79db      	ldrb	r3, [r3, #7]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d102      	bne.n	800da2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800da24:	2300      	movs	r3, #0
 800da26:	73fb      	strb	r3, [r7, #15]
 800da28:	e001      	b.n	800da2e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800da2a:	f7f4 fd73 	bl	8002514 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da34:	7bfa      	ldrb	r2, [r7, #15]
 800da36:	4611      	mov	r1, r2
 800da38:	4618      	mov	r0, r3
 800da3a:	f7ff f829 	bl	800ca90 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da44:	4618      	mov	r0, r3
 800da46:	f7fe ffda 	bl	800c9fe <USBD_LL_Reset>
}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800da62:	4618      	mov	r0, r3
 800da64:	f7ff f824 	bl	800cab0 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	6812      	ldr	r2, [r2, #0]
 800da76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da7a:	f043 0301 	orr.w	r3, r3, #1
 800da7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	7adb      	ldrb	r3, [r3, #11]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d005      	beq.n	800da94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da88:	4b04      	ldr	r3, [pc, #16]	@ (800da9c <HAL_PCD_SuspendCallback+0x48>)
 800da8a:	691b      	ldr	r3, [r3, #16]
 800da8c:	4a03      	ldr	r2, [pc, #12]	@ (800da9c <HAL_PCD_SuspendCallback+0x48>)
 800da8e:	f043 0306 	orr.w	r3, r3, #6
 800da92:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800da94:	bf00      	nop
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	e000ed00 	.word	0xe000ed00

0800daa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff f814 	bl	800cadc <USBD_LL_Resume>
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dace:	78fa      	ldrb	r2, [r7, #3]
 800dad0:	4611      	mov	r1, r2
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff f862 	bl	800cb9c <USBD_LL_IsoOUTIncomplete>
}
 800dad8:	bf00      	nop
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800daf2:	78fa      	ldrb	r2, [r7, #3]
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff f82a 	bl	800cb50 <USBD_LL_IsoINIncomplete>
}
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db12:	4618      	mov	r0, r3
 800db14:	f7ff f868 	bl	800cbe8 <USBD_LL_DevConnected>
}
 800db18:	bf00      	nop
 800db1a:	3708      	adds	r7, #8
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff f865 	bl	800cbfe <USBD_LL_DevDisconnected>
}
 800db34:	bf00      	nop
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800db44:	4b17      	ldr	r3, [pc, #92]	@ (800dba4 <USBD_LL_Init+0x68>)
 800db46:	4a18      	ldr	r2, [pc, #96]	@ (800dba8 <USBD_LL_Init+0x6c>)
 800db48:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d122      	bne.n	800db98 <USBD_LL_Init+0x5c>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800db52:	4b14      	ldr	r3, [pc, #80]	@ (800dba4 <USBD_LL_Init+0x68>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800db5c:	4b11      	ldr	r3, [pc, #68]	@ (800dba4 <USBD_LL_Init+0x68>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800db66:	4b0f      	ldr	r3, [pc, #60]	@ (800dba4 <USBD_LL_Init+0x68>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800db6e:	4618      	mov	r0, r3
 800db70:	f7ff fee0 	bl	800d934 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800db74:	4b0b      	ldr	r3, [pc, #44]	@ (800dba4 <USBD_LL_Init+0x68>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2240      	movs	r2, #64	@ 0x40
 800db7a:	2100      	movs	r1, #0
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fec4 	bl	800d90a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800db82:	4b08      	ldr	r3, [pc, #32]	@ (800dba4 <USBD_LL_Init+0x68>)
 800db84:	6818      	ldr	r0, [r3, #0]
 800db86:	4b09      	ldr	r3, [pc, #36]	@ (800dbac <USBD_LL_Init+0x70>)
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2240      	movs	r2, #64	@ 0x40
 800db92:	4619      	mov	r1, r3
 800db94:	f7ff feb9 	bl	800d90a <HAL_PCDEx_SetTxFiFoInBytes>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	200011e8 	.word	0x200011e8
 800dba8:	200006f0 	.word	0x200006f0
 800dbac:	200000f6 	.word	0x200000f6

0800dbb0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7f7 fc4b 	bl	8005462 <HAL_PCD_Start>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 f918 	bl	800de08 <USBD_Get_USB_Status>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b084      	sub	sp, #16
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	4608      	mov	r0, r1
 800dbf0:	4611      	mov	r1, r2
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	70fb      	strb	r3, [r7, #3]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	70bb      	strb	r3, [r7, #2]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc00:	2300      	movs	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800dc0e:	78bb      	ldrb	r3, [r7, #2]
 800dc10:	883a      	ldrh	r2, [r7, #0]
 800dc12:	78f9      	ldrb	r1, [r7, #3]
 800dc14:	f7f8 f91f 	bl	8005e56 <HAL_PCD_EP_Open>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 f8f2 	bl	800de08 <USBD_Get_USB_Status>
 800dc24:	4603      	mov	r3, r0
 800dc26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc28:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b084      	sub	sp, #16
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800dc4c:	78fa      	ldrb	r2, [r7, #3]
 800dc4e:	4611      	mov	r1, r2
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7f8 f96a 	bl	8005f2a <HAL_PCD_EP_Close>
 800dc56:	4603      	mov	r3, r0
 800dc58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f000 f8d3 	bl	800de08 <USBD_Get_USB_Status>
 800dc62:	4603      	mov	r3, r0
 800dc64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc66:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	460b      	mov	r3, r1
 800dc7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800dc8a:	78fa      	ldrb	r2, [r7, #3]
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7f8 fa0a 	bl	80060a8 <HAL_PCD_EP_SetStall>
 800dc94:	4603      	mov	r3, r0
 800dc96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800dc98:	7bfb      	ldrb	r3, [r7, #15]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 f8b4 	bl	800de08 <USBD_Get_USB_Status>
 800dca0:	4603      	mov	r3, r0
 800dca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dca4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b084      	sub	sp, #16
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800dcc8:	78fa      	ldrb	r2, [r7, #3]
 800dcca:	4611      	mov	r1, r2
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7f8 fa4e 	bl	800616e <HAL_PCD_EP_ClrStall>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800dcd6:	7bfb      	ldrb	r3, [r7, #15]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f000 f895 	bl	800de08 <USBD_Get_USB_Status>
 800dcde:	4603      	mov	r3, r0
 800dce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dce2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcec:	b480      	push	{r7}
 800dcee:	b085      	sub	sp, #20
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800dcfe:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800dd00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	da0b      	bge.n	800dd20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd08:	78fb      	ldrb	r3, [r7, #3]
 800dd0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd0e:	68f9      	ldr	r1, [r7, #12]
 800dd10:	4613      	mov	r3, r2
 800dd12:	00db      	lsls	r3, r3, #3
 800dd14:	4413      	add	r3, r2
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	440b      	add	r3, r1
 800dd1a:	3316      	adds	r3, #22
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	e00b      	b.n	800dd38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd26:	68f9      	ldr	r1, [r7, #12]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	00db      	lsls	r3, r3, #3
 800dd2c:	4413      	add	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	440b      	add	r3, r1
 800dd32:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800dd36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800dd5e:	78fa      	ldrb	r2, [r7, #3]
 800dd60:	4611      	mov	r1, r2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f8 f853 	bl	8005e0e <HAL_PCD_SetAddress>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 f84a 	bl	800de08 <USBD_Get_USB_Status>
 800dd74:	4603      	mov	r3, r0
 800dd76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd78:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}

0800dd82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd82:	b580      	push	{r7, lr}
 800dd84:	b086      	sub	sp, #24
 800dd86:	af00      	add	r7, sp, #0
 800dd88:	60f8      	str	r0, [r7, #12]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	603b      	str	r3, [r7, #0]
 800dd8e:	460b      	mov	r3, r1
 800dd90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800dda0:	7af9      	ldrb	r1, [r7, #11]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	687a      	ldr	r2, [r7, #4]
 800dda6:	f7f8 f945 	bl	8006034 <HAL_PCD_EP_Transmit>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f000 f829 	bl	800de08 <USBD_Get_USB_Status>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ddba:	7dbb      	ldrb	r3, [r7, #22]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	603b      	str	r3, [r7, #0]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800dde2:	7af9      	ldrb	r1, [r7, #11]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	f7f8 f8e9 	bl	8005fbe <HAL_PCD_EP_Receive>
 800ddec:	4603      	mov	r3, r0
 800ddee:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f000 f808 	bl	800de08 <USBD_Get_USB_Status>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ddfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3718      	adds	r7, #24
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
	...

0800de08 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de12:	2300      	movs	r3, #0
 800de14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800de16:	79fb      	ldrb	r3, [r7, #7]
 800de18:	2b03      	cmp	r3, #3
 800de1a:	d817      	bhi.n	800de4c <USBD_Get_USB_Status+0x44>
 800de1c:	a201      	add	r2, pc, #4	@ (adr r2, 800de24 <USBD_Get_USB_Status+0x1c>)
 800de1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de22:	bf00      	nop
 800de24:	0800de35 	.word	0x0800de35
 800de28:	0800de3b 	.word	0x0800de3b
 800de2c:	0800de41 	.word	0x0800de41
 800de30:	0800de47 	.word	0x0800de47
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	73fb      	strb	r3, [r7, #15]
    break;
 800de38:	e00b      	b.n	800de52 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800de3a:	2303      	movs	r3, #3
 800de3c:	73fb      	strb	r3, [r7, #15]
    break;
 800de3e:	e008      	b.n	800de52 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800de40:	2301      	movs	r3, #1
 800de42:	73fb      	strb	r3, [r7, #15]
    break;
 800de44:	e005      	b.n	800de52 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800de46:	2303      	movs	r3, #3
 800de48:	73fb      	strb	r3, [r7, #15]
    break;
 800de4a:	e002      	b.n	800de52 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800de4c:	2303      	movs	r3, #3
 800de4e:	73fb      	strb	r3, [r7, #15]
    break;
 800de50:	bf00      	nop
  }
  return usb_status;
 800de52:	7bfb      	ldrb	r3, [r7, #15]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3714      	adds	r7, #20
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <sniprintf>:
 800de60:	b40c      	push	{r2, r3}
 800de62:	b530      	push	{r4, r5, lr}
 800de64:	4b18      	ldr	r3, [pc, #96]	@ (800dec8 <sniprintf+0x68>)
 800de66:	1e0c      	subs	r4, r1, #0
 800de68:	681d      	ldr	r5, [r3, #0]
 800de6a:	b09d      	sub	sp, #116	@ 0x74
 800de6c:	da08      	bge.n	800de80 <sniprintf+0x20>
 800de6e:	238b      	movs	r3, #139	@ 0x8b
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800de76:	b01d      	add	sp, #116	@ 0x74
 800de78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de7c:	b002      	add	sp, #8
 800de7e:	4770      	bx	lr
 800de80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800de84:	f8ad 3014 	strh.w	r3, [sp, #20]
 800de88:	f04f 0300 	mov.w	r3, #0
 800de8c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800de8e:	bf14      	ite	ne
 800de90:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800de94:	4623      	moveq	r3, r4
 800de96:	9304      	str	r3, [sp, #16]
 800de98:	9307      	str	r3, [sp, #28]
 800de9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800de9e:	9002      	str	r0, [sp, #8]
 800dea0:	9006      	str	r0, [sp, #24]
 800dea2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dea6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dea8:	ab21      	add	r3, sp, #132	@ 0x84
 800deaa:	a902      	add	r1, sp, #8
 800deac:	4628      	mov	r0, r5
 800deae:	9301      	str	r3, [sp, #4]
 800deb0:	f000 f9a2 	bl	800e1f8 <_svfiprintf_r>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	bfbc      	itt	lt
 800deb8:	238b      	movlt	r3, #139	@ 0x8b
 800deba:	602b      	strlt	r3, [r5, #0]
 800debc:	2c00      	cmp	r4, #0
 800debe:	d0da      	beq.n	800de76 <sniprintf+0x16>
 800dec0:	9b02      	ldr	r3, [sp, #8]
 800dec2:	2200      	movs	r2, #0
 800dec4:	701a      	strb	r2, [r3, #0]
 800dec6:	e7d6      	b.n	800de76 <sniprintf+0x16>
 800dec8:	200001d4 	.word	0x200001d4

0800decc <memset>:
 800decc:	4402      	add	r2, r0
 800dece:	4603      	mov	r3, r0
 800ded0:	4293      	cmp	r3, r2
 800ded2:	d100      	bne.n	800ded6 <memset+0xa>
 800ded4:	4770      	bx	lr
 800ded6:	f803 1b01 	strb.w	r1, [r3], #1
 800deda:	e7f9      	b.n	800ded0 <memset+0x4>

0800dedc <__errno>:
 800dedc:	4b01      	ldr	r3, [pc, #4]	@ (800dee4 <__errno+0x8>)
 800dede:	6818      	ldr	r0, [r3, #0]
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	200001d4 	.word	0x200001d4

0800dee8 <__libc_init_array>:
 800dee8:	b570      	push	{r4, r5, r6, lr}
 800deea:	4d0d      	ldr	r5, [pc, #52]	@ (800df20 <__libc_init_array+0x38>)
 800deec:	4c0d      	ldr	r4, [pc, #52]	@ (800df24 <__libc_init_array+0x3c>)
 800deee:	1b64      	subs	r4, r4, r5
 800def0:	10a4      	asrs	r4, r4, #2
 800def2:	2600      	movs	r6, #0
 800def4:	42a6      	cmp	r6, r4
 800def6:	d109      	bne.n	800df0c <__libc_init_array+0x24>
 800def8:	4d0b      	ldr	r5, [pc, #44]	@ (800df28 <__libc_init_array+0x40>)
 800defa:	4c0c      	ldr	r4, [pc, #48]	@ (800df2c <__libc_init_array+0x44>)
 800defc:	f000 fc64 	bl	800e7c8 <_init>
 800df00:	1b64      	subs	r4, r4, r5
 800df02:	10a4      	asrs	r4, r4, #2
 800df04:	2600      	movs	r6, #0
 800df06:	42a6      	cmp	r6, r4
 800df08:	d105      	bne.n	800df16 <__libc_init_array+0x2e>
 800df0a:	bd70      	pop	{r4, r5, r6, pc}
 800df0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df10:	4798      	blx	r3
 800df12:	3601      	adds	r6, #1
 800df14:	e7ee      	b.n	800def4 <__libc_init_array+0xc>
 800df16:	f855 3b04 	ldr.w	r3, [r5], #4
 800df1a:	4798      	blx	r3
 800df1c:	3601      	adds	r6, #1
 800df1e:	e7f2      	b.n	800df06 <__libc_init_array+0x1e>
 800df20:	0800e8bc 	.word	0x0800e8bc
 800df24:	0800e8bc 	.word	0x0800e8bc
 800df28:	0800e8bc 	.word	0x0800e8bc
 800df2c:	0800e8c0 	.word	0x0800e8c0

0800df30 <__retarget_lock_acquire_recursive>:
 800df30:	4770      	bx	lr

0800df32 <__retarget_lock_release_recursive>:
 800df32:	4770      	bx	lr

0800df34 <memcpy>:
 800df34:	440a      	add	r2, r1
 800df36:	4291      	cmp	r1, r2
 800df38:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800df3c:	d100      	bne.n	800df40 <memcpy+0xc>
 800df3e:	4770      	bx	lr
 800df40:	b510      	push	{r4, lr}
 800df42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df46:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df4a:	4291      	cmp	r1, r2
 800df4c:	d1f9      	bne.n	800df42 <memcpy+0xe>
 800df4e:	bd10      	pop	{r4, pc}

0800df50 <_free_r>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	4605      	mov	r5, r0
 800df54:	2900      	cmp	r1, #0
 800df56:	d041      	beq.n	800dfdc <_free_r+0x8c>
 800df58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df5c:	1f0c      	subs	r4, r1, #4
 800df5e:	2b00      	cmp	r3, #0
 800df60:	bfb8      	it	lt
 800df62:	18e4      	addlt	r4, r4, r3
 800df64:	f000 f8e0 	bl	800e128 <__malloc_lock>
 800df68:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe0 <_free_r+0x90>)
 800df6a:	6813      	ldr	r3, [r2, #0]
 800df6c:	b933      	cbnz	r3, 800df7c <_free_r+0x2c>
 800df6e:	6063      	str	r3, [r4, #4]
 800df70:	6014      	str	r4, [r2, #0]
 800df72:	4628      	mov	r0, r5
 800df74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df78:	f000 b8dc 	b.w	800e134 <__malloc_unlock>
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	d908      	bls.n	800df92 <_free_r+0x42>
 800df80:	6820      	ldr	r0, [r4, #0]
 800df82:	1821      	adds	r1, r4, r0
 800df84:	428b      	cmp	r3, r1
 800df86:	bf01      	itttt	eq
 800df88:	6819      	ldreq	r1, [r3, #0]
 800df8a:	685b      	ldreq	r3, [r3, #4]
 800df8c:	1809      	addeq	r1, r1, r0
 800df8e:	6021      	streq	r1, [r4, #0]
 800df90:	e7ed      	b.n	800df6e <_free_r+0x1e>
 800df92:	461a      	mov	r2, r3
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	b10b      	cbz	r3, 800df9c <_free_r+0x4c>
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d9fa      	bls.n	800df92 <_free_r+0x42>
 800df9c:	6811      	ldr	r1, [r2, #0]
 800df9e:	1850      	adds	r0, r2, r1
 800dfa0:	42a0      	cmp	r0, r4
 800dfa2:	d10b      	bne.n	800dfbc <_free_r+0x6c>
 800dfa4:	6820      	ldr	r0, [r4, #0]
 800dfa6:	4401      	add	r1, r0
 800dfa8:	1850      	adds	r0, r2, r1
 800dfaa:	4283      	cmp	r3, r0
 800dfac:	6011      	str	r1, [r2, #0]
 800dfae:	d1e0      	bne.n	800df72 <_free_r+0x22>
 800dfb0:	6818      	ldr	r0, [r3, #0]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	6053      	str	r3, [r2, #4]
 800dfb6:	4408      	add	r0, r1
 800dfb8:	6010      	str	r0, [r2, #0]
 800dfba:	e7da      	b.n	800df72 <_free_r+0x22>
 800dfbc:	d902      	bls.n	800dfc4 <_free_r+0x74>
 800dfbe:	230c      	movs	r3, #12
 800dfc0:	602b      	str	r3, [r5, #0]
 800dfc2:	e7d6      	b.n	800df72 <_free_r+0x22>
 800dfc4:	6820      	ldr	r0, [r4, #0]
 800dfc6:	1821      	adds	r1, r4, r0
 800dfc8:	428b      	cmp	r3, r1
 800dfca:	bf04      	itt	eq
 800dfcc:	6819      	ldreq	r1, [r3, #0]
 800dfce:	685b      	ldreq	r3, [r3, #4]
 800dfd0:	6063      	str	r3, [r4, #4]
 800dfd2:	bf04      	itt	eq
 800dfd4:	1809      	addeq	r1, r1, r0
 800dfd6:	6021      	streq	r1, [r4, #0]
 800dfd8:	6054      	str	r4, [r2, #4]
 800dfda:	e7ca      	b.n	800df72 <_free_r+0x22>
 800dfdc:	bd38      	pop	{r3, r4, r5, pc}
 800dfde:	bf00      	nop
 800dfe0:	20001330 	.word	0x20001330

0800dfe4 <sbrk_aligned>:
 800dfe4:	b570      	push	{r4, r5, r6, lr}
 800dfe6:	4e0f      	ldr	r6, [pc, #60]	@ (800e024 <sbrk_aligned+0x40>)
 800dfe8:	460c      	mov	r4, r1
 800dfea:	6831      	ldr	r1, [r6, #0]
 800dfec:	4605      	mov	r5, r0
 800dfee:	b911      	cbnz	r1, 800dff6 <sbrk_aligned+0x12>
 800dff0:	f000 fba4 	bl	800e73c <_sbrk_r>
 800dff4:	6030      	str	r0, [r6, #0]
 800dff6:	4621      	mov	r1, r4
 800dff8:	4628      	mov	r0, r5
 800dffa:	f000 fb9f 	bl	800e73c <_sbrk_r>
 800dffe:	1c43      	adds	r3, r0, #1
 800e000:	d103      	bne.n	800e00a <sbrk_aligned+0x26>
 800e002:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e006:	4620      	mov	r0, r4
 800e008:	bd70      	pop	{r4, r5, r6, pc}
 800e00a:	1cc4      	adds	r4, r0, #3
 800e00c:	f024 0403 	bic.w	r4, r4, #3
 800e010:	42a0      	cmp	r0, r4
 800e012:	d0f8      	beq.n	800e006 <sbrk_aligned+0x22>
 800e014:	1a21      	subs	r1, r4, r0
 800e016:	4628      	mov	r0, r5
 800e018:	f000 fb90 	bl	800e73c <_sbrk_r>
 800e01c:	3001      	adds	r0, #1
 800e01e:	d1f2      	bne.n	800e006 <sbrk_aligned+0x22>
 800e020:	e7ef      	b.n	800e002 <sbrk_aligned+0x1e>
 800e022:	bf00      	nop
 800e024:	2000132c 	.word	0x2000132c

0800e028 <_malloc_r>:
 800e028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e02c:	1ccd      	adds	r5, r1, #3
 800e02e:	f025 0503 	bic.w	r5, r5, #3
 800e032:	3508      	adds	r5, #8
 800e034:	2d0c      	cmp	r5, #12
 800e036:	bf38      	it	cc
 800e038:	250c      	movcc	r5, #12
 800e03a:	2d00      	cmp	r5, #0
 800e03c:	4606      	mov	r6, r0
 800e03e:	db01      	blt.n	800e044 <_malloc_r+0x1c>
 800e040:	42a9      	cmp	r1, r5
 800e042:	d904      	bls.n	800e04e <_malloc_r+0x26>
 800e044:	230c      	movs	r3, #12
 800e046:	6033      	str	r3, [r6, #0]
 800e048:	2000      	movs	r0, #0
 800e04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e04e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e124 <_malloc_r+0xfc>
 800e052:	f000 f869 	bl	800e128 <__malloc_lock>
 800e056:	f8d8 3000 	ldr.w	r3, [r8]
 800e05a:	461c      	mov	r4, r3
 800e05c:	bb44      	cbnz	r4, 800e0b0 <_malloc_r+0x88>
 800e05e:	4629      	mov	r1, r5
 800e060:	4630      	mov	r0, r6
 800e062:	f7ff ffbf 	bl	800dfe4 <sbrk_aligned>
 800e066:	1c43      	adds	r3, r0, #1
 800e068:	4604      	mov	r4, r0
 800e06a:	d158      	bne.n	800e11e <_malloc_r+0xf6>
 800e06c:	f8d8 4000 	ldr.w	r4, [r8]
 800e070:	4627      	mov	r7, r4
 800e072:	2f00      	cmp	r7, #0
 800e074:	d143      	bne.n	800e0fe <_malloc_r+0xd6>
 800e076:	2c00      	cmp	r4, #0
 800e078:	d04b      	beq.n	800e112 <_malloc_r+0xea>
 800e07a:	6823      	ldr	r3, [r4, #0]
 800e07c:	4639      	mov	r1, r7
 800e07e:	4630      	mov	r0, r6
 800e080:	eb04 0903 	add.w	r9, r4, r3
 800e084:	f000 fb5a 	bl	800e73c <_sbrk_r>
 800e088:	4581      	cmp	r9, r0
 800e08a:	d142      	bne.n	800e112 <_malloc_r+0xea>
 800e08c:	6821      	ldr	r1, [r4, #0]
 800e08e:	1a6d      	subs	r5, r5, r1
 800e090:	4629      	mov	r1, r5
 800e092:	4630      	mov	r0, r6
 800e094:	f7ff ffa6 	bl	800dfe4 <sbrk_aligned>
 800e098:	3001      	adds	r0, #1
 800e09a:	d03a      	beq.n	800e112 <_malloc_r+0xea>
 800e09c:	6823      	ldr	r3, [r4, #0]
 800e09e:	442b      	add	r3, r5
 800e0a0:	6023      	str	r3, [r4, #0]
 800e0a2:	f8d8 3000 	ldr.w	r3, [r8]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	bb62      	cbnz	r2, 800e104 <_malloc_r+0xdc>
 800e0aa:	f8c8 7000 	str.w	r7, [r8]
 800e0ae:	e00f      	b.n	800e0d0 <_malloc_r+0xa8>
 800e0b0:	6822      	ldr	r2, [r4, #0]
 800e0b2:	1b52      	subs	r2, r2, r5
 800e0b4:	d420      	bmi.n	800e0f8 <_malloc_r+0xd0>
 800e0b6:	2a0b      	cmp	r2, #11
 800e0b8:	d917      	bls.n	800e0ea <_malloc_r+0xc2>
 800e0ba:	1961      	adds	r1, r4, r5
 800e0bc:	42a3      	cmp	r3, r4
 800e0be:	6025      	str	r5, [r4, #0]
 800e0c0:	bf18      	it	ne
 800e0c2:	6059      	strne	r1, [r3, #4]
 800e0c4:	6863      	ldr	r3, [r4, #4]
 800e0c6:	bf08      	it	eq
 800e0c8:	f8c8 1000 	streq.w	r1, [r8]
 800e0cc:	5162      	str	r2, [r4, r5]
 800e0ce:	604b      	str	r3, [r1, #4]
 800e0d0:	4630      	mov	r0, r6
 800e0d2:	f000 f82f 	bl	800e134 <__malloc_unlock>
 800e0d6:	f104 000b 	add.w	r0, r4, #11
 800e0da:	1d23      	adds	r3, r4, #4
 800e0dc:	f020 0007 	bic.w	r0, r0, #7
 800e0e0:	1ac2      	subs	r2, r0, r3
 800e0e2:	bf1c      	itt	ne
 800e0e4:	1a1b      	subne	r3, r3, r0
 800e0e6:	50a3      	strne	r3, [r4, r2]
 800e0e8:	e7af      	b.n	800e04a <_malloc_r+0x22>
 800e0ea:	6862      	ldr	r2, [r4, #4]
 800e0ec:	42a3      	cmp	r3, r4
 800e0ee:	bf0c      	ite	eq
 800e0f0:	f8c8 2000 	streq.w	r2, [r8]
 800e0f4:	605a      	strne	r2, [r3, #4]
 800e0f6:	e7eb      	b.n	800e0d0 <_malloc_r+0xa8>
 800e0f8:	4623      	mov	r3, r4
 800e0fa:	6864      	ldr	r4, [r4, #4]
 800e0fc:	e7ae      	b.n	800e05c <_malloc_r+0x34>
 800e0fe:	463c      	mov	r4, r7
 800e100:	687f      	ldr	r7, [r7, #4]
 800e102:	e7b6      	b.n	800e072 <_malloc_r+0x4a>
 800e104:	461a      	mov	r2, r3
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	42a3      	cmp	r3, r4
 800e10a:	d1fb      	bne.n	800e104 <_malloc_r+0xdc>
 800e10c:	2300      	movs	r3, #0
 800e10e:	6053      	str	r3, [r2, #4]
 800e110:	e7de      	b.n	800e0d0 <_malloc_r+0xa8>
 800e112:	230c      	movs	r3, #12
 800e114:	6033      	str	r3, [r6, #0]
 800e116:	4630      	mov	r0, r6
 800e118:	f000 f80c 	bl	800e134 <__malloc_unlock>
 800e11c:	e794      	b.n	800e048 <_malloc_r+0x20>
 800e11e:	6005      	str	r5, [r0, #0]
 800e120:	e7d6      	b.n	800e0d0 <_malloc_r+0xa8>
 800e122:	bf00      	nop
 800e124:	20001330 	.word	0x20001330

0800e128 <__malloc_lock>:
 800e128:	4801      	ldr	r0, [pc, #4]	@ (800e130 <__malloc_lock+0x8>)
 800e12a:	f7ff bf01 	b.w	800df30 <__retarget_lock_acquire_recursive>
 800e12e:	bf00      	nop
 800e130:	20001328 	.word	0x20001328

0800e134 <__malloc_unlock>:
 800e134:	4801      	ldr	r0, [pc, #4]	@ (800e13c <__malloc_unlock+0x8>)
 800e136:	f7ff befc 	b.w	800df32 <__retarget_lock_release_recursive>
 800e13a:	bf00      	nop
 800e13c:	20001328 	.word	0x20001328

0800e140 <__ssputs_r>:
 800e140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e144:	688e      	ldr	r6, [r1, #8]
 800e146:	461f      	mov	r7, r3
 800e148:	42be      	cmp	r6, r7
 800e14a:	680b      	ldr	r3, [r1, #0]
 800e14c:	4682      	mov	sl, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	4690      	mov	r8, r2
 800e152:	d82d      	bhi.n	800e1b0 <__ssputs_r+0x70>
 800e154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e158:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e15c:	d026      	beq.n	800e1ac <__ssputs_r+0x6c>
 800e15e:	6965      	ldr	r5, [r4, #20]
 800e160:	6909      	ldr	r1, [r1, #16]
 800e162:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e166:	eba3 0901 	sub.w	r9, r3, r1
 800e16a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e16e:	1c7b      	adds	r3, r7, #1
 800e170:	444b      	add	r3, r9
 800e172:	106d      	asrs	r5, r5, #1
 800e174:	429d      	cmp	r5, r3
 800e176:	bf38      	it	cc
 800e178:	461d      	movcc	r5, r3
 800e17a:	0553      	lsls	r3, r2, #21
 800e17c:	d527      	bpl.n	800e1ce <__ssputs_r+0x8e>
 800e17e:	4629      	mov	r1, r5
 800e180:	f7ff ff52 	bl	800e028 <_malloc_r>
 800e184:	4606      	mov	r6, r0
 800e186:	b360      	cbz	r0, 800e1e2 <__ssputs_r+0xa2>
 800e188:	6921      	ldr	r1, [r4, #16]
 800e18a:	464a      	mov	r2, r9
 800e18c:	f7ff fed2 	bl	800df34 <memcpy>
 800e190:	89a3      	ldrh	r3, [r4, #12]
 800e192:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e19a:	81a3      	strh	r3, [r4, #12]
 800e19c:	6126      	str	r6, [r4, #16]
 800e19e:	6165      	str	r5, [r4, #20]
 800e1a0:	444e      	add	r6, r9
 800e1a2:	eba5 0509 	sub.w	r5, r5, r9
 800e1a6:	6026      	str	r6, [r4, #0]
 800e1a8:	60a5      	str	r5, [r4, #8]
 800e1aa:	463e      	mov	r6, r7
 800e1ac:	42be      	cmp	r6, r7
 800e1ae:	d900      	bls.n	800e1b2 <__ssputs_r+0x72>
 800e1b0:	463e      	mov	r6, r7
 800e1b2:	6820      	ldr	r0, [r4, #0]
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	4641      	mov	r1, r8
 800e1b8:	f000 faa6 	bl	800e708 <memmove>
 800e1bc:	68a3      	ldr	r3, [r4, #8]
 800e1be:	1b9b      	subs	r3, r3, r6
 800e1c0:	60a3      	str	r3, [r4, #8]
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	4433      	add	r3, r6
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1ce:	462a      	mov	r2, r5
 800e1d0:	f000 fac4 	bl	800e75c <_realloc_r>
 800e1d4:	4606      	mov	r6, r0
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d1e0      	bne.n	800e19c <__ssputs_r+0x5c>
 800e1da:	6921      	ldr	r1, [r4, #16]
 800e1dc:	4650      	mov	r0, sl
 800e1de:	f7ff feb7 	bl	800df50 <_free_r>
 800e1e2:	230c      	movs	r3, #12
 800e1e4:	f8ca 3000 	str.w	r3, [sl]
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ee:	81a3      	strh	r3, [r4, #12]
 800e1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1f4:	e7e9      	b.n	800e1ca <__ssputs_r+0x8a>
	...

0800e1f8 <_svfiprintf_r>:
 800e1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1fc:	4698      	mov	r8, r3
 800e1fe:	898b      	ldrh	r3, [r1, #12]
 800e200:	061b      	lsls	r3, r3, #24
 800e202:	b09d      	sub	sp, #116	@ 0x74
 800e204:	4607      	mov	r7, r0
 800e206:	460d      	mov	r5, r1
 800e208:	4614      	mov	r4, r2
 800e20a:	d510      	bpl.n	800e22e <_svfiprintf_r+0x36>
 800e20c:	690b      	ldr	r3, [r1, #16]
 800e20e:	b973      	cbnz	r3, 800e22e <_svfiprintf_r+0x36>
 800e210:	2140      	movs	r1, #64	@ 0x40
 800e212:	f7ff ff09 	bl	800e028 <_malloc_r>
 800e216:	6028      	str	r0, [r5, #0]
 800e218:	6128      	str	r0, [r5, #16]
 800e21a:	b930      	cbnz	r0, 800e22a <_svfiprintf_r+0x32>
 800e21c:	230c      	movs	r3, #12
 800e21e:	603b      	str	r3, [r7, #0]
 800e220:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e224:	b01d      	add	sp, #116	@ 0x74
 800e226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22a:	2340      	movs	r3, #64	@ 0x40
 800e22c:	616b      	str	r3, [r5, #20]
 800e22e:	2300      	movs	r3, #0
 800e230:	9309      	str	r3, [sp, #36]	@ 0x24
 800e232:	2320      	movs	r3, #32
 800e234:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e238:	f8cd 800c 	str.w	r8, [sp, #12]
 800e23c:	2330      	movs	r3, #48	@ 0x30
 800e23e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e3dc <_svfiprintf_r+0x1e4>
 800e242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e246:	f04f 0901 	mov.w	r9, #1
 800e24a:	4623      	mov	r3, r4
 800e24c:	469a      	mov	sl, r3
 800e24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e252:	b10a      	cbz	r2, 800e258 <_svfiprintf_r+0x60>
 800e254:	2a25      	cmp	r2, #37	@ 0x25
 800e256:	d1f9      	bne.n	800e24c <_svfiprintf_r+0x54>
 800e258:	ebba 0b04 	subs.w	fp, sl, r4
 800e25c:	d00b      	beq.n	800e276 <_svfiprintf_r+0x7e>
 800e25e:	465b      	mov	r3, fp
 800e260:	4622      	mov	r2, r4
 800e262:	4629      	mov	r1, r5
 800e264:	4638      	mov	r0, r7
 800e266:	f7ff ff6b 	bl	800e140 <__ssputs_r>
 800e26a:	3001      	adds	r0, #1
 800e26c:	f000 80a7 	beq.w	800e3be <_svfiprintf_r+0x1c6>
 800e270:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e272:	445a      	add	r2, fp
 800e274:	9209      	str	r2, [sp, #36]	@ 0x24
 800e276:	f89a 3000 	ldrb.w	r3, [sl]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f000 809f 	beq.w	800e3be <_svfiprintf_r+0x1c6>
 800e280:	2300      	movs	r3, #0
 800e282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e28a:	f10a 0a01 	add.w	sl, sl, #1
 800e28e:	9304      	str	r3, [sp, #16]
 800e290:	9307      	str	r3, [sp, #28]
 800e292:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e296:	931a      	str	r3, [sp, #104]	@ 0x68
 800e298:	4654      	mov	r4, sl
 800e29a:	2205      	movs	r2, #5
 800e29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a0:	484e      	ldr	r0, [pc, #312]	@ (800e3dc <_svfiprintf_r+0x1e4>)
 800e2a2:	f7f1 ff95 	bl	80001d0 <memchr>
 800e2a6:	9a04      	ldr	r2, [sp, #16]
 800e2a8:	b9d8      	cbnz	r0, 800e2e2 <_svfiprintf_r+0xea>
 800e2aa:	06d0      	lsls	r0, r2, #27
 800e2ac:	bf44      	itt	mi
 800e2ae:	2320      	movmi	r3, #32
 800e2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2b4:	0711      	lsls	r1, r2, #28
 800e2b6:	bf44      	itt	mi
 800e2b8:	232b      	movmi	r3, #43	@ 0x2b
 800e2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2be:	f89a 3000 	ldrb.w	r3, [sl]
 800e2c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2c4:	d015      	beq.n	800e2f2 <_svfiprintf_r+0xfa>
 800e2c6:	9a07      	ldr	r2, [sp, #28]
 800e2c8:	4654      	mov	r4, sl
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	f04f 0c0a 	mov.w	ip, #10
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2d6:	3b30      	subs	r3, #48	@ 0x30
 800e2d8:	2b09      	cmp	r3, #9
 800e2da:	d94b      	bls.n	800e374 <_svfiprintf_r+0x17c>
 800e2dc:	b1b0      	cbz	r0, 800e30c <_svfiprintf_r+0x114>
 800e2de:	9207      	str	r2, [sp, #28]
 800e2e0:	e014      	b.n	800e30c <_svfiprintf_r+0x114>
 800e2e2:	eba0 0308 	sub.w	r3, r0, r8
 800e2e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	9304      	str	r3, [sp, #16]
 800e2ee:	46a2      	mov	sl, r4
 800e2f0:	e7d2      	b.n	800e298 <_svfiprintf_r+0xa0>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	1d19      	adds	r1, r3, #4
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	9103      	str	r1, [sp, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	bfbb      	ittet	lt
 800e2fe:	425b      	neglt	r3, r3
 800e300:	f042 0202 	orrlt.w	r2, r2, #2
 800e304:	9307      	strge	r3, [sp, #28]
 800e306:	9307      	strlt	r3, [sp, #28]
 800e308:	bfb8      	it	lt
 800e30a:	9204      	strlt	r2, [sp, #16]
 800e30c:	7823      	ldrb	r3, [r4, #0]
 800e30e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e310:	d10a      	bne.n	800e328 <_svfiprintf_r+0x130>
 800e312:	7863      	ldrb	r3, [r4, #1]
 800e314:	2b2a      	cmp	r3, #42	@ 0x2a
 800e316:	d132      	bne.n	800e37e <_svfiprintf_r+0x186>
 800e318:	9b03      	ldr	r3, [sp, #12]
 800e31a:	1d1a      	adds	r2, r3, #4
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	9203      	str	r2, [sp, #12]
 800e320:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e324:	3402      	adds	r4, #2
 800e326:	9305      	str	r3, [sp, #20]
 800e328:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e3ec <_svfiprintf_r+0x1f4>
 800e32c:	7821      	ldrb	r1, [r4, #0]
 800e32e:	2203      	movs	r2, #3
 800e330:	4650      	mov	r0, sl
 800e332:	f7f1 ff4d 	bl	80001d0 <memchr>
 800e336:	b138      	cbz	r0, 800e348 <_svfiprintf_r+0x150>
 800e338:	9b04      	ldr	r3, [sp, #16]
 800e33a:	eba0 000a 	sub.w	r0, r0, sl
 800e33e:	2240      	movs	r2, #64	@ 0x40
 800e340:	4082      	lsls	r2, r0
 800e342:	4313      	orrs	r3, r2
 800e344:	3401      	adds	r4, #1
 800e346:	9304      	str	r3, [sp, #16]
 800e348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e34c:	4824      	ldr	r0, [pc, #144]	@ (800e3e0 <_svfiprintf_r+0x1e8>)
 800e34e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e352:	2206      	movs	r2, #6
 800e354:	f7f1 ff3c 	bl	80001d0 <memchr>
 800e358:	2800      	cmp	r0, #0
 800e35a:	d036      	beq.n	800e3ca <_svfiprintf_r+0x1d2>
 800e35c:	4b21      	ldr	r3, [pc, #132]	@ (800e3e4 <_svfiprintf_r+0x1ec>)
 800e35e:	bb1b      	cbnz	r3, 800e3a8 <_svfiprintf_r+0x1b0>
 800e360:	9b03      	ldr	r3, [sp, #12]
 800e362:	3307      	adds	r3, #7
 800e364:	f023 0307 	bic.w	r3, r3, #7
 800e368:	3308      	adds	r3, #8
 800e36a:	9303      	str	r3, [sp, #12]
 800e36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e36e:	4433      	add	r3, r6
 800e370:	9309      	str	r3, [sp, #36]	@ 0x24
 800e372:	e76a      	b.n	800e24a <_svfiprintf_r+0x52>
 800e374:	fb0c 3202 	mla	r2, ip, r2, r3
 800e378:	460c      	mov	r4, r1
 800e37a:	2001      	movs	r0, #1
 800e37c:	e7a8      	b.n	800e2d0 <_svfiprintf_r+0xd8>
 800e37e:	2300      	movs	r3, #0
 800e380:	3401      	adds	r4, #1
 800e382:	9305      	str	r3, [sp, #20]
 800e384:	4619      	mov	r1, r3
 800e386:	f04f 0c0a 	mov.w	ip, #10
 800e38a:	4620      	mov	r0, r4
 800e38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e390:	3a30      	subs	r2, #48	@ 0x30
 800e392:	2a09      	cmp	r2, #9
 800e394:	d903      	bls.n	800e39e <_svfiprintf_r+0x1a6>
 800e396:	2b00      	cmp	r3, #0
 800e398:	d0c6      	beq.n	800e328 <_svfiprintf_r+0x130>
 800e39a:	9105      	str	r1, [sp, #20]
 800e39c:	e7c4      	b.n	800e328 <_svfiprintf_r+0x130>
 800e39e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e7f0      	b.n	800e38a <_svfiprintf_r+0x192>
 800e3a8:	ab03      	add	r3, sp, #12
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	462a      	mov	r2, r5
 800e3ae:	4b0e      	ldr	r3, [pc, #56]	@ (800e3e8 <_svfiprintf_r+0x1f0>)
 800e3b0:	a904      	add	r1, sp, #16
 800e3b2:	4638      	mov	r0, r7
 800e3b4:	f3af 8000 	nop.w
 800e3b8:	1c42      	adds	r2, r0, #1
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	d1d6      	bne.n	800e36c <_svfiprintf_r+0x174>
 800e3be:	89ab      	ldrh	r3, [r5, #12]
 800e3c0:	065b      	lsls	r3, r3, #25
 800e3c2:	f53f af2d 	bmi.w	800e220 <_svfiprintf_r+0x28>
 800e3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3c8:	e72c      	b.n	800e224 <_svfiprintf_r+0x2c>
 800e3ca:	ab03      	add	r3, sp, #12
 800e3cc:	9300      	str	r3, [sp, #0]
 800e3ce:	462a      	mov	r2, r5
 800e3d0:	4b05      	ldr	r3, [pc, #20]	@ (800e3e8 <_svfiprintf_r+0x1f0>)
 800e3d2:	a904      	add	r1, sp, #16
 800e3d4:	4638      	mov	r0, r7
 800e3d6:	f000 f879 	bl	800e4cc <_printf_i>
 800e3da:	e7ed      	b.n	800e3b8 <_svfiprintf_r+0x1c0>
 800e3dc:	0800e880 	.word	0x0800e880
 800e3e0:	0800e88a 	.word	0x0800e88a
 800e3e4:	00000000 	.word	0x00000000
 800e3e8:	0800e141 	.word	0x0800e141
 800e3ec:	0800e886 	.word	0x0800e886

0800e3f0 <_printf_common>:
 800e3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f4:	4616      	mov	r6, r2
 800e3f6:	4698      	mov	r8, r3
 800e3f8:	688a      	ldr	r2, [r1, #8]
 800e3fa:	690b      	ldr	r3, [r1, #16]
 800e3fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e400:	4293      	cmp	r3, r2
 800e402:	bfb8      	it	lt
 800e404:	4613      	movlt	r3, r2
 800e406:	6033      	str	r3, [r6, #0]
 800e408:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e40c:	4607      	mov	r7, r0
 800e40e:	460c      	mov	r4, r1
 800e410:	b10a      	cbz	r2, 800e416 <_printf_common+0x26>
 800e412:	3301      	adds	r3, #1
 800e414:	6033      	str	r3, [r6, #0]
 800e416:	6823      	ldr	r3, [r4, #0]
 800e418:	0699      	lsls	r1, r3, #26
 800e41a:	bf42      	ittt	mi
 800e41c:	6833      	ldrmi	r3, [r6, #0]
 800e41e:	3302      	addmi	r3, #2
 800e420:	6033      	strmi	r3, [r6, #0]
 800e422:	6825      	ldr	r5, [r4, #0]
 800e424:	f015 0506 	ands.w	r5, r5, #6
 800e428:	d106      	bne.n	800e438 <_printf_common+0x48>
 800e42a:	f104 0a19 	add.w	sl, r4, #25
 800e42e:	68e3      	ldr	r3, [r4, #12]
 800e430:	6832      	ldr	r2, [r6, #0]
 800e432:	1a9b      	subs	r3, r3, r2
 800e434:	42ab      	cmp	r3, r5
 800e436:	dc26      	bgt.n	800e486 <_printf_common+0x96>
 800e438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e43c:	6822      	ldr	r2, [r4, #0]
 800e43e:	3b00      	subs	r3, #0
 800e440:	bf18      	it	ne
 800e442:	2301      	movne	r3, #1
 800e444:	0692      	lsls	r2, r2, #26
 800e446:	d42b      	bmi.n	800e4a0 <_printf_common+0xb0>
 800e448:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e44c:	4641      	mov	r1, r8
 800e44e:	4638      	mov	r0, r7
 800e450:	47c8      	blx	r9
 800e452:	3001      	adds	r0, #1
 800e454:	d01e      	beq.n	800e494 <_printf_common+0xa4>
 800e456:	6823      	ldr	r3, [r4, #0]
 800e458:	6922      	ldr	r2, [r4, #16]
 800e45a:	f003 0306 	and.w	r3, r3, #6
 800e45e:	2b04      	cmp	r3, #4
 800e460:	bf02      	ittt	eq
 800e462:	68e5      	ldreq	r5, [r4, #12]
 800e464:	6833      	ldreq	r3, [r6, #0]
 800e466:	1aed      	subeq	r5, r5, r3
 800e468:	68a3      	ldr	r3, [r4, #8]
 800e46a:	bf0c      	ite	eq
 800e46c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e470:	2500      	movne	r5, #0
 800e472:	4293      	cmp	r3, r2
 800e474:	bfc4      	itt	gt
 800e476:	1a9b      	subgt	r3, r3, r2
 800e478:	18ed      	addgt	r5, r5, r3
 800e47a:	2600      	movs	r6, #0
 800e47c:	341a      	adds	r4, #26
 800e47e:	42b5      	cmp	r5, r6
 800e480:	d11a      	bne.n	800e4b8 <_printf_common+0xc8>
 800e482:	2000      	movs	r0, #0
 800e484:	e008      	b.n	800e498 <_printf_common+0xa8>
 800e486:	2301      	movs	r3, #1
 800e488:	4652      	mov	r2, sl
 800e48a:	4641      	mov	r1, r8
 800e48c:	4638      	mov	r0, r7
 800e48e:	47c8      	blx	r9
 800e490:	3001      	adds	r0, #1
 800e492:	d103      	bne.n	800e49c <_printf_common+0xac>
 800e494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49c:	3501      	adds	r5, #1
 800e49e:	e7c6      	b.n	800e42e <_printf_common+0x3e>
 800e4a0:	18e1      	adds	r1, r4, r3
 800e4a2:	1c5a      	adds	r2, r3, #1
 800e4a4:	2030      	movs	r0, #48	@ 0x30
 800e4a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e4aa:	4422      	add	r2, r4
 800e4ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e4b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	e7c7      	b.n	800e448 <_printf_common+0x58>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4641      	mov	r1, r8
 800e4be:	4638      	mov	r0, r7
 800e4c0:	47c8      	blx	r9
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	d0e6      	beq.n	800e494 <_printf_common+0xa4>
 800e4c6:	3601      	adds	r6, #1
 800e4c8:	e7d9      	b.n	800e47e <_printf_common+0x8e>
	...

0800e4cc <_printf_i>:
 800e4cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4d0:	7e0f      	ldrb	r7, [r1, #24]
 800e4d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e4d4:	2f78      	cmp	r7, #120	@ 0x78
 800e4d6:	4691      	mov	r9, r2
 800e4d8:	4680      	mov	r8, r0
 800e4da:	460c      	mov	r4, r1
 800e4dc:	469a      	mov	sl, r3
 800e4de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e4e2:	d807      	bhi.n	800e4f4 <_printf_i+0x28>
 800e4e4:	2f62      	cmp	r7, #98	@ 0x62
 800e4e6:	d80a      	bhi.n	800e4fe <_printf_i+0x32>
 800e4e8:	2f00      	cmp	r7, #0
 800e4ea:	f000 80d1 	beq.w	800e690 <_printf_i+0x1c4>
 800e4ee:	2f58      	cmp	r7, #88	@ 0x58
 800e4f0:	f000 80b8 	beq.w	800e664 <_printf_i+0x198>
 800e4f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e4fc:	e03a      	b.n	800e574 <_printf_i+0xa8>
 800e4fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e502:	2b15      	cmp	r3, #21
 800e504:	d8f6      	bhi.n	800e4f4 <_printf_i+0x28>
 800e506:	a101      	add	r1, pc, #4	@ (adr r1, 800e50c <_printf_i+0x40>)
 800e508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e50c:	0800e565 	.word	0x0800e565
 800e510:	0800e579 	.word	0x0800e579
 800e514:	0800e4f5 	.word	0x0800e4f5
 800e518:	0800e4f5 	.word	0x0800e4f5
 800e51c:	0800e4f5 	.word	0x0800e4f5
 800e520:	0800e4f5 	.word	0x0800e4f5
 800e524:	0800e579 	.word	0x0800e579
 800e528:	0800e4f5 	.word	0x0800e4f5
 800e52c:	0800e4f5 	.word	0x0800e4f5
 800e530:	0800e4f5 	.word	0x0800e4f5
 800e534:	0800e4f5 	.word	0x0800e4f5
 800e538:	0800e677 	.word	0x0800e677
 800e53c:	0800e5a3 	.word	0x0800e5a3
 800e540:	0800e631 	.word	0x0800e631
 800e544:	0800e4f5 	.word	0x0800e4f5
 800e548:	0800e4f5 	.word	0x0800e4f5
 800e54c:	0800e699 	.word	0x0800e699
 800e550:	0800e4f5 	.word	0x0800e4f5
 800e554:	0800e5a3 	.word	0x0800e5a3
 800e558:	0800e4f5 	.word	0x0800e4f5
 800e55c:	0800e4f5 	.word	0x0800e4f5
 800e560:	0800e639 	.word	0x0800e639
 800e564:	6833      	ldr	r3, [r6, #0]
 800e566:	1d1a      	adds	r2, r3, #4
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	6032      	str	r2, [r6, #0]
 800e56c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e570:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e574:	2301      	movs	r3, #1
 800e576:	e09c      	b.n	800e6b2 <_printf_i+0x1e6>
 800e578:	6833      	ldr	r3, [r6, #0]
 800e57a:	6820      	ldr	r0, [r4, #0]
 800e57c:	1d19      	adds	r1, r3, #4
 800e57e:	6031      	str	r1, [r6, #0]
 800e580:	0606      	lsls	r6, r0, #24
 800e582:	d501      	bpl.n	800e588 <_printf_i+0xbc>
 800e584:	681d      	ldr	r5, [r3, #0]
 800e586:	e003      	b.n	800e590 <_printf_i+0xc4>
 800e588:	0645      	lsls	r5, r0, #25
 800e58a:	d5fb      	bpl.n	800e584 <_printf_i+0xb8>
 800e58c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e590:	2d00      	cmp	r5, #0
 800e592:	da03      	bge.n	800e59c <_printf_i+0xd0>
 800e594:	232d      	movs	r3, #45	@ 0x2d
 800e596:	426d      	negs	r5, r5
 800e598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e59c:	4858      	ldr	r0, [pc, #352]	@ (800e700 <_printf_i+0x234>)
 800e59e:	230a      	movs	r3, #10
 800e5a0:	e011      	b.n	800e5c6 <_printf_i+0xfa>
 800e5a2:	6821      	ldr	r1, [r4, #0]
 800e5a4:	6833      	ldr	r3, [r6, #0]
 800e5a6:	0608      	lsls	r0, r1, #24
 800e5a8:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5ac:	d402      	bmi.n	800e5b4 <_printf_i+0xe8>
 800e5ae:	0649      	lsls	r1, r1, #25
 800e5b0:	bf48      	it	mi
 800e5b2:	b2ad      	uxthmi	r5, r5
 800e5b4:	2f6f      	cmp	r7, #111	@ 0x6f
 800e5b6:	4852      	ldr	r0, [pc, #328]	@ (800e700 <_printf_i+0x234>)
 800e5b8:	6033      	str	r3, [r6, #0]
 800e5ba:	bf14      	ite	ne
 800e5bc:	230a      	movne	r3, #10
 800e5be:	2308      	moveq	r3, #8
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5c6:	6866      	ldr	r6, [r4, #4]
 800e5c8:	60a6      	str	r6, [r4, #8]
 800e5ca:	2e00      	cmp	r6, #0
 800e5cc:	db05      	blt.n	800e5da <_printf_i+0x10e>
 800e5ce:	6821      	ldr	r1, [r4, #0]
 800e5d0:	432e      	orrs	r6, r5
 800e5d2:	f021 0104 	bic.w	r1, r1, #4
 800e5d6:	6021      	str	r1, [r4, #0]
 800e5d8:	d04b      	beq.n	800e672 <_printf_i+0x1a6>
 800e5da:	4616      	mov	r6, r2
 800e5dc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e5e0:	fb03 5711 	mls	r7, r3, r1, r5
 800e5e4:	5dc7      	ldrb	r7, [r0, r7]
 800e5e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e5ea:	462f      	mov	r7, r5
 800e5ec:	42bb      	cmp	r3, r7
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	d9f4      	bls.n	800e5dc <_printf_i+0x110>
 800e5f2:	2b08      	cmp	r3, #8
 800e5f4:	d10b      	bne.n	800e60e <_printf_i+0x142>
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	07df      	lsls	r7, r3, #31
 800e5fa:	d508      	bpl.n	800e60e <_printf_i+0x142>
 800e5fc:	6923      	ldr	r3, [r4, #16]
 800e5fe:	6861      	ldr	r1, [r4, #4]
 800e600:	4299      	cmp	r1, r3
 800e602:	bfde      	ittt	le
 800e604:	2330      	movle	r3, #48	@ 0x30
 800e606:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e60a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e60e:	1b92      	subs	r2, r2, r6
 800e610:	6122      	str	r2, [r4, #16]
 800e612:	f8cd a000 	str.w	sl, [sp]
 800e616:	464b      	mov	r3, r9
 800e618:	aa03      	add	r2, sp, #12
 800e61a:	4621      	mov	r1, r4
 800e61c:	4640      	mov	r0, r8
 800e61e:	f7ff fee7 	bl	800e3f0 <_printf_common>
 800e622:	3001      	adds	r0, #1
 800e624:	d14a      	bne.n	800e6bc <_printf_i+0x1f0>
 800e626:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e62a:	b004      	add	sp, #16
 800e62c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e630:	6823      	ldr	r3, [r4, #0]
 800e632:	f043 0320 	orr.w	r3, r3, #32
 800e636:	6023      	str	r3, [r4, #0]
 800e638:	4832      	ldr	r0, [pc, #200]	@ (800e704 <_printf_i+0x238>)
 800e63a:	2778      	movs	r7, #120	@ 0x78
 800e63c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e640:	6823      	ldr	r3, [r4, #0]
 800e642:	6831      	ldr	r1, [r6, #0]
 800e644:	061f      	lsls	r7, r3, #24
 800e646:	f851 5b04 	ldr.w	r5, [r1], #4
 800e64a:	d402      	bmi.n	800e652 <_printf_i+0x186>
 800e64c:	065f      	lsls	r7, r3, #25
 800e64e:	bf48      	it	mi
 800e650:	b2ad      	uxthmi	r5, r5
 800e652:	6031      	str	r1, [r6, #0]
 800e654:	07d9      	lsls	r1, r3, #31
 800e656:	bf44      	itt	mi
 800e658:	f043 0320 	orrmi.w	r3, r3, #32
 800e65c:	6023      	strmi	r3, [r4, #0]
 800e65e:	b11d      	cbz	r5, 800e668 <_printf_i+0x19c>
 800e660:	2310      	movs	r3, #16
 800e662:	e7ad      	b.n	800e5c0 <_printf_i+0xf4>
 800e664:	4826      	ldr	r0, [pc, #152]	@ (800e700 <_printf_i+0x234>)
 800e666:	e7e9      	b.n	800e63c <_printf_i+0x170>
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	f023 0320 	bic.w	r3, r3, #32
 800e66e:	6023      	str	r3, [r4, #0]
 800e670:	e7f6      	b.n	800e660 <_printf_i+0x194>
 800e672:	4616      	mov	r6, r2
 800e674:	e7bd      	b.n	800e5f2 <_printf_i+0x126>
 800e676:	6833      	ldr	r3, [r6, #0]
 800e678:	6825      	ldr	r5, [r4, #0]
 800e67a:	6961      	ldr	r1, [r4, #20]
 800e67c:	1d18      	adds	r0, r3, #4
 800e67e:	6030      	str	r0, [r6, #0]
 800e680:	062e      	lsls	r6, r5, #24
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	d501      	bpl.n	800e68a <_printf_i+0x1be>
 800e686:	6019      	str	r1, [r3, #0]
 800e688:	e002      	b.n	800e690 <_printf_i+0x1c4>
 800e68a:	0668      	lsls	r0, r5, #25
 800e68c:	d5fb      	bpl.n	800e686 <_printf_i+0x1ba>
 800e68e:	8019      	strh	r1, [r3, #0]
 800e690:	2300      	movs	r3, #0
 800e692:	6123      	str	r3, [r4, #16]
 800e694:	4616      	mov	r6, r2
 800e696:	e7bc      	b.n	800e612 <_printf_i+0x146>
 800e698:	6833      	ldr	r3, [r6, #0]
 800e69a:	1d1a      	adds	r2, r3, #4
 800e69c:	6032      	str	r2, [r6, #0]
 800e69e:	681e      	ldr	r6, [r3, #0]
 800e6a0:	6862      	ldr	r2, [r4, #4]
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f7f1 fd93 	bl	80001d0 <memchr>
 800e6aa:	b108      	cbz	r0, 800e6b0 <_printf_i+0x1e4>
 800e6ac:	1b80      	subs	r0, r0, r6
 800e6ae:	6060      	str	r0, [r4, #4]
 800e6b0:	6863      	ldr	r3, [r4, #4]
 800e6b2:	6123      	str	r3, [r4, #16]
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6ba:	e7aa      	b.n	800e612 <_printf_i+0x146>
 800e6bc:	6923      	ldr	r3, [r4, #16]
 800e6be:	4632      	mov	r2, r6
 800e6c0:	4649      	mov	r1, r9
 800e6c2:	4640      	mov	r0, r8
 800e6c4:	47d0      	blx	sl
 800e6c6:	3001      	adds	r0, #1
 800e6c8:	d0ad      	beq.n	800e626 <_printf_i+0x15a>
 800e6ca:	6823      	ldr	r3, [r4, #0]
 800e6cc:	079b      	lsls	r3, r3, #30
 800e6ce:	d413      	bmi.n	800e6f8 <_printf_i+0x22c>
 800e6d0:	68e0      	ldr	r0, [r4, #12]
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	4298      	cmp	r0, r3
 800e6d6:	bfb8      	it	lt
 800e6d8:	4618      	movlt	r0, r3
 800e6da:	e7a6      	b.n	800e62a <_printf_i+0x15e>
 800e6dc:	2301      	movs	r3, #1
 800e6de:	4632      	mov	r2, r6
 800e6e0:	4649      	mov	r1, r9
 800e6e2:	4640      	mov	r0, r8
 800e6e4:	47d0      	blx	sl
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	d09d      	beq.n	800e626 <_printf_i+0x15a>
 800e6ea:	3501      	adds	r5, #1
 800e6ec:	68e3      	ldr	r3, [r4, #12]
 800e6ee:	9903      	ldr	r1, [sp, #12]
 800e6f0:	1a5b      	subs	r3, r3, r1
 800e6f2:	42ab      	cmp	r3, r5
 800e6f4:	dcf2      	bgt.n	800e6dc <_printf_i+0x210>
 800e6f6:	e7eb      	b.n	800e6d0 <_printf_i+0x204>
 800e6f8:	2500      	movs	r5, #0
 800e6fa:	f104 0619 	add.w	r6, r4, #25
 800e6fe:	e7f5      	b.n	800e6ec <_printf_i+0x220>
 800e700:	0800e891 	.word	0x0800e891
 800e704:	0800e8a2 	.word	0x0800e8a2

0800e708 <memmove>:
 800e708:	4288      	cmp	r0, r1
 800e70a:	b510      	push	{r4, lr}
 800e70c:	eb01 0402 	add.w	r4, r1, r2
 800e710:	d902      	bls.n	800e718 <memmove+0x10>
 800e712:	4284      	cmp	r4, r0
 800e714:	4623      	mov	r3, r4
 800e716:	d807      	bhi.n	800e728 <memmove+0x20>
 800e718:	1e43      	subs	r3, r0, #1
 800e71a:	42a1      	cmp	r1, r4
 800e71c:	d008      	beq.n	800e730 <memmove+0x28>
 800e71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e722:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e726:	e7f8      	b.n	800e71a <memmove+0x12>
 800e728:	4402      	add	r2, r0
 800e72a:	4601      	mov	r1, r0
 800e72c:	428a      	cmp	r2, r1
 800e72e:	d100      	bne.n	800e732 <memmove+0x2a>
 800e730:	bd10      	pop	{r4, pc}
 800e732:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e736:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e73a:	e7f7      	b.n	800e72c <memmove+0x24>

0800e73c <_sbrk_r>:
 800e73c:	b538      	push	{r3, r4, r5, lr}
 800e73e:	4d06      	ldr	r5, [pc, #24]	@ (800e758 <_sbrk_r+0x1c>)
 800e740:	2300      	movs	r3, #0
 800e742:	4604      	mov	r4, r0
 800e744:	4608      	mov	r0, r1
 800e746:	602b      	str	r3, [r5, #0]
 800e748:	f7f4 f854 	bl	80027f4 <_sbrk>
 800e74c:	1c43      	adds	r3, r0, #1
 800e74e:	d102      	bne.n	800e756 <_sbrk_r+0x1a>
 800e750:	682b      	ldr	r3, [r5, #0]
 800e752:	b103      	cbz	r3, 800e756 <_sbrk_r+0x1a>
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	bd38      	pop	{r3, r4, r5, pc}
 800e758:	20001324 	.word	0x20001324

0800e75c <_realloc_r>:
 800e75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e760:	4607      	mov	r7, r0
 800e762:	4614      	mov	r4, r2
 800e764:	460d      	mov	r5, r1
 800e766:	b921      	cbnz	r1, 800e772 <_realloc_r+0x16>
 800e768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e76c:	4611      	mov	r1, r2
 800e76e:	f7ff bc5b 	b.w	800e028 <_malloc_r>
 800e772:	b92a      	cbnz	r2, 800e780 <_realloc_r+0x24>
 800e774:	f7ff fbec 	bl	800df50 <_free_r>
 800e778:	4625      	mov	r5, r4
 800e77a:	4628      	mov	r0, r5
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	f000 f81a 	bl	800e7b8 <_malloc_usable_size_r>
 800e784:	4284      	cmp	r4, r0
 800e786:	4606      	mov	r6, r0
 800e788:	d802      	bhi.n	800e790 <_realloc_r+0x34>
 800e78a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e78e:	d8f4      	bhi.n	800e77a <_realloc_r+0x1e>
 800e790:	4621      	mov	r1, r4
 800e792:	4638      	mov	r0, r7
 800e794:	f7ff fc48 	bl	800e028 <_malloc_r>
 800e798:	4680      	mov	r8, r0
 800e79a:	b908      	cbnz	r0, 800e7a0 <_realloc_r+0x44>
 800e79c:	4645      	mov	r5, r8
 800e79e:	e7ec      	b.n	800e77a <_realloc_r+0x1e>
 800e7a0:	42b4      	cmp	r4, r6
 800e7a2:	4622      	mov	r2, r4
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	bf28      	it	cs
 800e7a8:	4632      	movcs	r2, r6
 800e7aa:	f7ff fbc3 	bl	800df34 <memcpy>
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	f7ff fbcd 	bl	800df50 <_free_r>
 800e7b6:	e7f1      	b.n	800e79c <_realloc_r+0x40>

0800e7b8 <_malloc_usable_size_r>:
 800e7b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7bc:	1f18      	subs	r0, r3, #4
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	bfbc      	itt	lt
 800e7c2:	580b      	ldrlt	r3, [r1, r0]
 800e7c4:	18c0      	addlt	r0, r0, r3
 800e7c6:	4770      	bx	lr

0800e7c8 <_init>:
 800e7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ca:	bf00      	nop
 800e7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ce:	bc08      	pop	{r3}
 800e7d0:	469e      	mov	lr, r3
 800e7d2:	4770      	bx	lr

0800e7d4 <_fini>:
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d6:	bf00      	nop
 800e7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7da:	bc08      	pop	{r3}
 800e7dc:	469e      	mov	lr, r3
 800e7de:	4770      	bx	lr
