
discostick_cyclic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800e650  0800e650  0000f650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e710  0800e710  00010170  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e710  0800e710  0000f710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e718  0800e718  00010170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e718  0800e718  0000f718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e71c  0800e71c  0000f71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800e720  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010170  2**0
                  CONTENTS
 10 .bss          00001030  20000170  20000170  00010170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200011a0  200011a0  00010170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ecb8  00000000  00000000  000101a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d68  00000000  00000000  0002ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a98  00000000  00000000  00033bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001472  00000000  00000000  00035658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002690d  00000000  00000000  00036aca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021811  00000000  00000000  0005d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df978  00000000  00000000  0007ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015e560  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000073d8  00000000  00000000  0015e5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0016597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000170 	.word	0x20000170
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e638 	.word	0x0800e638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000174 	.word	0x20000174
 80001cc:	0800e638 	.word	0x0800e638

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <u8_to_i16>:
 */


#include "bitutils.h"

int16_t u8_to_i16(uint8_t high, uint8_t low)	{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	return (int16_t)(high << 8 | low);
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	b21b      	sxth	r3, r3
 80005b0:	021b      	lsls	r3, r3, #8
 80005b2:	b21a      	sxth	r2, r3
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	b21b      	sxth	r3, r3
 80005b8:	4313      	orrs	r3, r2
 80005ba:	b21b      	sxth	r3, r3
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <u8_to_u32>:

uint32_t u8_to_u32(uint8_t* num)	{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

	uint32_t ret = (((uint32_t)num[3] << 24) | ((uint32_t)num[2] << 16) | ((uint32_t)num[1] << 8) | ((uint32_t)num[0]<< 0));
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3303      	adds	r3, #3
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	061a      	lsls	r2, r3, #24
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3302      	adds	r3, #2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	041b      	lsls	r3, r3, #16
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3301      	adds	r3, #1
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	4313      	orrs	r3, r2
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	7812      	ldrb	r2, [r2, #0]
 80005f0:	4313      	orrs	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
	return ret;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <u8_to_float>:

float u8_to_float(uint8_t* num)	{
 8000602:	b480      	push	{r7}
 8000604:	b085      	sub	sp, #20
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
	float_st temp_num = {.bytes[0] = num[0], .bytes[1] = num[1], .bytes[2] = num[2], .bytes[3] = num[3]};
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	733b      	strb	r3, [r7, #12]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	737b      	strb	r3, [r7, #13]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	73bb      	strb	r3, [r7, #14]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	78db      	ldrb	r3, [r3, #3]
 8000620:	73fb      	strb	r3, [r7, #15]
	return temp_num.value;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	ee07 3a90 	vmov	s15, r3

}
 8000628:	eeb0 0a67 	vmov.f32	s0, s15
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <i16_high_to_u8>:

uint8_t i16_high_to_u8(int16_t num)	{
 8000636:	b480      	push	{r7}
 8000638:	b083      	sub	sp, #12
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((num & 0xFF00) >> 8);
 8000640:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000644:	121b      	asrs	r3, r3, #8
 8000646:	b2db      	uxtb	r3, r3
}
 8000648:	4618      	mov	r0, r3
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <i16_low_to_u8>:

uint8_t i16_low_to_u8(int16_t num)	{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(num & 0x00FF);
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	b2db      	uxtb	r3, r3
}
 8000662:	4618      	mov	r0, r3
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <i16_to_u8>:

void i16_to_u8(int16_t num, uint8_t* data)	{
 800066e:	b590      	push	{r4, r7, lr}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	4603      	mov	r3, r0
 8000676:	6039      	str	r1, [r7, #0]
 8000678:	80fb      	strh	r3, [r7, #6]
	data[0] = i16_high_to_u8(num);
 800067a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd9 	bl	8000636 <i16_high_to_u8>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	701a      	strb	r2, [r3, #0]
	data[1] = i16_low_to_u8(num);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	1c5c      	adds	r4, r3, #1
 8000690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff ffdd 	bl	8000654 <i16_low_to_u8>
 800069a:	4603      	mov	r3, r0
 800069c:	7023      	strb	r3, [r4, #0]
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd90      	pop	{r4, r7, pc}

080006a6 <float_to_u8>:

void float_to_u8(float num, uint8_t* data)	{
 80006a6:	b480      	push	{r7}
 80006a8:	b085      	sub	sp, #20
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b0:	6038      	str	r0, [r7, #0]
	float_st temp_num = {.value = num};
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	60fb      	str	r3, [r7, #12]

	data[0] = temp_num.bytes[0];
 80006b6:	7b3a      	ldrb	r2, [r7, #12]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	701a      	strb	r2, [r3, #0]
	data[1] = temp_num.bytes[1];
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	3301      	adds	r3, #1
 80006c0:	7b7a      	ldrb	r2, [r7, #13]
 80006c2:	701a      	strb	r2, [r3, #0]
	data[2] = temp_num.bytes[2];
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	3302      	adds	r3, #2
 80006c8:	7bba      	ldrb	r2, [r7, #14]
 80006ca:	701a      	strb	r2, [r3, #0]
	data[3] = temp_num.bytes[3];
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	3303      	adds	r3, #3
 80006d0:	7bfa      	ldrb	r2, [r7, #15]
 80006d2:	701a      	strb	r2, [r3, #0]

}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <apply_calibration>:


#include "calibration.h"
#include "bitutils.h"

int16_t apply_calibration(axis_calibration_factors_t* cal, int16_t input){
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	807b      	strh	r3, [r7, #2]
	int16_t value = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	81fb      	strh	r3, [r7, #14]
	if(input == cal->zero)	{
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80006f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80006fa:	429a      	cmp	r2, r3
 80006fc:	d101      	bne.n	8000702 <apply_calibration+0x22>
		return 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	e02f      	b.n	8000762 <apply_calibration+0x82>
	}
	else {
		value = input - cal->zero;
 8000702:	887a      	ldrh	r2, [r7, #2]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800070a:	b29b      	uxth	r3, r3
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	b29b      	uxth	r3, r3
 8000710:	81fb      	strh	r3, [r7, #14]
		value = (int16_t)((float)value * cal->step_size);
 8000712:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	edd3 7a04 	vldr	s15, [r3, #16]
 8000724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800072c:	ee17 3a90 	vmov	r3, s15
 8000730:	81fb      	strh	r3, [r7, #14]
	}

	if(value >= cal->logical_max)	{
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000738:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800073c:	429a      	cmp	r2, r3
 800073e:	db03      	blt.n	8000748 <apply_calibration+0x68>
		return cal->logical_max;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000746:	e00c      	b.n	8000762 <apply_calibration+0x82>
	}
	else if (value <= cal->logical_min){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800074e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000752:	429a      	cmp	r2, r3
 8000754:	dc03      	bgt.n	800075e <apply_calibration+0x7e>
		return cal->logical_min;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800075c:	e001      	b.n	8000762 <apply_calibration+0x82>
	}

	return value;
 800075e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <set_calibration>:

void set_calibration(axis_calibration_factors_t* cal, uint8_t* data, uint8_t data_size)	{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	4613      	mov	r3, r2
 800077a:	71fb      	strb	r3, [r7, #7]
	if(data_size != CALIBRATION_FACTOR_SIZE){
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b13      	cmp	r3, #19
 8000780:	d15a      	bne.n	8000838 <set_calibration+0xca>
		return;
	}
	cal->physical_max 	= u8_to_i16(data[0], data[1]);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3301      	adds	r3, #1
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4610      	mov	r0, r2
 8000790:	f7ff ff04 	bl	800059c <u8_to_i16>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	801a      	strh	r2, [r3, #0]
	cal->physical_min 	= u8_to_i16(data[2], data[3]);
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	3302      	adds	r3, #2
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	3303      	adds	r3, #3
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4610      	mov	r0, r2
 80007ac:	f7ff fef6 	bl	800059c <u8_to_i16>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	805a      	strh	r2, [r3, #2]
	cal->physical_range = u8_to_i16(data[4], data[5]);
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	3304      	adds	r3, #4
 80007bc:	781a      	ldrb	r2, [r3, #0]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	3305      	adds	r3, #5
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f7ff fee8 	bl	800059c <u8_to_i16>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	809a      	strh	r2, [r3, #4]
	cal->logical_max 	= DEFAULT_LOGICAL_MAX;//u8_to_i16(data[6], data[7]);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007da:	80da      	strh	r2, [r3, #6]
	cal->logical_min 	= DEFAULT_LOGICAL_MIN;//u8_to_i16(data[8], data[9]);
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f44f 427c 	mov.w	r2, #64512	@ 0xfc00
 80007e2:	811a      	strh	r2, [r3, #8]
	cal->logical_range 	= cal->logical_max - cal->logical_min;//u8_to_i16(data[10], data[11]);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	815a      	strh	r2, [r3, #10]
	cal->zero 			= u8_to_i16(data[12], data[13]);
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	330c      	adds	r3, #12
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	330d      	adds	r3, #13
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4619      	mov	r1, r3
 800080c:	4610      	mov	r0, r2
 800080e:	f7ff fec5 	bl	800059c <u8_to_i16>
 8000812:	4603      	mov	r3, r0
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	819a      	strh	r2, [r3, #12]
	cal->step_size		= u8_to_float(&data[14]);
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	330e      	adds	r3, #14
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff feef 	bl	8000602 <u8_to_float>
 8000824:	eef0 7a40 	vmov.f32	s15, s0
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	edc3 7a04 	vstr	s15, [r3, #16]
	cal->is_reversed	= data[18];
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	7c9a      	ldrb	r2, [r3, #18]
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	751a      	strb	r2, [r3, #20]
 8000836:	e000      	b.n	800083a <set_calibration+0xcc>
		return;
 8000838:	bf00      	nop
}
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <get_calibration>:

void get_calibration(axis_calibration_factors_t* cal, uint8_t* data, uint8_t data_size)	{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	4613      	mov	r3, r2
 800084c:	71fb      	strb	r3, [r7, #7]
	if(data_size != CALIBRATION_FACTOR_SIZE){
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	2b13      	cmp	r3, #19
 8000852:	d14b      	bne.n	80008ec <get_calibration+0xac>
		return;
	}
	i16_to_u8(cal->physical_max, 	&data[0]);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800085a:	68b9      	ldr	r1, [r7, #8]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff06 	bl	800066e <i16_to_u8>
	i16_to_u8(cal->physical_min, 	&data[2]);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	3302      	adds	r3, #2
 800086c:	4619      	mov	r1, r3
 800086e:	4610      	mov	r0, r2
 8000870:	f7ff fefd 	bl	800066e <i16_to_u8>
	i16_to_u8(cal->physical_range, 	&data[4]);
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	3304      	adds	r3, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4610      	mov	r0, r2
 8000882:	f7ff fef4 	bl	800066e <i16_to_u8>
	i16_to_u8(cal->logical_max, 	&data[6]);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	3306      	adds	r3, #6
 8000890:	4619      	mov	r1, r3
 8000892:	4610      	mov	r0, r2
 8000894:	f7ff feeb 	bl	800066e <i16_to_u8>
	i16_to_u8(cal->logical_min, 	&data[8]);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	3308      	adds	r3, #8
 80008a2:	4619      	mov	r1, r3
 80008a4:	4610      	mov	r0, r2
 80008a6:	f7ff fee2 	bl	800066e <i16_to_u8>
	i16_to_u8(cal->logical_range, 	&data[10]);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	330a      	adds	r3, #10
 80008b4:	4619      	mov	r1, r3
 80008b6:	4610      	mov	r0, r2
 80008b8:	f7ff fed9 	bl	800066e <i16_to_u8>
	i16_to_u8(cal->zero, 			&data[12]);
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	330c      	adds	r3, #12
 80008c6:	4619      	mov	r1, r3
 80008c8:	4610      	mov	r0, r2
 80008ca:	f7ff fed0 	bl	800066e <i16_to_u8>
	float_to_u8(cal->step_size, 	&data[14]);
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	330e      	adds	r3, #14
 80008d8:	4618      	mov	r0, r3
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	f7ff fee2 	bl	80006a6 <float_to_u8>
				cal->is_reversed = 	data[18];
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	7c9a      	ldrb	r2, [r3, #18]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	751a      	strb	r2, [r3, #20]
 80008ea:	e000      	b.n	80008ee <get_calibration+0xae>
		return;
 80008ec:	bf00      	nop

}
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <clear_calibration>:

void clear_calibration(axis_calibration_factors_t* cal)	{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	cal->physical_max 	= 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]
	cal->physical_min 	= 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	805a      	strh	r2, [r3, #2]
	cal->physical_range = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	809a      	strh	r2, [r3, #4]
	//cal->logical_max 	= 0;
	//cal->logical_min 	= 0;
	//cal->logical_range 	= 0;
	cal->zero 			= 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	819a      	strh	r2, [r3, #12]
	cal->step_size		= 0.0f;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
	cal->is_reversed	= 0;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	751a      	strb	r2, [r3, #20]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <recalculate_calibration>:

void recalculate_calibration(axis_calibration_factors_t* cal)	{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	if(cal->physical_max > cal->physical_min){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f9b3 2000 	ldrsh.w	r2, [r3]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000942:	429a      	cmp	r2, r3
 8000944:	dd1b      	ble.n	800097e <recalculate_calibration+0x50>
		cal->physical_range = cal->physical_max - cal->physical_min;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800094c:	b29a      	uxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000954:	b29b      	uxth	r3, r3
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	b29b      	uxth	r3, r3
 800095a:	b21a      	sxth	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	809a      	strh	r2, [r3, #4]
		cal->zero = (cal->physical_max + cal->physical_min) / 2;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000966:	461a      	mov	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800096e:	4413      	add	r3, r2
 8000970:	0fda      	lsrs	r2, r3, #31
 8000972:	4413      	add	r3, r2
 8000974:	105b      	asrs	r3, r3, #1
 8000976:	b21a      	sxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	819a      	strh	r2, [r3, #12]
 800097c:	e01d      	b.n	80009ba <recalculate_calibration+0x8c>
	}
	else	{
		cal->physical_range = cal->physical_min - cal->physical_max;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000984:	b29a      	uxth	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098c:	b29b      	uxth	r3, r3
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	b21a      	sxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	809a      	strh	r2, [r3, #4]
		cal->zero = (cal->physical_min + cal->physical_max) / 2;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800099e:	461a      	mov	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009a6:	4413      	add	r3, r2
 80009a8:	0fda      	lsrs	r2, r3, #31
 80009aa:	4413      	add	r3, r2
 80009ac:	105b      	asrs	r3, r3, #1
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	819a      	strh	r2, [r3, #12]
		cal->is_reversed = 1;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	751a      	strb	r2, [r3, #20]
	}
	//cal->logical_range = cal->logical_max + cal->logical_min;
	if(/*cal->physical_range <= cal->logical_range && */cal->physical_range !=0)	{
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d013      	beq.n	80009ec <recalculate_calibration+0xbe>
		cal->step_size = (float)((float)cal->logical_range / (float)cal->physical_range);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80009ca:	ee07 3a90 	vmov	s15, r3
 80009ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009d8:	ee07 3a90 	vmov	s15, r3
 80009dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	else	{
		cal->step_size = 1;
	}
}
 80009ea:	e003      	b.n	80009f4 <recalculate_calibration+0xc6>
		cal->step_size = 1;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80009f2:	611a      	str	r2, [r3, #16]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <com_packet_init>:
#include "bitutils.h"
#include "string.h"

static CRC_HandleTypeDef* crc_handle;

void com_packet_init(com_packet_t* packet, CRC_HandleTypeDef* crc)	{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	packet->version = COM_PACKET_VERSION;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	705a      	strb	r2, [r3, #1]
	packet->payload_length = 0;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	709a      	strb	r2, [r3, #2]
	packet->padding = 0;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	70da      	strb	r2, [r3, #3]
	packet->packet_size.value = 0;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
	packet->crc32.value = 0;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
	memset(packet->payload, 0, COM_PACKET_PAYLOAD_SIZE);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	330c      	adds	r3, #12
 8000a32:	2280      	movs	r2, #128	@ 0x80
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00d f980 	bl	800dd3c <memset>

	crc_handle = crc;
 8000a3c:	4a03      	ldr	r2, [pc, #12]	@ (8000a4c <com_packet_init+0x4c>)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	6013      	str	r3, [r2, #0]
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000018c 	.word	0x2000018c

08000a50 <com_packet_clear_payload>:

void com_packet_clear_payload(com_packet_t* packet)	{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	packet->version = COM_PACKET_VERSION;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	705a      	strb	r2, [r3, #1]
	packet->payload_length = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	709a      	strb	r2, [r3, #2]
	packet->padding = 0;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	70da      	strb	r2, [r3, #3]
	packet->packet_size.value = 0;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
	packet->crc32.value = 0;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
	memset(packet->payload, 0, COM_PACKET_PAYLOAD_SIZE);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	330c      	adds	r3, #12
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f00d f959 	bl	800dd3c <memset>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <com_packet_create>:

void com_packet_create(com_packet_t* packet, uint8_t* data, uint32_t size){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
	com_packet_clear_payload(packet);
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff ffd5 	bl	8000a50 <com_packet_clear_payload>
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	705a      	strb	r2, [r3, #1]
	if(size >= COM_PACKET_PAYLOAD_SIZE){
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab0:	d91d      	bls.n	8000aee <com_packet_create+0x5a>
		memcpy(packet->payload, data, COM_PACKET_PAYLOAD_SIZE);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00d f972 	bl	800dda4 <memcpy>
		packet->payload_length = COM_PACKET_PAYLOAD_SIZE;
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	709a      	strb	r2, [r3, #2]
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + COM_PACKET_PAYLOAD_SIZE;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	228c      	movs	r2, #140	@ 0x8c
 8000aca:	605a      	str	r2, [r3, #4]
		packet->padding = 0;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	70da      	strb	r2, [r3, #3]
		uint32_t crc_size = COM_PACKET_PAYLOAD_SIZE/sizeof(uint32_t);
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	617b      	str	r3, [r7, #20]
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
 8000ad6:	4b26      	ldr	r3, [pc, #152]	@ (8000b70 <com_packet_create+0xdc>)
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	330c      	adds	r3, #12
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f003 fc48 	bl	8004376 <HAL_CRC_Calculate>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	609a      	str	r2, [r3, #8]
			packet->padding = (uint8_t)misaligned_bytes;
		}
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + packet->payload_length;
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
	}
}
 8000aec:	e03b      	b.n	8000b66 <com_packet_create+0xd2>
		memcpy(packet->payload, data, size);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	330c      	adds	r3, #12
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00d f954 	bl	800dda4 <memcpy>
		uint32_t crc_size = size/sizeof(uint32_t);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
		packet->payload_length = crc_size * sizeof(uint32_t);
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	709a      	strb	r2, [r3, #2]
		uint32_t misaligned_bytes = sizeof(uint32_t) - (size % sizeof(uint32_t));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	f1c3 0304 	rsb	r3, r3, #4
 8000b18:	61bb      	str	r3, [r7, #24]
		if(misaligned_bytes != 0 && (size + misaligned_bytes) < COM_PACKET_PAYLOAD_SIZE){
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d011      	beq.n	8000b44 <com_packet_create+0xb0>
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	4413      	add	r3, r2
 8000b26:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b28:	d80c      	bhi.n	8000b44 <com_packet_create+0xb0>
			crc_size++;
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	61fb      	str	r3, [r7, #28]
			packet->payload_length += sizeof(uint32_t);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	3304      	adds	r3, #4
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	709a      	strb	r2, [r3, #2]
			packet->padding = (uint8_t)misaligned_bytes;
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	70da      	strb	r2, [r3, #3]
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + packet->payload_length;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	330c      	adds	r3, #12
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	605a      	str	r2, [r3, #4]
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <com_packet_create+0xdc>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	330c      	adds	r3, #12
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f003 fc0b 	bl	8004376 <HAL_CRC_Calculate>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	609a      	str	r2, [r3, #8]
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	2000018c 	.word	0x2000018c

08000b74 <com_packet_parse>:
			packet->crc32.value = 0xFFFFFFFF;
			break;
	}
}

packet_type_t com_packet_parse(com_packet_t* packet, uint8_t* data, uint32_t size){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
	packet_type_t retval = COM_PACKET_FALSE;
 8000b84:	2304      	movs	r3, #4
 8000b86:	76fb      	strb	r3, [r7, #27]
	if(size < COM_PACKET_HEADER_SIZE){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b0b      	cmp	r3, #11
 8000b8c:	f200 80e3 	bhi.w	8000d56 <com_packet_parse+0x1e2>
		return retval;
 8000b90:	7efb      	ldrb	r3, [r7, #27]
 8000b92:	e0ea      	b.n	8000d6a <com_packet_parse+0x1f6>
	 * index + 4:	packet_size
	 * index + 8: 	crc32
	 * index + 12:	beginning of payload
	 */
	while((index + COM_PACKET_HEADER_SIZE) <= size && retval==COM_PACKET_FALSE){
		if(data[index] == COM_PACKET_VERSION)	{
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	4413      	add	r3, r2
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	f040 80d7 	bne.w	8000d50 <com_packet_parse+0x1dc>
			 if((index + u8_to_u32(&data[index+4])) <= size){
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd0c 	bl	80005c8 <u8_to_u32>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f0c0 80c9 	bcc.w	8000d50 <com_packet_parse+0x1dc>
				 packet_type_t type = data[index+1];
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	76bb      	strb	r3, [r7, #26]
				 uint32_t test_crc = u8_to_u32(&data[index+8]);
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3308      	adds	r3, #8
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fcf8 	bl	80005c8 <u8_to_u32>
 8000bd8:	6178      	str	r0, [r7, #20]
				 uint32_t calc_crc = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
				 switch(type)	{
 8000bde:	7ebb      	ldrb	r3, [r7, #26]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	f200 80ac 	bhi.w	8000d3e <com_packet_parse+0x1ca>
 8000be6:	a201      	add	r2, pc, #4	@ (adr r2, 8000bec <com_packet_parse+0x78>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c97 	.word	0x08000c97
 8000bf4:	08000d23 	.word	0x08000d23
 8000bf8:	08000d31 	.word	0x08000d31
				 	 case COM_PACKET_NORMAL:
				 		 calc_crc = HAL_CRC_Calculate(crc_handle, (uint32_t*)&data[index+COM_PACKET_HEADER_SIZE],data[index+2]/sizeof(uint32_t));
 8000bfc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d74 <com_packet_parse+0x200>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	330c      	adds	r3, #12
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	18d1      	adds	r1, r2, r3
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f003 fbad 	bl	8004376 <HAL_CRC_Calculate>
 8000c1c:	6138      	str	r0, [r7, #16]
				 		 if(calc_crc==test_crc)	{
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	f040 808d 	bne.w	8000d42 <com_packet_parse+0x1ce>
				 			 retval = type;
 8000c28:	7ebb      	ldrb	r3, [r7, #26]
 8000c2a:	76fb      	strb	r3, [r7, #27]
				 			 packet->version 			= data[index];
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	4413      	add	r3, r2
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	701a      	strb	r2, [r3, #0]
				 			 packet->packet_type 		= data[index+1];
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	68ba      	ldr	r2, [r7, #8]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	705a      	strb	r2, [r3, #1]
				 			 packet->payload_length 	= data[index+2];
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3302      	adds	r3, #2
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	709a      	strb	r2, [r3, #2]
				 			 packet->padding 			= data[index+3];
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	3303      	adds	r3, #3
 8000c58:	68ba      	ldr	r2, [r7, #8]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	781a      	ldrb	r2, [r3, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	70da      	strb	r2, [r3, #3]
				 			 packet->packet_size.value	= u8_to_u32(&data[index+4]);
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fcac 	bl	80005c8 <u8_to_u32>
 8000c70:	4602      	mov	r2, r0
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	605a      	str	r2, [r3, #4]
				 			 packet->crc32.value		= test_crc;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	609a      	str	r2, [r3, #8]
				 			 memcpy(packet->payload, &data[index+12], packet->payload_length);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f103 000c 	add.w	r0, r3, #12
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	330c      	adds	r3, #12
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	18d1      	adds	r1, r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f00d f888 	bl	800dda4 <memcpy>
				 		 }
				 		 break;
 8000c94:	e055      	b.n	8000d42 <com_packet_parse+0x1ce>
				 	 case COM_PACKET_CMD:
				 		 calc_crc = HAL_CRC_Calculate(crc_handle, (uint32_t*)&data[index+COM_PACKET_HEADER_SIZE],1);
 8000c96:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <com_packet_parse+0x200>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f003 fb66 	bl	8004376 <HAL_CRC_Calculate>
 8000caa:	6138      	str	r0, [r7, #16]
				 		 if(calc_crc==test_crc)	{
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d148      	bne.n	8000d46 <com_packet_parse+0x1d2>
				 			 retval = type;
 8000cb4:	7ebb      	ldrb	r3, [r7, #26]
 8000cb6:	76fb      	strb	r3, [r7, #27]
				 			 packet->version 			= data[index];
 8000cb8:	68ba      	ldr	r2, [r7, #8]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	701a      	strb	r2, [r3, #0]
				 			 packet->packet_type 		= data[index+1];
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	781a      	ldrb	r2, [r3, #0]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	705a      	strb	r2, [r3, #1]
				 			 packet->payload_length 	= data[index+2];
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	709a      	strb	r2, [r3, #2]
				 			 packet->padding 			= data[index+3];
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	3303      	adds	r3, #3
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	70da      	strb	r2, [r3, #3]
				 			 packet->packet_size.value	= u8_to_u32(&data[index+4]);
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc66 	bl	80005c8 <u8_to_u32>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	605a      	str	r2, [r3, #4]
				 			 packet->crc32.value		= test_crc;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	609a      	str	r2, [r3, #8]
				 			 memcpy(packet->payload, &data[index+12], packet->payload_length);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f103 000c 	add.w	r0, r3, #12
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	330c      	adds	r3, #12
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	18d1      	adds	r1, r2, r3
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	f00d f842 	bl	800dda4 <memcpy>
				 		 }
				 		 break;
 8000d20:	e011      	b.n	8000d46 <com_packet_parse+0x1d2>
				 	 case COM_PACKET_ACK:
				 		 if(test_crc == ACK_CRC32){
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <com_packet_parse+0x204>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10f      	bne.n	8000d4a <com_packet_parse+0x1d6>
				 			 retval = type;
 8000d2a:	7ebb      	ldrb	r3, [r7, #26]
 8000d2c:	76fb      	strb	r3, [r7, #27]
				 		 }
				 		 break;
 8000d2e:	e00c      	b.n	8000d4a <com_packet_parse+0x1d6>
				 	 case COM_PACKET_NACK:
				 		if(test_crc == NACK_CRC32){
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4a12      	ldr	r2, [pc, #72]	@ (8000d7c <com_packet_parse+0x208>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d10a      	bne.n	8000d4e <com_packet_parse+0x1da>
				 			 retval = type;
 8000d38:	7ebb      	ldrb	r3, [r7, #26]
 8000d3a:	76fb      	strb	r3, [r7, #27]
				 		 }
				 		 break;
 8000d3c:	e007      	b.n	8000d4e <com_packet_parse+0x1da>
				 	 default:
					 	 break;
 8000d3e:	bf00      	nop
 8000d40:	e006      	b.n	8000d50 <com_packet_parse+0x1dc>
				 		 break;
 8000d42:	bf00      	nop
 8000d44:	e004      	b.n	8000d50 <com_packet_parse+0x1dc>
				 		 break;
 8000d46:	bf00      	nop
 8000d48:	e002      	b.n	8000d50 <com_packet_parse+0x1dc>
				 		 break;
 8000d4a:	bf00      	nop
 8000d4c:	e000      	b.n	8000d50 <com_packet_parse+0x1dc>
				 		 break;
 8000d4e:	bf00      	nop
				 }
			 }
		}
		index++;
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
	while((index + COM_PACKET_HEADER_SIZE) <= size && retval==COM_PACKET_FALSE){
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	330c      	adds	r3, #12
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d303      	bcc.n	8000d68 <com_packet_parse+0x1f4>
 8000d60:	7efb      	ldrb	r3, [r7, #27]
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	f43f af16 	beq.w	8000b94 <com_packet_parse+0x20>
	}
	return retval;
 8000d68:	7efb      	ldrb	r3, [r7, #27]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000018c 	.word	0x2000018c
 8000d78:	0abcd001 	.word	0x0abcd001
 8000d7c:	0abcd002 	.word	0x0abcd002

08000d80 <fifo_init>:
 *      Author: zuidec
 */

#include "fifo.h"

void fifo_init(fifo_buffer_t* fifo, uint8_t* buffer, uint32_t size) {
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]

    fifo->buffer = buffer;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	601a      	str	r2, [r3, #0]
    fifo->read_index = 0;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
    fifo->write_index = 0;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
    fifo->mask = size - 1;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	605a      	str	r2, [r3, #4]
    fifo->size = size;
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]

}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <fifo_bytes_available>:

    // Return true if read index and write index are the same
    return fifo->read_index == fifo->write_index;
}

uint32_t fifo_bytes_available(fifo_buffer_t* fifo)	{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	if(fifo->write_index >= fifo->read_index)	{
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d305      	bcc.n	8000dd8 <fifo_bytes_available+0x20>
		return fifo->write_index-fifo->read_index;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	e007      	b.n	8000de8 <fifo_bytes_available+0x30>
	}
	else	{
		return (fifo->size - fifo->read_index) + fifo->write_index;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	1ad2      	subs	r2, r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	4413      	add	r3, r2
	}
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <fifo_write>:

uint32_t fifo_write(fifo_buffer_t* fifo, uint8_t* data, uint32_t size)   {
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	@ 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]

    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	61fb      	str	r3, [r7, #28]
    uint32_t local_write_index = fifo->write_index;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
    uint32_t next_write_index = local_write_index;
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	61bb      	str	r3, [r7, #24]
    uint32_t bytes_written = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]

    while(bytes_written < size){
 8000e14:	e01d      	b.n	8000e52 <fifo_write+0x5e>
        local_write_index = next_write_index;
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	613b      	str	r3, [r7, #16]
        fifo->buffer[local_write_index] = data[bytes_written];
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	441a      	add	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	440b      	add	r3, r1
 8000e28:	7812      	ldrb	r2, [r2, #0]
 8000e2a:	701a      	strb	r2, [r3, #0]
        bytes_written++;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
        next_write_index = (local_write_index + 1) & fifo->mask;
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        if(next_write_index == local_read_index){
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d105      	bne.n	8000e52 <fifo_write+0x5e>
        	local_read_index = (local_read_index + 1) & fifo->mask; // Push read index
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61fb      	str	r3, [r7, #28]
    while(bytes_written < size){
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d3dd      	bcc.n	8000e16 <fifo_write+0x22>
        }
    }

    fifo->write_index = next_write_index;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
    fifo->read_index = local_read_index;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	609a      	str	r2, [r3, #8]

    return bytes_written;
 8000e66:	697b      	ldr	r3, [r7, #20]

}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3724      	adds	r7, #36	@ 0x24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <fifo_peek_continuous>:

    return fifo->buffer[local_read_index+peek_distance];
}


uint32_t fifo_peek_continuous(fifo_buffer_t* fifo, uint8_t* data, uint32_t distance)    {
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]

    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	61fb      	str	r3, [r7, #28]
    uint32_t local_write_index = fifo->write_index;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	617b      	str	r3, [r7, #20]

    // return if theres no data to read
    if(local_read_index == local_write_index)   {
 8000e8c:	69fa      	ldr	r2, [r7, #28]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d101      	bne.n	8000e98 <fifo_peek_continuous+0x24>
        return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e01d      	b.n	8000ed4 <fifo_peek_continuous+0x60>
    }

    uint32_t bytes_read = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
    while(bytes_read < distance && local_read_index != local_write_index)	{
 8000e9c:	e011      	b.n	8000ec2 <fifo_peek_continuous+0x4e>
    	data[bytes_read] = fifo->buffer[local_read_index];
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	441a      	add	r2, r3
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	440b      	add	r3, r1
 8000eac:	7812      	ldrb	r2, [r2, #0]
 8000eae:	701a      	strb	r2, [r3, #0]
    	bytes_read++;
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	61bb      	str	r3, [r7, #24]
        local_read_index = (local_read_index + 1) & fifo->mask;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61fb      	str	r3, [r7, #28]
    while(bytes_read < distance && local_read_index != local_write_index)	{
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d203      	bcs.n	8000ed2 <fifo_peek_continuous+0x5e>
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d1e5      	bne.n	8000e9e <fifo_peek_continuous+0x2a>
    }

    return bytes_read;
 8000ed2:	69bb      	ldr	r3, [r7, #24]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3724      	adds	r7, #36	@ 0x24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <fifo_push_read_index>:

void fifo_push_read_index(fifo_buffer_t* fifo, uint32_t distance)	{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	617b      	str	r3, [r7, #20]
    uint32_t local_write_index = fifo->write_index;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60fb      	str	r3, [r7, #12]

    // return if theres no data to read
    if(local_read_index == local_write_index)   {
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d019      	beq.n	8000f32 <fifo_push_read_index+0x52>
        return;
    }

    uint32_t bytes_read = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
    for(uint32_t i = 0; (i < distance) && (local_read_index != local_write_index); i++)	{
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	e008      	b.n	8000f1a <fifo_push_read_index+0x3a>
        local_read_index = (local_read_index + 1) & fifo->mask;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
    for(uint32_t i = 0; (i < distance) && (local_read_index != local_write_index); i++)	{
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	3301      	adds	r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d203      	bcs.n	8000f2a <fifo_push_read_index+0x4a>
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d1ee      	bne.n	8000f08 <fifo_push_read_index+0x28>
    }

    fifo->read_index = local_read_index;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	e000      	b.n	8000f34 <fifo_push_read_index+0x54>
        return;
 8000f32:	bf00      	nop
}
 8000f34:	371c      	adds	r7, #28
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <input_filter_init>:
 */


#include "input_filter.h"

void input_filter_init(input_filter_t* filter, float alpha)	{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	ed87 0a00 	vstr	s0, [r7]
	input_filter_set_alpha(filter, alpha);
 8000f4a:	ed97 0a00 	vldr	s0, [r7]
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f808 	bl	8000f64 <input_filter_set_alpha>
	filter->output = 0.0f;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <input_filter_set_alpha>:

void input_filter_set_alpha(input_filter_t* filter, float alpha)	{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	ed87 0a00 	vstr	s0, [r7]
	if(alpha > 1.0f){
 8000f70:	edd7 7a00 	vldr	s15, [r7]
 8000f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	dd03      	ble.n	8000f8a <input_filter_set_alpha+0x26>
		alpha = 1.0f;
 8000f82:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	e009      	b.n	8000f9e <input_filter_set_alpha+0x3a>
	}
	else if (alpha < 0.0f){
 8000f8a:	edd7 7a00 	vldr	s15, [r7]
 8000f8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	d502      	bpl.n	8000f9e <input_filter_set_alpha+0x3a>
		alpha = 0.0f;
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
	}
	filter->alpha = alpha;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <input_filter_update>:

float input_filter_update(input_filter_t* filter, float input)	{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	ed87 0a00 	vstr	s0, [r7]
	filter->output = filter->alpha * input + (1.0f - filter->alpha) * filter->output;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a00 	vldr	s15, [r7]
 8000fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000fd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a01 	vstr	s15, [r3, #4]
	return filter->output;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	ee07 3a90 	vmov	s15, r3
}
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001008:	f5ad 6db1 	sub.w	sp, sp, #1416	@ 0x588
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100e:	f002 fac3 	bl	8003598 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001012:	f000 fa1b 	bl	800144c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001016:	f000 fd03 	bl	8001a20 <MX_GPIO_Init>
  MX_DMA_Init();
 800101a:	f000 fcb3 	bl	8001984 <MX_DMA_Init>
  MX_ADC1_Init();
 800101e:	f000 fa7f 	bl	8001520 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001022:	f000 faf1 	bl	8001608 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001026:	f00c f9e9 	bl	800d3fc <MX_USB_DEVICE_Init>
  MX_TIM8_Init();
 800102a:	f000 fbfd 	bl	8001828 <MX_TIM8_Init>
  MX_TIM4_Init();
 800102e:	f000 fb6f 	bl	8001710 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001032:	f000 fb1f 	bl	8001674 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001036:	f000 fc7b 	bl	8001930 <MX_USART3_UART_Init>
  MX_CRC_Init();
 800103a:	f000 fad1 	bl	80015e0 <MX_CRC_Init>
  MX_UART4_Init();
 800103e:	f000 fc4d 	bl	80018dc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, NUM_ADC_CHANNEL);
 8001042:	2202      	movs	r2, #2
 8001044:	49ad      	ldr	r1, [pc, #692]	@ (80012fc <main+0x2f8>)
 8001046:	48ae      	ldr	r0, [pc, #696]	@ (8001300 <main+0x2fc>)
 8001048:	f002 fc90 	bl	800396c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 800104c:	48ad      	ldr	r0, [pc, #692]	@ (8001304 <main+0x300>)
 800104e:	f006 fdd9 	bl	8007c04 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001052:	48ad      	ldr	r0, [pc, #692]	@ (8001308 <main+0x304>)
 8001054:	f006 fdd6 	bl	8007c04 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001058:	2100      	movs	r1, #0
 800105a:	48ac      	ldr	r0, [pc, #688]	@ (800130c <main+0x308>)
 800105c:	f006 fe94 	bl	8007d88 <HAL_TIM_PWM_Start>
  init_flash();
 8001060:	f000 fe7c 	bl	8001d5c <init_flash>
  init_cyclic_input();
 8001064:	f000 fe82 	bl	8001d6c <init_cyclic_input>
  init_steppers();
 8001068:	f000 fe30 	bl	8001ccc <init_steppers>
  uart_handle_t uart4;
  uart_handle_t uart3;
  uart_init(&uart4, &huart4);
 800106c:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 8001070:	49a7      	ldr	r1, [pc, #668]	@ (8001310 <main+0x30c>)
 8001072:	4618      	mov	r0, r3
 8001074:	f001 ff1e 	bl	8002eb4 <uart_init>
  uart_init(&uart3, &huart3);
 8001078:	f507 73e2 	add.w	r3, r7, #452	@ 0x1c4
 800107c:	49a5      	ldr	r1, [pc, #660]	@ (8001314 <main+0x310>)
 800107e:	4618      	mov	r0, r3
 8001080:	f001 ff18 	bl	8002eb4 <uart_init>
  com_packet_t packet;
  com_packet_init(&packet, &hcrc);
 8001084:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001088:	49a3      	ldr	r1, [pc, #652]	@ (8001318 <main+0x314>)
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fcb8 	bl	8000a00 <com_packet_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint64_t usb_timer = HAL_GetTick();
 8001090:	f002 fae8 	bl	8003664 <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	2200      	movs	r2, #0
 8001098:	461c      	mov	r4, r3
 800109a:	4615      	mov	r5, r2
 800109c:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 80010a0:	e9c3 4500 	strd	r4, r5, [r3]
  uint64_t uart_timer = HAL_GetTick();
 80010a4:	f002 fade 	bl	8003664 <HAL_GetTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2200      	movs	r2, #0
 80010ac:	4698      	mov	r8, r3
 80010ae:	4691      	mov	r9, r2
 80010b0:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 80010b4:	e9c3 8900 	strd	r8, r9, [r3]
  uint32_t usb_interval_ms = 10;
 80010b8:	230a      	movs	r3, #10
 80010ba:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
  uint32_t packet_count =0;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574

  bool ack_received = false;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
  uint32_t retx_count = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IRQ_Calibrate_Flag){
 80010d0:	4b92      	ldr	r3, [pc, #584]	@ (800131c <main+0x318>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <main+0xd8>
		  calibration_routine();
 80010d8:	f000 ff2c 	bl	8001f34 <calibration_routine>
	  }
	  update_cyclic_input();
 80010dc:	f000 fe76 	bl	8001dcc <update_cyclic_input>

	  // Check if CDR is pressed and release stepper motors if it is
	  if(CDR_BIT(cyclic_report.buttons))	{
 80010e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001320 <main+0x31c>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da06      	bge.n	80010f8 <main+0xf4>
		  stepper_disable(&pitch_motor);
 80010ea:	488e      	ldr	r0, [pc, #568]	@ (8001324 <main+0x320>)
 80010ec:	f001 fa9b 	bl	8002626 <stepper_disable>
		  stepper_disable(&roll_motor);
 80010f0:	488d      	ldr	r0, [pc, #564]	@ (8001328 <main+0x324>)
 80010f2:	f001 fa98 	bl	8002626 <stepper_disable>
 80010f6:	e005      	b.n	8001104 <main+0x100>
	  }
	  else	{
		  stepper_enable(&pitch_motor);
 80010f8:	488a      	ldr	r0, [pc, #552]	@ (8001324 <main+0x320>)
 80010fa:	f001 fa83 	bl	8002604 <stepper_enable>
		  stepper_enable(&roll_motor);
 80010fe:	488a      	ldr	r0, [pc, #552]	@ (8001328 <main+0x324>)
 8001100:	f001 fa80 	bl	8002604 <stepper_enable>
	  }
	  uint8_t temp_buffer[5] = {cyclic_report.buttons,cyclic_report.roll, cyclic_report.roll >> 8,cyclic_report.pitch, cyclic_report.pitch >> 8};
 8001104:	4b86      	ldr	r3, [pc, #536]	@ (8001320 <main+0x31c>)
 8001106:	7819      	ldrb	r1, [r3, #0]
 8001108:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 800110c:	f5a3 62ab 	sub.w	r2, r3, #1368	@ 0x558
 8001110:	460b      	mov	r3, r1
 8001112:	7013      	strb	r3, [r2, #0]
 8001114:	4b82      	ldr	r3, [pc, #520]	@ (8001320 <main+0x31c>)
 8001116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800111a:	b2d9      	uxtb	r1, r3
 800111c:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 8001120:	f5a3 62ab 	sub.w	r2, r3, #1368	@ 0x558
 8001124:	460b      	mov	r3, r1
 8001126:	7053      	strb	r3, [r2, #1]
 8001128:	4b7d      	ldr	r3, [pc, #500]	@ (8001320 <main+0x31c>)
 800112a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800112e:	121b      	asrs	r3, r3, #8
 8001130:	b21b      	sxth	r3, r3
 8001132:	b2d9      	uxtb	r1, r3
 8001134:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 8001138:	f5a3 62ab 	sub.w	r2, r3, #1368	@ 0x558
 800113c:	460b      	mov	r3, r1
 800113e:	7093      	strb	r3, [r2, #2]
 8001140:	4b77      	ldr	r3, [pc, #476]	@ (8001320 <main+0x31c>)
 8001142:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001146:	b2d9      	uxtb	r1, r3
 8001148:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 800114c:	f5a3 62ab 	sub.w	r2, r3, #1368	@ 0x558
 8001150:	460b      	mov	r3, r1
 8001152:	70d3      	strb	r3, [r2, #3]
 8001154:	4b72      	ldr	r3, [pc, #456]	@ (8001320 <main+0x31c>)
 8001156:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800115a:	121b      	asrs	r3, r3, #8
 800115c:	b21b      	sxth	r3, r3
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 8001164:	f5a3 62ab 	sub.w	r2, r3, #1368	@ 0x558
 8001168:	460b      	mov	r3, r1
 800116a:	7113      	strb	r3, [r2, #4]
	  if(HAL_GetTick()-usb_timer >= usb_interval_ms )	{
 800116c:	f002 fa7a 	bl	8003664 <HAL_GetTick>
 8001170:	4603      	mov	r3, r0
 8001172:	2200      	movs	r2, #0
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001176:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001178:	f507 63b0 	add.w	r3, r7, #1408	@ 0x580
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001184:	4621      	mov	r1, r4
 8001186:	ebb1 0a02 	subs.w	sl, r1, r2
 800118a:	4629      	mov	r1, r5
 800118c:	eb61 0b03 	sbc.w	fp, r1, r3
 8001190:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 8001194:	2200      	movs	r2, #0
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	627a      	str	r2, [r7, #36]	@ 0x24
 800119a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800119e:	460b      	mov	r3, r1
 80011a0:	459a      	cmp	sl, r3
 80011a2:	4613      	mov	r3, r2
 80011a4:	eb7b 0303 	sbcs.w	r3, fp, r3
 80011a8:	d312      	bcc.n	80011d0 <main+0x1cc>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, temp_buffer, sizeof(temp_buffer));
 80011aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ae:	2205      	movs	r2, #5
 80011b0:	4619      	mov	r1, r3
 80011b2:	485e      	ldr	r0, [pc, #376]	@ (800132c <main+0x328>)
 80011b4:	f00a fc96 	bl	800bae4 <USBD_CUSTOM_HID_SendReport>
		  //USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&cyclic_report, cyclic_report.size);
          usb_timer = HAL_GetTick();
 80011b8:	f002 fa54 	bl	8003664 <HAL_GetTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	2200      	movs	r2, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	60fa      	str	r2, [r7, #12]
 80011c4:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
 80011c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011cc:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  if(uart_update(&uart4) == UART_RX_FAIL)	{
 80011d0:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 ff0d 	bl	8002ff4 <uart_update>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d04e      	beq.n	800127e <main+0x27a>
	  		  // handle rx failure
	  }
	  else if(uart4.unread_bytes > 0)	{
 80011e0:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80011e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011e8:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d046      	beq.n	800127e <main+0x27a>
		   memset(temp,'\0', RX_BUFFER_SIZE);
 80011f0:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80011f4:	2280      	movs	r2, #128	@ 0x80
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00c fd9f 	bl	800dd3c <memset>
		   uint32_t bytes_read =  fifo_peek_continuous(&uart4.rx_fifo, temp, uart4.unread_bytes);
 80011fe:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 8001202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001206:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 800120a:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 800120e:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 8001212:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fe2c 	bl	8000e74 <fifo_peek_continuous>
 800121c:	f8c7 0564 	str.w	r0, [r7, #1380]	@ 0x564
		   //uint32_t bytes_read = uart_read(&uart4,temp,RX_BUFFER_SIZE);

		   packet_type_t packet_type = com_packet_parse(&packet,temp,bytes_read);
 8001220:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8001224:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001228:	f8d7 2564 	ldr.w	r2, [r7, #1380]	@ 0x564
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fca1 	bl	8000b74 <com_packet_parse>
 8001232:	4603      	mov	r3, r0
 8001234:	f887 3563 	strb.w	r3, [r7, #1379]	@ 0x563
		   if(packet_type != COM_PACKET_FALSE)	{
 8001238:	f897 3563 	ldrb.w	r3, [r7, #1379]	@ 0x563
 800123c:	2b04      	cmp	r3, #4
 800123e:	d01e      	beq.n	800127e <main+0x27a>
			   switch(packet_type)	{
 8001240:	f897 3563 	ldrb.w	r3, [r7, #1379]	@ 0x563
 8001244:	2b03      	cmp	r3, #3
 8001246:	d00c      	beq.n	8001262 <main+0x25e>
 8001248:	2b03      	cmp	r3, #3
 800124a:	dc0c      	bgt.n	8001266 <main+0x262>
 800124c:	2b01      	cmp	r3, #1
 800124e:	d00c      	beq.n	800126a <main+0x266>
 8001250:	2b02      	cmp	r3, #2
 8001252:	d108      	bne.n	8001266 <main+0x262>
				   case COM_PACKET_ACK:
					   ack_received = true;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
					   retx_count = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
					   break;
 8001260:	e004      	b.n	800126c <main+0x268>
				   case COM_PACKET_NACK:
					   break;
 8001262:	bf00      	nop
 8001264:	e002      	b.n	800126c <main+0x268>
				   case COM_PACKET_CMD:
					   break;
				   default:
					   break;
 8001266:	bf00      	nop
 8001268:	e000      	b.n	800126c <main+0x268>
					   break;
 800126a:	bf00      	nop
			   }
			   fifo_push_read_index(&uart4.rx_fifo, bytes_read);
 800126c:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 8001270:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001274:	f8d7 1564 	ldr.w	r1, [r7, #1380]	@ 0x564
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fe31 	bl	8000ee0 <fifo_push_read_index>
		   }

	  }
	  if (ack_received){// && HAL_GetTick() - uart_timer >= 2){
 800127e:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 8001282:	2b00      	cmp	r3, #0
 8001284:	d056      	beq.n	8001334 <main+0x330>

		  uint32_t bytes_read = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
		  memset(temp,'\0', RX_BUFFER_SIZE);
 800128c:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f00c fd51 	bl	800dd3c <memset>
		  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 800129a:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 800129e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 80012a2:	4a23      	ldr	r2, [pc, #140]	@ (8001330 <main+0x32c>)
 80012a4:	2180      	movs	r1, #128	@ 0x80
 80012a6:	f00c fd13 	bl	800dcd0 <sniprintf>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
		  com_packet_create(&packet, temp, bytes_read);
 80012b0:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80012b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012b8:	f8d7 2554 	ldr.w	r2, [r7, #1364]	@ 0x554
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fbe9 	bl	8000a94 <com_packet_create>
		  (void)uart_write_packet(&uart4, &packet);
 80012c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80012c6:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 feb0 	bl	8003032 <uart_write_packet>
		  ack_received = false;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
		  packet_count++;
 80012d8:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
          uart_timer = HAL_GetTick();
 80012e2:	f002 f9bf 	bl	8003664 <HAL_GetTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2200      	movs	r2, #0
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	f507 62af 	add.w	r2, r7, #1400	@ 0x578
 80012f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012f6:	e9c2 3400 	strd	r3, r4, [r2]
 80012fa:	e6e9      	b.n	80010d0 <main+0xcc>
 80012fc:	20000580 	.word	0x20000580
 8001300:	20000190 	.word	0x20000190
 8001304:	20000328 	.word	0x20000328
 8001308:	20000298 	.word	0x20000298
 800130c:	200002e0 	.word	0x200002e0
 8001310:	20000370 	.word	0x20000370
 8001314:	200003b8 	.word	0x200003b8
 8001318:	20000238 	.word	0x20000238
 800131c:	20000584 	.word	0x20000584
 8001320:	20000588 	.word	0x20000588
 8001324:	200005c0 	.word	0x200005c0
 8001328:	200005e0 	.word	0x200005e0
 800132c:	20000640 	.word	0x20000640
 8001330:	0800e650 	.word	0x0800e650

	  }
	  else if(ack_received == false && HAL_GetTick() - uart_timer >= 150)	{
 8001334:	f897 3573 	ldrb.w	r3, [r7, #1395]	@ 0x573
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d051      	beq.n	80013e6 <main+0x3e2>
 8001342:	f002 f98f 	bl	8003664 <HAL_GetTick>
 8001346:	4603      	mov	r3, r0
 8001348:	2200      	movs	r2, #0
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	61fa      	str	r2, [r7, #28]
 800134e:	f507 63af 	add.w	r3, r7, #1400	@ 0x578
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800135a:	4621      	mov	r1, r4
 800135c:	1a89      	subs	r1, r1, r2
 800135e:	6139      	str	r1, [r7, #16]
 8001360:	4629      	mov	r1, r5
 8001362:	eb61 0303 	sbc.w	r3, r1, r3
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800136c:	460b      	mov	r3, r1
 800136e:	2b96      	cmp	r3, #150	@ 0x96
 8001370:	4613      	mov	r3, r2
 8001372:	f173 0300 	sbcs.w	r3, r3, #0
 8001376:	d336      	bcc.n	80013e6 <main+0x3e2>
		  if(retx_count < 3)	{
 8001378:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 800137c:	2b02      	cmp	r3, #2
 800137e:	d82b      	bhi.n	80013d8 <main+0x3d4>

			  uint32_t bytes_read = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
		  	  memset(temp,'\0', RX_BUFFER_SIZE);
 8001386:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00c fcd4 	bl	800dd3c <memset>
		  	  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 8001394:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001398:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 800139c:	4a2a      	ldr	r2, [pc, #168]	@ (8001448 <main+0x444>)
 800139e:	2180      	movs	r1, #128	@ 0x80
 80013a0:	f00c fc96 	bl	800dcd0 <sniprintf>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
		  	  com_packet_create(&packet, temp, bytes_read);
 80013aa:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80013ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013b2:	f8d7 255c 	ldr.w	r2, [r7, #1372]	@ 0x55c
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fb6c 	bl	8000a94 <com_packet_create>
		  	  (void)uart_write_packet(&uart4, &packet);
 80013bc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80013c0:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fe33 	bl	8003032 <uart_write_packet>
		  	  retx_count++;
 80013cc:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 80013d0:	3301      	adds	r3, #1
 80013d2:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
		  if(retx_count < 3)	{
 80013d6:	e036      	b.n	8001446 <main+0x442>
		  }
		  else	{
			  retx_count = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
			  ack_received = true;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3573 	strb.w	r3, [r7, #1395]	@ 0x573
		  if(retx_count < 3)	{
 80013e4:	e02f      	b.n	8001446 <main+0x442>
		  }
	  }
	  else if(packet_count ==0)	{
 80013e6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f47f ae70 	bne.w	80010d0 <main+0xcc>
		  uint32_t bytes_read = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
          memset(temp,'\0', RX_BUFFER_SIZE);
 80013f6:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 80013fa:	2280      	movs	r2, #128	@ 0x80
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f00c fc9c 	bl	800dd3c <memset>
		  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 8001404:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8001408:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 800140c:	4a0e      	ldr	r2, [pc, #56]	@ (8001448 <main+0x444>)
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	f00c fc5e 	bl	800dcd0 <sniprintf>
 8001414:	4603      	mov	r3, r0
 8001416:	f8c7 3558 	str.w	r3, [r7, #1368]	@ 0x558
		  packet_count++;
 800141a:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
		  com_packet_create(&packet, temp, bytes_read);
 8001424:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8001428:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800142c:	f8d7 2558 	ldr.w	r2, [r7, #1368]	@ 0x558
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fb2f 	bl	8000a94 <com_packet_create>
		  (void)uart_write_packet(&uart4, &packet);
 8001436:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800143a:	f507 7363 	add.w	r3, r7, #908	@ 0x38c
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f001 fdf6 	bl	8003032 <uart_write_packet>
  {
 8001446:	e643      	b.n	80010d0 <main+0xcc>
 8001448:	0800e650 	.word	0x0800e650

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b094      	sub	sp, #80	@ 0x50
 8001450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2230      	movs	r2, #48	@ 0x30
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f00c fc6e 	bl	800dd3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b28      	ldr	r3, [pc, #160]	@ (8001518 <SystemClock_Config+0xcc>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <SystemClock_Config+0xcc>)
 800147a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001480:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <SystemClock_Config+0xcc>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	4b22      	ldr	r3, [pc, #136]	@ (800151c <SystemClock_Config+0xd0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd0>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014c0:	23a8      	movs	r3, #168	@ 0xa8
 80014c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014c8:	2307      	movs	r3, #7
 80014ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f004 ffbf 	bl	8006454 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014dc:	f001 f88c 	bl	80025f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2105      	movs	r1, #5
 80014fe:	4618      	mov	r0, r3
 8001500:	f005 fa20 	bl	8006944 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800150a:	f001 f875 	bl	80025f8 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001526:	463b      	mov	r3, r7
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001534:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <MX_ADC1_Init+0xb8>)
 8001536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001538:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 800153a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800153e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001548:	2201      	movs	r2, #1
 800154a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 800154e:	2201      	movs	r2, #1
 8001550:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 800155c:	2200      	movs	r2, #0
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001560:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001562:	4a1e      	ldr	r2, [pc, #120]	@ (80015dc <MX_ADC1_Init+0xbc>)
 8001564:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 800156e:	2202      	movs	r2, #2
 8001570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001580:	4814      	ldr	r0, [pc, #80]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 8001582:	f002 f89f 	bl	80036c4 <HAL_ADC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800158c:	f001 f834 	bl	80025f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001590:	230f      	movs	r3, #15
 8001592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001594:	2301      	movs	r3, #1
 8001596:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001598:	2305      	movs	r3, #5
 800159a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800159c:	463b      	mov	r3, r7
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 80015a2:	f002 fb11 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015ac:	f001 f824 	bl	80025f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015b0:	230e      	movs	r3, #14
 80015b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_ADC1_Init+0xb4>)
 80015be:	f002 fb03 	bl	8003bc8 <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015c8:	f001 f816 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000190 	.word	0x20000190
 80015d8:	40012000 	.word	0x40012000
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <MX_CRC_Init+0x20>)
 80015e6:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <MX_CRC_Init+0x24>)
 80015e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	@ (8001600 <MX_CRC_Init+0x20>)
 80015ec:	f002 fea7 	bl	800433e <HAL_CRC_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80015f6:	f000 ffff 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000238 	.word	0x20000238
 8001604:	40023000 	.word	0x40023000

08001608 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <MX_SPI1_Init+0x64>)
 800160e:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <MX_SPI1_Init+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_SPI1_Init+0x64>)
 8001614:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001618:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800161a:	4b14      	ldr	r3, [pc, #80]	@ (800166c <MX_SPI1_Init+0x64>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <MX_SPI1_Init+0x64>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <MX_SPI1_Init+0x64>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <MX_SPI1_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001632:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <MX_SPI1_Init+0x64>)
 8001634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001638:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_SPI1_Init+0x64>)
 800163c:	2208      	movs	r2, #8
 800163e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <MX_SPI1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_SPI1_Init+0x64>)
 8001654:	220a      	movs	r2, #10
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	@ (800166c <MX_SPI1_Init+0x64>)
 800165a:	f005 fb93 	bl	8006d84 <HAL_SPI_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001664:	f000 ffc8 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000240 	.word	0x20000240
 8001670:	40013000 	.word	0x40013000

08001674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_TIM3_Init+0x94>)
 8001692:	4a1e      	ldr	r2, [pc, #120]	@ (800170c <MX_TIM3_Init+0x98>)
 8001694:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_TIM3_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_TIM3_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_TIM3_Init+0x94>)
 80016a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_TIM3_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_TIM3_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b6:	4814      	ldr	r0, [pc, #80]	@ (8001708 <MX_TIM3_Init+0x94>)
 80016b8:	f006 fa54 	bl	8007b64 <HAL_TIM_Base_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016c2:	f000 ff99 	bl	80025f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_TIM3_Init+0x94>)
 80016d4:	f006 fd3c 	bl	8008150 <HAL_TIM_ConfigClockSource>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016de:	f000 ff8b 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ea:	463b      	mov	r3, r7
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_TIM3_Init+0x94>)
 80016f0:	f007 f9e4 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016fa:	f000 ff7d 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000298 	.word	0x20000298
 800170c:	40000400 	.word	0x40000400

08001710 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b092      	sub	sp, #72	@ 0x48
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001716:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 031c 	add.w	r3, r7, #28
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001750:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001752:	4a34      	ldr	r2, [pc, #208]	@ (8001824 <MX_TIM4_Init+0x114>)
 8001754:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001756:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001758:	2253      	movs	r2, #83	@ 0x53
 800175a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b30      	ldr	r3, [pc, #192]	@ (8001820 <MX_TIM4_Init+0x110>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 8001762:	4b2f      	ldr	r3, [pc, #188]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001764:	2231      	movs	r2, #49	@ 0x31
 8001766:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <MX_TIM4_Init+0x110>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176e:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001774:	482a      	ldr	r0, [pc, #168]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001776:	f006 f9f5 	bl	8007b64 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001780:	f000 ff3a 	bl	80025f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001788:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800178a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800178e:	4619      	mov	r1, r3
 8001790:	4823      	ldr	r0, [pc, #140]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001792:	f006 fcdd 	bl	8008150 <HAL_TIM_ConfigClockSource>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800179c:	f000 ff2c 	bl	80025f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017a0:	481f      	ldr	r0, [pc, #124]	@ (8001820 <MX_TIM4_Init+0x110>)
 80017a2:	f006 fa97 	bl	8007cd4 <HAL_TIM_PWM_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80017ac:	f000 ff24 	bl	80025f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80017b0:	2305      	movs	r3, #5
 80017b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80017b4:	2330      	movs	r3, #48	@ 0x30
 80017b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80017b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017bc:	4619      	mov	r1, r3
 80017be:	4818      	ldr	r0, [pc, #96]	@ (8001820 <MX_TIM4_Init+0x110>)
 80017c0:	f006 fd8d 	bl	80082de <HAL_TIM_SlaveConfigSynchro>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 80017ca:	f000 ff15 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ce:	2320      	movs	r3, #32
 80017d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4810      	ldr	r0, [pc, #64]	@ (8001820 <MX_TIM4_Init+0x110>)
 80017de:	f007 f96d 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80017e8:	f000 ff06 	bl	80025f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ec:	2360      	movs	r3, #96	@ 0x60
 80017ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 80017f0:	2319      	movs	r3, #25
 80017f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80017f4:	2302      	movs	r3, #2
 80017f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	4807      	ldr	r0, [pc, #28]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001804:	f006 fbe2 	bl	8007fcc <HAL_TIM_PWM_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800180e:	f000 fef3 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001812:	4803      	ldr	r0, [pc, #12]	@ (8001820 <MX_TIM4_Init+0x110>)
 8001814:	f001 f8d8 	bl	80029c8 <HAL_TIM_MspPostInit>

}
 8001818:	bf00      	nop
 800181a:	3748      	adds	r7, #72	@ 0x48
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200002e0 	.word	0x200002e0
 8001824:	40000800 	.word	0x40000800

08001828 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <MX_TIM8_Init+0xac>)
 8001848:	4a23      	ldr	r2, [pc, #140]	@ (80018d8 <MX_TIM8_Init+0xb0>)
 800184a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800184c:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_TIM8_Init+0xac>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001852:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <MX_TIM8_Init+0xac>)
 8001854:	2210      	movs	r2, #16
 8001856:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2-1;
 8001858:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_TIM8_Init+0xac>)
 800185a:	2201      	movs	r2, #1
 800185c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <MX_TIM8_Init+0xac>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001864:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <MX_TIM8_Init+0xac>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_TIM8_Init+0xac>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001870:	4818      	ldr	r0, [pc, #96]	@ (80018d4 <MX_TIM8_Init+0xac>)
 8001872:	f006 f977 	bl	8007b64 <HAL_TIM_Base_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800187c:	f000 febc 	bl	80025f8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001880:	2108      	movs	r1, #8
 8001882:	4814      	ldr	r0, [pc, #80]	@ (80018d4 <MX_TIM8_Init+0xac>)
 8001884:	f006 fb48 	bl	8007f18 <HAL_TIM_OnePulse_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 800188e:	f000 feb3 	bl	80025f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001892:	2307      	movs	r3, #7
 8001894:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001896:	2320      	movs	r3, #32
 8001898:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	4619      	mov	r1, r3
 80018a0:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <MX_TIM8_Init+0xac>)
 80018a2:	f006 fd1c 	bl	80082de <HAL_TIM_SlaveConfigSynchro>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80018ac:	f000 fea4 	bl	80025f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80018b0:	2310      	movs	r3, #16
 80018b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	@ (80018d4 <MX_TIM8_Init+0xac>)
 80018be:	f007 f8fd 	bl	8008abc <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80018c8:	f000 fe96 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000328 	.word	0x20000328
 80018d8:	40010400 	.word	0x40010400

080018dc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_UART4_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <MX_UART4_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 460800;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <MX_UART4_Init+0x4c>)
 80018e8:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 80018ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_UART4_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_UART4_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_UART4_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_UART4_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_UART4_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_UART4_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_UART4_Init+0x4c>)
 8001914:	f007 f94e 	bl	8008bb4 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800191e:	f000 fe6b 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000370 	.word	0x20000370
 800192c:	40004c00 	.word	0x40004c00

08001930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <MX_USART3_UART_Init+0x50>)
 8001938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_USART3_UART_Init+0x4c>)
 8001968:	f007 f924 	bl	8008bb4 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001972:	f000 fe41 	bl	80025f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200003b8 	.word	0x200003b8
 8001980:	40004800 	.word	0x40004800

08001984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b23      	ldr	r3, [pc, #140]	@ (8001a1c <MX_DMA_Init+0x98>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a22      	ldr	r2, [pc, #136]	@ (8001a1c <MX_DMA_Init+0x98>)
 8001994:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <MX_DMA_Init+0x98>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <MX_DMA_Init+0x98>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <MX_DMA_Init+0x98>)
 80019b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <MX_DMA_Init+0x98>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	200c      	movs	r0, #12
 80019c8:	f002 fc83 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019cc:	200c      	movs	r0, #12
 80019ce:	f002 fc9c 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	200d      	movs	r0, #13
 80019d8:	f002 fc7b 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019dc:	200d      	movs	r0, #13
 80019de:	f002 fc94 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2100      	movs	r1, #0
 80019e6:	200e      	movs	r0, #14
 80019e8:	f002 fc73 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019ec:	200e      	movs	r0, #14
 80019ee:	f002 fc8c 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200f      	movs	r0, #15
 80019f8:	f002 fc6b 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80019fc:	200f      	movs	r0, #15
 80019fe:	f002 fc84 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2038      	movs	r0, #56	@ 0x38
 8001a08:	f002 fc63 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a0c:	2038      	movs	r0, #56	@ 0x38
 8001a0e:	f002 fc7c 	bl	800430a <HAL_NVIC_EnableIRQ>

}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800

08001a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08c      	sub	sp, #48	@ 0x30
 8001a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	4b9e      	ldr	r3, [pc, #632]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a9d      	ldr	r2, [pc, #628]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b9b      	ldr	r3, [pc, #620]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0310 	and.w	r3, r3, #16
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	4b97      	ldr	r3, [pc, #604]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a96      	ldr	r2, [pc, #600]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b94      	ldr	r3, [pc, #592]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b90      	ldr	r3, [pc, #576]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	4a8f      	ldr	r2, [pc, #572]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7e:	4b8d      	ldr	r3, [pc, #564]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b89      	ldr	r3, [pc, #548]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a88      	ldr	r2, [pc, #544]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b86      	ldr	r3, [pc, #536]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b82      	ldr	r3, [pc, #520]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a81      	ldr	r2, [pc, #516]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001ab0:	f043 0308 	orr.w	r3, r3, #8
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b78      	ldr	r3, [pc, #480]	@ (8001cb4 <MX_GPIO_Init+0x294>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_SET);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2170      	movs	r1, #112	@ 0x70
 8001ae2:	4875      	ldr	r0, [pc, #468]	@ (8001cb8 <MX_GPIO_Init+0x298>)
 8001ae4:	f003 fa30 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aee:	4873      	ldr	r0, [pc, #460]	@ (8001cbc <MX_GPIO_Init+0x29c>)
 8001af0:	f003 fa2a 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 8001af4:	2201      	movs	r2, #1
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	4871      	ldr	r0, [pc, #452]	@ (8001cc0 <MX_GPIO_Init+0x2a0>)
 8001afa:	f003 fa25 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PITCH_STEP_DIR_Pin|PITCH_STEP_EN_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001b04:	486f      	ldr	r0, [pc, #444]	@ (8001cc4 <MX_GPIO_Init+0x2a4>)
 8001b06:	f003 fa1f 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ROLL_STEP_DIR_Pin|ROLL_STEP_EN_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2103      	movs	r1, #3
 8001b0e:	486a      	ldr	r0, [pc, #424]	@ (8001cb8 <MX_GPIO_Init+0x298>)
 8001b10:	f003 fa1a 	bl	8004f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_OK_Pin */
  GPIO_InitStruct.Pin = SW_OK_Pin;
 8001b14:	2304      	movs	r3, #4
 8001b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SW_OK_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	4864      	ldr	r0, [pc, #400]	@ (8001cb8 <MX_GPIO_Init+0x298>)
 8001b28:	f003 f85a 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_CAL_Pin */
  GPIO_InitStruct.Pin = SW_CAL_Pin;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b30:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SW_CAL_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	4619      	mov	r1, r3
 8001b40:	485d      	ldr	r0, [pc, #372]	@ (8001cb8 <MX_GPIO_Init+0x298>)
 8001b42:	f003 f84d 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8001b46:	2370      	movs	r3, #112	@ 0x70
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b4a:	2311      	movs	r3, #17
 8001b4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4856      	ldr	r0, [pc, #344]	@ (8001cb8 <MX_GPIO_Init+0x298>)
 8001b5e:	f003 f83f 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_4_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 8001b62:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001b68:	2311      	movs	r3, #17
 8001b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b70:	2300      	movs	r3, #0
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4850      	ldr	r0, [pc, #320]	@ (8001cbc <MX_GPIO_Init+0x29c>)
 8001b7c:	f003 f830 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_EN_Pin */
  GPIO_InitStruct.Pin = UART4_EN_Pin;
 8001b80:	2308      	movs	r3, #8
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART4_EN_GPIO_Port, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	484a      	ldr	r0, [pc, #296]	@ (8001cbc <MX_GPIO_Init+0x29c>)
 8001b94:	f003 f824 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4845      	ldr	r0, [pc, #276]	@ (8001cc8 <MX_GPIO_Init+0x2a8>)
 8001bb4:	f003 f814 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART2_EN_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	483f      	ldr	r0, [pc, #252]	@ (8001cc8 <MX_GPIO_Init+0x2a8>)
 8001bcc:	f003 f808 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CYC_ICS_SW_Pin CYC_CARGO_REL_Pin CYC_CDR_REL_Pin CYC_AP_REL_Pin
                           CYC_HAT_LEFT_Pin CYC_HAT_DOWN_Pin CYC_HAT_UP_Pin */
  GPIO_InitStruct.Pin = CYC_ICS_SW_Pin|CYC_CARGO_REL_Pin|CYC_CDR_REL_Pin|CYC_AP_REL_Pin
 8001bd0:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 8001bd4:	61fb      	str	r3, [r7, #28]
                          |CYC_HAT_LEFT_Pin|CYC_HAT_DOWN_Pin|CYC_HAT_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	4836      	ldr	r0, [pc, #216]	@ (8001cc0 <MX_GPIO_Init+0x2a0>)
 8001be6:	f002 fffb 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CYC_HAT_RIGHT_Pin */
  GPIO_InitStruct.Pin = CYC_HAT_RIGHT_Pin;
 8001bea:	2340      	movs	r3, #64	@ 0x40
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CYC_HAT_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	482f      	ldr	r0, [pc, #188]	@ (8001cbc <MX_GPIO_Init+0x29c>)
 8001bfe:	f002 ffef 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c14:	2308      	movs	r3, #8
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4827      	ldr	r0, [pc, #156]	@ (8001cbc <MX_GPIO_Init+0x29c>)
 8001c20:	f002 ffde 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c24:	2304      	movs	r3, #4
 8001c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001c34:	2308      	movs	r3, #8
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <MX_GPIO_Init+0x2a0>)
 8001c40:	f002 ffce 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4819      	ldr	r0, [pc, #100]	@ (8001cc0 <MX_GPIO_Init+0x2a0>)
 8001c5c:	f002 ffc0 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PITCH_STEP_DIR_Pin PITCH_STEP_EN_Pin */
  GPIO_InitStruct.Pin = PITCH_STEP_DIR_Pin|PITCH_STEP_EN_Pin;
 8001c60:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c72:	f107 031c 	add.w	r3, r7, #28
 8001c76:	4619      	mov	r1, r3
 8001c78:	4812      	ldr	r0, [pc, #72]	@ (8001cc4 <MX_GPIO_Init+0x2a4>)
 8001c7a:	f002 ffb1 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROLL_STEP_DIR_Pin ROLL_STEP_EN_Pin */
  GPIO_InitStruct.Pin = ROLL_STEP_DIR_Pin|ROLL_STEP_EN_Pin;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4808      	ldr	r0, [pc, #32]	@ (8001cb8 <MX_GPIO_Init+0x298>)
 8001c96:	f002 ffa3 	bl	8004be0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2009      	movs	r0, #9
 8001ca0:	f002 fb17 	bl	80042d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ca4:	2009      	movs	r0, #9
 8001ca6:	f002 fb30 	bl	800430a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001caa:	bf00      	nop
 8001cac:	3730      	adds	r7, #48	@ 0x30
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	40020000 	.word	0x40020000

08001ccc <init_steppers>:

/* USER CODE BEGIN 4 */
void init_steppers(void)	{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

	  pitch_motor.en_gpio_port = PITCH_STEP_EN_GPIO_Port;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <init_steppers+0x7c>)
 8001cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d4c <init_steppers+0x80>)
 8001cd4:	601a      	str	r2, [r3, #0]
	  pitch_motor.en_gpio_pin = PITCH_STEP_EN_Pin;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <init_steppers+0x7c>)
 8001cd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cdc:	605a      	str	r2, [r3, #4]
	  pitch_motor.dir_gpio_port = PITCH_STEP_DIR_GPIO_Port;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <init_steppers+0x7c>)
 8001ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d4c <init_steppers+0x80>)
 8001ce2:	609a      	str	r2, [r3, #8]
	  pitch_motor.dir_gpio_pin = PITCH_STEP_DIR_Pin;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <init_steppers+0x7c>)
 8001ce6:	2280      	movs	r2, #128	@ 0x80
 8001ce8:	60da      	str	r2, [r3, #12]
	  pitch_motor.pul_gpio_port = PITCH_STEP_PUL_GPIO_Port;
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <init_steppers+0x7c>)
 8001cec:	4a17      	ldr	r2, [pc, #92]	@ (8001d4c <init_steppers+0x80>)
 8001cee:	611a      	str	r2, [r3, #16]
	  pitch_motor.pul_gpio_pin = PITCH_STEP_PUL_Pin;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <init_steppers+0x7c>)
 8001cf2:	2240      	movs	r2, #64	@ 0x40
 8001cf4:	615a      	str	r2, [r3, #20]
	  pitch_motor.timer = &htim8;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <init_steppers+0x7c>)
 8001cf8:	4a15      	ldr	r2, [pc, #84]	@ (8001d50 <init_steppers+0x84>)
 8001cfa:	619a      	str	r2, [r3, #24]
	  pitch_motor.mode = MICROSTEP_16;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <init_steppers+0x7c>)
 8001cfe:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001d02:	839a      	strh	r2, [r3, #28]

	  roll_motor.en_gpio_port = ROLL_STEP_EN_GPIO_Port;
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <init_steppers+0x88>)
 8001d06:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <init_steppers+0x8c>)
 8001d08:	601a      	str	r2, [r3, #0]
	  roll_motor.en_gpio_pin = ROLL_STEP_EN_Pin;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <init_steppers+0x88>)
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	605a      	str	r2, [r3, #4]
	  roll_motor.dir_gpio_port = ROLL_STEP_DIR_GPIO_Port;
 8001d10:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <init_steppers+0x88>)
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <init_steppers+0x8c>)
 8001d14:	609a      	str	r2, [r3, #8]
	  roll_motor.dir_gpio_pin = ROLL_STEP_DIR_Pin;
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <init_steppers+0x88>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	60da      	str	r2, [r3, #12]
	  roll_motor.pul_gpio_port = ROLL_STEP_PUL_GPIO_Port;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <init_steppers+0x88>)
 8001d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <init_steppers+0x80>)
 8001d20:	611a      	str	r2, [r3, #16]
	  roll_motor.pul_gpio_pin = ROLL_STEP_PUL_Pin;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <init_steppers+0x88>)
 8001d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d28:	615a      	str	r2, [r3, #20]
	  roll_motor.timer = &htim8;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <init_steppers+0x88>)
 8001d2c:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <init_steppers+0x84>)
 8001d2e:	619a      	str	r2, [r3, #24]
	  roll_motor.mode = MICROSTEP_16;
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <init_steppers+0x88>)
 8001d32:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001d36:	839a      	strh	r2, [r3, #28]

	  stepper_enable(&pitch_motor);
 8001d38:	4803      	ldr	r0, [pc, #12]	@ (8001d48 <init_steppers+0x7c>)
 8001d3a:	f000 fc63 	bl	8002604 <stepper_enable>
	  stepper_enable(&roll_motor);
 8001d3e:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <init_steppers+0x88>)
 8001d40:	f000 fc60 	bl	8002604 <stepper_enable>
}
 8001d44:	bf00      	nop
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	200005c0 	.word	0x200005c0
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	20000328 	.word	0x20000328
 8001d54:	200005e0 	.word	0x200005e0
 8001d58:	40021000 	.word	0x40021000

08001d5c <init_flash>:

void init_flash(void)	{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
	  //volatile uint32_t jedec_id = w25q16_get_jedec_id(&flash_handle);
	  //volatile uint32_t reg_data[3] ={0};
	  //reg_data[0] = w25q16_read_SR1(&flash_handle);
	  //reg_data[1] = w25q16_read_SR2(&flash_handle);
	  //reg_data[2] = w25q16_read_SR3(&flash_handle);
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <init_cyclic_input>:

void init_cyclic_input(void)	{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
	  axis_calibration_factors_t* axis_ptr[2] = {&pitch_calibrations, &roll_calibrations};
 8001d72:	4a11      	ldr	r2, [pc, #68]	@ (8001db8 <init_cyclic_input+0x4c>)
 8001d74:	463b      	mov	r3, r7
 8001d76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d7a:	e883 0003 	stmia.w	r3, {r0, r1}
	cyclic_report.buttons = 0;
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <init_cyclic_input+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	  cyclic_report.size = sizeof(cyclic_report.buttons) + sizeof(cyclic_report.roll) + sizeof(cyclic_report.pitch);
 8001d84:	4b0d      	ldr	r3, [pc, #52]	@ (8001dbc <init_cyclic_input+0x50>)
 8001d86:	2205      	movs	r2, #5
 8001d88:	719a      	strb	r2, [r3, #6]
	  HAL_Delay(10); // Allow extra time for flash chip to come up, probably unnecessary but is for extra safe-ness
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f001 fc76 	bl	800367c <HAL_Delay>
	  load_calibrations(axis_ptr,2);
 8001d90:	463b      	mov	r3, r7
 8001d92:	2102      	movs	r1, #2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f000 fafb 	bl	8002390 <load_calibrations>
	  input_filter_init(&roll_filter, ROLL_ALPHA);
 8001d9a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001dc0 <init_cyclic_input+0x54>
 8001d9e:	4809      	ldr	r0, [pc, #36]	@ (8001dc4 <init_cyclic_input+0x58>)
 8001da0:	f7ff f8cd 	bl	8000f3e <input_filter_init>
	  input_filter_init(&pitch_filter, PITCH_ALPHA);
 8001da4:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001dc0 <init_cyclic_input+0x54>
 8001da8:	4807      	ldr	r0, [pc, #28]	@ (8001dc8 <init_cyclic_input+0x5c>)
 8001daa:	f7ff f8c8 	bl	8000f3e <input_filter_init>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800e664 	.word	0x0800e664
 8001dbc:	20000588 	.word	0x20000588
 8001dc0:	3e99999a 	.word	0x3e99999a
 8001dc4:	20000600 	.word	0x20000600
 8001dc8:	20000608 	.word	0x20000608

08001dcc <update_cyclic_input>:

void update_cyclic_input(void)	{
 8001dcc:	b598      	push	{r3, r4, r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	  cyclic_report.buttons = 0;
 8001dd0:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <update_cyclic_input+0xc8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001dd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001dda:	482f      	ldr	r0, [pc, #188]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001ddc:	f003 f89c 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b25c      	sxtb	r4, r3
			  	  	  	  	  (HAL_GPIO_ReadPin(CYC_ICS_SW_GPIO_Port, CYC_ICS_SW_Pin) << 1) |
 8001de4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001de8:	482b      	ldr	r0, [pc, #172]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001dea:	f003 f895 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001dee:	4603      	mov	r3, r0
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	b25b      	sxtb	r3, r3
 8001df6:	4323      	orrs	r3, r4
 8001df8:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_CARGO_REL_GPIO_Port, CYC_CARGO_REL_Pin) << 2) |
 8001dfa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dfe:	4826      	ldr	r0, [pc, #152]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001e00:	f003 f88a 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
			  	  	  	  	  (HAL_GPIO_ReadPin(CYC_ICS_SW_GPIO_Port, CYC_ICS_SW_Pin) << 1) |
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	b25b      	sxtb	r3, r3
 8001e0c:	4323      	orrs	r3, r4
 8001e0e:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_UP_GPIO_Port, CYC_HAT_UP_Pin) << 3) |
 8001e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e14:	4820      	ldr	r0, [pc, #128]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001e16:	f003 f87f 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_CARGO_REL_GPIO_Port, CYC_CARGO_REL_Pin) << 2) |
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	b25b      	sxtb	r3, r3
 8001e22:	4323      	orrs	r3, r4
 8001e24:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_DOWN_GPIO_Port, CYC_HAT_DOWN_Pin) << 4) |
 8001e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e2a:	481b      	ldr	r0, [pc, #108]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001e2c:	f003 f874 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_UP_GPIO_Port, CYC_HAT_UP_Pin) << 3) |
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	b25b      	sxtb	r3, r3
 8001e38:	4323      	orrs	r3, r4
 8001e3a:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_RIGHT_GPIO_Port, CYC_HAT_RIGHT_Pin) << 5) |
 8001e3c:	2140      	movs	r1, #64	@ 0x40
 8001e3e:	4817      	ldr	r0, [pc, #92]	@ (8001e9c <update_cyclic_input+0xd0>)
 8001e40:	f003 f86a 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_DOWN_GPIO_Port, CYC_HAT_DOWN_Pin) << 4) |
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	015b      	lsls	r3, r3, #5
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	4323      	orrs	r3, r4
 8001e4e:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_LEFT_GPIO_Port, CYC_HAT_LEFT_Pin) << 6) |
 8001e50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e54:	4810      	ldr	r0, [pc, #64]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001e56:	f003 f85f 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_RIGHT_GPIO_Port, CYC_HAT_RIGHT_Pin) << 5) |
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	019b      	lsls	r3, r3, #6
 8001e60:	b25b      	sxtb	r3, r3
 8001e62:	4323      	orrs	r3, r4
 8001e64:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_CDR_REL_GPIO_Port, CYC_CDR_REL_Pin) << 7);
 8001e66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e6a:	480b      	ldr	r0, [pc, #44]	@ (8001e98 <update_cyclic_input+0xcc>)
 8001e6c:	f003 f854 	bl	8004f18 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_LEFT_GPIO_Port, CYC_HAT_LEFT_Pin) << 6) |
 8001e72:	b25b      	sxtb	r3, r3
 8001e74:	01db      	lsls	r3, r3, #7
 8001e76:	b25b      	sxtb	r3, r3
 8001e78:	4323      	orrs	r3, r4
 8001e7a:	b25b      	sxtb	r3, r3
 8001e7c:	b2da      	uxtb	r2, r3
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001e7e:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <update_cyclic_input+0xc8>)
 8001e80:	701a      	strb	r2, [r3, #0]

	  cyclic_report.buttons = (cyclic_report.buttons ^ CYCLIC_BUTTON_MASK);
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <update_cyclic_input+0xc8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b01      	ldr	r3, [pc, #4]	@ (8001e94 <update_cyclic_input+0xc8>)
 8001e8e:	701a      	strb	r2, [r3, #0]
}
 8001e90:	bf00      	nop
 8001e92:	bd98      	pop	{r3, r4, r7, pc}
 8001e94:	20000588 	.word	0x20000588
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40020800 	.word	0x40020800

08001ea0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	cyclic_report.roll = input_filter_update(&roll_filter, (float) apply_calibration(&roll_calibrations,adc_buffer[0]));
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	481b      	ldr	r0, [pc, #108]	@ (8001f20 <HAL_ADC_ConvCpltCallback+0x80>)
 8001eb4:	f7fe fc14 	bl	80006e0 <apply_calibration>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	4817      	ldr	r0, [pc, #92]	@ (8001f24 <HAL_ADC_ConvCpltCallback+0x84>)
 8001ec8:	f7ff f872 	bl	8000fb0 <input_filter_update>
 8001ecc:	eef0 7a40 	vmov.f32	s15, s0
 8001ed0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed4:	ee17 3a90 	vmov	r3, s15
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <HAL_ADC_ConvCpltCallback+0x88>)
 8001edc:	805a      	strh	r2, [r3, #2]
	cyclic_report.pitch = input_filter_update(&pitch_filter, (float) apply_calibration(&pitch_calibrations, adc_buffer[1]));
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001ee0:	885b      	ldrh	r3, [r3, #2]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4810      	ldr	r0, [pc, #64]	@ (8001f2c <HAL_ADC_ConvCpltCallback+0x8c>)
 8001eea:	f7fe fbf9 	bl	80006e0 <apply_calibration>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <HAL_ADC_ConvCpltCallback+0x90>)
 8001efe:	f7ff f857 	bl	8000fb0 <input_filter_update>
 8001f02:	eef0 7a40 	vmov.f32	s15, s0
 8001f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0a:	ee17 3a90 	vmov	r3, s15
 8001f0e:	b21a      	sxth	r2, r3
 8001f10:	4b05      	ldr	r3, [pc, #20]	@ (8001f28 <HAL_ADC_ConvCpltCallback+0x88>)
 8001f12:	809a      	strh	r2, [r3, #4]
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000580 	.word	0x20000580
 8001f20:	20000590 	.word	0x20000590
 8001f24:	20000600 	.word	0x20000600
 8001f28:	20000588 	.word	0x20000588
 8001f2c:	200005a8 	.word	0x200005a8
 8001f30:	20000608 	.word	0x20000608

08001f34 <calibration_routine>:

void calibration_routine(void)	{
 8001f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f38:	b092      	sub	sp, #72	@ 0x48
 8001f3a:	af00      	add	r7, sp, #0
	  axis_calibration_factors_t* axis_ptr[2] = {&pitch_calibrations, &roll_calibrations};
 8001f3c:	4b57      	ldr	r3, [pc, #348]	@ (800209c <calibration_routine+0x168>)
 8001f3e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001f42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f46:	e882 0003 	stmia.w	r2, {r0, r1}
	  calibrate_axis(&roll_calibrations, &adc_buffer[0]);
 8001f4a:	4955      	ldr	r1, [pc, #340]	@ (80020a0 <calibration_routine+0x16c>)
 8001f4c:	4855      	ldr	r0, [pc, #340]	@ (80020a4 <calibration_routine+0x170>)
 8001f4e:	f000 f8b3 	bl	80020b8 <calibrate_axis>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2120      	movs	r1, #32
 8001f56:	4854      	ldr	r0, [pc, #336]	@ (80020a8 <calibration_routine+0x174>)
 8001f58:	f002 fff6 	bl	8004f48 <HAL_GPIO_WritePin>
	  calibrate_axis(&pitch_calibrations, &adc_buffer[1]);
 8001f5c:	4953      	ldr	r1, [pc, #332]	@ (80020ac <calibration_routine+0x178>)
 8001f5e:	4854      	ldr	r0, [pc, #336]	@ (80020b0 <calibration_routine+0x17c>)
 8001f60:	f000 f8aa 	bl	80020b8 <calibrate_axis>
	  uint64_t time = HAL_GetTick();
 8001f64:	f001 fb7e 	bl	8003664 <HAL_GetTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	61fa      	str	r2, [r7, #28]
 8001f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f74:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2120      	movs	r1, #32
 8001f7c:	484a      	ldr	r0, [pc, #296]	@ (80020a8 <calibration_routine+0x174>)
 8001f7e:	f002 ffe3 	bl	8004f48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2110      	movs	r1, #16
 8001f86:	4848      	ldr	r0, [pc, #288]	@ (80020a8 <calibration_routine+0x174>)
 8001f88:	f002 ffde 	bl	8004f48 <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001f8c:	bf00      	nop
 8001f8e:	f001 fb69 	bl	8003664 <HAL_GetTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2200      	movs	r2, #0
 8001f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f98:	637a      	str	r2, [r7, #52]	@ 0x34
 8001f9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f9e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001fa0:	1a8c      	subs	r4, r1, r2
 8001fa2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001fa4:	eb61 0503 	sbc.w	r5, r1, r3
 8001fa8:	2c64      	cmp	r4, #100	@ 0x64
 8001faa:	f175 0300 	sbcs.w	r3, r5, #0
 8001fae:	d3ee      	bcc.n	8001f8e <calibration_routine+0x5a>
	  time = HAL_GetTick();
 8001fb0:	f001 fb58 	bl	8003664 <HAL_GetTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	617a      	str	r2, [r7, #20]
 8001fbc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fc0:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	4837      	ldr	r0, [pc, #220]	@ (80020a8 <calibration_routine+0x174>)
 8001fca:	f002 ffbd 	bl	8004f48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	2110      	movs	r1, #16
 8001fd2:	4835      	ldr	r0, [pc, #212]	@ (80020a8 <calibration_routine+0x174>)
 8001fd4:	f002 ffb8 	bl	8004f48 <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001fd8:	bf00      	nop
 8001fda:	f001 fb43 	bl	8003664 <HAL_GetTick>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001fee:	4621      	mov	r1, r4
 8001ff0:	ebb1 0a02 	subs.w	sl, r1, r2
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	eb61 0b03 	sbc.w	fp, r1, r3
 8001ffa:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8001ffe:	f17b 0300 	sbcs.w	r3, fp, #0
 8002002:	d3ea      	bcc.n	8001fda <calibration_routine+0xa6>
	  time = HAL_GetTick();
 8002004:	f001 fb2e 	bl	8003664 <HAL_GetTick>
 8002008:	4603      	mov	r3, r0
 800200a:	2200      	movs	r2, #0
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	60fa      	str	r2, [r7, #12]
 8002010:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002014:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2120      	movs	r1, #32
 800201c:	4822      	ldr	r0, [pc, #136]	@ (80020a8 <calibration_routine+0x174>)
 800201e:	f002 ff93 	bl	8004f48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2110      	movs	r1, #16
 8002026:	4820      	ldr	r0, [pc, #128]	@ (80020a8 <calibration_routine+0x174>)
 8002028:	f002 ff8e 	bl	8004f48 <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 800202c:	bf00      	nop
 800202e:	f001 fb19 	bl	8003664 <HAL_GetTick>
 8002032:	4603      	mov	r3, r0
 8002034:	2200      	movs	r2, #0
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	627a      	str	r2, [r7, #36]	@ 0x24
 800203a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800203e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002042:	4621      	mov	r1, r4
 8002044:	ebb1 0802 	subs.w	r8, r1, r2
 8002048:	4629      	mov	r1, r5
 800204a:	eb61 0903 	sbc.w	r9, r1, r3
 800204e:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8002052:	f179 0300 	sbcs.w	r3, r9, #0
 8002056:	d3ea      	bcc.n	800202e <calibration_routine+0xfa>
	  time = HAL_GetTick();
 8002058:	f001 fb04 	bl	8003664 <HAL_GetTick>
 800205c:	4603      	mov	r3, r0
 800205e:	2200      	movs	r2, #0
 8002060:	603b      	str	r3, [r7, #0]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002068:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2120      	movs	r1, #32
 8002070:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <calibration_routine+0x174>)
 8002072:	f002 ff69 	bl	8004f48 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	2110      	movs	r1, #16
 800207a:	480b      	ldr	r0, [pc, #44]	@ (80020a8 <calibration_routine+0x174>)
 800207c:	f002 ff64 	bl	8004f48 <HAL_GPIO_WritePin>
	  IRQ_Calibrate_Flag = false;
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <calibration_routine+0x180>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]

	  save_calibrations(axis_ptr, 2);
 8002086:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800208a:	2102      	movs	r1, #2
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f9eb 	bl	8002468 <save_calibrations>
}
 8002092:	bf00      	nop
 8002094:	3748      	adds	r7, #72	@ 0x48
 8002096:	46bd      	mov	sp, r7
 8002098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800209c:	0800e664 	.word	0x0800e664
 80020a0:	20000580 	.word	0x20000580
 80020a4:	20000590 	.word	0x20000590
 80020a8:	40021000 	.word	0x40021000
 80020ac:	20000582 	.word	0x20000582
 80020b0:	200005a8 	.word	0x200005a8
 80020b4:	20000584 	.word	0x20000584

080020b8 <calibrate_axis>:

void calibrate_axis(axis_calibration_factors_t* cal, volatile uint16_t* adc_buf)	{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b0a8      	sub	sp, #160	@ 0xa0
 80020be:	af00      	add	r7, sp, #0
 80020c0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80020c4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88

	clear_calibration(cal);
 80020c8:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80020cc:	f7fe fc12 	bl	80008f4 <clear_calibration>

	uint64_t time = HAL_GetTick();
 80020d0:	f001 fac8 	bl	8003664 <HAL_GetTick>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2200      	movs	r2, #0
 80020d8:	469a      	mov	sl, r3
 80020da:	4693      	mov	fp, r2
 80020dc:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
	while(HAL_GetTick()-time < 250)	{;;}
 80020e0:	bf00      	nop
 80020e2:	f001 fabf 	bl	8003664 <HAL_GetTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2200      	movs	r2, #0
 80020ea:	4698      	mov	r8, r3
 80020ec:	4691      	mov	r9, r2
 80020ee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80020f2:	ebb8 0402 	subs.w	r4, r8, r2
 80020f6:	eb69 0503 	sbc.w	r5, r9, r3
 80020fa:	2cfa      	cmp	r4, #250	@ 0xfa
 80020fc:	f175 0300 	sbcs.w	r3, r5, #0
 8002100:	d3ef      	bcc.n	80020e2 <calibrate_axis+0x2a>
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 8002102:	e02a      	b.n	800215a <calibrate_axis+0xa2>
		if(HAL_GetTick() - time > 500 ){
 8002104:	f001 faae 	bl	8003664 <HAL_GetTick>
 8002108:	4603      	mov	r3, r0
 800210a:	2200      	movs	r2, #0
 800210c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002110:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002114:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002118:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800211c:	4621      	mov	r1, r4
 800211e:	1a89      	subs	r1, r1, r2
 8002120:	67b9      	str	r1, [r7, #120]	@ 0x78
 8002122:	4629      	mov	r1, r5
 8002124:	eb61 0303 	sbc.w	r3, r1, r3
 8002128:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800212a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800212e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002132:	4602      	mov	r2, r0
 8002134:	429a      	cmp	r2, r3
 8002136:	460b      	mov	r3, r1
 8002138:	f173 0300 	sbcs.w	r3, r3, #0
 800213c:	d30d      	bcc.n	800215a <calibrate_axis+0xa2>
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 800213e:	2110      	movs	r1, #16
 8002140:	4891      	ldr	r0, [pc, #580]	@ (8002388 <calibrate_axis+0x2d0>)
 8002142:	f002 ff1a 	bl	8004f7a <HAL_GPIO_TogglePin>
			time = HAL_GetTick();
 8002146:	f001 fa8d 	bl	8003664 <HAL_GetTick>
 800214a:	4603      	mov	r3, r0
 800214c:	2200      	movs	r2, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	617a      	str	r2, [r7, #20]
 8002152:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002156:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 800215a:	2104      	movs	r1, #4
 800215c:	488a      	ldr	r0, [pc, #552]	@ (8002388 <calibrate_axis+0x2d0>)
 800215e:	f002 fedb 	bl	8004f18 <HAL_GPIO_ReadPin>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1cd      	bne.n	8002104 <calibrate_axis+0x4c>
		}
	}

	int16_t val1 = (int16_t)adc_buf[0];
 8002168:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	b29b      	uxth	r3, r3
 8002170:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	while(HAL_GetTick()-time < 50)	{;;}
 8002174:	bf00      	nop
 8002176:	f001 fa75 	bl	8003664 <HAL_GetTick>
 800217a:	4603      	mov	r3, r0
 800217c:	2200      	movs	r2, #0
 800217e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002180:	677a      	str	r2, [r7, #116]	@ 0x74
 8002182:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002186:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800218a:	4621      	mov	r1, r4
 800218c:	1a89      	subs	r1, r1, r2
 800218e:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002190:	4629      	mov	r1, r5
 8002192:	eb61 0303 	sbc.w	r3, r1, r3
 8002196:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002198:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800219c:	460b      	mov	r3, r1
 800219e:	2b32      	cmp	r3, #50	@ 0x32
 80021a0:	4613      	mov	r3, r2
 80021a2:	f173 0300 	sbcs.w	r3, r3, #0
 80021a6:	d3e6      	bcc.n	8002176 <calibrate_axis+0xbe>
	int16_t val2 = (int16_t)adc_buf[0];
 80021a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	while(HAL_GetTick()-time < 50)	{;;}
 80021b4:	bf00      	nop
 80021b6:	f001 fa55 	bl	8003664 <HAL_GetTick>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2200      	movs	r2, #0
 80021be:	663b      	str	r3, [r7, #96]	@ 0x60
 80021c0:	667a      	str	r2, [r7, #100]	@ 0x64
 80021c2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80021c6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021ca:	4621      	mov	r1, r4
 80021cc:	1a89      	subs	r1, r1, r2
 80021ce:	65b9      	str	r1, [r7, #88]	@ 0x58
 80021d0:	4629      	mov	r1, r5
 80021d2:	eb61 0303 	sbc.w	r3, r1, r3
 80021d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80021d8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80021dc:	460b      	mov	r3, r1
 80021de:	2b32      	cmp	r3, #50	@ 0x32
 80021e0:	4613      	mov	r3, r2
 80021e2:	f173 0300 	sbcs.w	r3, r3, #0
 80021e6:	d3e6      	bcc.n	80021b6 <calibrate_axis+0xfe>
	int16_t val3 = (int16_t)adc_buf[0];
 80021e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	cal->physical_max = (val1+val2+val3)/3;
 80021f4:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 80021f8:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80021fc:	441a      	add	r2, r3
 80021fe:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002202:	18d1      	adds	r1, r2, r3
 8002204:	4b61      	ldr	r3, [pc, #388]	@ (800238c <calibrate_axis+0x2d4>)
 8002206:	fb83 3201 	smull	r3, r2, r3, r1
 800220a:	17cb      	asrs	r3, r1, #31
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	b21b      	sxth	r3, r3
 8002210:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002214:	8013      	strh	r3, [r2, #0]
	time = HAL_GetTick();
 8002216:	f001 fa25 	bl	8003664 <HAL_GetTick>
 800221a:	4603      	mov	r3, r0
 800221c:	2200      	movs	r2, #0
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	60fa      	str	r2, [r7, #12]
 8002222:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002226:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GetTick()-time < 250)	{;;}
 800222a:	bf00      	nop
 800222c:	f001 fa1a 	bl	8003664 <HAL_GetTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2200      	movs	r2, #0
 8002234:	653b      	str	r3, [r7, #80]	@ 0x50
 8002236:	657a      	str	r2, [r7, #84]	@ 0x54
 8002238:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800223c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002240:	4621      	mov	r1, r4
 8002242:	1a89      	subs	r1, r1, r2
 8002244:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002246:	4629      	mov	r1, r5
 8002248:	eb61 0303 	sbc.w	r3, r1, r3
 800224c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800224e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002252:	460b      	mov	r3, r1
 8002254:	2bfa      	cmp	r3, #250	@ 0xfa
 8002256:	4613      	mov	r3, r2
 8002258:	f173 0300 	sbcs.w	r3, r3, #0
 800225c:	d3e6      	bcc.n	800222c <calibrate_axis+0x174>
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 800225e:	e026      	b.n	80022ae <calibrate_axis+0x1f6>
			if(HAL_GetTick() - time > 150 ){
 8002260:	f001 fa00 	bl	8003664 <HAL_GetTick>
 8002264:	4603      	mov	r3, r0
 8002266:	2200      	movs	r2, #0
 8002268:	643b      	str	r3, [r7, #64]	@ 0x40
 800226a:	647a      	str	r2, [r7, #68]	@ 0x44
 800226c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002270:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002274:	4621      	mov	r1, r4
 8002276:	1a89      	subs	r1, r1, r2
 8002278:	63b9      	str	r1, [r7, #56]	@ 0x38
 800227a:	4629      	mov	r1, r5
 800227c:	eb61 0303 	sbc.w	r3, r1, r3
 8002280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002282:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002286:	460b      	mov	r3, r1
 8002288:	2b97      	cmp	r3, #151	@ 0x97
 800228a:	4613      	mov	r3, r2
 800228c:	f173 0300 	sbcs.w	r3, r3, #0
 8002290:	d30d      	bcc.n	80022ae <calibrate_axis+0x1f6>
				HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002292:	2110      	movs	r1, #16
 8002294:	483c      	ldr	r0, [pc, #240]	@ (8002388 <calibrate_axis+0x2d0>)
 8002296:	f002 fe70 	bl	8004f7a <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 800229a:	f001 f9e3 	bl	8003664 <HAL_GetTick>
 800229e:	4603      	mov	r3, r0
 80022a0:	2200      	movs	r2, #0
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80022aa:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 80022ae:	2104      	movs	r1, #4
 80022b0:	4835      	ldr	r0, [pc, #212]	@ (8002388 <calibrate_axis+0x2d0>)
 80022b2:	f002 fe31 	bl	8004f18 <HAL_GPIO_ReadPin>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1d1      	bne.n	8002260 <calibrate_axis+0x1a8>
			}
		}

	val1 = (int16_t)adc_buf[0];
 80022bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	while(HAL_GetTick()-time < 50)	{;;}
 80022c8:	bf00      	nop
 80022ca:	f001 f9cb 	bl	8003664 <HAL_GetTick>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2200      	movs	r2, #0
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80022d6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80022da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022de:	4621      	mov	r1, r4
 80022e0:	1a89      	subs	r1, r1, r2
 80022e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022e4:	4629      	mov	r1, r5
 80022e6:	eb61 0303 	sbc.w	r3, r1, r3
 80022ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80022f0:	460b      	mov	r3, r1
 80022f2:	2b32      	cmp	r3, #50	@ 0x32
 80022f4:	4613      	mov	r3, r2
 80022f6:	f173 0300 	sbcs.w	r3, r3, #0
 80022fa:	d3e6      	bcc.n	80022ca <calibrate_axis+0x212>
	val2 = (int16_t)adc_buf[0];
 80022fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	while(HAL_GetTick()-time < 50)	{;;}
 8002308:	bf00      	nop
 800230a:	f001 f9ab 	bl	8003664 <HAL_GetTick>
 800230e:	4603      	mov	r3, r0
 8002310:	2200      	movs	r2, #0
 8002312:	623b      	str	r3, [r7, #32]
 8002314:	627a      	str	r2, [r7, #36]	@ 0x24
 8002316:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800231a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800231e:	4621      	mov	r1, r4
 8002320:	1a89      	subs	r1, r1, r2
 8002322:	61b9      	str	r1, [r7, #24]
 8002324:	4629      	mov	r1, r5
 8002326:	eb61 0303 	sbc.w	r3, r1, r3
 800232a:	61fb      	str	r3, [r7, #28]
 800232c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002330:	460b      	mov	r3, r1
 8002332:	2b32      	cmp	r3, #50	@ 0x32
 8002334:	4613      	mov	r3, r2
 8002336:	f173 0300 	sbcs.w	r3, r3, #0
 800233a:	d3e6      	bcc.n	800230a <calibrate_axis+0x252>
	val3 = (int16_t)adc_buf[0];
 800233c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	b29b      	uxth	r3, r3
 8002344:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	cal->physical_min = (val1+val2+val3)/3;
 8002348:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 800234c:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002350:	441a      	add	r2, r3
 8002352:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 8002356:	4413      	add	r3, r2
 8002358:	4a0c      	ldr	r2, [pc, #48]	@ (800238c <calibrate_axis+0x2d4>)
 800235a:	fb82 1203 	smull	r1, r2, r2, r3
 800235e:	17db      	asrs	r3, r3, #31
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	b21a      	sxth	r2, r3
 8002364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002368:	805a      	strh	r2, [r3, #2]

	recalculate_calibration(cal);
 800236a:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800236e:	f7fe fade 	bl	800092e <recalculate_calibration>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	2110      	movs	r1, #16
 8002376:	4804      	ldr	r0, [pc, #16]	@ (8002388 <calibrate_axis+0x2d0>)
 8002378:	f002 fde6 	bl	8004f48 <HAL_GPIO_WritePin>
}
 800237c:	bf00      	nop
 800237e:	37a0      	adds	r7, #160	@ 0xa0
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	55555556 	.word	0x55555556

08002390 <load_calibrations>:

void load_calibrations(axis_calibration_factors_t* cal[], uint8_t calibration_count)	{
 8002390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	70fb      	strb	r3, [r7, #3]
 800239e:	466b      	mov	r3, sp
 80023a0:	461e      	mov	r6, r3
	uint8_t buffer_size = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i < calibration_count; i++)	{
 80023a6:	2300      	movs	r3, #0
 80023a8:	75bb      	strb	r3, [r7, #22]
 80023aa:	e005      	b.n	80023b8 <load_calibrations+0x28>
		buffer_size += CALIBRATION_FACTOR_SIZE;
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	3313      	adds	r3, #19
 80023b0:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i < calibration_count; i++)	{
 80023b2:	7dbb      	ldrb	r3, [r7, #22]
 80023b4:	3301      	adds	r3, #1
 80023b6:	75bb      	strb	r3, [r7, #22]
 80023b8:	7dba      	ldrb	r2, [r7, #22]
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3f5      	bcc.n	80023ac <load_calibrations+0x1c>
	}
	uint8_t size_offset = buffer_size / calibration_count;
 80023c0:	7dfa      	ldrb	r2, [r7, #23]
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	753b      	strb	r3, [r7, #20]
	uint8_t data_buffer[buffer_size];
 80023ca:	7df9      	ldrb	r1, [r7, #23]
 80023cc:	460b      	mov	r3, r1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	b2cb      	uxtb	r3, r1
 80023d4:	2200      	movs	r2, #0
 80023d6:	4698      	mov	r8, r3
 80023d8:	4691      	mov	r9, r2
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ee:	b2cb      	uxtb	r3, r1
 80023f0:	2200      	movs	r2, #0
 80023f2:	461c      	mov	r4, r3
 80023f4:	4615      	mov	r5, r2
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	00eb      	lsls	r3, r5, #3
 8002400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002404:	00e2      	lsls	r2, r4, #3
 8002406:	460b      	mov	r3, r1
 8002408:	3307      	adds	r3, #7
 800240a:	08db      	lsrs	r3, r3, #3
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	ebad 0d03 	sub.w	sp, sp, r3
 8002412:	466b      	mov	r3, sp
 8002414:	3300      	adds	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]

	w25q16_read(&flash_handle, FLASH_CALIBRATION_ADDRESS, data_buffer, buffer_size);
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002420:	4810      	ldr	r0, [pc, #64]	@ (8002464 <load_calibrations+0xd4>)
 8002422:	f000 ffc6 	bl	80033b2 <w25q16_read>
	for(uint8_t i=0; i< calibration_count; i++){
 8002426:	2300      	movs	r3, #0
 8002428:	757b      	strb	r3, [r7, #21]
 800242a:	e011      	b.n	8002450 <load_calibrations+0xc0>
		set_calibration(cal[i], &data_buffer[i*size_offset], size_offset);
 800242c:	7d7b      	ldrb	r3, [r7, #21]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	7d7b      	ldrb	r3, [r7, #21]
 8002438:	7d3a      	ldrb	r2, [r7, #20]
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4413      	add	r3, r2
 8002442:	7d3a      	ldrb	r2, [r7, #20]
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe f992 	bl	800076e <set_calibration>
	for(uint8_t i=0; i< calibration_count; i++){
 800244a:	7d7b      	ldrb	r3, [r7, #21]
 800244c:	3301      	adds	r3, #1
 800244e:	757b      	strb	r3, [r7, #21]
 8002450:	7d7a      	ldrb	r2, [r7, #21]
 8002452:	78fb      	ldrb	r3, [r7, #3]
 8002454:	429a      	cmp	r2, r3
 8002456:	d3e9      	bcc.n	800242c <load_calibrations+0x9c>
 8002458:	46b5      	mov	sp, r6
	}
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002464:	20000000 	.word	0x20000000

08002468 <save_calibrations>:

void save_calibrations(axis_calibration_factors_t* cal[], uint8_t calibration_count)	{
 8002468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800246c:	b08d      	sub	sp, #52	@ 0x34
 800246e:	af00      	add	r7, sp, #0
 8002470:	6178      	str	r0, [r7, #20]
 8002472:	460b      	mov	r3, r1
 8002474:	74fb      	strb	r3, [r7, #19]
 8002476:	466b      	mov	r3, sp
 8002478:	461e      	mov	r6, r3
	uint8_t buffer_size = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(uint8_t i=0; i < calibration_count; i++)	{
 8002480:	2300      	movs	r3, #0
 8002482:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002486:	e009      	b.n	800249c <save_calibrations+0x34>
		buffer_size += CALIBRATION_FACTOR_SIZE;
 8002488:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800248c:	3313      	adds	r3, #19
 800248e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(uint8_t i=0; i < calibration_count; i++)	{
 8002492:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002496:	3301      	adds	r3, #1
 8002498:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800249c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3f0      	bcc.n	8002488 <save_calibrations+0x20>
	}
	uint8_t size_offset = buffer_size / calibration_count;
 80024a6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t data_buffer[buffer_size];
 80024b4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80024b8:	460b      	mov	r3, r1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	b2cb      	uxtb	r3, r1
 80024c0:	2200      	movs	r2, #0
 80024c2:	469a      	mov	sl, r3
 80024c4:	4693      	mov	fp, r2
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024da:	b2cb      	uxtb	r3, r1
 80024dc:	2200      	movs	r2, #0
 80024de:	4698      	mov	r8, r3
 80024e0:	4691      	mov	r9, r2
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024f6:	460b      	mov	r3, r1
 80024f8:	3307      	adds	r3, #7
 80024fa:	08db      	lsrs	r3, r3, #3
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	ebad 0d03 	sub.w	sp, sp, r3
 8002502:	466b      	mov	r3, sp
 8002504:	3300      	adds	r3, #0
 8002506:	623b      	str	r3, [r7, #32]

	for(uint8_t i=0; i< calibration_count; i++){
 8002508:	2300      	movs	r3, #0
 800250a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800250e:	e017      	b.n	8002540 <save_calibrations+0xd8>
		get_calibration(cal[i], &data_buffer[i*size_offset], size_offset);
 8002510:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4413      	add	r3, r2
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002520:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	6a3a      	ldr	r2, [r7, #32]
 800252a:	4413      	add	r3, r2
 800252c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe f985 	bl	8000840 <get_calibration>
	for(uint8_t i=0; i< calibration_count; i++){
 8002536:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800253a:	3301      	adds	r3, #1
 800253c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002540:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	429a      	cmp	r2, r3
 8002548:	d3e2      	bcc.n	8002510 <save_calibrations+0xa8>
	}

	w25q16_sector_erase_4k(&flash_handle, FLASH_CALIBRATION_ADDRESS);
 800254a:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 800254e:	4821      	ldr	r0, [pc, #132]	@ (80025d4 <save_calibrations+0x16c>)
 8002550:	f000 ffab 	bl	80034aa <w25q16_sector_erase_4k>
	uint8_t busy_flag = w25q16_read_SR1(&flash_handle)&0x01;
 8002554:	481f      	ldr	r0, [pc, #124]	@ (80025d4 <save_calibrations+0x16c>)
 8002556:	f000 ffd0 	bl	80034fa <w25q16_read_SR1>
 800255a:	4603      	mov	r3, r0
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint64_t timer = HAL_GetTick();
 8002564:	f001 f87e 	bl	8003664 <HAL_GetTick>
 8002568:	4603      	mov	r3, r0
 800256a:	2200      	movs	r2, #0
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002574:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while(busy_flag && HAL_GetTick()-timer<200)	{
 8002578:	e007      	b.n	800258a <save_calibrations+0x122>
		busy_flag = w25q16_read_SR1(&flash_handle)&0x01;
 800257a:	4816      	ldr	r0, [pc, #88]	@ (80025d4 <save_calibrations+0x16c>)
 800257c:	f000 ffbd 	bl	80034fa <w25q16_read_SR1>
 8002580:	4603      	mov	r3, r0
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	while(busy_flag && HAL_GetTick()-timer<200)	{
 800258a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800258e:	2b00      	cmp	r3, #0
 8002590:	d012      	beq.n	80025b8 <save_calibrations+0x150>
 8002592:	f001 f867 	bl	8003664 <HAL_GetTick>
 8002596:	4603      	mov	r3, r0
 8002598:	2200      	movs	r2, #0
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	60fa      	str	r2, [r7, #12]
 800259e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80025a6:	4641      	mov	r1, r8
 80025a8:	1a8c      	subs	r4, r1, r2
 80025aa:	4649      	mov	r1, r9
 80025ac:	eb61 0503 	sbc.w	r5, r1, r3
 80025b0:	2cc8      	cmp	r4, #200	@ 0xc8
 80025b2:	f175 0300 	sbcs.w	r3, r5, #0
 80025b6:	d3e0      	bcc.n	800257a <save_calibrations+0x112>
	}
	w25q16_write(&flash_handle, FLASH_CALIBRATION_ADDRESS, data_buffer, buffer_size);
 80025b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025bc:	6a3a      	ldr	r2, [r7, #32]
 80025be:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80025c2:	4804      	ldr	r0, [pc, #16]	@ (80025d4 <save_calibrations+0x16c>)
 80025c4:	f000 ff25 	bl	8003412 <w25q16_write>
 80025c8:	46b5      	mov	sp, r6
}
 80025ca:	bf00      	nop
 80025cc:	3734      	adds	r7, #52	@ 0x34
 80025ce:	46bd      	mov	sp, r7
 80025d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)	{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
	IRQ_Calibrate_Flag = true;
 80025e2:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <HAL_GPIO_EXTI_Callback+0x1c>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	20000584 	.word	0x20000584

080025f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025fc:	b672      	cpsid	i
}
 80025fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <Error_Handler+0x8>

08002604 <stepper_enable>:
 */


#include "stepper.h"

void stepper_enable(stepper_handle_t* motor)	{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	b29b      	uxth	r3, r3
 8002616:	2201      	movs	r2, #1
 8002618:	4619      	mov	r1, r3
 800261a:	f002 fc95 	bl	8004f48 <HAL_GPIO_WritePin>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <stepper_disable>:

void stepper_disable(stepper_handle_t* motor)	{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	b29b      	uxth	r3, r3
 8002638:	2200      	movs	r2, #0
 800263a:	4619      	mov	r1, r3
 800263c:	f002 fc84 	bl	8004f48 <HAL_GPIO_WritePin>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <HAL_MspInit+0x4c>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	4a0f      	ldr	r2, [pc, #60]	@ (8002694 <HAL_MspInit+0x4c>)
 8002658:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800265c:	6453      	str	r3, [r2, #68]	@ 0x44
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <HAL_MspInit+0x4c>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <HAL_MspInit+0x4c>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	4a08      	ldr	r2, [pc, #32]	@ (8002694 <HAL_MspInit+0x4c>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	@ 0x40
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_MspInit+0x4c>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002682:	603b      	str	r3, [r7, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	@ 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a33      	ldr	r2, [pc, #204]	@ (8002784 <HAL_ADC_MspInit+0xec>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d160      	bne.n	800277c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b32      	ldr	r3, [pc, #200]	@ (8002788 <HAL_ADC_MspInit+0xf0>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c2:	4a31      	ldr	r2, [pc, #196]	@ (8002788 <HAL_ADC_MspInit+0xf0>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002788 <HAL_ADC_MspInit+0xf0>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	4b2b      	ldr	r3, [pc, #172]	@ (8002788 <HAL_ADC_MspInit+0xf0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a2a      	ldr	r2, [pc, #168]	@ (8002788 <HAL_ADC_MspInit+0xf0>)
 80026e0:	f043 0304 	orr.w	r3, r3, #4
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b28      	ldr	r3, [pc, #160]	@ (8002788 <HAL_ADC_MspInit+0xf0>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CYCLIC_PITCH_Pin|CYCLIC_ROLL_Pin;
 80026f2:	2330      	movs	r3, #48	@ 0x30
 80026f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026f6:	2303      	movs	r3, #3
 80026f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 0314 	add.w	r3, r7, #20
 8002702:	4619      	mov	r1, r3
 8002704:	4821      	ldr	r0, [pc, #132]	@ (800278c <HAL_ADC_MspInit+0xf4>)
 8002706:	f002 fa6b 	bl	8004be0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800270a:	4b21      	ldr	r3, [pc, #132]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 800270c:	4a21      	ldr	r2, [pc, #132]	@ (8002794 <HAL_ADC_MspInit+0xfc>)
 800270e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002710:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002712:	2200      	movs	r2, #0
 8002714:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002716:	4b1e      	ldr	r3, [pc, #120]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800271c:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002722:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002724:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002728:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800272a:	4b19      	ldr	r3, [pc, #100]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 800272c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002730:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002734:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002738:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800273a:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 800273c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002740:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002742:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002744:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002748:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 800274c:	2200      	movs	r2, #0
 800274e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002750:	480f      	ldr	r0, [pc, #60]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002752:	f001 fe43 	bl	80043dc <HAL_DMA_Init>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800275c:	f7ff ff4c 	bl	80025f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002764:	639a      	str	r2, [r3, #56]	@ 0x38
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_ADC_MspInit+0xf8>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	2012      	movs	r0, #18
 8002772:	f001 fdae 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002776:	2012      	movs	r0, #18
 8002778:	f001 fdc7 	bl	800430a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800277c:	bf00      	nop
 800277e:	3728      	adds	r7, #40	@ 0x28
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40012000 	.word	0x40012000
 8002788:	40023800 	.word	0x40023800
 800278c:	40020800 	.word	0x40020800
 8002790:	200001d8 	.word	0x200001d8
 8002794:	40026410 	.word	0x40026410

08002798 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0b      	ldr	r2, [pc, #44]	@ (80027d4 <HAL_CRC_MspInit+0x3c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10d      	bne.n	80027c6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_CRC_MspInit+0x40>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <HAL_CRC_MspInit+0x40>)
 80027b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ba:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <HAL_CRC_MspInit+0x40>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40023000 	.word	0x40023000
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002870 <HAL_SPI_MspInit+0x94>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d133      	bne.n	8002866 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <HAL_SPI_MspInit+0x98>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <HAL_SPI_MspInit+0x98>)
 8002808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_SPI_MspInit+0x98>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_SPI_MspInit+0x98>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a14      	ldr	r2, [pc, #80]	@ (8002874 <HAL_SPI_MspInit+0x98>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_SPI_MspInit+0x98>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002836:	2338      	movs	r3, #56	@ 0x38
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002846:	2305      	movs	r3, #5
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4809      	ldr	r0, [pc, #36]	@ (8002878 <HAL_SPI_MspInit+0x9c>)
 8002852:	f002 f9c5 	bl	8004be0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2023      	movs	r0, #35	@ 0x23
 800285c:	f001 fd39 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002860:	2023      	movs	r0, #35	@ 0x23
 8002862:	f001 fd52 	bl	800430a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	@ 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40013000 	.word	0x40013000
 8002874:	40023800 	.word	0x40023800
 8002878:	40020400 	.word	0x40020400

0800287c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08c      	sub	sp, #48	@ 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a45      	ldr	r2, [pc, #276]	@ (80029b0 <HAL_TIM_Base_MspInit+0x134>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	4b44      	ldr	r3, [pc, #272]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a43      	ldr	r2, [pc, #268]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	61bb      	str	r3, [r7, #24]
 80028b8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028ba:	e075      	b.n	80029a8 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3d      	ldr	r2, [pc, #244]	@ (80029b8 <HAL_TIM_Base_MspInit+0x13c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d12d      	bne.n	8002922 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	4b3a      	ldr	r3, [pc, #232]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a39      	ldr	r2, [pc, #228]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a32      	ldr	r2, [pc, #200]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ROLL_STEP_PUL_Pin;
 80028fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002904:	2302      	movs	r3, #2
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002910:	2302      	movs	r3, #2
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ROLL_STEP_PUL_GPIO_Port, &GPIO_InitStruct);
 8002914:	f107 031c 	add.w	r3, r7, #28
 8002918:	4619      	mov	r1, r3
 800291a:	4828      	ldr	r0, [pc, #160]	@ (80029bc <HAL_TIM_Base_MspInit+0x140>)
 800291c:	f002 f960 	bl	8004be0 <HAL_GPIO_Init>
}
 8002920:	e042      	b.n	80029a8 <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM8)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <HAL_TIM_Base_MspInit+0x144>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d13d      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	4a1f      	ldr	r2, [pc, #124]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 8002936:	f043 0302 	orr.w	r3, r3, #2
 800293a:	6453      	str	r3, [r2, #68]	@ 0x44
 800293c:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002950:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6313      	str	r3, [r2, #48]	@ 0x30
 8002958:	4b16      	ldr	r3, [pc, #88]	@ (80029b4 <HAL_TIM_Base_MspInit+0x138>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002976:	2303      	movs	r3, #3
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	4810      	ldr	r0, [pc, #64]	@ (80029c4 <HAL_TIM_Base_MspInit+0x148>)
 8002982:	f002 f92d 	bl	8004be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002986:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002994:	2302      	movs	r3, #2
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002998:	2303      	movs	r3, #3
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4808      	ldr	r0, [pc, #32]	@ (80029c4 <HAL_TIM_Base_MspInit+0x148>)
 80029a4:	f002 f91c 	bl	8004be0 <HAL_GPIO_Init>
}
 80029a8:	bf00      	nop
 80029aa:	3730      	adds	r7, #48	@ 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40000800 	.word	0x40000800
 80029bc:	40020400 	.word	0x40020400
 80029c0:	40010400 	.word	0x40010400
 80029c4:	40020800 	.word	0x40020800

080029c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <HAL_TIM_MspPostInit+0x68>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d11d      	bne.n	8002a26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_TIM_MspPostInit+0x6c>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a10      	ldr	r2, [pc, #64]	@ (8002a34 <HAL_TIM_MspPostInit+0x6c>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002a34 <HAL_TIM_MspPostInit+0x6c>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PITCH_STEP_PUL_Pin;
 8002a06:	2340      	movs	r3, #64	@ 0x40
 8002a08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a16:	2302      	movs	r3, #2
 8002a18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PITCH_STEP_PUL_GPIO_Port, &GPIO_InitStruct);
 8002a1a:	f107 030c 	add.w	r3, r7, #12
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4805      	ldr	r0, [pc, #20]	@ (8002a38 <HAL_TIM_MspPostInit+0x70>)
 8002a22:	f002 f8dd 	bl	8004be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a26:	bf00      	nop
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40000800 	.word	0x40000800
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020400 	.word	0x40020400

08002a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08c      	sub	sp, #48	@ 0x30
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a98      	ldr	r2, [pc, #608]	@ (8002cbc <HAL_UART_MspInit+0x280>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 8092 	bne.w	8002b84 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
 8002a64:	4b96      	ldr	r3, [pc, #600]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	4a95      	ldr	r2, [pc, #596]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002a6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a70:	4b93      	ldr	r3, [pc, #588]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	4a8e      	ldr	r2, [pc, #568]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002a86:	f043 0301 	orr.w	r3, r3, #1
 8002a8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8c:	4b8c      	ldr	r3, [pc, #560]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002aa8:	2308      	movs	r3, #8
 8002aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4884      	ldr	r0, [pc, #528]	@ (8002cc4 <HAL_UART_MspInit+0x288>)
 8002ab4:	f002 f894 	bl	8004be0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002ab8:	4b83      	ldr	r3, [pc, #524]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002aba:	4a84      	ldr	r2, [pc, #528]	@ (8002ccc <HAL_UART_MspInit+0x290>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002abe:	4b82      	ldr	r3, [pc, #520]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002ac0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ac4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac6:	4b80      	ldr	r3, [pc, #512]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002acc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad2:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002ad4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ada:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae0:	4b79      	ldr	r3, [pc, #484]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002ae6:	4b78      	ldr	r3, [pc, #480]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002aec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af4:	4b74      	ldr	r3, [pc, #464]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002afa:	4873      	ldr	r0, [pc, #460]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002afc:	f001 fc6e 	bl	80043dc <HAL_DMA_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002b06:	f7ff fd77 	bl	80025f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b10:	4a6d      	ldr	r2, [pc, #436]	@ (8002cc8 <HAL_UART_MspInit+0x28c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002b16:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b18:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd4 <HAL_UART_MspInit+0x298>)
 8002b1a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8002b1c:	4b6c      	ldr	r3, [pc, #432]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b22:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b24:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b26:	2240      	movs	r2, #64	@ 0x40
 8002b28:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b2a:	4b69      	ldr	r3, [pc, #420]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b30:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b36:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b38:	4b65      	ldr	r3, [pc, #404]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3e:	4b64      	ldr	r3, [pc, #400]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002b44:	4b62      	ldr	r3, [pc, #392]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4a:	4b61      	ldr	r3, [pc, #388]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b50:	4b5f      	ldr	r3, [pc, #380]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002b56:	485e      	ldr	r0, [pc, #376]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b58:	f001 fc40 	bl	80043dc <HAL_DMA_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002b62:	f7ff fd49 	bl	80025f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a59      	ldr	r2, [pc, #356]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b6c:	4a58      	ldr	r2, [pc, #352]	@ (8002cd0 <HAL_UART_MspInit+0x294>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2034      	movs	r0, #52	@ 0x34
 8002b78:	f001 fbab 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b7c:	2034      	movs	r0, #52	@ 0x34
 8002b7e:	f001 fbc4 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b82:	e097      	b.n	8002cb4 <HAL_UART_MspInit+0x278>
  else if(huart->Instance==USART3)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a53      	ldr	r2, [pc, #332]	@ (8002cd8 <HAL_UART_MspInit+0x29c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	f040 8092 	bne.w	8002cb4 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	4b4a      	ldr	r3, [pc, #296]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	4a49      	ldr	r2, [pc, #292]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba0:	4b47      	ldr	r3, [pc, #284]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bac:	2300      	movs	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	4b43      	ldr	r3, [pc, #268]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	4a42      	ldr	r2, [pc, #264]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002bb6:	f043 0304 	orr.w	r3, r3, #4
 8002bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbc:	4b40      	ldr	r3, [pc, #256]	@ (8002cc0 <HAL_UART_MspInit+0x284>)
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bda:	2307      	movs	r3, #7
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	483d      	ldr	r0, [pc, #244]	@ (8002cdc <HAL_UART_MspInit+0x2a0>)
 8002be6:	f001 fffb 	bl	8004be0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002bec:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce4 <HAL_UART_MspInit+0x2a8>)
 8002bee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002bf2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bf6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bf8:	4b39      	ldr	r3, [pc, #228]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bfe:	4b38      	ldr	r3, [pc, #224]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c04:	4b36      	ldr	r3, [pc, #216]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002c18:	4b31      	ldr	r3, [pc, #196]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c1a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c20:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c2c:	482c      	ldr	r0, [pc, #176]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c2e:	f001 fbd5 	bl	80043dc <HAL_DMA_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_UART_MspInit+0x200>
      Error_Handler();
 8002c38:	f7ff fcde 	bl	80025f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a28      	ldr	r2, [pc, #160]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c42:	4a27      	ldr	r2, [pc, #156]	@ (8002ce0 <HAL_UART_MspInit+0x2a4>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002c48:	4b27      	ldr	r3, [pc, #156]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c4a:	4a28      	ldr	r2, [pc, #160]	@ (8002cec <HAL_UART_MspInit+0x2b0>)
 8002c4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c50:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c54:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c56:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5c:	4b22      	ldr	r3, [pc, #136]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c62:	4b21      	ldr	r3, [pc, #132]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c68:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c76:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c82:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c88:	4817      	ldr	r0, [pc, #92]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c8a:	f001 fba7 	bl	80043dc <HAL_DMA_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8002c94:	f7ff fcb0 	bl	80025f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ce8 <HAL_UART_MspInit+0x2ac>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2027      	movs	r0, #39	@ 0x27
 8002caa:	f001 fb12 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002cae:	2027      	movs	r0, #39	@ 0x27
 8002cb0:	f001 fb2b 	bl	800430a <HAL_NVIC_EnableIRQ>
}
 8002cb4:	bf00      	nop
 8002cb6:	3730      	adds	r7, #48	@ 0x30
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40004c00 	.word	0x40004c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	20000400 	.word	0x20000400
 8002ccc:	40026040 	.word	0x40026040
 8002cd0:	20000460 	.word	0x20000460
 8002cd4:	40026070 	.word	0x40026070
 8002cd8:	40004800 	.word	0x40004800
 8002cdc:	40020800 	.word	0x40020800
 8002ce0:	200004c0 	.word	0x200004c0
 8002ce4:	40026028 	.word	0x40026028
 8002ce8:	20000520 	.word	0x20000520
 8002cec:	40026058 	.word	0x40026058

08002cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <NMI_Handler+0x4>

08002cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <HardFault_Handler+0x4>

08002d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <MemManage_Handler+0x4>

08002d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <BusFault_Handler+0x4>

08002d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <UsageFault_Handler+0x4>

08002d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d26:	b480      	push	{r7}
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d46:	f000 fc79 	bl	800363c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_CAL_Pin);
 8002d52:	2008      	movs	r0, #8
 8002d54:	f002 f92c 	bl	8004fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d60:	4802      	ldr	r0, [pc, #8]	@ (8002d6c <DMA1_Stream1_IRQHandler+0x10>)
 8002d62:	f001 fcd3 	bl	800470c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200004c0 	.word	0x200004c0

08002d70 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <DMA1_Stream2_IRQHandler+0x10>)
 8002d76:	f001 fcc9 	bl	800470c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000400 	.word	0x20000400

08002d84 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d88:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <DMA1_Stream3_IRQHandler+0x10>)
 8002d8a:	f001 fcbf 	bl	800470c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000520 	.word	0x20000520

08002d98 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <DMA1_Stream4_IRQHandler+0x10>)
 8002d9e:	f001 fcb5 	bl	800470c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000460 	.word	0x20000460

08002dac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <ADC_IRQHandler+0x10>)
 8002db2:	f000 fcca 	bl	800374a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000190 	.word	0x20000190

08002dc0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <SPI1_IRQHandler+0x10>)
 8002dc6:	f004 fc6d 	bl	80076a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000240 	.word	0x20000240

08002dd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dd8:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <USART3_IRQHandler+0x10>)
 8002dda:	f006 f809 	bl	8008df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200003b8 	.word	0x200003b8

08002de8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002dec:	4802      	ldr	r0, [pc, #8]	@ (8002df8 <UART4_IRQHandler+0x10>)
 8002dee:	f005 ffff 	bl	8008df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000370 	.word	0x20000370

08002dfc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e00:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <DMA2_Stream0_IRQHandler+0x10>)
 8002e02:	f001 fc83 	bl	800470c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200001d8 	.word	0x200001d8

08002e10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <OTG_FS_IRQHandler+0x10>)
 8002e16:	f002 fa27 	bl	8005268 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000b1c 	.word	0x20000b1c

08002e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e2c:	4a14      	ldr	r2, [pc, #80]	@ (8002e80 <_sbrk+0x5c>)
 8002e2e:	4b15      	ldr	r3, [pc, #84]	@ (8002e84 <_sbrk+0x60>)
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e38:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <_sbrk+0x64>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	@ (8002e8c <_sbrk+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d207      	bcs.n	8002e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e54:	f00a ff7a 	bl	800dd4c <__errno>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e62:	e009      	b.n	8002e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e64:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6a:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <_sbrk+0x64>)
 8002e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20020000 	.word	0x20020000
 8002e84:	00000400 	.word	0x00000400
 8002e88:	20000610 	.word	0x20000610
 8002e8c:	200011a0 	.word	0x200011a0

08002e90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <SystemInit+0x20>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <SystemInit+0x20>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <uart_init>:
/*
static void uart_dma_tx_callback(uart_handle_t* uart);
static void uart_dma_rx_callback(uart_handle_t* uart, uint16_t* new_index);
*/

uart_status_t uart_init(uart_handle_t* uart, UART_HandleTypeDef* h_uart){
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]

	uart->instance_id = uart_register_instance(uart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f862 	bl	8002f88 <uart_register_instance>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	711a      	strb	r2, [r3, #4]
	if(h_uart == NULL || uart->instance_id == NULL_UART_INST)	{
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <uart_init+0x26>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	2bff      	cmp	r3, #255	@ 0xff
 8002ed8:	d105      	bne.n	8002ee6 <uart_init+0x32>
		uart->status = UART_INIT_FAIL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	715a      	strb	r2, [r3, #5]
		return uart->status;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	795b      	ldrb	r3, [r3, #5]
 8002ee4:	e04c      	b.n	8002f80 <uart_init+0xcc>
	}

	uart->huart = h_uart;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	601a      	str	r2, [r3, #0]
	uart->unread_bytes = 0;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	uart->tx_busy = 0;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	719a      	strb	r2, [r3, #6]
	uart->tx_remaining = 0;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
	uart->tx_size = 0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
	memset(uart->rx_buffer, 0, UART_BUFFER_SIZE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3310      	adds	r3, #16
 8002f0a:	2280      	movs	r2, #128	@ 0x80
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f00a ff14 	bl	800dd3c <memset>
	memset(uart->tx_buffer, 0, UART_BUFFER_SIZE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3390      	adds	r3, #144	@ 0x90
 8002f18:	2280      	movs	r2, #128	@ 0x80
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00a ff0d 	bl	800dd3c <memset>
	fifo_init(&uart->rx_fifo, uart->rx_buffer, UART_BUFFER_SIZE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3310      	adds	r3, #16
 8002f2c:	2280      	movs	r2, #128	@ 0x80
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7fd ff26 	bl	8000d80 <fifo_init>
	fifo_init(&uart->tx_fifo, uart->tx_buffer, UART_BUFFER_SIZE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	3390      	adds	r3, #144	@ 0x90
 8002f3e:	2280      	movs	r2, #128	@ 0x80
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd ff1d 	bl	8000d80 <fifo_init>
	memset(uart->dma_buffer, 0, DMA_BUF_SIZE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8002f4c:	2280      	movs	r2, #128	@ 0x80
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f00a fef3 	bl	800dd3c <memset>
	uart->dma_index = 0;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    uart->rxlock = false;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
	HAL_UARTEx_ReceiveToIdle_DMA(h_uart, uart->dma_buffer, DMA_BUF_SIZE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8002f6c:	2280      	movs	r2, #128	@ 0x80
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f005 fedf 	bl	8008d34 <HAL_UARTEx_ReceiveToIdle_DMA>
	uart->status = UART_OK;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	715a      	strb	r2, [r3, #5]
	return uart->status;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	795b      	ldrb	r3, [r3, #5]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <uart_register_instance>:

uint8_t uart_register_instance(uart_handle_t* uart)	{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

	for(uint8_t i =0; i < MAX_UART_COUNT; i++){
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
 8002f94:	e020      	b.n	8002fd8 <uart_register_instance+0x50>
		if(!(uart_instance_id & (1<<i)))	{
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <uart_register_instance+0x64>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	fa42 f303 	asr.w	r3, r2, r3
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d113      	bne.n	8002fd2 <uart_register_instance+0x4a>
				uart_instance_id |= (1<<i);
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2201      	movs	r2, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	b25a      	sxtb	r2, r3
 8002fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002fec <uart_register_instance+0x64>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	b25b      	sxtb	r3, r3
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <uart_register_instance+0x64>)
 8002fc2:	701a      	strb	r2, [r3, #0]
				uart_instances[i] = uart;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	490a      	ldr	r1, [pc, #40]	@ (8002ff0 <uart_register_instance+0x68>)
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return i;
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	e006      	b.n	8002fe0 <uart_register_instance+0x58>
	for(uint8_t i =0; i < MAX_UART_COUNT; i++){
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b07      	cmp	r3, #7
 8002fdc:	d9db      	bls.n	8002f96 <uart_register_instance+0xe>
			}
	}
	return NULL_UART_INST;
 8002fde:	23ff      	movs	r3, #255	@ 0xff
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000634 	.word	0x20000634
 8002ff0:	20000614 	.word	0x20000614

08002ff4 <uart_update>:

void uart_unregister_instance(uart_handle_t* uart){
	uart_instance_id = uart_instance_id & ~(1<<uart->instance_id);
}

uart_status_t uart_update(uart_handle_t* uart){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

	uart->unread_bytes = fifo_bytes_available(&uart->rx_fifo);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fed8 	bl	8000db8 <fifo_bytes_available>
 8003008:	4602      	mov	r2, r0
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	if(uart->unread_bytes > UART_BUFFER_SIZE)	{
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8003016:	2b80      	cmp	r3, #128	@ 0x80
 8003018:	d902      	bls.n	8003020 <uart_update+0x2c>
		uart->status = UART_RX_FULL;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2205      	movs	r2, #5
 800301e:	715a      	strb	r2, [r3, #5]
	}
	if(uart->tx_remaining > 0 && uart->tx_busy != true){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
		}
		uart->unread_bytes += ret;
	}

*/
	return uart->status;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	795b      	ldrb	r3, [r3, #5]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <uart_write_packet>:
		uart->tx_waiting = true;
	}
	return ret;
}

uint32_t uart_write_packet(uart_handle_t* uart, com_packet_t* packet)	{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	6039      	str	r1, [r7, #0]
	uint32_t ret = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
	memset(uart->tx_buffer, 0, packet->packet_size.value);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	461a      	mov	r2, r3
 800304c:	2100      	movs	r1, #0
 800304e:	f00a fe75 	bl	800dd3c <memset>
	uart->tx_buffer[0]	= packet->version;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	uart->tx_buffer[1]	= packet->packet_type;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	785a      	ldrb	r2, [r3, #1]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	uart->tx_buffer[2]	= packet->payload_length;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	789a      	ldrb	r2, [r3, #2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	uart->tx_buffer[3]	= packet->padding;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	78da      	ldrb	r2, [r3, #3]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	memcpy(&uart->tx_buffer[4], packet->packet_size.bytes, sizeof(uint32_t));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3394      	adds	r3, #148	@ 0x94
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	3204      	adds	r2, #4
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	601a      	str	r2, [r3, #0]
	memcpy(&uart->tx_buffer[8], packet->crc32.bytes, sizeof(uint32_t));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3398      	adds	r3, #152	@ 0x98
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	3208      	adds	r2, #8
 800308e:	6812      	ldr	r2, [r2, #0]
 8003090:	601a      	str	r2, [r3, #0]
	//u32_to_u8(packet->packet_size.value, &temp[4]);
	//u32_to_u8(packet->crc32.value, &temp[8]);
	memcpy(&uart->tx_buffer[12],packet->payload,packet->payload_length);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f103 010c 	add.w	r1, r3, #12
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	789b      	ldrb	r3, [r3, #2]
 80030a2:	461a      	mov	r2, r3
 80030a4:	f00a fe7e 	bl	800dda4 <memcpy>
	if(!(uart->tx_busy)){
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	799b      	ldrb	r3, [r3, #6]
 80030ac:	f083 0301 	eor.w	r3, r3, #1
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00d      	beq.n	80030d2 <uart_write_packet+0xa0>
		uart->tx_busy = 1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	719a      	strb	r2, [r3, #6]
		//ret = fifo_write(&uart->tx_fifo, uart->tx_buffer, packet->packet_size.value);
		HAL_UART_Transmit_DMA(uart->huart, uart->tx_buffer, packet->packet_size.value);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	f005 fdc1 	bl	8008c54 <HAL_UART_Transmit_DMA>
	}
	return ret;
 80030d2:	68fb      	ldr	r3, [r7, #12]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <get_uart_handle>:

uart_handle_t* get_uart_handle(UART_HandleTypeDef* huart)	{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i < MAX_UART_COUNT; i++)	{
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e00f      	b.n	800310a <get_uart_handle+0x2e>
		if(huart==uart_instances[i]->huart){
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	4a0c      	ldr	r2, [pc, #48]	@ (8003120 <get_uart_handle+0x44>)
 80030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d104      	bne.n	8003104 <get_uart_handle+0x28>
			return uart_instances[i];
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	4a08      	ldr	r2, [pc, #32]	@ (8003120 <get_uart_handle+0x44>)
 80030fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003102:	e006      	b.n	8003112 <get_uart_handle+0x36>
	for(uint8_t i=0; i < MAX_UART_COUNT; i++)	{
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	3301      	adds	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b07      	cmp	r3, #7
 800310e:	d9ec      	bls.n	80030ea <get_uart_handle+0xe>
		}
	}
	return (uart_handle_t*)NULL_UART_INST;
 8003110:	23ff      	movs	r3, #255	@ 0xff
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000614 	.word	0x20000614

08003124 <HAL_UARTEx_RxEventCallback>:
		HAL_UARTEx_ReceiveToIdle_DMA(uart->huart, uart->dma_buffer, DMA_BUF_SIZE);
	}
}
*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]

	switch(huart->RxEventType)	{
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_UARTEx_RxEventCallback+0x1a>
 8003138:	2b01      	cmp	r3, #1
 800313a:	d138      	bne.n	80031ae <HAL_UARTEx_RxEventCallback+0x8a>
		case HAL_UART_RXEVENT_HT:	{
			// Do nothing
			break;
 800313c:	e0af      	b.n	800329e <HAL_UARTEx_RxEventCallback+0x17a>
		}
		case HAL_UART_RXEVENT_TC:	{
            uart_handle_t* uart = get_uart_handle(huart);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ffcc 	bl	80030dc <get_uart_handle>
 8003144:	6138      	str	r0, [r7, #16]
            if(uart != NULL)	{
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80a7 	beq.w	800329c <HAL_UARTEx_RxEventCallback+0x178>
                if(!uart->rxlock&&uart->dma_index!=DMA_BUF_SIZE)   {
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8003154:	f083 0301 	eor.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 809e 	beq.w	800329c <HAL_UARTEx_RxEventCallback+0x178>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003166:	2b80      	cmp	r3, #128	@ 0x80
 8003168:	f000 8098 	beq.w	800329c <HAL_UARTEx_RxEventCallback+0x178>
                      uart->rxlock = true;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                      uint32_t new_bytes = fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (DMA_BUF_SIZE - uart->dma_index));
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003180:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	1c59      	adds	r1, r3, #1
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003190:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003194:	461a      	mov	r2, r3
 8003196:	f7fd fe2d 	bl	8000df4 <fifo_write>
 800319a:	60f8      	str	r0, [r7, #12]
                      uart->dma_index = Size;
 800319c:	887a      	ldrh	r2, [r7, #2]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
                     uart->rxlock = false;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                 }
              }
			break;
 80031ac:	e076      	b.n	800329c <HAL_UARTEx_RxEventCallback+0x178>
		}
		default:	{
			uart_handle_t* uart = get_uart_handle(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ff94 	bl	80030dc <get_uart_handle>
 80031b4:	60b8      	str	r0, [r7, #8]
            if(uart != NULL)	{
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d070      	beq.n	800329e <HAL_UARTEx_RxEventCallback+0x17a>
                if(!uart->rxlock)   {
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d068      	beq.n	800329e <HAL_UARTEx_RxEventCallback+0x17a>
                    uart->rxlock = true;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                    uint32_t new_bytes = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
                    if(Size !=0)	{
 80031d8:	887b      	ldrh	r3, [r7, #2]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d059      	beq.n	8003292 <HAL_UARTEx_RxEventCallback+0x16e>
                        if(Size > uart->dma_index){
 80031de:	887a      	ldrh	r2, [r7, #2]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d91f      	bls.n	800322a <HAL_UARTEx_RxEventCallback+0x106>
                            new_bytes += fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (Size - uart->dma_index));
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 80031f6:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	4413      	add	r3, r2
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	887a      	ldrh	r2, [r7, #2]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	461a      	mov	r2, r3
 800320c:	f7fd fdf2 	bl	8000df4 <fifo_write>
 8003210:	4602      	mov	r2, r0
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4413      	add	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
                            uart->dma_index += new_bytes;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	441a      	add	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 8003228:	e033      	b.n	8003292 <HAL_UARTEx_RxEventCallback+0x16e>
                        }
                        else if(Size <= uart->dma_index){
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8003232:	429a      	cmp	r2, r3
 8003234:	d82d      	bhi.n	8003292 <HAL_UARTEx_RxEventCallback+0x16e>
                            if(uart->dma_index < DMA_BUF_SIZE)	{
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800323c:	2b7f      	cmp	r3, #127	@ 0x7f
 800323e:	d816      	bhi.n	800326e <HAL_UARTEx_RxEventCallback+0x14a>
                            	new_bytes += fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (DMA_BUF_SIZE - uart->dma_index));
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800324c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	4413      	add	r3, r2
 8003254:	1c59      	adds	r1, r3, #1
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800325c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003260:	461a      	mov	r2, r3
 8003262:	f7fd fdc7 	bl	8000df4 <fifo_write>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	4413      	add	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
                            }
                            new_bytes += fifo_write(&uart->rx_fifo, uart->dma_buffer, Size);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f203 1339 	addw	r3, r3, #313	@ 0x139
 800327a:	887a      	ldrh	r2, [r7, #2]
 800327c:	4619      	mov	r1, r3
 800327e:	f7fd fdb9 	bl	8000df4 <fifo_write>
 8003282:	4602      	mov	r2, r0
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4413      	add	r3, r2
 8003288:	617b      	str	r3, [r7, #20]
                            uart->dma_index = Size;
 800328a:	887a      	ldrh	r2, [r7, #2]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
                        }
                    }
                    uart->rxlock = false;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                }
            }
		}
	}
}
 800329a:	e000      	b.n	800329e <HAL_UARTEx_RxEventCallback+0x17a>
			break;
 800329c:	bf00      	nop
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)	{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
	uart_handle_t* uart = get_uart_handle(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff14 	bl	80030dc <get_uart_handle>
 80032b4:	60f8      	str	r0, [r7, #12]
	if(uart != NULL)	{
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d054      	beq.n	8003366 <HAL_UART_TxCpltCallback+0xc0>

		if(uart->tx_waiting == false)	{
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	79db      	ldrb	r3, [r3, #7]
 80032c0:	f083 0301 	eor.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00f      	beq.n	80032ea <HAL_UART_TxCpltCallback+0x44>
			//fifo_flush_unread(&uart->tx_fifo);
			fifo_push_read_index(&uart->tx_fifo, uart->tx_size);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4619      	mov	r1, r3
 80032d6:	4610      	mov	r0, r2
 80032d8:	f7fd fe02 	bl	8000ee0 <fifo_push_read_index>
			uart->tx_remaining = 0;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
			uart->tx_busy = 0;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	719a      	strb	r2, [r3, #6]
			else	{
				uart->tx_busy = false;
			}
		}
	}
}
 80032e8:	e03d      	b.n	8003366 <HAL_UART_TxCpltCallback+0xc0>
			fifo_push_read_index(&uart->tx_fifo, uart->tx_size);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fd fdf2 	bl	8000ee0 <fifo_push_read_index>
			if(uart->tx_remaining > UART_BUFFER_SIZE - uart->tx_fifo.read_index)	{
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003306:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800330a:	429a      	cmp	r2, r3
 800330c:	d907      	bls.n	800331e <HAL_UART_TxCpltCallback+0x78>
				uart->tx_size = UART_BUFFER_SIZE - uart->tx_fifo.read_index;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003314:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	60da      	str	r2, [r3, #12]
 800331c:	e006      	b.n	800332c <HAL_UART_TxCpltCallback+0x86>
				uart->tx_size = uart->tx_remaining;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	60da      	str	r2, [r3, #12]
				uart->tx_waiting = false;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	71da      	strb	r2, [r3, #7]
			uart->tx_remaining -= uart->tx_size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	1ad2      	subs	r2, r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	609a      	str	r2, [r3, #8]
			if(uart->tx_size>0)	{
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00e      	beq.n	8003360 <HAL_UART_TxCpltCallback+0xba>
				HAL_UART_Transmit_DMA(uart->huart, &uart->tx_buffer[uart->tx_fifo.read_index], uart->tx_size);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800334c:	3390      	adds	r3, #144	@ 0x90
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	18d1      	adds	r1, r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	b29b      	uxth	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	f005 fc7b 	bl	8008c54 <HAL_UART_Transmit_DMA>
}
 800335e:	e002      	b.n	8003366 <HAL_UART_TxCpltCallback+0xc0>
				uart->tx_busy = false;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	719a      	strb	r2, [r3, #6]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <cs_enable>:
 *      Author: zuidec
 */

#include "w25q16jv.h"

static void cs_enable(w25q16_handle_t* flash_dev)	{
 800336e:	b580      	push	{r7, lr}
 8003370:	b082      	sub	sp, #8
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash_dev->cs_port, flash_dev->cs_pin, GPIO_PIN_RESET);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6858      	ldr	r0, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	b29b      	uxth	r3, r3
 8003380:	2200      	movs	r2, #0
 8003382:	4619      	mov	r1, r3
 8003384:	f001 fde0 	bl	8004f48 <HAL_GPIO_WritePin>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <cs_release>:

static void cs_release(w25q16_handle_t* flash_dev)	{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash_dev->cs_port, flash_dev->cs_pin, GPIO_PIN_SET);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6858      	ldr	r0, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2201      	movs	r2, #1
 80033a4:	4619      	mov	r1, r3
 80033a6:	f001 fdcf 	bl	8004f48 <HAL_GPIO_WritePin>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <w25q16_read>:

void w25q16_read(w25q16_handle_t* flash_dev, uint32_t address, uint8_t* buffer, uint8_t buffer_size)	{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	70fb      	strb	r3, [r7, #3]
	uint8_t data[4] = {W25Q16_READ_DATA, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 80033c0:	2303      	movs	r3, #3
 80033c2:	753b      	strb	r3, [r7, #20]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	757b      	strb	r3, [r7, #21]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	75bb      	strb	r3, [r7, #22]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	75fb      	strb	r3, [r7, #23]
	cs_enable(flash_dev);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff ffc7 	bl	800336e <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data),W25Q16_SPI_TIMEOUT);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	f107 0114 	add.w	r1, r7, #20
 80033e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80033ec:	2204      	movs	r2, #4
 80033ee:	f003 fd52 	bl	8006e96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(flash_dev->spi, buffer, buffer_size, W25Q16_SPI_TIMEOUT);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	78fb      	ldrb	r3, [r7, #3]
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	f003 fe8d 	bl	800711e <HAL_SPI_Receive>
	cs_release(flash_dev);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ffc3 	bl	8003390 <cs_release>
}
 800340a:	bf00      	nop
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <w25q16_write>:

void w25q16_write(w25q16_handle_t* flash_dev, uint32_t address, uint8_t* buffer, uint8_t bytes_to_write)	{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	70fb      	strb	r3, [r7, #3]
	uint8_t data[4] = {W25Q16_PAGE_PROGRAM, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 8003420:	2302      	movs	r3, #2
 8003422:	753b      	strb	r3, [r7, #20]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2db      	uxtb	r3, r3
 800342a:	757b      	strb	r3, [r7, #21]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	b2db      	uxtb	r3, r3
 8003432:	75bb      	strb	r3, [r7, #22]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	75fb      	strb	r3, [r7, #23]
	w25q16_enable_write(flash_dev);
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f81c 	bl	8003478 <w25q16_enable_write>
	cs_enable(flash_dev);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff ff94 	bl	800336e <cs_enable>
	if(bytes_to_write > 256){
		HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
		HAL_SPI_Transmit(flash_dev->spi, buffer, 256, W25Q16_SPI_TIMEOUT);
	}
	else 	{
		HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	f107 0114 	add.w	r1, r7, #20
 800344e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003452:	2204      	movs	r2, #4
 8003454:	f003 fd1f 	bl	8006e96 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(flash_dev->spi, buffer, bytes_to_write, W25Q16_SPI_TIMEOUT);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	b29a      	uxth	r2, r3
 8003460:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	f003 fd16 	bl	8006e96 <HAL_SPI_Transmit>
	}
	cs_release(flash_dev);
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f7ff ff90 	bl	8003390 <cs_release>
	// Write is disabled by chip once programming page is complete
}
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <w25q16_enable_write>:

void w25q16_enable_write(w25q16_handle_t* flash_dev)	{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	uint8_t data = (uint8_t)W25Q16_WRITE_ENABLE;
 8003480:	2306      	movs	r3, #6
 8003482:	73fb      	strb	r3, [r7, #15]
	cs_enable(flash_dev);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff72 	bl	800336e <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	f107 010f 	add.w	r1, r7, #15
 8003492:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003496:	2201      	movs	r2, #1
 8003498:	f003 fcfd 	bl	8006e96 <HAL_SPI_Transmit>
	cs_release(flash_dev);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff77 	bl	8003390 <cs_release>
}
 80034a2:	bf00      	nop
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <w25q16_sector_erase_4k>:
	cs_enable(flash_dev);
	HAL_SPI_Transmit(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
	cs_release(flash_dev);
}

void w25q16_sector_erase_4k(w25q16_handle_t* flash_dev, uint32_t address)	{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b084      	sub	sp, #16
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
	uint8_t data[4] = {W25Q16_SECTOR_ERASE_4K, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 80034b4:	2320      	movs	r3, #32
 80034b6:	733b      	strb	r3, [r7, #12]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	0c1b      	lsrs	r3, r3, #16
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	737b      	strb	r3, [r7, #13]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73bb      	strb	r3, [r7, #14]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	73fb      	strb	r3, [r7, #15]
	w25q16_enable_write(flash_dev);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7ff ffd2 	bl	8003478 <w25q16_enable_write>
	cs_enable(flash_dev);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff4a 	bl	800336e <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	f107 010c 	add.w	r1, r7, #12
 80034e2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80034e6:	2204      	movs	r2, #4
 80034e8:	f003 fcd5 	bl	8006e96 <HAL_SPI_Transmit>
	cs_release(flash_dev);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff4f 	bl	8003390 <cs_release>
	// Write is disabled by chip once erase is complete

}
 80034f2:	bf00      	nop
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <w25q16_read_SR1>:

void w25q16_block_erase_64k(w25q16_handle_t* flash_dev, uint32_t address)	{

}

uint8_t w25q16_read_SR1(w25q16_handle_t* flash_dev)	{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
	uint8_t payload = W25Q16_READ_SR1;
 8003506:	2305      	movs	r3, #5
 8003508:	73bb      	strb	r3, [r7, #14]
	cs_enable(flash_dev);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ff2f 	bl	800336e <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, &payload, sizeof(payload),W25Q16_SPI_TIMEOUT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	f107 010e 	add.w	r1, r7, #14
 8003518:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800351c:	2201      	movs	r2, #1
 800351e:	f003 fcba 	bl	8006e96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	f107 010f 	add.w	r1, r7, #15
 800352a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800352e:	2201      	movs	r2, #1
 8003530:	f003 fdf5 	bl	800711e <HAL_SPI_Receive>
	cs_release(flash_dev);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f7ff ff2b 	bl	8003390 <cs_release>

	return data;
 800353a:	7bfb      	ldrb	r3, [r7, #15]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003544:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800357c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003548:	f7ff fca2 	bl	8002e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800354c:	480c      	ldr	r0, [pc, #48]	@ (8003580 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800354e:	490d      	ldr	r1, [pc, #52]	@ (8003584 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003550:	4a0d      	ldr	r2, [pc, #52]	@ (8003588 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003554:	e002      	b.n	800355c <LoopCopyDataInit>

08003556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800355a:	3304      	adds	r3, #4

0800355c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800355c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800355e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003560:	d3f9      	bcc.n	8003556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003562:	4a0a      	ldr	r2, [pc, #40]	@ (800358c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003564:	4c0a      	ldr	r4, [pc, #40]	@ (8003590 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003568:	e001      	b.n	800356e <LoopFillZerobss>

0800356a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800356a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800356c:	3204      	adds	r2, #4

0800356e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800356e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003570:	d3fb      	bcc.n	800356a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003572:	f00a fbf1 	bl	800dd58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003576:	f7fd fd45 	bl	8001004 <main>
  bx  lr    
 800357a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800357c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003580:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003584:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8003588:	0800e720 	.word	0x0800e720
  ldr r2, =_sbss
 800358c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8003590:	200011a0 	.word	0x200011a0

08003594 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003594:	e7fe      	b.n	8003594 <CAN1_RX0_IRQHandler>
	...

08003598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800359c:	4b0e      	ldr	r3, [pc, #56]	@ (80035d8 <HAL_Init+0x40>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0d      	ldr	r2, [pc, #52]	@ (80035d8 <HAL_Init+0x40>)
 80035a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_Init+0x40>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <HAL_Init+0x40>)
 80035ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b4:	4b08      	ldr	r3, [pc, #32]	@ (80035d8 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a07      	ldr	r2, [pc, #28]	@ (80035d8 <HAL_Init+0x40>)
 80035ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c0:	2003      	movs	r0, #3
 80035c2:	f000 fe7b 	bl	80042bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035c6:	200f      	movs	r0, #15
 80035c8:	f000 f808 	bl	80035dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035cc:	f7ff f83c 	bl	8002648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40023c00 	.word	0x40023c00

080035dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_InitTick+0x54>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_InitTick+0x58>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4619      	mov	r1, r3
 80035ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fe93 	bl	8004326 <HAL_SYSTICK_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e00e      	b.n	8003628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0f      	cmp	r3, #15
 800360e:	d80a      	bhi.n	8003626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003610:	2200      	movs	r2, #0
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003618:	f000 fe5b 	bl	80042d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800361c:	4a06      	ldr	r2, [pc, #24]	@ (8003638 <HAL_InitTick+0x5c>)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	e000      	b.n	8003628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000000c 	.word	0x2000000c
 8003634:	20000014 	.word	0x20000014
 8003638:	20000010 	.word	0x20000010

0800363c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003640:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_IncTick+0x20>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	461a      	mov	r2, r3
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_IncTick+0x24>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4413      	add	r3, r2
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_IncTick+0x24>)
 800364e:	6013      	str	r3, [r2, #0]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20000014 	.word	0x20000014
 8003660:	20000638 	.word	0x20000638

08003664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return uwTick;
 8003668:	4b03      	ldr	r3, [pc, #12]	@ (8003678 <HAL_GetTick+0x14>)
 800366a:	681b      	ldr	r3, [r3, #0]
}
 800366c:	4618      	mov	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	20000638 	.word	0x20000638

0800367c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff ffee 	bl	8003664 <HAL_GetTick>
 8003688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003694:	d005      	beq.n	80036a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <HAL_Delay+0x44>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036a2:	bf00      	nop
 80036a4:	f7ff ffde 	bl	8003664 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d8f7      	bhi.n	80036a4 <HAL_Delay+0x28>
  {
  }
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000014 	.word	0x20000014

080036c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e033      	b.n	8003742 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fe ffd8 	bl	8002698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800370a:	f023 0302 	bic.w	r3, r3, #2
 800370e:	f043 0202 	orr.w	r2, r3, #2
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fb78 	bl	8003e0c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	f023 0303 	bic.w	r3, r3, #3
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40
 8003732:	e001      	b.n	8003738 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d049      	beq.n	8003814 <HAL_ADC_IRQHandler+0xca>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d046      	beq.n	8003814 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	f003 0310 	and.w	r3, r3, #16
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d12b      	bne.n	8003804 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d127      	bne.n	8003804 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d119      	bne.n	8003804 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0220 	bic.w	r2, r2, #32
 80037de:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fe fb4b 	bl	8001ea0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0212 	mvn.w	r2, #18
 8003812:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d057      	beq.n	80038da <HAL_ADC_IRQHandler+0x190>
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d054      	beq.n	80038da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	f003 0310 	and.w	r3, r3, #16
 8003838:	2b00      	cmp	r3, #0
 800383a:	d105      	bne.n	8003848 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003840:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d139      	bne.n	80038ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	d006      	beq.n	8003872 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d12b      	bne.n	80038ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	d124      	bne.n	80038ca <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11d      	bne.n	80038ca <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038a4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fc1c 	bl	8004108 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f06f 020c 	mvn.w	r2, #12
 80038d8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_ADC_IRQHandler+0x1d6>
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d014      	beq.n	8003920 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10d      	bne.n	8003920 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f945 	bl	8003ba0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f06f 0201 	mvn.w	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800392e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d015      	beq.n	8003962 <HAL_ADC_IRQHandler+0x218>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	f043 0202 	orr.w	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0220 	mvn.w	r2, #32
 8003950:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f92e 	bl	8003bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0220 	mvn.w	r2, #32
 8003960:	601a      	str	r2, [r3, #0]
  }
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_ADC_Start_DMA+0x1e>
 8003986:	2302      	movs	r3, #2
 8003988:	e0e9      	b.n	8003b5e <HAL_ADC_Start_DMA+0x1f2>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d018      	beq.n	80039d2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b68 <HAL_ADC_Start_DMA+0x1fc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a6d      	ldr	r2, [pc, #436]	@ (8003b6c <HAL_ADC_Start_DMA+0x200>)
 80039b6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ba:	0c9a      	lsrs	r2, r3, #18
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80039c4:	e002      	b.n	80039cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039e0:	d107      	bne.n	80039f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039f0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	f040 80a1 	bne.w	8003b44 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d007      	beq.n	8003a34 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a40:	d106      	bne.n	8003a50 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f023 0206 	bic.w	r2, r3, #6
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a5e:	4b44      	ldr	r3, [pc, #272]	@ (8003b70 <HAL_ADC_Start_DMA+0x204>)
 8003a60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a66:	4a43      	ldr	r2, [pc, #268]	@ (8003b74 <HAL_ADC_Start_DMA+0x208>)
 8003a68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6e:	4a42      	ldr	r2, [pc, #264]	@ (8003b78 <HAL_ADC_Start_DMA+0x20c>)
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a76:	4a41      	ldr	r2, [pc, #260]	@ (8003b7c <HAL_ADC_Start_DMA+0x210>)
 8003a78:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003a82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003a92:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aa2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	334c      	adds	r3, #76	@ 0x4c
 8003aae:	4619      	mov	r1, r3
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f000 fd40 	bl	8004538 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d12a      	bne.n	8003b1a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b80 <HAL_ADC_Start_DMA+0x214>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d015      	beq.n	8003afa <HAL_ADC_Start_DMA+0x18e>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8003b84 <HAL_ADC_Start_DMA+0x218>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d105      	bne.n	8003ae4 <HAL_ADC_Start_DMA+0x178>
 8003ad8:	4b25      	ldr	r3, [pc, #148]	@ (8003b70 <HAL_ADC_Start_DMA+0x204>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a27      	ldr	r2, [pc, #156]	@ (8003b88 <HAL_ADC_Start_DMA+0x21c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d136      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
 8003aee:	4b20      	ldr	r3, [pc, #128]	@ (8003b70 <HAL_ADC_Start_DMA+0x204>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d130      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d129      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	e020      	b.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a18      	ldr	r2, [pc, #96]	@ (8003b80 <HAL_ADC_Start_DMA+0x214>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d11b      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d114      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	e00b      	b.n	8003b5c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	f043 0210 	orr.w	r2, r3, #16
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	f043 0201 	orr.w	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	2000000c 	.word	0x2000000c
 8003b6c:	431bde83 	.word	0x431bde83
 8003b70:	40012300 	.word	0x40012300
 8003b74:	08004005 	.word	0x08004005
 8003b78:	080040bf 	.word	0x080040bf
 8003b7c:	080040db 	.word	0x080040db
 8003b80:	40012000 	.word	0x40012000
 8003b84:	40012100 	.word	0x40012100
 8003b88:	40012200 	.word	0x40012200

08003b8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_ADC_ConfigChannel+0x1c>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e105      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x228>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b09      	cmp	r3, #9
 8003bf2:	d925      	bls.n	8003c40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68d9      	ldr	r1, [r3, #12]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	3b1e      	subs	r3, #30
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43da      	mvns	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	400a      	ands	r2, r1
 8003c18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68d9      	ldr	r1, [r3, #12]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	4403      	add	r3, r0
 8003c32:	3b1e      	subs	r3, #30
 8003c34:	409a      	lsls	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	e022      	b.n	8003c86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6919      	ldr	r1, [r3, #16]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	2207      	movs	r2, #7
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	400a      	ands	r2, r1
 8003c62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6919      	ldr	r1, [r3, #16]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4618      	mov	r0, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4403      	add	r3, r0
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3b05      	subs	r3, #5
 8003ca0:	221f      	movs	r2, #31
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	400a      	ands	r2, r1
 8003cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b05      	subs	r3, #5
 8003cca:	fa00 f203 	lsl.w	r2, r0, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cd6:	e04c      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	d824      	bhi.n	8003d2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	3b23      	subs	r3, #35	@ 0x23
 8003cf2:	221f      	movs	r2, #31
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	400a      	ands	r2, r1
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	4618      	mov	r0, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	3b23      	subs	r3, #35	@ 0x23
 8003d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d28:	e023      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	4613      	mov	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	3b41      	subs	r3, #65	@ 0x41
 8003d3c:	221f      	movs	r2, #31
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	43da      	mvns	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	400a      	ands	r2, r1
 8003d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4618      	mov	r0, r3
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	3b41      	subs	r3, #65	@ 0x41
 8003d66:	fa00 f203 	lsl.w	r2, r0, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d72:	4b22      	ldr	r3, [pc, #136]	@ (8003dfc <HAL_ADC_ConfigChannel+0x234>)
 8003d74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a21      	ldr	r2, [pc, #132]	@ (8003e00 <HAL_ADC_ConfigChannel+0x238>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d109      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x1cc>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b12      	cmp	r3, #18
 8003d86:	d105      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a19      	ldr	r2, [pc, #100]	@ (8003e00 <HAL_ADC_ConfigChannel+0x238>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d123      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x21e>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b10      	cmp	r3, #16
 8003da4:	d003      	beq.n	8003dae <HAL_ADC_ConfigChannel+0x1e6>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2b11      	cmp	r3, #17
 8003dac:	d11b      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b10      	cmp	r3, #16
 8003dc0:	d111      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003dc2:	4b10      	ldr	r3, [pc, #64]	@ (8003e04 <HAL_ADC_ConfigChannel+0x23c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a10      	ldr	r2, [pc, #64]	@ (8003e08 <HAL_ADC_ConfigChannel+0x240>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	0c9a      	lsrs	r2, r3, #18
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003dd8:	e002      	b.n	8003de0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f9      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40012300 	.word	0x40012300
 8003e00:	40012000 	.word	0x40012000
 8003e04:	2000000c 	.word	0x2000000c
 8003e08:	431bde83 	.word	0x431bde83

08003e0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e14:	4b79      	ldr	r3, [pc, #484]	@ (8003ffc <ADC_Init+0x1f0>)
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	021a      	lsls	r2, r3, #8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6899      	ldr	r1, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9e:	4a58      	ldr	r2, [pc, #352]	@ (8004000 <ADC_Init+0x1f4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d022      	beq.n	8003eea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6899      	ldr	r1, [r3, #8]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ed4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	e00f      	b.n	8003f0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f08:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0202 	bic.w	r2, r2, #2
 8003f18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	7e1b      	ldrb	r3, [r3, #24]
 8003f24:	005a      	lsls	r2, r3, #1
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f46:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003f56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	3b01      	subs	r3, #1
 8003f64:	035a      	lsls	r2, r3, #13
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	e007      	b.n	8003f80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	051a      	lsls	r2, r3, #20
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003fb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6899      	ldr	r1, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fc2:	025a      	lsls	r2, r3, #9
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	029a      	lsls	r2, r3, #10
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	40012300 	.word	0x40012300
 8004000:	0f000001 	.word	0x0f000001

08004004 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800401a:	2b00      	cmp	r3, #0
 800401c:	d13c      	bne.n	8004098 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d12b      	bne.n	8004090 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800403c:	2b00      	cmp	r3, #0
 800403e:	d127      	bne.n	8004090 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	d006      	beq.n	800405c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004058:	2b00      	cmp	r3, #0
 800405a:	d119      	bne.n	8004090 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0220 	bic.w	r2, r2, #32
 800406a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d105      	bne.n	8004090 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	f043 0201 	orr.w	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7fd ff05 	bl	8001ea0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004096:	e00e      	b.n	80040b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7ff fd85 	bl	8003bb4 <HAL_ADC_ErrorCallback>
}
 80040aa:	e004      	b.n	80040b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	4798      	blx	r3
}
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7ff fd5d 	bl	8003b8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2240      	movs	r2, #64	@ 0x40
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f7ff fd5a 	bl	8003bb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800412c:	4b0c      	ldr	r3, [pc, #48]	@ (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800414e:	4a04      	ldr	r2, [pc, #16]	@ (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	60d3      	str	r3, [r2, #12]
}
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004168:	4b04      	ldr	r3, [pc, #16]	@ (800417c <__NVIC_GetPriorityGrouping+0x18>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0307 	and.w	r3, r3, #7
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db0b      	blt.n	80041aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4907      	ldr	r1, [pc, #28]	@ (80041b8 <__NVIC_EnableIRQ+0x38>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	@ (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	@ (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	@ 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004258:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	4313      	orrs	r3, r2
         );
}
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	@ 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3b01      	subs	r3, #1
 8004284:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004288:	d301      	bcc.n	800428e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800428a:	2301      	movs	r3, #1
 800428c:	e00f      	b.n	80042ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800428e:	4a0a      	ldr	r2, [pc, #40]	@ (80042b8 <SysTick_Config+0x40>)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004296:	210f      	movs	r1, #15
 8004298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800429c:	f7ff ff8e 	bl	80041bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <SysTick_Config+0x40>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a6:	4b04      	ldr	r3, [pc, #16]	@ (80042b8 <SysTick_Config+0x40>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	e000e010 	.word	0xe000e010

080042bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff ff29 	bl	800411c <__NVIC_SetPriorityGrouping>
}
 80042ca:	bf00      	nop
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	4603      	mov	r3, r0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042e4:	f7ff ff3e 	bl	8004164 <__NVIC_GetPriorityGrouping>
 80042e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	6978      	ldr	r0, [r7, #20]
 80042f0:	f7ff ff8e 	bl	8004210 <NVIC_EncodePriority>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff5d 	bl	80041bc <__NVIC_SetPriority>
}
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	4603      	mov	r3, r0
 8004312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff31 	bl	8004180 <__NVIC_EnableIRQ>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ffa2 	bl	8004278 <SysTick_Config>
 8004334:	4603      	mov	r3, r0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b082      	sub	sp, #8
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e00e      	b.n	800436e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	795b      	ldrb	r3, [r3, #5]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fe fa19 	bl	8002798 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004376:	b480      	push	{r7}
 8004378:	b087      	sub	sp, #28
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2202      	movs	r2, #2
 800438a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	e00a      	b.n	80043b8 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	441a      	add	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	3301      	adds	r3, #1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d3f0      	bcc.n	80043a2 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80043ce:	693b      	ldr	r3, [r7, #16]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80043e4:	2300      	movs	r3, #0
 80043e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff f93c 	bl	8003664 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e099      	b.n	800452c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004418:	e00f      	b.n	800443a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800441a:	f7ff f923 	bl	8003664 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b05      	cmp	r3, #5
 8004426:	d908      	bls.n	800443a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2220      	movs	r2, #32
 800442c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2203      	movs	r2, #3
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e078      	b.n	800452c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e8      	bne.n	800441a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4b38      	ldr	r3, [pc, #224]	@ (8004534 <HAL_DMA_Init+0x158>)
 8004454:	4013      	ands	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004466:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004472:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	2b04      	cmp	r3, #4
 8004492:	d107      	bne.n	80044a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449c:	4313      	orrs	r3, r2
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d117      	bne.n	80044fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00e      	beq.n	80044fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb01 	bl	8004ae8 <DMA_CheckFifoParam>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2240      	movs	r2, #64	@ 0x40
 80044f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80044fa:	2301      	movs	r3, #1
 80044fc:	e016      	b.n	800452c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fab8 	bl	8004a7c <DMA_CalcBaseAndBitshift>
 800450c:	4603      	mov	r3, r0
 800450e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	223f      	movs	r2, #63	@ 0x3f
 8004516:	409a      	lsls	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	f010803f 	.word	0xf010803f

08004538 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
 8004544:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_DMA_Start_IT+0x26>
 800455a:	2302      	movs	r3, #2
 800455c:	e040      	b.n	80045e0 <HAL_DMA_Start_IT+0xa8>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d12f      	bne.n	80045d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa4a 	bl	8004a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004590:	223f      	movs	r2, #63	@ 0x3f
 8004592:	409a      	lsls	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0216 	orr.w	r2, r2, #22
 80045a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e005      	b.n	80045de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045f6:	f7ff f835 	bl	8003664 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d008      	beq.n	800461a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2280      	movs	r2, #128	@ 0x80
 800460c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e052      	b.n	80046c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0216 	bic.w	r2, r2, #22
 8004628:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004638:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <HAL_DMA_Abort+0x62>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004646:	2b00      	cmp	r3, #0
 8004648:	d007      	beq.n	800465a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0208 	bic.w	r2, r2, #8
 8004658:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800466a:	e013      	b.n	8004694 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800466c:	f7fe fffa 	bl	8003664 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b05      	cmp	r3, #5
 8004678:	d90c      	bls.n	8004694 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2220      	movs	r2, #32
 800467e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2203      	movs	r2, #3
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e015      	b.n	80046c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e4      	bne.n	800466c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	223f      	movs	r2, #63	@ 0x3f
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d004      	beq.n	80046e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00c      	b.n	8004700 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2205      	movs	r2, #5
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004718:	4b8e      	ldr	r3, [pc, #568]	@ (8004954 <HAL_DMA_IRQHandler+0x248>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a8e      	ldr	r2, [pc, #568]	@ (8004958 <HAL_DMA_IRQHandler+0x24c>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	0a9b      	lsrs	r3, r3, #10
 8004724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	2208      	movs	r2, #8
 8004738:	409a      	lsls	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4013      	ands	r3, r2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d01a      	beq.n	8004778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004764:	2208      	movs	r2, #8
 8004766:	409a      	lsls	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004770:	f043 0201 	orr.w	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477c:	2201      	movs	r2, #1
 800477e:	409a      	lsls	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4013      	ands	r3, r2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a6:	f043 0202 	orr.w	r2, r3, #2
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b2:	2204      	movs	r2, #4
 80047b4:	409a      	lsls	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d012      	beq.n	80047e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d0:	2204      	movs	r2, #4
 80047d2:	409a      	lsls	r2, r3
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047dc:	f043 0204 	orr.w	r2, r3, #4
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e8:	2210      	movs	r2, #16
 80047ea:	409a      	lsls	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d043      	beq.n	800487c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d03c      	beq.n	800487c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004806:	2210      	movs	r2, #16
 8004808:	409a      	lsls	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d018      	beq.n	800484e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d108      	bne.n	800483c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d024      	beq.n	800487c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4798      	blx	r3
 800483a:	e01f      	b.n	800487c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01b      	beq.n	800487c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
 800484c:	e016      	b.n	800487c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d107      	bne.n	800486c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0208 	bic.w	r2, r2, #8
 800486a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004880:	2220      	movs	r2, #32
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 808f 	beq.w	80049ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 8087 	beq.w	80049ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a2:	2220      	movs	r2, #32
 80048a4:	409a      	lsls	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b05      	cmp	r3, #5
 80048b4:	d136      	bne.n	8004924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0216 	bic.w	r2, r2, #22
 80048c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695a      	ldr	r2, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <HAL_DMA_IRQHandler+0x1da>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d007      	beq.n	80048f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048fa:	223f      	movs	r2, #63	@ 0x3f
 80048fc:	409a      	lsls	r2, r3
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004916:	2b00      	cmp	r3, #0
 8004918:	d07e      	beq.n	8004a18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
        }
        return;
 8004922:	e079      	b.n	8004a18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d01d      	beq.n	800496e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10d      	bne.n	800495c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004944:	2b00      	cmp	r3, #0
 8004946:	d031      	beq.n	80049ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e02c      	b.n	80049ac <HAL_DMA_IRQHandler+0x2a0>
 8004952:	bf00      	nop
 8004954:	2000000c 	.word	0x2000000c
 8004958:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004960:	2b00      	cmp	r3, #0
 8004962:	d023      	beq.n	80049ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
 800496c:	e01e      	b.n	80049ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0210 	bic.w	r2, r2, #16
 800498a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d032      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d022      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2205      	movs	r2, #5
 80049c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3301      	adds	r3, #1
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d307      	bcc.n	80049f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f2      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x2cc>
 80049f2:	e000      	b.n	80049f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
 8004a16:	e000      	b.n	8004a1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a18:	bf00      	nop
    }
  }
}
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b40      	cmp	r3, #64	@ 0x40
 8004a4c:	d108      	bne.n	8004a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a5e:	e007      	b.n	8004a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	60da      	str	r2, [r3, #12]
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	3b10      	subs	r3, #16
 8004a8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a96:	4a13      	ldr	r2, [pc, #76]	@ (8004ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d909      	bls.n	8004abe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ab2:	f023 0303 	bic.w	r3, r3, #3
 8004ab6:	1d1a      	adds	r2, r3, #4
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	659a      	str	r2, [r3, #88]	@ 0x58
 8004abc:	e007      	b.n	8004ace <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	aaaaaaab 	.word	0xaaaaaaab
 8004ae4:	0800e6d4 	.word	0x0800e6d4

08004ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d11f      	bne.n	8004b42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d856      	bhi.n	8004bb6 <DMA_CheckFifoParam+0xce>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <DMA_CheckFifoParam+0x28>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b21 	.word	0x08004b21
 8004b14:	08004b33 	.word	0x08004b33
 8004b18:	08004b21 	.word	0x08004b21
 8004b1c:	08004bb7 	.word	0x08004bb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d046      	beq.n	8004bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b30:	e043      	b.n	8004bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b3a:	d140      	bne.n	8004bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b40:	e03d      	b.n	8004bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b4a:	d121      	bne.n	8004b90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d837      	bhi.n	8004bc2 <DMA_CheckFifoParam+0xda>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <DMA_CheckFifoParam+0x70>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b69 	.word	0x08004b69
 8004b5c:	08004b6f 	.word	0x08004b6f
 8004b60:	08004b69 	.word	0x08004b69
 8004b64:	08004b81 	.word	0x08004b81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6c:	e030      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d025      	beq.n	8004bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b7e:	e022      	b.n	8004bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b88:	d11f      	bne.n	8004bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b8e:	e01c      	b.n	8004bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d903      	bls.n	8004b9e <DMA_CheckFifoParam+0xb6>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d003      	beq.n	8004ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b9c:	e018      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba2:	e015      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00e      	beq.n	8004bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb4:	e00b      	b.n	8004bce <DMA_CheckFifoParam+0xe6>
      break;
 8004bb6:	bf00      	nop
 8004bb8:	e00a      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e008      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e006      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bc2:	bf00      	nop
 8004bc4:	e004      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004bce:	bf00      	nop
    }
  } 
  
  return status; 
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop

08004be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	e16b      	b.n	8004ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f040 815a 	bne.w	8004ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d005      	beq.n	8004c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d130      	bne.n	8004c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0201 	and.w	r2, r3, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d017      	beq.n	8004cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d123      	bne.n	8004d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	08da      	lsrs	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3208      	adds	r2, #8
 8004ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	08da      	lsrs	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3208      	adds	r2, #8
 8004d1e:	69b9      	ldr	r1, [r7, #24]
 8004d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	2203      	movs	r2, #3
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0203 	and.w	r2, r3, #3
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80b4 	beq.w	8004ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	4b60      	ldr	r3, [pc, #384]	@ (8004eec <HAL_GPIO_Init+0x30c>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8004eec <HAL_GPIO_Init+0x30c>)
 8004d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d76:	4b5d      	ldr	r3, [pc, #372]	@ (8004eec <HAL_GPIO_Init+0x30c>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d82:	4a5b      	ldr	r2, [pc, #364]	@ (8004ef0 <HAL_GPIO_Init+0x310>)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	3302      	adds	r3, #2
 8004d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	220f      	movs	r2, #15
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a52      	ldr	r2, [pc, #328]	@ (8004ef4 <HAL_GPIO_Init+0x314>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02b      	beq.n	8004e06 <HAL_GPIO_Init+0x226>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a51      	ldr	r2, [pc, #324]	@ (8004ef8 <HAL_GPIO_Init+0x318>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d025      	beq.n	8004e02 <HAL_GPIO_Init+0x222>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a50      	ldr	r2, [pc, #320]	@ (8004efc <HAL_GPIO_Init+0x31c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01f      	beq.n	8004dfe <HAL_GPIO_Init+0x21e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8004f00 <HAL_GPIO_Init+0x320>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d019      	beq.n	8004dfa <HAL_GPIO_Init+0x21a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8004f04 <HAL_GPIO_Init+0x324>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_GPIO_Init+0x216>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8004f08 <HAL_GPIO_Init+0x328>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00d      	beq.n	8004df2 <HAL_GPIO_Init+0x212>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8004f0c <HAL_GPIO_Init+0x32c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <HAL_GPIO_Init+0x20e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4b      	ldr	r2, [pc, #300]	@ (8004f10 <HAL_GPIO_Init+0x330>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_GPIO_Init+0x20a>
 8004de6:	2307      	movs	r3, #7
 8004de8:	e00e      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dea:	2308      	movs	r3, #8
 8004dec:	e00c      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dee:	2306      	movs	r3, #6
 8004df0:	e00a      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004df2:	2305      	movs	r3, #5
 8004df4:	e008      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004df6:	2304      	movs	r3, #4
 8004df8:	e006      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e004      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e002      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004e06:	2300      	movs	r3, #0
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	f002 0203 	and.w	r2, r2, #3
 8004e0e:	0092      	lsls	r2, r2, #2
 8004e10:	4093      	lsls	r3, r2
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e18:	4935      	ldr	r1, [pc, #212]	@ (8004ef0 <HAL_GPIO_Init+0x310>)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e26:	4b3b      	ldr	r3, [pc, #236]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e4a:	4a32      	ldr	r2, [pc, #200]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e50:	4b30      	ldr	r3, [pc, #192]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e74:	4a27      	ldr	r2, [pc, #156]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e7a:	4b26      	ldr	r3, [pc, #152]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ec8:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <HAL_GPIO_Init+0x334>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	f67f ae90 	bls.w	8004bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3724      	adds	r7, #36	@ 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40020400 	.word	0x40020400
 8004efc:	40020800 	.word	0x40020800
 8004f00:	40020c00 	.word	0x40020c00
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40021400 	.word	0x40021400
 8004f0c:	40021800 	.word	0x40021800
 8004f10:	40021c00 	.word	0x40021c00
 8004f14:	40013c00 	.word	0x40013c00

08004f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	887b      	ldrh	r3, [r7, #2]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	e001      	b.n	8004f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
 8004f54:	4613      	mov	r3, r2
 8004f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f58:	787b      	ldrb	r3, [r7, #1]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f5e:	887a      	ldrh	r2, [r7, #2]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f64:	e003      	b.n	8004f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f66:	887b      	ldrh	r3, [r7, #2]
 8004f68:	041a      	lsls	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	619a      	str	r2, [r3, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f8c:	887a      	ldrh	r2, [r7, #2]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4013      	ands	r3, r2
 8004f92:	041a      	lsls	r2, r3, #16
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	43d9      	mvns	r1, r3
 8004f98:	887b      	ldrh	r3, [r7, #2]
 8004f9a:	400b      	ands	r3, r1
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	619a      	str	r2, [r3, #24]
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fba:	4b08      	ldr	r3, [pc, #32]	@ (8004fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fbc:	695a      	ldr	r2, [r3, #20]
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d006      	beq.n	8004fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fc6:	4a05      	ldr	r2, [pc, #20]	@ (8004fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd fb02 	bl	80025d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40013c00 	.word	0x40013c00

08004fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e101      	b.n	80051f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f008 fb5d 	bl	800d6cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2203      	movs	r2, #3
 8005016:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005020:	d102      	bne.n	8005028 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f005 f8de 	bl	800a1ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7c1a      	ldrb	r2, [r3, #16]
 800503a:	f88d 2000 	strb.w	r2, [sp]
 800503e:	3304      	adds	r3, #4
 8005040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005042:	f004 ffbd 	bl	8009fc0 <USB_CoreInit>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d005      	beq.n	8005058 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0ce      	b.n	80051f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f005 f8d6 	bl	800a210 <USB_SetCurrentMode>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0bf      	b.n	80051f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	e04a      	b.n	8005112 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3315      	adds	r3, #21
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3314      	adds	r3, #20
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050a4:	7bfa      	ldrb	r2, [r7, #15]
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
 80050a8:	b298      	uxth	r0, r3
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	332e      	adds	r3, #46	@ 0x2e
 80050b8:	4602      	mov	r2, r0
 80050ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3318      	adds	r3, #24
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	331c      	adds	r3, #28
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050e4:	7bfa      	ldrb	r2, [r7, #15]
 80050e6:	6879      	ldr	r1, [r7, #4]
 80050e8:	4613      	mov	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3320      	adds	r3, #32
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3324      	adds	r3, #36	@ 0x24
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	3301      	adds	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	791b      	ldrb	r3, [r3, #4]
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	429a      	cmp	r2, r3
 800511a:	d3af      	bcc.n	800507c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]
 8005120:	e044      	b.n	80051ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005122:	7bfa      	ldrb	r2, [r7, #15]
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	4613      	mov	r3, r2
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	440b      	add	r3, r1
 8005130:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800514a:	7bfa      	ldrb	r2, [r7, #15]
 800514c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800514e:	7bfa      	ldrb	r2, [r7, #15]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	3301      	adds	r3, #1
 80051aa:	73fb      	strb	r3, [r7, #15]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	791b      	ldrb	r3, [r3, #4]
 80051b0:	7bfa      	ldrb	r2, [r7, #15]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d3b5      	bcc.n	8005122 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7c1a      	ldrb	r2, [r3, #16]
 80051be:	f88d 2000 	strb.w	r2, [sp]
 80051c2:	3304      	adds	r3, #4
 80051c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c6:	f005 f86f 	bl	800a2a8 <USB_DevInit>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e00c      	b.n	80051f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f006 f8b9 	bl	800b366 <USB_DevDisconnect>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_PCD_Start+0x1c>
 8005216:	2302      	movs	r3, #2
 8005218:	e022      	b.n	8005260 <HAL_PCD_Start+0x62>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005232:	2b01      	cmp	r3, #1
 8005234:	d105      	bne.n	8005242 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f004 ffc0 	bl	800a1cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f006 f867 	bl	800b324 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005268:	b590      	push	{r4, r7, lr}
 800526a:	b08d      	sub	sp, #52	@ 0x34
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f006 f925 	bl	800b4ce <USB_GetMode>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 848c 	bne.w	8005ba4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f006 f889 	bl	800b3a8 <USB_ReadInterrupts>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8482 	beq.w	8005ba2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0a1b      	lsrs	r3, r3, #8
 80052a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f006 f876 	bl	800b3a8 <USB_ReadInterrupts>
 80052bc:	4603      	mov	r3, r0
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d107      	bne.n	80052d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f002 0202 	and.w	r2, r2, #2
 80052d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f006 f864 	bl	800b3a8 <USB_ReadInterrupts>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d161      	bne.n	80053ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	699a      	ldr	r2, [r3, #24]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0210 	bic.w	r2, r2, #16
 80052f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	f003 020f 	and.w	r2, r3, #15
 8005306:	4613      	mov	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	4413      	add	r3, r2
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	3304      	adds	r3, #4
 8005318:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005320:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005324:	d124      	bne.n	8005370 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800532c:	4013      	ands	r3, r2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d035      	beq.n	800539e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	091b      	lsrs	r3, r3, #4
 800533a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800533c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005340:	b29b      	uxth	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	6a38      	ldr	r0, [r7, #32]
 8005346:	f005 fe9b 	bl	800b080 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005356:	441a      	add	r2, r3
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	695a      	ldr	r2, [r3, #20]
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005368:	441a      	add	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	615a      	str	r2, [r3, #20]
 800536e:	e016      	b.n	800539e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005376:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800537a:	d110      	bne.n	800539e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005382:	2208      	movs	r2, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6a38      	ldr	r0, [r7, #32]
 8005388:	f005 fe7a 	bl	800b080 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005398:	441a      	add	r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699a      	ldr	r2, [r3, #24]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0210 	orr.w	r2, r2, #16
 80053ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f005 fff8 	bl	800b3a8 <USB_ReadInterrupts>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80053c2:	f040 80a7 	bne.w	8005514 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f005 fffd 	bl	800b3ce <USB_ReadDevAllOutEpInterrupt>
 80053d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80053d6:	e099      	b.n	800550c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80053d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808e 	beq.w	8005500 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f006 f821 	bl	800b436 <USB_ReadDevOutEPInterrupt>
 80053f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00c      	beq.n	800541a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540c:	461a      	mov	r2, r3
 800540e:	2301      	movs	r3, #1
 8005410:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005412:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fe8b 	bl	8006130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00c      	beq.n	800543e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005430:	461a      	mov	r2, r3
 8005432:	2308      	movs	r3, #8
 8005434:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 ff61 	bl	8006300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b00      	cmp	r3, #0
 8005446:	d008      	beq.n	800545a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	2310      	movs	r3, #16
 8005458:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d030      	beq.n	80054c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546c:	2b80      	cmp	r3, #128	@ 0x80
 800546e:	d109      	bne.n	8005484 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005482:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005486:	4613      	mov	r3, r2
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	3304      	adds	r3, #4
 8005498:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d108      	bne.n	80054b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2200      	movs	r2, #0
 80054a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f008 fa12 	bl	800d8d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c0:	461a      	mov	r2, r3
 80054c2:	2302      	movs	r3, #2
 80054c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	461a      	mov	r2, r3
 80054de:	2320      	movs	r3, #32
 80054e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f8:	461a      	mov	r2, r3
 80054fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80054fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	3301      	adds	r3, #1
 8005504:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	2b00      	cmp	r3, #0
 8005510:	f47f af62 	bne.w	80053d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4618      	mov	r0, r3
 800551a:	f005 ff45 	bl	800b3a8 <USB_ReadInterrupts>
 800551e:	4603      	mov	r3, r0
 8005520:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005528:	f040 80db 	bne.w	80056e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f005 ff66 	bl	800b402 <USB_ReadDevAllInEpInterrupt>
 8005536:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800553c:	e0cd      	b.n	80056da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80c2 	beq.w	80056ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	4611      	mov	r1, r2
 8005554:	4618      	mov	r0, r3
 8005556:	f005 ff8c 	bl	800b472 <USB_ReadDevInEPInterrupt>
 800555a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d057      	beq.n	8005616 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	2201      	movs	r2, #1
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	43db      	mvns	r3, r3
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005586:	4013      	ands	r3, r2
 8005588:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005596:	461a      	mov	r2, r3
 8005598:	2301      	movs	r3, #1
 800559a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	799b      	ldrb	r3, [r3, #6]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d132      	bne.n	800560a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	4613      	mov	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	3320      	adds	r3, #32
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4403      	add	r3, r0
 80055c4:	331c      	adds	r3, #28
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4419      	add	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4403      	add	r3, r0
 80055d8:	3320      	adds	r3, #32
 80055da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <HAL_PCD_IRQHandler+0x3a2>
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e6:	4613      	mov	r3, r2
 80055e8:	00db      	lsls	r3, r3, #3
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	440b      	add	r3, r1
 80055f0:	3324      	adds	r3, #36	@ 0x24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005602:	461a      	mov	r2, r3
 8005604:	2101      	movs	r1, #1
 8005606:	f005 ff93 	bl	800b530 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	b2db      	uxtb	r3, r3
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f008 f8dc 	bl	800d7ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800562c:	461a      	mov	r2, r3
 800562e:	2308      	movs	r3, #8
 8005630:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f003 0310 	and.w	r3, r3, #16
 8005638:	2b00      	cmp	r3, #0
 800563a:	d008      	beq.n	800564e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800563c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	2310      	movs	r3, #16
 800564c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d008      	beq.n	800566a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005664:	461a      	mov	r2, r3
 8005666:	2340      	movs	r3, #64	@ 0x40
 8005668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d023      	beq.n	80056bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005676:	6a38      	ldr	r0, [r7, #32]
 8005678:	f004 ff7a 	bl	800a570 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800567c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567e:	4613      	mov	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	3310      	adds	r3, #16
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	4413      	add	r3, r2
 800568c:	3304      	adds	r3, #4
 800568e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	78db      	ldrb	r3, [r3, #3]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d108      	bne.n	80056aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f008 f929 	bl	800d8fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b6:	461a      	mov	r2, r3
 80056b8:	2302      	movs	r3, #2
 80056ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80056c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fca5 	bl	8006018 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d0:	3301      	adds	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	085b      	lsrs	r3, r3, #1
 80056d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80056da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f47f af2e 	bne.w	800553e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f005 fe5e 	bl	800b3a8 <USB_ReadInterrupts>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056f6:	d122      	bne.n	800573e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	69fa      	ldr	r2, [r7, #28]
 8005702:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005712:	2b01      	cmp	r3, #1
 8005714:	d108      	bne.n	8005728 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800571e:	2100      	movs	r1, #0
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fe8b 	bl	800643c <HAL_PCDEx_LPM_Callback>
 8005726:	e002      	b.n	800572e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f008 f8c7 	bl	800d8bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800573c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f005 fe30 	bl	800b3a8 <USB_ReadInterrupts>
 8005748:	4603      	mov	r3, r0
 800574a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800574e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005752:	d112      	bne.n	800577a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d102      	bne.n	800576a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f008 f883 	bl	800d870 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695a      	ldr	r2, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005778:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f005 fe12 	bl	800b3a8 <USB_ReadInterrupts>
 8005784:	4603      	mov	r3, r0
 8005786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800578a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800578e:	f040 80b7 	bne.w	8005900 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2110      	movs	r1, #16
 80057ac:	4618      	mov	r0, r3
 80057ae:	f004 fedf 	bl	800a570 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057b2:	2300      	movs	r3, #0
 80057b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b6:	e046      	b.n	8005846 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c4:	461a      	mov	r2, r3
 80057c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80057ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f8:	461a      	mov	r2, r3
 80057fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80057fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	440a      	add	r2, r1
 8005816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800581a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800581e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800583a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800583e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005842:	3301      	adds	r3, #1
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	791b      	ldrb	r3, [r3, #4]
 800584a:	461a      	mov	r2, r3
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	4293      	cmp	r3, r2
 8005850:	d3b2      	bcc.n	80057b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005860:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005864:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	7bdb      	ldrb	r3, [r3, #15]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d016      	beq.n	800589c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800587e:	f043 030b 	orr.w	r3, r3, #11
 8005882:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800588c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005894:	f043 030b 	orr.w	r3, r3, #11
 8005898:	6453      	str	r3, [r2, #68]	@ 0x44
 800589a:	e015      	b.n	80058c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	69fa      	ldr	r2, [r7, #28]
 80058a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80058ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80058b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	69fa      	ldr	r2, [r7, #28]
 80058be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058c2:	f043 030b 	orr.w	r3, r3, #11
 80058c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80058da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80058ea:	461a      	mov	r2, r3
 80058ec:	f005 fe20 	bl	800b530 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695a      	ldr	r2, [r3, #20]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80058fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f005 fd4f 	bl	800b3a8 <USB_ReadInterrupts>
 800590a:	4603      	mov	r3, r0
 800590c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005914:	d123      	bne.n	800595e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f005 fde5 	bl	800b4ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f004 fe9c 	bl	800a662 <USB_GetDevSpeed>
 800592a:	4603      	mov	r3, r0
 800592c:	461a      	mov	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	f001 f9f1 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 800593a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005940:	461a      	mov	r2, r3
 8005942:	4620      	mov	r0, r4
 8005944:	f004 fba0 	bl	800a088 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f007 ff68 	bl	800d81e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800595c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f005 fd20 	bl	800b3a8 <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 0308 	and.w	r3, r3, #8
 800596e:	2b08      	cmp	r3, #8
 8005970:	d10a      	bne.n	8005988 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f007 ff45 	bl	800d802 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f002 0208 	and.w	r2, r2, #8
 8005986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f005 fd0b 	bl	800b3a8 <USB_ReadInterrupts>
 8005992:	4603      	mov	r3, r0
 8005994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005998:	2b80      	cmp	r3, #128	@ 0x80
 800599a:	d123      	bne.n	80059e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059a8:	2301      	movs	r3, #1
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ac:	e014      	b.n	80059d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d105      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 faf2 	bl	8005fb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d4:	3301      	adds	r3, #1
 80059d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	791b      	ldrb	r3, [r3, #4]
 80059dc:	461a      	mov	r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d3e4      	bcc.n	80059ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f005 fcdd 	bl	800b3a8 <USB_ReadInterrupts>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059f8:	d13c      	bne.n	8005a74 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059fa:	2301      	movs	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fe:	e02b      	b.n	8005a58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3318      	adds	r3, #24
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d115      	bne.n	8005a52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005a26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	da12      	bge.n	8005a52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a30:	4613      	mov	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	3317      	adds	r3, #23
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fab2 	bl	8005fb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a54:	3301      	adds	r3, #1
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	791b      	ldrb	r3, [r3, #4]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d3cd      	bcc.n	8005a00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f005 fc95 	bl	800b3a8 <USB_ReadInterrupts>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a88:	d156      	bne.n	8005b38 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a8e:	e045      	b.n	8005b1c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d12e      	bne.n	8005b16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ab8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	da2b      	bge.n	8005b16 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005aca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d121      	bne.n	8005b16 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b12:	6053      	str	r3, [r2, #4]
            break;
 8005b14:	e008      	b.n	8005b28 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	3301      	adds	r3, #1
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	791b      	ldrb	r3, [r3, #4]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d3b3      	bcc.n	8005a90 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f005 fc33 	bl	800b3a8 <USB_ReadInterrupts>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4c:	d10a      	bne.n	8005b64 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f007 fee6 	bl	800d920 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f005 fc1d 	bl	800b3a8 <USB_ReadInterrupts>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d115      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f007 fed6 	bl	800d93c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	e000      	b.n	8005ba4 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005ba2:	bf00      	nop
    }
  }
}
 8005ba4:	3734      	adds	r7, #52	@ 0x34
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd90      	pop	{r4, r7, pc}

08005baa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b082      	sub	sp, #8
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d101      	bne.n	8005bc4 <HAL_PCD_SetAddress+0x1a>
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e012      	b.n	8005bea <HAL_PCD_SetAddress+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	78fa      	ldrb	r2, [r7, #3]
 8005bd0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	78fa      	ldrb	r2, [r7, #3]
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f005 fb7c 	bl	800b2d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	70fb      	strb	r3, [r7, #3]
 8005c04:	460b      	mov	r3, r1
 8005c06:	803b      	strh	r3, [r7, #0]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da0f      	bge.n	8005c38 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	f003 020f 	and.w	r2, r3, #15
 8005c1e:	4613      	mov	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	3310      	adds	r3, #16
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	705a      	strb	r2, [r3, #1]
 8005c36:	e00f      	b.n	8005c58 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	f003 020f 	and.w	r2, r3, #15
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3304      	adds	r3, #4
 8005c50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005c64:	883b      	ldrh	r3, [r7, #0]
 8005c66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	78ba      	ldrb	r2, [r7, #2]
 8005c72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d004      	beq.n	8005c86 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c86:	78bb      	ldrb	r3, [r7, #2]
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d102      	bne.n	8005c92 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_PCD_EP_Open+0xae>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e00e      	b.n	8005cbe <HAL_PCD_EP_Open+0xcc>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68f9      	ldr	r1, [r7, #12]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f004 fcfc 	bl	800a6ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da0f      	bge.n	8005cfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	3310      	adds	r3, #16
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4413      	add	r3, r2
 8005cee:	3304      	adds	r3, #4
 8005cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	705a      	strb	r2, [r3, #1]
 8005cf8:	e00f      	b.n	8005d1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cfa:	78fb      	ldrb	r3, [r7, #3]
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	4613      	mov	r3, r2
 8005d02:	00db      	lsls	r3, r3, #3
 8005d04:	4413      	add	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_PCD_EP_Close+0x6e>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e00e      	b.n	8005d52 <HAL_PCD_EP_Close+0x8c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f004 fd3a 	bl	800a7bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	607a      	str	r2, [r7, #4]
 8005d64:	603b      	str	r3, [r7, #0]
 8005d66:	460b      	mov	r3, r1
 8005d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d6a:	7afb      	ldrb	r3, [r7, #11]
 8005d6c:	f003 020f 	and.w	r2, r3, #15
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	4413      	add	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	3304      	adds	r3, #4
 8005d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	2200      	movs	r2, #0
 8005d94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	799b      	ldrb	r3, [r3, #6]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d102      	bne.n	8005db6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	799b      	ldrb	r3, [r3, #6]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	f004 fdd7 	bl	800a974 <USB_EPStartXfer>

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	f003 020f 	and.w	r2, r3, #15
 8005de6:	4613      	mov	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	3310      	adds	r3, #16
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	3304      	adds	r3, #4
 8005df6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2200      	movs	r2, #0
 8005e08:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	799b      	ldrb	r3, [r3, #6]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d102      	bne.n	8005e2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	799b      	ldrb	r3, [r3, #6]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6979      	ldr	r1, [r7, #20]
 8005e36:	f004 fd9d 	bl	800a974 <USB_EPStartXfer>

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	7912      	ldrb	r2, [r2, #4]
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e04f      	b.n	8005f02 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da0f      	bge.n	8005e8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	f003 020f 	and.w	r2, r3, #15
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	3310      	adds	r3, #16
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3304      	adds	r3, #4
 8005e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	705a      	strb	r2, [r3, #1]
 8005e88:	e00d      	b.n	8005ea6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_PCD_EP_SetStall+0x82>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e01d      	b.n	8005f02 <HAL_PCD_EP_SetStall+0xbe>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f005 f92b 	bl	800b130 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	7999      	ldrb	r1, [r3, #6]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	f005 fb1c 	bl	800b530 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	7912      	ldrb	r2, [r2, #4]
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d901      	bls.n	8005f28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e042      	b.n	8005fae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	da0f      	bge.n	8005f50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	f003 020f 	and.w	r2, r3, #15
 8005f36:	4613      	mov	r3, r2
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	3310      	adds	r3, #16
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	3304      	adds	r3, #4
 8005f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	705a      	strb	r2, [r3, #1]
 8005f4e:	e00f      	b.n	8005f70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	f003 020f 	and.w	r2, r3, #15
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	3304      	adds	r3, #4
 8005f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_PCD_EP_ClrStall+0x86>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e00e      	b.n	8005fae <HAL_PCD_EP_ClrStall+0xa4>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68f9      	ldr	r1, [r7, #12]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f005 f934 	bl	800b20c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da0c      	bge.n	8005fe4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	3310      	adds	r3, #16
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	4413      	add	r3, r2
 8005fde:	3304      	adds	r3, #4
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e00c      	b.n	8005ffe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	f003 020f 	and.w	r2, r3, #15
 8005fea:	4613      	mov	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	4618      	mov	r0, r3
 8006006:	f004 ff53 	bl	800aeb0 <USB_EPStopXfer>
 800600a:	4603      	mov	r3, r0
 800600c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800600e:	7afb      	ldrb	r3, [r7, #11]
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	@ 0x28
 800601c:	af02      	add	r7, sp, #8
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	3310      	adds	r3, #16
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	4413      	add	r3, r2
 800603c:	3304      	adds	r3, #4
 800603e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	429a      	cmp	r2, r3
 800604a:	d901      	bls.n	8006050 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e06b      	b.n	8006128 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	429a      	cmp	r2, r3
 8006064:	d902      	bls.n	800606c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	3303      	adds	r3, #3
 8006070:	089b      	lsrs	r3, r3, #2
 8006072:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006074:	e02a      	b.n	80060cc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	429a      	cmp	r2, r3
 800608a:	d902      	bls.n	8006092 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	3303      	adds	r3, #3
 8006096:	089b      	lsrs	r3, r3, #2
 8006098:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68d9      	ldr	r1, [r3, #12]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f004 ffa8 	bl	800b004 <USB_WritePacket>

    ep->xfer_buff  += len;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	441a      	add	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	695a      	ldr	r2, [r3, #20]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d809      	bhi.n	80060f6 <PCD_WriteEmptyTxFifo+0xde>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d203      	bcs.n	80060f6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1bf      	bne.n	8006076 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	691a      	ldr	r2, [r3, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d811      	bhi.n	8006126 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	2201      	movs	r2, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	43db      	mvns	r3, r3
 800611c:	6939      	ldr	r1, [r7, #16]
 800611e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006122:	4013      	ands	r3, r2
 8006124:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3720      	adds	r7, #32
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	333c      	adds	r3, #60	@ 0x3c
 8006148:	3304      	adds	r3, #4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	799b      	ldrb	r3, [r3, #6]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d17b      	bne.n	800625e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d015      	beq.n	800619c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4a61      	ldr	r2, [pc, #388]	@ (80062f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f240 80b9 	bls.w	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80b3 	beq.w	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006192:	461a      	mov	r2, r3
 8006194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006198:	6093      	str	r3, [r2, #8]
 800619a:	e0a7      	b.n	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b2:	461a      	mov	r2, r3
 80061b4:	2320      	movs	r3, #32
 80061b6:	6093      	str	r3, [r2, #8]
 80061b8:	e098      	b.n	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f040 8093 	bne.w	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4a4b      	ldr	r2, [pc, #300]	@ (80062f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d90f      	bls.n	80061ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ea:	6093      	str	r3, [r2, #8]
 80061ec:	e07e      	b.n	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a1a      	ldr	r2, [r3, #32]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	0159      	lsls	r1, r3, #5
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	440b      	add	r3, r1
 8006210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d114      	bne.n	8006250 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d109      	bne.n	8006242 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006238:	461a      	mov	r2, r3
 800623a:	2101      	movs	r1, #1
 800623c:	f005 f978 	bl	800b530 <USB_EP0_OutStart>
 8006240:	e006      	b.n	8006250 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	441a      	add	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	4619      	mov	r1, r3
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f007 fa9e 	bl	800d798 <HAL_PCD_DataOutStageCallback>
 800625c:	e046      	b.n	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	4a26      	ldr	r2, [pc, #152]	@ (80062fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d124      	bne.n	80062b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	461a      	mov	r2, r3
 800627e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006282:	6093      	str	r3, [r2, #8]
 8006284:	e032      	b.n	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f003 0320 	and.w	r3, r3, #32
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629c:	461a      	mov	r2, r3
 800629e:	2320      	movs	r3, #32
 80062a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f007 fa75 	bl	800d798 <HAL_PCD_DataOutStageCallback>
 80062ae:	e01d      	b.n	80062ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d114      	bne.n	80062e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4413      	add	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	440b      	add	r3, r1
 80062c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80062d8:	461a      	mov	r2, r3
 80062da:	2100      	movs	r1, #0
 80062dc:	f005 f928 	bl	800b530 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f007 fa56 	bl	800d798 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	4f54300a 	.word	0x4f54300a
 80062fc:	4f54310a 	.word	0x4f54310a

08006300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	333c      	adds	r3, #60	@ 0x3c
 8006318:	3304      	adds	r3, #4
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a15      	ldr	r2, [pc, #84]	@ (8006388 <PCD_EP_OutSetupPacket_int+0x88>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d90e      	bls.n	8006354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800633c:	2b00      	cmp	r3, #0
 800633e:	d009      	beq.n	8006354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f007 fa0d 	bl	800d774 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a0a      	ldr	r2, [pc, #40]	@ (8006388 <PCD_EP_OutSetupPacket_int+0x88>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d90c      	bls.n	800637c <PCD_EP_OutSetupPacket_int+0x7c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	799b      	ldrb	r3, [r3, #6]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d108      	bne.n	800637c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006374:	461a      	mov	r2, r3
 8006376:	2101      	movs	r1, #1
 8006378:	f005 f8da 	bl	800b530 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	4f54300a 	.word	0x4f54300a

0800638c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
 8006398:	4613      	mov	r3, r2
 800639a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d107      	bne.n	80063ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80063aa:	883b      	ldrh	r3, [r7, #0]
 80063ac:	0419      	lsls	r1, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80063b8:	e028      	b.n	800640c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	0c1b      	lsrs	r3, r3, #16
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	4413      	add	r3, r2
 80063c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e00d      	b.n	80063ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	3340      	adds	r3, #64	@ 0x40
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	0c1b      	lsrs	r3, r3, #16
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	3301      	adds	r3, #1
 80063e8:	73fb      	strb	r3, [r7, #15]
 80063ea:	7bfa      	ldrb	r2, [r7, #15]
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d3ec      	bcc.n	80063ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063f4:	883b      	ldrh	r3, [r7, #0]
 80063f6:	0418      	lsls	r0, r3, #16
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6819      	ldr	r1, [r3, #0]
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	3b01      	subs	r3, #1
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4302      	orrs	r2, r0
 8006404:	3340      	adds	r3, #64	@ 0x40
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800641a:	b480      	push	{r7}
 800641c:	b083      	sub	sp, #12
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	460b      	mov	r3, r1
 8006424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	887a      	ldrh	r2, [r7, #2]
 800642c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e267      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d075      	beq.n	800655e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006472:	4b88      	ldr	r3, [pc, #544]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	2b04      	cmp	r3, #4
 800647c:	d00c      	beq.n	8006498 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800647e:	4b85      	ldr	r3, [pc, #532]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006486:	2b08      	cmp	r3, #8
 8006488:	d112      	bne.n	80064b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800648a:	4b82      	ldr	r3, [pc, #520]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006492:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006496:	d10b      	bne.n	80064b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006498:	4b7e      	ldr	r3, [pc, #504]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d05b      	beq.n	800655c <HAL_RCC_OscConfig+0x108>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d157      	bne.n	800655c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e242      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b8:	d106      	bne.n	80064c8 <HAL_RCC_OscConfig+0x74>
 80064ba:	4b76      	ldr	r3, [pc, #472]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a75      	ldr	r2, [pc, #468]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	e01d      	b.n	8006504 <HAL_RCC_OscConfig+0xb0>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80064d0:	d10c      	bne.n	80064ec <HAL_RCC_OscConfig+0x98>
 80064d2:	4b70      	ldr	r3, [pc, #448]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a6f      	ldr	r2, [pc, #444]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	4b6d      	ldr	r3, [pc, #436]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a6c      	ldr	r2, [pc, #432]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e00b      	b.n	8006504 <HAL_RCC_OscConfig+0xb0>
 80064ec:	4b69      	ldr	r3, [pc, #420]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a68      	ldr	r2, [pc, #416]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	4b66      	ldr	r3, [pc, #408]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a65      	ldr	r2, [pc, #404]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80064fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d013      	beq.n	8006534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800650c:	f7fd f8aa 	bl	8003664 <HAL_GetTick>
 8006510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006512:	e008      	b.n	8006526 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006514:	f7fd f8a6 	bl	8003664 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b64      	cmp	r3, #100	@ 0x64
 8006520:	d901      	bls.n	8006526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e207      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006526:	4b5b      	ldr	r3, [pc, #364]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0f0      	beq.n	8006514 <HAL_RCC_OscConfig+0xc0>
 8006532:	e014      	b.n	800655e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006534:	f7fd f896 	bl	8003664 <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800653c:	f7fd f892 	bl	8003664 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b64      	cmp	r3, #100	@ 0x64
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e1f3      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800654e:	4b51      	ldr	r3, [pc, #324]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0xe8>
 800655a:	e000      	b.n	800655e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d063      	beq.n	8006632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800656a:	4b4a      	ldr	r3, [pc, #296]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 030c 	and.w	r3, r3, #12
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00b      	beq.n	800658e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006576:	4b47      	ldr	r3, [pc, #284]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800657e:	2b08      	cmp	r3, #8
 8006580:	d11c      	bne.n	80065bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006582:	4b44      	ldr	r3, [pc, #272]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d116      	bne.n	80065bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800658e:	4b41      	ldr	r3, [pc, #260]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <HAL_RCC_OscConfig+0x152>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d001      	beq.n	80065a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e1c7      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	4937      	ldr	r1, [pc, #220]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065ba:	e03a      	b.n	8006632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d020      	beq.n	8006606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065c4:	4b34      	ldr	r3, [pc, #208]	@ (8006698 <HAL_RCC_OscConfig+0x244>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ca:	f7fd f84b 	bl	8003664 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065d2:	f7fd f847 	bl	8003664 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e1a8      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f0:	4b28      	ldr	r3, [pc, #160]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4925      	ldr	r1, [pc, #148]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006600:	4313      	orrs	r3, r2
 8006602:	600b      	str	r3, [r1, #0]
 8006604:	e015      	b.n	8006632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006606:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <HAL_RCC_OscConfig+0x244>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fd f82a 	bl	8003664 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006614:	f7fd f826 	bl	8003664 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e187      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006626:	4b1b      	ldr	r3, [pc, #108]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d036      	beq.n	80066ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d016      	beq.n	8006674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006646:	4b15      	ldr	r3, [pc, #84]	@ (800669c <HAL_RCC_OscConfig+0x248>)
 8006648:	2201      	movs	r2, #1
 800664a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664c:	f7fd f80a 	bl	8003664 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006654:	f7fd f806 	bl	8003664 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e167      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006666:	4b0b      	ldr	r3, [pc, #44]	@ (8006694 <HAL_RCC_OscConfig+0x240>)
 8006668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0x200>
 8006672:	e01b      	b.n	80066ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006674:	4b09      	ldr	r3, [pc, #36]	@ (800669c <HAL_RCC_OscConfig+0x248>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800667a:	f7fc fff3 	bl	8003664 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006680:	e00e      	b.n	80066a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006682:	f7fc ffef 	bl	8003664 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d907      	bls.n	80066a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e150      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
 8006694:	40023800 	.word	0x40023800
 8006698:	42470000 	.word	0x42470000
 800669c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066a0:	4b88      	ldr	r3, [pc, #544]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80066a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1ea      	bne.n	8006682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8097 	beq.w	80067e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ba:	2300      	movs	r3, #0
 80066bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066be:	4b81      	ldr	r3, [pc, #516]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10f      	bne.n	80066ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ca:	2300      	movs	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	4b7d      	ldr	r3, [pc, #500]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	4a7c      	ldr	r2, [pc, #496]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80066da:	4b7a      	ldr	r3, [pc, #488]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80066dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e6:	2301      	movs	r3, #1
 80066e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ea:	4b77      	ldr	r3, [pc, #476]	@ (80068c8 <HAL_RCC_OscConfig+0x474>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d118      	bne.n	8006728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066f6:	4b74      	ldr	r3, [pc, #464]	@ (80068c8 <HAL_RCC_OscConfig+0x474>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a73      	ldr	r2, [pc, #460]	@ (80068c8 <HAL_RCC_OscConfig+0x474>)
 80066fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006702:	f7fc ffaf 	bl	8003664 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670a:	f7fc ffab 	bl	8003664 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e10c      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671c:	4b6a      	ldr	r3, [pc, #424]	@ (80068c8 <HAL_RCC_OscConfig+0x474>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d106      	bne.n	800673e <HAL_RCC_OscConfig+0x2ea>
 8006730:	4b64      	ldr	r3, [pc, #400]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	4a63      	ldr	r2, [pc, #396]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	6713      	str	r3, [r2, #112]	@ 0x70
 800673c:	e01c      	b.n	8006778 <HAL_RCC_OscConfig+0x324>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b05      	cmp	r3, #5
 8006744:	d10c      	bne.n	8006760 <HAL_RCC_OscConfig+0x30c>
 8006746:	4b5f      	ldr	r3, [pc, #380]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674a:	4a5e      	ldr	r2, [pc, #376]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 800674c:	f043 0304 	orr.w	r3, r3, #4
 8006750:	6713      	str	r3, [r2, #112]	@ 0x70
 8006752:	4b5c      	ldr	r3, [pc, #368]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	4a5b      	ldr	r2, [pc, #364]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006758:	f043 0301 	orr.w	r3, r3, #1
 800675c:	6713      	str	r3, [r2, #112]	@ 0x70
 800675e:	e00b      	b.n	8006778 <HAL_RCC_OscConfig+0x324>
 8006760:	4b58      	ldr	r3, [pc, #352]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006764:	4a57      	ldr	r2, [pc, #348]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	6713      	str	r3, [r2, #112]	@ 0x70
 800676c:	4b55      	ldr	r3, [pc, #340]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 800676e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006770:	4a54      	ldr	r2, [pc, #336]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006772:	f023 0304 	bic.w	r3, r3, #4
 8006776:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d015      	beq.n	80067ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006780:	f7fc ff70 	bl	8003664 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006786:	e00a      	b.n	800679e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006788:	f7fc ff6c 	bl	8003664 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e0cb      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800679e:	4b49      	ldr	r3, [pc, #292]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0ee      	beq.n	8006788 <HAL_RCC_OscConfig+0x334>
 80067aa:	e014      	b.n	80067d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ac:	f7fc ff5a 	bl	8003664 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b2:	e00a      	b.n	80067ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b4:	f7fc ff56 	bl	8003664 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d901      	bls.n	80067ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e0b5      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ca:	4b3e      	ldr	r3, [pc, #248]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80067cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1ee      	bne.n	80067b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d105      	bne.n	80067e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067dc:	4b39      	ldr	r3, [pc, #228]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80067de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e0:	4a38      	ldr	r2, [pc, #224]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80067e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80a1 	beq.w	8006934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067f2:	4b34      	ldr	r3, [pc, #208]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 030c 	and.w	r3, r3, #12
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d05c      	beq.n	80068b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2b02      	cmp	r3, #2
 8006804:	d141      	bne.n	800688a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006806:	4b31      	ldr	r3, [pc, #196]	@ (80068cc <HAL_RCC_OscConfig+0x478>)
 8006808:	2200      	movs	r2, #0
 800680a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680c:	f7fc ff2a 	bl	8003664 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006814:	f7fc ff26 	bl	8003664 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e087      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006826:	4b27      	ldr	r3, [pc, #156]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1f0      	bne.n	8006814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	69da      	ldr	r2, [r3, #28]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	431a      	orrs	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	085b      	lsrs	r3, r3, #1
 800684a:	3b01      	subs	r3, #1
 800684c:	041b      	lsls	r3, r3, #16
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	061b      	lsls	r3, r3, #24
 8006856:	491b      	ldr	r1, [pc, #108]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 8006858:	4313      	orrs	r3, r2
 800685a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800685c:	4b1b      	ldr	r3, [pc, #108]	@ (80068cc <HAL_RCC_OscConfig+0x478>)
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006862:	f7fc feff 	bl	8003664 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800686a:	f7fc fefb 	bl	8003664 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e05c      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800687c:	4b11      	ldr	r3, [pc, #68]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x416>
 8006888:	e054      	b.n	8006934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800688a:	4b10      	ldr	r3, [pc, #64]	@ (80068cc <HAL_RCC_OscConfig+0x478>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fc fee8 	bl	8003664 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006898:	f7fc fee4 	bl	8003664 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e045      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068aa:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <HAL_RCC_OscConfig+0x470>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f0      	bne.n	8006898 <HAL_RCC_OscConfig+0x444>
 80068b6:	e03d      	b.n	8006934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d107      	bne.n	80068d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e038      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
 80068c4:	40023800 	.word	0x40023800
 80068c8:	40007000 	.word	0x40007000
 80068cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006940 <HAL_RCC_OscConfig+0x4ec>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d028      	beq.n	8006930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d121      	bne.n	8006930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d11a      	bne.n	8006930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006900:	4013      	ands	r3, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006908:	4293      	cmp	r3, r2
 800690a:	d111      	bne.n	8006930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006916:	085b      	lsrs	r3, r3, #1
 8006918:	3b01      	subs	r3, #1
 800691a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d107      	bne.n	8006930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40023800 	.word	0x40023800

08006944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e0cc      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006958:	4b68      	ldr	r3, [pc, #416]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d90c      	bls.n	8006980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b65      	ldr	r3, [pc, #404]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	b2d2      	uxtb	r2, r2
 800696c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800696e:	4b63      	ldr	r3, [pc, #396]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d001      	beq.n	8006980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0b8      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d020      	beq.n	80069ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006998:	4b59      	ldr	r3, [pc, #356]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	4a58      	ldr	r2, [pc, #352]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80069a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b0:	4b53      	ldr	r3, [pc, #332]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4a52      	ldr	r2, [pc, #328]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80069ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069bc:	4b50      	ldr	r3, [pc, #320]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	494d      	ldr	r1, [pc, #308]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d044      	beq.n	8006a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d107      	bne.n	80069f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e2:	4b47      	ldr	r3, [pc, #284]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d119      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e07f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d003      	beq.n	8006a02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d107      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a02:	4b3f      	ldr	r3, [pc, #252]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d109      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e06f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a12:	4b3b      	ldr	r3, [pc, #236]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e067      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a22:	4b37      	ldr	r3, [pc, #220]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f023 0203 	bic.w	r2, r3, #3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4934      	ldr	r1, [pc, #208]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a34:	f7fc fe16 	bl	8003664 <HAL_GetTick>
 8006a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3c:	f7fc fe12 	bl	8003664 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e04f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a52:	4b2b      	ldr	r3, [pc, #172]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 020c 	and.w	r2, r3, #12
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d1eb      	bne.n	8006a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a64:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d20c      	bcs.n	8006a8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a72:	4b22      	ldr	r3, [pc, #136]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b20      	ldr	r3, [pc, #128]	@ (8006afc <HAL_RCC_ClockConfig+0x1b8>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e032      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a98:	4b19      	ldr	r3, [pc, #100]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4916      	ldr	r1, [pc, #88]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ab6:	4b12      	ldr	r3, [pc, #72]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	490e      	ldr	r1, [pc, #56]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006aca:	f000 f821 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b00 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	490a      	ldr	r1, [pc, #40]	@ (8006b04 <HAL_RCC_ClockConfig+0x1c0>)
 8006adc:	5ccb      	ldrb	r3, [r1, r3]
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	4a09      	ldr	r2, [pc, #36]	@ (8006b08 <HAL_RCC_ClockConfig+0x1c4>)
 8006ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ae6:	4b09      	ldr	r3, [pc, #36]	@ (8006b0c <HAL_RCC_ClockConfig+0x1c8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fc fd76 	bl	80035dc <HAL_InitTick>

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40023c00 	.word	0x40023c00
 8006b00:	40023800 	.word	0x40023800
 8006b04:	0800e6bc 	.word	0x0800e6bc
 8006b08:	2000000c 	.word	0x2000000c
 8006b0c:	20000010 	.word	0x20000010

08006b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b14:	b094      	sub	sp, #80	@ 0x50
 8006b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b28:	4b79      	ldr	r3, [pc, #484]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d00d      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0x40>
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	f200 80e1 	bhi.w	8006cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0x34>
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d003      	beq.n	8006b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b42:	e0db      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b44:	4b73      	ldr	r3, [pc, #460]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b48:	e0db      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b4a:	4b73      	ldr	r3, [pc, #460]	@ (8006d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b4e:	e0d8      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b50:	4b6f      	ldr	r3, [pc, #444]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d063      	beq.n	8006c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b66:	4b6a      	ldr	r3, [pc, #424]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	099b      	lsrs	r3, r3, #6
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f04f 0000 	mov.w	r0, #0
 8006b8a:	f04f 0100 	mov.w	r1, #0
 8006b8e:	0159      	lsls	r1, r3, #5
 8006b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b94:	0150      	lsls	r0, r2, #5
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	1a51      	subs	r1, r2, r1
 8006b9e:	6139      	str	r1, [r7, #16]
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	018b      	lsls	r3, r1, #6
 8006bb8:	4651      	mov	r1, sl
 8006bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bbe:	4651      	mov	r1, sl
 8006bc0:	018a      	lsls	r2, r1, #6
 8006bc2:	4651      	mov	r1, sl
 8006bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8006bc8:	4659      	mov	r1, fp
 8006bca:	eb63 0901 	sbc.w	r9, r3, r1
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006be2:	4690      	mov	r8, r2
 8006be4:	4699      	mov	r9, r3
 8006be6:	4623      	mov	r3, r4
 8006be8:	eb18 0303 	adds.w	r3, r8, r3
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	462b      	mov	r3, r5
 8006bf0:	eb49 0303 	adc.w	r3, r9, r3
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c02:	4629      	mov	r1, r5
 8006c04:	024b      	lsls	r3, r1, #9
 8006c06:	4621      	mov	r1, r4
 8006c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	024a      	lsls	r2, r1, #9
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c16:	2200      	movs	r2, #0
 8006c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c20:	f7f9 fb26 	bl	8000270 <__aeabi_uldivmod>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4613      	mov	r3, r2
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	e058      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2e:	4b38      	ldr	r3, [pc, #224]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	099b      	lsrs	r3, r3, #6
 8006c34:	2200      	movs	r2, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	4611      	mov	r1, r2
 8006c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c3e:	623b      	str	r3, [r7, #32]
 8006c40:	2300      	movs	r3, #0
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	f04f 0000 	mov.w	r0, #0
 8006c50:	f04f 0100 	mov.w	r1, #0
 8006c54:	0159      	lsls	r1, r3, #5
 8006c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c5a:	0150      	lsls	r0, r2, #5
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4641      	mov	r1, r8
 8006c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c66:	4649      	mov	r1, r9
 8006c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c80:	ebb2 040a 	subs.w	r4, r2, sl
 8006c84:	eb63 050b 	sbc.w	r5, r3, fp
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	00eb      	lsls	r3, r5, #3
 8006c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c96:	00e2      	lsls	r2, r4, #3
 8006c98:	4614      	mov	r4, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	18e3      	adds	r3, r4, r3
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	eb45 0303 	adc.w	r3, r5, r3
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	028b      	lsls	r3, r1, #10
 8006cba:	4621      	mov	r1, r4
 8006cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	028a      	lsls	r2, r1, #10
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cca:	2200      	movs	r2, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	61fa      	str	r2, [r7, #28]
 8006cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd4:	f7f9 facc 	bl	8000270 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4613      	mov	r3, r2
 8006cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	3301      	adds	r3, #1
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006cf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cfa:	e002      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cfc:	4b05      	ldr	r3, [pc, #20]	@ (8006d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3750      	adds	r7, #80	@ 0x50
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800
 8006d14:	00f42400 	.word	0x00f42400
 8006d18:	007a1200 	.word	0x007a1200

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d20:	4b03      	ldr	r3, [pc, #12]	@ (8006d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	2000000c 	.word	0x2000000c

08006d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d38:	f7ff fff0 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b05      	ldr	r3, [pc, #20]	@ (8006d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0a9b      	lsrs	r3, r3, #10
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4903      	ldr	r1, [pc, #12]	@ (8006d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40023800 	.word	0x40023800
 8006d58:	0800e6cc 	.word	0x0800e6cc

08006d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d60:	f7ff ffdc 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d64:	4602      	mov	r2, r0
 8006d66:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	0b5b      	lsrs	r3, r3, #13
 8006d6c:	f003 0307 	and.w	r3, r3, #7
 8006d70:	4903      	ldr	r1, [pc, #12]	@ (8006d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d72:	5ccb      	ldrb	r3, [r1, r3]
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	0800e6cc 	.word	0x0800e6cc

08006d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d101      	bne.n	8006d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e07b      	b.n	8006e8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d108      	bne.n	8006db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da6:	d009      	beq.n	8006dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	61da      	str	r2, [r3, #28]
 8006dae:	e005      	b.n	8006dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fb fd00 	bl	80027dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	f003 0301 	and.w	r3, r3, #1
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e40:	ea42 0103 	orr.w	r1, r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	f003 0104 	and.w	r1, r3, #4
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	f003 0210 	and.w	r2, r3, #16
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b088      	sub	sp, #32
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	60f8      	str	r0, [r7, #12]
 8006e9e:	60b9      	str	r1, [r7, #8]
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea6:	f7fc fbdd 	bl	8003664 <HAL_GetTick>
 8006eaa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006eac:	88fb      	ldrh	r3, [r7, #6]
 8006eae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d001      	beq.n	8006ec0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e12a      	b.n	8007116 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_SPI_Transmit+0x36>
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e122      	b.n	8007116 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d101      	bne.n	8006ede <HAL_SPI_Transmit+0x48>
 8006eda:	2302      	movs	r3, #2
 8006edc:	e11b      	b.n	8007116 <HAL_SPI_Transmit+0x280>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2203      	movs	r2, #3
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	88fa      	ldrh	r2, [r7, #6]
 8006efe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f2c:	d10f      	bne.n	8006f4e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f4c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f58:	2b40      	cmp	r3, #64	@ 0x40
 8006f5a:	d007      	beq.n	8006f6c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f74:	d152      	bne.n	800701c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SPI_Transmit+0xee>
 8006f7e:	8b7b      	ldrh	r3, [r7, #26]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d145      	bne.n	8007010 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f88:	881a      	ldrh	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f94:	1c9a      	adds	r2, r3, #2
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006fa8:	e032      	b.n	8007010 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d112      	bne.n	8006fde <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbc:	881a      	ldrh	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006fdc:	e018      	b.n	8007010 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fde:	f7fc fb41 	bl	8003664 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d803      	bhi.n	8006ff6 <HAL_SPI_Transmit+0x160>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ff4:	d102      	bne.n	8006ffc <HAL_SPI_Transmit+0x166>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e082      	b.n	8007116 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1c7      	bne.n	8006faa <HAL_SPI_Transmit+0x114>
 800701a:	e053      	b.n	80070c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_SPI_Transmit+0x194>
 8007024:	8b7b      	ldrh	r3, [r7, #26]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d147      	bne.n	80070ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007050:	e033      	b.n	80070ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0302 	and.w	r3, r3, #2
 800705c:	2b02      	cmp	r3, #2
 800705e:	d113      	bne.n	8007088 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	330c      	adds	r3, #12
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800707c:	b29b      	uxth	r3, r3
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007086:	e018      	b.n	80070ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007088:	f7fc faec 	bl	8003664 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	429a      	cmp	r2, r3
 8007096:	d803      	bhi.n	80070a0 <HAL_SPI_Transmit+0x20a>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800709e:	d102      	bne.n	80070a6 <HAL_SPI_Transmit+0x210>
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e02d      	b.n	8007116 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070be:	b29b      	uxth	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1c6      	bne.n	8007052 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fcf7 	bl	8007abc <SPI_EndRxTxTransaction>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007114:	2300      	movs	r3, #0
  }
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b088      	sub	sp, #32
 8007122:	af02      	add	r7, sp, #8
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	603b      	str	r3, [r7, #0]
 800712a:	4613      	mov	r3, r2
 800712c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d001      	beq.n	800713e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800713a:	2302      	movs	r3, #2
 800713c:	e104      	b.n	8007348 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007146:	d112      	bne.n	800716e <HAL_SPI_Receive+0x50>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10e      	bne.n	800716e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2204      	movs	r2, #4
 8007154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007158:	88fa      	ldrh	r2, [r7, #6]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4613      	mov	r3, r2
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	68b9      	ldr	r1, [r7, #8]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f8f3 	bl	8007350 <HAL_SPI_TransmitReceive>
 800716a:	4603      	mov	r3, r0
 800716c:	e0ec      	b.n	8007348 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716e:	f7fc fa79 	bl	8003664 <HAL_GetTick>
 8007172:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_Receive+0x62>
 800717a:	88fb      	ldrh	r3, [r7, #6]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e0e1      	b.n	8007348 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800718a:	2b01      	cmp	r3, #1
 800718c:	d101      	bne.n	8007192 <HAL_SPI_Receive+0x74>
 800718e:	2302      	movs	r3, #2
 8007190:	e0da      	b.n	8007348 <HAL_SPI_Receive+0x22a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2204      	movs	r2, #4
 800719e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	88fa      	ldrh	r2, [r7, #6]
 80071b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071e0:	d10f      	bne.n	8007202 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720c:	2b40      	cmp	r3, #64	@ 0x40
 800720e:	d007      	beq.n	8007220 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800721e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d170      	bne.n	800730a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007228:	e035      	b.n	8007296 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d115      	bne.n	8007264 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f103 020c 	add.w	r2, r3, #12
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	b2d2      	uxtb	r2, r2
 8007248:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007262:	e018      	b.n	8007296 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007264:	f7fc f9fe 	bl	8003664 <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d803      	bhi.n	800727c <HAL_SPI_Receive+0x15e>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800727a:	d102      	bne.n	8007282 <HAL_SPI_Receive+0x164>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e058      	b.n	8007348 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1c4      	bne.n	800722a <HAL_SPI_Receive+0x10c>
 80072a0:	e038      	b.n	8007314 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0301 	and.w	r3, r3, #1
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d113      	bne.n	80072d8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ba:	b292      	uxth	r2, r2
 80072bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072d6:	e018      	b.n	800730a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072d8:	f7fc f9c4 	bl	8003664 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d803      	bhi.n	80072f0 <HAL_SPI_Receive+0x1d2>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072ee:	d102      	bne.n	80072f6 <HAL_SPI_Receive+0x1d8>
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e01e      	b.n	8007348 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1c6      	bne.n	80072a2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fb69 	bl	80079f0 <SPI_EndRxTransaction>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007346:	2300      	movs	r3, #0
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3718      	adds	r7, #24
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	@ 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800735e:	2301      	movs	r3, #1
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007362:	f7fc f97f 	bl	8003664 <HAL_GetTick>
 8007366:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800736e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007376:	887b      	ldrh	r3, [r7, #2]
 8007378:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800737a:	7ffb      	ldrb	r3, [r7, #31]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d00c      	beq.n	800739a <HAL_SPI_TransmitReceive+0x4a>
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007386:	d106      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <HAL_SPI_TransmitReceive+0x46>
 8007390:	7ffb      	ldrb	r3, [r7, #31]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d001      	beq.n	800739a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007396:	2302      	movs	r3, #2
 8007398:	e17f      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_SPI_TransmitReceive+0x5c>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HAL_SPI_TransmitReceive+0x5c>
 80073a6:	887b      	ldrh	r3, [r7, #2]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e174      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_SPI_TransmitReceive+0x6e>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e16d      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b04      	cmp	r3, #4
 80073d0:	d003      	beq.n	80073da <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2205      	movs	r2, #5
 80073d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	887a      	ldrh	r2, [r7, #2]
 80073ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	887a      	ldrh	r2, [r7, #2]
 80073f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	887a      	ldrh	r2, [r7, #2]
 80073fc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	887a      	ldrh	r2, [r7, #2]
 8007402:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800741a:	2b40      	cmp	r3, #64	@ 0x40
 800741c:	d007      	beq.n	800742e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800742c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007436:	d17e      	bne.n	8007536 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <HAL_SPI_TransmitReceive+0xf6>
 8007440:	8afb      	ldrh	r3, [r7, #22]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d16c      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800744a:	881a      	ldrh	r2, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	1c9a      	adds	r2, r3, #2
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800746a:	e059      	b.n	8007520 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b02      	cmp	r3, #2
 8007478:	d11b      	bne.n	80074b2 <HAL_SPI_TransmitReceive+0x162>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d016      	beq.n	80074b2 <HAL_SPI_TransmitReceive+0x162>
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	2b01      	cmp	r3, #1
 8007488:	d113      	bne.n	80074b2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800748e:	881a      	ldrh	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749a:	1c9a      	adds	r2, r3, #2
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0301 	and.w	r3, r3, #1
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d119      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x1a4>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d014      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d4:	b292      	uxth	r2, r2
 80074d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074dc:	1c9a      	adds	r2, r3, #2
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074f0:	2301      	movs	r3, #1
 80074f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074f4:	f7fc f8b6 	bl	8003664 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007500:	429a      	cmp	r2, r3
 8007502:	d80d      	bhi.n	8007520 <HAL_SPI_TransmitReceive+0x1d0>
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800750a:	d009      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e0bc      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1a0      	bne.n	800746c <HAL_SPI_TransmitReceive+0x11c>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800752e:	b29b      	uxth	r3, r3
 8007530:	2b00      	cmp	r3, #0
 8007532:	d19b      	bne.n	800746c <HAL_SPI_TransmitReceive+0x11c>
 8007534:	e082      	b.n	800763c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_SPI_TransmitReceive+0x1f4>
 800753e:	8afb      	ldrh	r3, [r7, #22]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d171      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007560:	b29b      	uxth	r3, r3
 8007562:	3b01      	subs	r3, #1
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800756a:	e05d      	b.n	8007628 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b02      	cmp	r3, #2
 8007578:	d11c      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x264>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d017      	beq.n	80075b4 <HAL_SPI_TransmitReceive+0x264>
 8007584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007586:	2b01      	cmp	r3, #1
 8007588:	d114      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	7812      	ldrb	r2, [r2, #0]
 8007596:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	3b01      	subs	r3, #1
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d119      	bne.n	80075f6 <HAL_SPI_TransmitReceive+0x2a6>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d014      	beq.n	80075f6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d6:	b2d2      	uxtb	r2, r2
 80075d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075f2:	2301      	movs	r3, #1
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075f6:	f7fc f835 	bl	8003664 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007602:	429a      	cmp	r2, r3
 8007604:	d803      	bhi.n	800760e <HAL_SPI_TransmitReceive+0x2be>
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800760c:	d102      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x2c4>
 800760e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e038      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d19c      	bne.n	800756c <HAL_SPI_TransmitReceive+0x21c>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d197      	bne.n	800756c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800763c:	6a3a      	ldr	r2, [r7, #32]
 800763e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fa3b 	bl	8007abc <SPI_EndRxTxTransaction>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d008      	beq.n	800765e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e01d      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10a      	bne.n	800767c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007666:	2300      	movs	r3, #0
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	613b      	str	r3, [r7, #16]
 800767a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007698:	2300      	movs	r3, #0
  }
}
 800769a:	4618      	mov	r0, r3
 800769c:	3728      	adds	r7, #40	@ 0x28
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	099b      	lsrs	r3, r3, #6
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10f      	bne.n	80076e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	099b      	lsrs	r3, r3, #6
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
    return;
 80076e6:	e0d7      	b.n	8007898 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	085b      	lsrs	r3, r3, #1
 80076ec:	f003 0301 	and.w	r3, r3, #1
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_SPI_IRQHandler+0x66>
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	09db      	lsrs	r3, r3, #7
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3
    return;
 8007708:	e0c6      	b.n	8007898 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10c      	bne.n	8007730 <HAL_SPI_IRQHandler+0x8c>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	099b      	lsrs	r3, r3, #6
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	0a1b      	lsrs	r3, r3, #8
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 80b4 	beq.w	8007898 <HAL_SPI_IRQHandler+0x1f4>
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	095b      	lsrs	r3, r3, #5
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 80ad 	beq.w	8007898 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	099b      	lsrs	r3, r3, #6
 8007742:	f003 0301 	and.w	r3, r3, #1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d023      	beq.n	8007792 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b03      	cmp	r3, #3
 8007754:	d011      	beq.n	800777a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800775a:	f043 0204 	orr.w	r2, r3, #4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68db      	ldr	r3, [r3, #12]
 800776c:	617b      	str	r3, [r7, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	e00b      	b.n	8007792 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	613b      	str	r3, [r7, #16]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	693b      	ldr	r3, [r7, #16]
        return;
 8007790:	e082      	b.n	8007898 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d014      	beq.n	80077c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a2:	f043 0201 	orr.w	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00c      	beq.n	80077ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d8:	f043 0208 	orr.w	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80077e0:	2300      	movs	r3, #0
 80077e2:	60bb      	str	r3, [r7, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	60bb      	str	r3, [r7, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d04f      	beq.n	8007896 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007804:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d104      	bne.n	8007822 <HAL_SPI_IRQHandler+0x17e>
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d034      	beq.n	800788c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0203 	bic.w	r2, r2, #3
 8007830:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007836:	2b00      	cmp	r3, #0
 8007838:	d011      	beq.n	800785e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800783e:	4a18      	ldr	r2, [pc, #96]	@ (80078a0 <HAL_SPI_IRQHandler+0x1fc>)
 8007840:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007846:	4618      	mov	r0, r3
 8007848:	f7fc ff3e 	bl	80046c8 <HAL_DMA_Abort_IT>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007862:	2b00      	cmp	r3, #0
 8007864:	d016      	beq.n	8007894 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800786a:	4a0d      	ldr	r2, [pc, #52]	@ (80078a0 <HAL_SPI_IRQHandler+0x1fc>)
 800786c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007872:	4618      	mov	r0, r3
 8007874:	f7fc ff28 	bl	80046c8 <HAL_DMA_Abort_IT>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007882:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800788a:	e003      	b.n	8007894 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f809 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007892:	e000      	b.n	8007896 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007894:	bf00      	nop
    return;
 8007896:	bf00      	nop
  }
}
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	080078b9 	.word	0x080078b9

080078a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff ffe6 	bl	80078a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078d8:	bf00      	nop
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b088      	sub	sp, #32
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	4613      	mov	r3, r2
 80078ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078f0:	f7fb feb8 	bl	8003664 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	4413      	add	r3, r2
 80078fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007900:	f7fb feb0 	bl	8003664 <HAL_GetTick>
 8007904:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007906:	4b39      	ldr	r3, [pc, #228]	@ (80079ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	015b      	lsls	r3, r3, #5
 800790c:	0d1b      	lsrs	r3, r3, #20
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	fb02 f303 	mul.w	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007916:	e054      	b.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800791e:	d050      	beq.n	80079c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007920:	f7fb fea0 	bl	8003664 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	429a      	cmp	r2, r3
 800792e:	d902      	bls.n	8007936 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d13d      	bne.n	80079b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007944:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800794e:	d111      	bne.n	8007974 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007958:	d004      	beq.n	8007964 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007962:	d107      	bne.n	8007974 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007972:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800797c:	d10f      	bne.n	800799e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800799c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e017      	b.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3b01      	subs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	4013      	ands	r3, r2
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	bf0c      	ite	eq
 80079d2:	2301      	moveq	r3, #1
 80079d4:	2300      	movne	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d19b      	bne.n	8007918 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3720      	adds	r7, #32
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	2000000c 	.word	0x2000000c

080079f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a04:	d111      	bne.n	8007a2a <SPI_EndRxTransaction+0x3a>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a0e:	d004      	beq.n	8007a1a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a18:	d107      	bne.n	8007a2a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a28:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a32:	d12a      	bne.n	8007a8a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a3c:	d012      	beq.n	8007a64 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	2180      	movs	r1, #128	@ 0x80
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff ff49 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02d      	beq.n	8007ab0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a58:	f043 0220 	orr.w	r2, r3, #32
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e026      	b.n	8007ab2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f7ff ff36 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d01a      	beq.n	8007ab0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7e:	f043 0220 	orr.w	r2, r3, #32
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e013      	b.n	8007ab2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	2101      	movs	r1, #1
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff ff23 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e000      	b.n	8007ab2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b088      	sub	sp, #32
 8007ac0:	af02      	add	r7, sp, #8
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	2102      	movs	r1, #2
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff ff04 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d007      	beq.n	8007aee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae2:	f043 0220 	orr.w	r2, r3, #32
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e032      	b.n	8007b54 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007aee:	4b1b      	ldr	r3, [pc, #108]	@ (8007b5c <SPI_EndRxTxTransaction+0xa0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a1b      	ldr	r2, [pc, #108]	@ (8007b60 <SPI_EndRxTxTransaction+0xa4>)
 8007af4:	fba2 2303 	umull	r2, r3, r2, r3
 8007af8:	0d5b      	lsrs	r3, r3, #21
 8007afa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007afe:	fb02 f303 	mul.w	r3, r2, r3
 8007b02:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b0c:	d112      	bne.n	8007b34 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2180      	movs	r1, #128	@ 0x80
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f7ff fee1 	bl	80078e0 <SPI_WaitFlagStateUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d016      	beq.n	8007b52 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b28:	f043 0220 	orr.w	r2, r3, #32
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e00f      	b.n	8007b54 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4a:	2b80      	cmp	r3, #128	@ 0x80
 8007b4c:	d0f2      	beq.n	8007b34 <SPI_EndRxTxTransaction+0x78>
 8007b4e:	e000      	b.n	8007b52 <SPI_EndRxTxTransaction+0x96>
        break;
 8007b50:	bf00      	nop
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	165e9f81 	.word	0x165e9f81

08007b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e041      	b.n	8007bfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d106      	bne.n	8007b90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fa fe76 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f000 fbde 	bl	8008364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3708      	adds	r7, #8
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d001      	beq.n	8007c1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e046      	b.n	8007caa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a23      	ldr	r2, [pc, #140]	@ (8007cb8 <HAL_TIM_Base_Start+0xb4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d022      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c36:	d01d      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cbc <HAL_TIM_Base_Start+0xb8>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d018      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1e      	ldr	r2, [pc, #120]	@ (8007cc0 <HAL_TIM_Base_Start+0xbc>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d013      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1c      	ldr	r2, [pc, #112]	@ (8007cc4 <HAL_TIM_Base_Start+0xc0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d00e      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cc8 <HAL_TIM_Base_Start+0xc4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d009      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a19      	ldr	r2, [pc, #100]	@ (8007ccc <HAL_TIM_Base_Start+0xc8>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d004      	beq.n	8007c74 <HAL_TIM_Base_Start+0x70>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a18      	ldr	r2, [pc, #96]	@ (8007cd0 <HAL_TIM_Base_Start+0xcc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d111      	bne.n	8007c98 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b06      	cmp	r3, #6
 8007c84:	d010      	beq.n	8007ca8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f042 0201 	orr.w	r2, r2, #1
 8007c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c96:	e007      	b.n	8007ca8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0201 	orr.w	r2, r2, #1
 8007ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	40010000 	.word	0x40010000
 8007cbc:	40000400 	.word	0x40000400
 8007cc0:	40000800 	.word	0x40000800
 8007cc4:	40000c00 	.word	0x40000c00
 8007cc8:	40010400 	.word	0x40010400
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40001800 	.word	0x40001800

08007cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e041      	b.n	8007d6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d106      	bne.n	8007d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f839 	bl	8007d72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3304      	adds	r3, #4
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f000 fb26 	bl	8008364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d109      	bne.n	8007dac <HAL_TIM_PWM_Start+0x24>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf14      	ite	ne
 8007da4:	2301      	movne	r3, #1
 8007da6:	2300      	moveq	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e022      	b.n	8007df2 <HAL_TIM_PWM_Start+0x6a>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d109      	bne.n	8007dc6 <HAL_TIM_PWM_Start+0x3e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	bf14      	ite	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	e015      	b.n	8007df2 <HAL_TIM_PWM_Start+0x6a>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b08      	cmp	r3, #8
 8007dca:	d109      	bne.n	8007de0 <HAL_TIM_PWM_Start+0x58>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	bf14      	ite	ne
 8007dd8:	2301      	movne	r3, #1
 8007dda:	2300      	moveq	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	e008      	b.n	8007df2 <HAL_TIM_PWM_Start+0x6a>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	bf14      	ite	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e07c      	b.n	8007ef4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <HAL_TIM_PWM_Start+0x82>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e08:	e013      	b.n	8007e32 <HAL_TIM_PWM_Start+0xaa>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d104      	bne.n	8007e1a <HAL_TIM_PWM_Start+0x92>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e18:	e00b      	b.n	8007e32 <HAL_TIM_PWM_Start+0xaa>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d104      	bne.n	8007e2a <HAL_TIM_PWM_Start+0xa2>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e28:	e003      	b.n	8007e32 <HAL_TIM_PWM_Start+0xaa>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2201      	movs	r2, #1
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fe19 	bl	8008a72 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a2d      	ldr	r2, [pc, #180]	@ (8007efc <HAL_TIM_PWM_Start+0x174>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d004      	beq.n	8007e54 <HAL_TIM_PWM_Start+0xcc>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007f00 <HAL_TIM_PWM_Start+0x178>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d101      	bne.n	8007e58 <HAL_TIM_PWM_Start+0xd0>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <HAL_TIM_PWM_Start+0xd2>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d007      	beq.n	8007e6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a22      	ldr	r2, [pc, #136]	@ (8007efc <HAL_TIM_PWM_Start+0x174>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d022      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e80:	d01d      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a1f      	ldr	r2, [pc, #124]	@ (8007f04 <HAL_TIM_PWM_Start+0x17c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d018      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <HAL_TIM_PWM_Start+0x180>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <HAL_TIM_PWM_Start+0x184>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d00e      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a16      	ldr	r2, [pc, #88]	@ (8007f00 <HAL_TIM_PWM_Start+0x178>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d009      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a18      	ldr	r2, [pc, #96]	@ (8007f10 <HAL_TIM_PWM_Start+0x188>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d004      	beq.n	8007ebe <HAL_TIM_PWM_Start+0x136>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a16      	ldr	r2, [pc, #88]	@ (8007f14 <HAL_TIM_PWM_Start+0x18c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d111      	bne.n	8007ee2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b06      	cmp	r3, #6
 8007ece:	d010      	beq.n	8007ef2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0201 	orr.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee0:	e007      	b.n	8007ef2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0201 	orr.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40010000 	.word	0x40010000
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40000400 	.word	0x40000400
 8007f08:	40000800 	.word	0x40000800
 8007f0c:	40000c00 	.word	0x40000c00
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40001800 	.word	0x40001800

08007f18 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e041      	b.n	8007fb0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d106      	bne.n	8007f46 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f839 	bl	8007fb8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	3304      	adds	r3, #4
 8007f56:	4619      	mov	r1, r3
 8007f58:	4610      	mov	r0, r2
 8007f5a:	f000 fa03 	bl	8008364 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0208 	bic.w	r2, r2, #8
 8007f6c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	6819      	ldr	r1, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	683a      	ldr	r2, [r7, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e0ae      	b.n	8008148 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b0c      	cmp	r3, #12
 8007ff6:	f200 809f 	bhi.w	8008138 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8008000 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008000:	08008035 	.word	0x08008035
 8008004:	08008139 	.word	0x08008139
 8008008:	08008139 	.word	0x08008139
 800800c:	08008139 	.word	0x08008139
 8008010:	08008075 	.word	0x08008075
 8008014:	08008139 	.word	0x08008139
 8008018:	08008139 	.word	0x08008139
 800801c:	08008139 	.word	0x08008139
 8008020:	080080b7 	.word	0x080080b7
 8008024:	08008139 	.word	0x08008139
 8008028:	08008139 	.word	0x08008139
 800802c:	08008139 	.word	0x08008139
 8008030:	080080f7 	.word	0x080080f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fa3e 	bl	80084bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699a      	ldr	r2, [r3, #24]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0208 	orr.w	r2, r2, #8
 800804e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0204 	bic.w	r2, r2, #4
 800805e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6999      	ldr	r1, [r3, #24]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	619a      	str	r2, [r3, #24]
      break;
 8008072:	e064      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fa8e 	bl	800859c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800808e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	699a      	ldr	r2, [r3, #24]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800809e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6999      	ldr	r1, [r3, #24]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	619a      	str	r2, [r3, #24]
      break;
 80080b4:	e043      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68b9      	ldr	r1, [r7, #8]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 fae3 	bl	8008688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69da      	ldr	r2, [r3, #28]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 0208 	orr.w	r2, r2, #8
 80080d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0204 	bic.w	r2, r2, #4
 80080e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69d9      	ldr	r1, [r3, #28]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	691a      	ldr	r2, [r3, #16]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	61da      	str	r2, [r3, #28]
      break;
 80080f4:	e023      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 fb37 	bl	8008770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69d9      	ldr	r1, [r3, #28]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	021a      	lsls	r2, r3, #8
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	61da      	str	r2, [r3, #28]
      break;
 8008136:	e002      	b.n	800813e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	75fb      	strb	r3, [r7, #23]
      break;
 800813c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800815a:	2300      	movs	r3, #0
 800815c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIM_ConfigClockSource+0x1c>
 8008168:	2302      	movs	r3, #2
 800816a:	e0b4      	b.n	80082d6 <HAL_TIM_ConfigClockSource+0x186>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2202      	movs	r2, #2
 8008178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800818a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008192:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081a4:	d03e      	beq.n	8008224 <HAL_TIM_ConfigClockSource+0xd4>
 80081a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081aa:	f200 8087 	bhi.w	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081b2:	f000 8086 	beq.w	80082c2 <HAL_TIM_ConfigClockSource+0x172>
 80081b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ba:	d87f      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081bc:	2b70      	cmp	r3, #112	@ 0x70
 80081be:	d01a      	beq.n	80081f6 <HAL_TIM_ConfigClockSource+0xa6>
 80081c0:	2b70      	cmp	r3, #112	@ 0x70
 80081c2:	d87b      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081c4:	2b60      	cmp	r3, #96	@ 0x60
 80081c6:	d050      	beq.n	800826a <HAL_TIM_ConfigClockSource+0x11a>
 80081c8:	2b60      	cmp	r3, #96	@ 0x60
 80081ca:	d877      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081cc:	2b50      	cmp	r3, #80	@ 0x50
 80081ce:	d03c      	beq.n	800824a <HAL_TIM_ConfigClockSource+0xfa>
 80081d0:	2b50      	cmp	r3, #80	@ 0x50
 80081d2:	d873      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081d4:	2b40      	cmp	r3, #64	@ 0x40
 80081d6:	d058      	beq.n	800828a <HAL_TIM_ConfigClockSource+0x13a>
 80081d8:	2b40      	cmp	r3, #64	@ 0x40
 80081da:	d86f      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081dc:	2b30      	cmp	r3, #48	@ 0x30
 80081de:	d064      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x15a>
 80081e0:	2b30      	cmp	r3, #48	@ 0x30
 80081e2:	d86b      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081e4:	2b20      	cmp	r3, #32
 80081e6:	d060      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x15a>
 80081e8:	2b20      	cmp	r3, #32
 80081ea:	d867      	bhi.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d05c      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x15a>
 80081f0:	2b10      	cmp	r3, #16
 80081f2:	d05a      	beq.n	80082aa <HAL_TIM_ConfigClockSource+0x15a>
 80081f4:	e062      	b.n	80082bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008206:	f000 fc14 	bl	8008a32 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008218:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	609a      	str	r2, [r3, #8]
      break;
 8008222:	e04f      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008234:	f000 fbfd 	bl	8008a32 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689a      	ldr	r2, [r3, #8]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008246:	609a      	str	r2, [r3, #8]
      break;
 8008248:	e03c      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008256:	461a      	mov	r2, r3
 8008258:	f000 fb71 	bl	800893e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2150      	movs	r1, #80	@ 0x50
 8008262:	4618      	mov	r0, r3
 8008264:	f000 fbca 	bl	80089fc <TIM_ITRx_SetConfig>
      break;
 8008268:	e02c      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008276:	461a      	mov	r2, r3
 8008278:	f000 fb90 	bl	800899c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2160      	movs	r1, #96	@ 0x60
 8008282:	4618      	mov	r0, r3
 8008284:	f000 fbba 	bl	80089fc <TIM_ITRx_SetConfig>
      break;
 8008288:	e01c      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008296:	461a      	mov	r2, r3
 8008298:	f000 fb51 	bl	800893e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2140      	movs	r1, #64	@ 0x40
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fbaa 	bl	80089fc <TIM_ITRx_SetConfig>
      break;
 80082a8:	e00c      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f000 fba1 	bl	80089fc <TIM_ITRx_SetConfig>
      break;
 80082ba:	e003      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]
      break;
 80082c0:	e000      	b.n	80082c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d101      	bne.n	80082f6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80082f2:	2302      	movs	r3, #2
 80082f4:	e031      	b.n	800835a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fa87 	bl	800881c <TIM_SlaveTimer_SetConfig>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d009      	beq.n	8008328 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e018      	b.n	800835a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68da      	ldr	r2, [r3, #12]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008336:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008346:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a46      	ldr	r2, [pc, #280]	@ (8008490 <TIM_Base_SetConfig+0x12c>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d013      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008382:	d00f      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a43      	ldr	r2, [pc, #268]	@ (8008494 <TIM_Base_SetConfig+0x130>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00b      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a42      	ldr	r2, [pc, #264]	@ (8008498 <TIM_Base_SetConfig+0x134>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d007      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a41      	ldr	r2, [pc, #260]	@ (800849c <TIM_Base_SetConfig+0x138>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <TIM_Base_SetConfig+0x40>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a40      	ldr	r2, [pc, #256]	@ (80084a0 <TIM_Base_SetConfig+0x13c>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d108      	bne.n	80083b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a35      	ldr	r2, [pc, #212]	@ (8008490 <TIM_Base_SetConfig+0x12c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02b      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c4:	d027      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a32      	ldr	r2, [pc, #200]	@ (8008494 <TIM_Base_SetConfig+0x130>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d023      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a31      	ldr	r2, [pc, #196]	@ (8008498 <TIM_Base_SetConfig+0x134>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d01f      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a30      	ldr	r2, [pc, #192]	@ (800849c <TIM_Base_SetConfig+0x138>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d01b      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a2f      	ldr	r2, [pc, #188]	@ (80084a0 <TIM_Base_SetConfig+0x13c>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d017      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a2e      	ldr	r2, [pc, #184]	@ (80084a4 <TIM_Base_SetConfig+0x140>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d013      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a2d      	ldr	r2, [pc, #180]	@ (80084a8 <TIM_Base_SetConfig+0x144>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d00f      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2c      	ldr	r2, [pc, #176]	@ (80084ac <TIM_Base_SetConfig+0x148>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d00b      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	4a2b      	ldr	r2, [pc, #172]	@ (80084b0 <TIM_Base_SetConfig+0x14c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d007      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a2a      	ldr	r2, [pc, #168]	@ (80084b4 <TIM_Base_SetConfig+0x150>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d003      	beq.n	8008416 <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a29      	ldr	r2, [pc, #164]	@ (80084b8 <TIM_Base_SetConfig+0x154>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d108      	bne.n	8008428 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800841c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	4a10      	ldr	r2, [pc, #64]	@ (8008490 <TIM_Base_SetConfig+0x12c>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d003      	beq.n	800845c <TIM_Base_SetConfig+0xf8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	4a12      	ldr	r2, [pc, #72]	@ (80084a0 <TIM_Base_SetConfig+0x13c>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d103      	bne.n	8008464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691a      	ldr	r2, [r3, #16]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d105      	bne.n	8008482 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	f023 0201 	bic.w	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	611a      	str	r2, [r3, #16]
  }
}
 8008482:	bf00      	nop
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	40010000 	.word	0x40010000
 8008494:	40000400 	.word	0x40000400
 8008498:	40000800 	.word	0x40000800
 800849c:	40000c00 	.word	0x40000c00
 80084a0:	40010400 	.word	0x40010400
 80084a4:	40014000 	.word	0x40014000
 80084a8:	40014400 	.word	0x40014400
 80084ac:	40014800 	.word	0x40014800
 80084b0:	40001800 	.word	0x40001800
 80084b4:	40001c00 	.word	0x40001c00
 80084b8:	40002000 	.word	0x40002000

080084bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	f023 0201 	bic.w	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f023 0303 	bic.w	r3, r3, #3
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 0302 	bic.w	r3, r3, #2
 8008504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a20      	ldr	r2, [pc, #128]	@ (8008594 <TIM_OC1_SetConfig+0xd8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_OC1_SetConfig+0x64>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a1f      	ldr	r2, [pc, #124]	@ (8008598 <TIM_OC1_SetConfig+0xdc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d10c      	bne.n	800853a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f023 0308 	bic.w	r3, r3, #8
 8008526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 0304 	bic.w	r3, r3, #4
 8008538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a15      	ldr	r2, [pc, #84]	@ (8008594 <TIM_OC1_SetConfig+0xd8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d003      	beq.n	800854a <TIM_OC1_SetConfig+0x8e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a14      	ldr	r2, [pc, #80]	@ (8008598 <TIM_OC1_SetConfig+0xdc>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d111      	bne.n	800856e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	693a      	ldr	r2, [r7, #16]
 8008560:	4313      	orrs	r3, r2
 8008562:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	621a      	str	r2, [r3, #32]
}
 8008588:	bf00      	nop
 800858a:	371c      	adds	r7, #28
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	40010000 	.word	0x40010000
 8008598:	40010400 	.word	0x40010400

0800859c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	f023 0210 	bic.w	r2, r3, #16
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	021b      	lsls	r3, r3, #8
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	4313      	orrs	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f023 0320 	bic.w	r3, r3, #32
 80085e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a22      	ldr	r2, [pc, #136]	@ (8008680 <TIM_OC2_SetConfig+0xe4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_OC2_SetConfig+0x68>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a21      	ldr	r2, [pc, #132]	@ (8008684 <TIM_OC2_SetConfig+0xe8>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d10d      	bne.n	8008620 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800860a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4313      	orrs	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800861e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a17      	ldr	r2, [pc, #92]	@ (8008680 <TIM_OC2_SetConfig+0xe4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_OC2_SetConfig+0x94>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a16      	ldr	r2, [pc, #88]	@ (8008684 <TIM_OC2_SetConfig+0xe8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d113      	bne.n	8008658 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800863e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685a      	ldr	r2, [r3, #4]
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	621a      	str	r2, [r3, #32]
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40010000 	.word	0x40010000
 8008684:	40010400 	.word	0x40010400

08008688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0303 	bic.w	r3, r3, #3
 80086be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	4313      	orrs	r3, r2
 80086dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a21      	ldr	r2, [pc, #132]	@ (8008768 <TIM_OC3_SetConfig+0xe0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d003      	beq.n	80086ee <TIM_OC3_SetConfig+0x66>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a20      	ldr	r2, [pc, #128]	@ (800876c <TIM_OC3_SetConfig+0xe4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d10d      	bne.n	800870a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	4313      	orrs	r3, r2
 8008700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a16      	ldr	r2, [pc, #88]	@ (8008768 <TIM_OC3_SetConfig+0xe0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d003      	beq.n	800871a <TIM_OC3_SetConfig+0x92>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a15      	ldr	r2, [pc, #84]	@ (800876c <TIM_OC3_SetConfig+0xe4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d113      	bne.n	8008742 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	011b      	lsls	r3, r3, #4
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	693a      	ldr	r2, [r7, #16]
 8008746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	621a      	str	r2, [r3, #32]
}
 800875c:	bf00      	nop
 800875e:	371c      	adds	r7, #28
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	40010000 	.word	0x40010000
 800876c:	40010400 	.word	0x40010400

08008770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800879e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	031b      	lsls	r3, r3, #12
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a12      	ldr	r2, [pc, #72]	@ (8008814 <TIM_OC4_SetConfig+0xa4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_OC4_SetConfig+0x68>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a11      	ldr	r2, [pc, #68]	@ (8008818 <TIM_OC4_SetConfig+0xa8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d109      	bne.n	80087ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	019b      	lsls	r3, r3, #6
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685a      	ldr	r2, [r3, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	693a      	ldr	r2, [r7, #16]
 8008804:	621a      	str	r2, [r3, #32]
}
 8008806:	bf00      	nop
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	40010000 	.word	0x40010000
 8008818:	40010400 	.word	0x40010400

0800881c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008838:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	4313      	orrs	r3, r2
 8008842:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	2b70      	cmp	r3, #112	@ 0x70
 8008864:	d01a      	beq.n	800889c <TIM_SlaveTimer_SetConfig+0x80>
 8008866:	2b70      	cmp	r3, #112	@ 0x70
 8008868:	d860      	bhi.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
 800886a:	2b60      	cmp	r3, #96	@ 0x60
 800886c:	d054      	beq.n	8008918 <TIM_SlaveTimer_SetConfig+0xfc>
 800886e:	2b60      	cmp	r3, #96	@ 0x60
 8008870:	d85c      	bhi.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
 8008872:	2b50      	cmp	r3, #80	@ 0x50
 8008874:	d046      	beq.n	8008904 <TIM_SlaveTimer_SetConfig+0xe8>
 8008876:	2b50      	cmp	r3, #80	@ 0x50
 8008878:	d858      	bhi.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
 800887a:	2b40      	cmp	r3, #64	@ 0x40
 800887c:	d019      	beq.n	80088b2 <TIM_SlaveTimer_SetConfig+0x96>
 800887e:	2b40      	cmp	r3, #64	@ 0x40
 8008880:	d854      	bhi.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
 8008882:	2b30      	cmp	r3, #48	@ 0x30
 8008884:	d055      	beq.n	8008932 <TIM_SlaveTimer_SetConfig+0x116>
 8008886:	2b30      	cmp	r3, #48	@ 0x30
 8008888:	d850      	bhi.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
 800888a:	2b20      	cmp	r3, #32
 800888c:	d051      	beq.n	8008932 <TIM_SlaveTimer_SetConfig+0x116>
 800888e:	2b20      	cmp	r3, #32
 8008890:	d84c      	bhi.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
 8008892:	2b00      	cmp	r3, #0
 8008894:	d04d      	beq.n	8008932 <TIM_SlaveTimer_SetConfig+0x116>
 8008896:	2b10      	cmp	r3, #16
 8008898:	d04b      	beq.n	8008932 <TIM_SlaveTimer_SetConfig+0x116>
 800889a:	e047      	b.n	800892c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80088ac:	f000 f8c1 	bl	8008a32 <TIM_ETR_SetConfig>
      break;
 80088b0:	e040      	b.n	8008934 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b05      	cmp	r3, #5
 80088b8:	d101      	bne.n	80088be <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e03b      	b.n	8008936 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6a1a      	ldr	r2, [r3, #32]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f022 0201 	bic.w	r2, r2, #1
 80088d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	011b      	lsls	r3, r3, #4
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	621a      	str	r2, [r3, #32]
      break;
 8008902:	e017      	b.n	8008934 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008910:	461a      	mov	r2, r3
 8008912:	f000 f814 	bl	800893e <TIM_TI1_ConfigInputStage>
      break;
 8008916:	e00d      	b.n	8008934 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008924:	461a      	mov	r2, r3
 8008926:	f000 f839 	bl	800899c <TIM_TI2_ConfigInputStage>
      break;
 800892a:	e003      	b.n	8008934 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
      break;
 8008930:	e000      	b.n	8008934 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008932:	bf00      	nop
  }

  return status;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3718      	adds	r7, #24
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800893e:	b480      	push	{r7}
 8008940:	b087      	sub	sp, #28
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	60b9      	str	r1, [r7, #8]
 8008948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	f023 0201 	bic.w	r2, r3, #1
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008968:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	011b      	lsls	r3, r3, #4
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f023 030a 	bic.w	r3, r3, #10
 800897a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800897c:	697a      	ldr	r2, [r7, #20]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	621a      	str	r2, [r3, #32]
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a1b      	ldr	r3, [r3, #32]
 80089ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0210 	bic.w	r2, r3, #16
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	031b      	lsls	r3, r3, #12
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	011b      	lsls	r3, r3, #4
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	697a      	ldr	r2, [r7, #20]
 80089ee:	621a      	str	r2, [r3, #32]
}
 80089f0:	bf00      	nop
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	f043 0307 	orr.w	r3, r3, #7
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	609a      	str	r2, [r3, #8]
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b087      	sub	sp, #28
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	021a      	lsls	r2, r3, #8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	609a      	str	r2, [r3, #8]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b087      	sub	sp, #28
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	60f8      	str	r0, [r7, #12]
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f003 031f 	and.w	r3, r3, #31
 8008a84:	2201      	movs	r2, #1
 8008a86:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6a1a      	ldr	r2, [r3, #32]
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	43db      	mvns	r3, r3
 8008a94:	401a      	ands	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6a1a      	ldr	r2, [r3, #32]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	621a      	str	r2, [r3, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	371c      	adds	r7, #28
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e05a      	b.n	8008b8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2202      	movs	r2, #2
 8008ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a21      	ldr	r2, [pc, #132]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d022      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b20:	d01d      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d018      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d013      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00e      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a18      	ldr	r2, [pc, #96]	@ (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d009      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a17      	ldr	r2, [pc, #92]	@ (8008bac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d004      	beq.n	8008b5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a15      	ldr	r2, [pc, #84]	@ (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d10c      	bne.n	8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	68ba      	ldr	r2, [r7, #8]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40000400 	.word	0x40000400
 8008ba0:	40000800 	.word	0x40000800
 8008ba4:	40000c00 	.word	0x40000c00
 8008ba8:	40010400 	.word	0x40010400
 8008bac:	40014000 	.word	0x40014000
 8008bb0:	40001800 	.word	0x40001800

08008bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e042      	b.n	8008c4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d106      	bne.n	8008be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7f9 ff2e 	bl	8002a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2224      	movs	r2, #36	@ 0x24
 8008be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 ff6d 	bl	8009ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	695a      	ldr	r2, [r3, #20]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2220      	movs	r2, #32
 8008c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08c      	sub	sp, #48	@ 0x30
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d156      	bne.n	8008d1c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <HAL_UART_Transmit_DMA+0x26>
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e04f      	b.n	8008d1e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	88fa      	ldrh	r2, [r7, #6]
 8008c8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2221      	movs	r2, #33	@ 0x21
 8008c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca2:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <HAL_UART_Transmit_DMA+0xd4>)
 8008ca4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008caa:	4a20      	ldr	r2, [pc, #128]	@ (8008d2c <HAL_UART_Transmit_DMA+0xd8>)
 8008cac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d30 <HAL_UART_Transmit_DMA+0xdc>)
 8008cb4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	2200      	movs	r2, #0
 8008cbc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	6819      	ldr	r1, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	f7fb fc2f 	bl	8004538 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ce2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3314      	adds	r3, #20
 8008cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3314      	adds	r3, #20
 8008d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d04:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6a39      	ldr	r1, [r7, #32]
 8008d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e5      	bne.n	8008ce4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e000      	b.n	8008d1e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008d1c:	2302      	movs	r3, #2
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3730      	adds	r7, #48	@ 0x30
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	08009365 	.word	0x08009365
 8008d2c:	080093ff 	.word	0x080093ff
 8008d30:	08009583 	.word	0x08009583

08008d34 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08c      	sub	sp, #48	@ 0x30
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d14a      	bne.n	8008de4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e043      	b.n	8008de6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2201      	movs	r2, #1
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008d6a:	88fb      	ldrh	r3, [r7, #6]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 fc51 	bl	8009618 <UART_Start_Receive_DMA>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d12c      	bne.n	8008dde <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d125      	bne.n	8008dd8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	613b      	str	r3, [r7, #16]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	613b      	str	r3, [r7, #16]
 8008da0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	617b      	str	r3, [r7, #20]
   return(result);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f043 0310 	orr.w	r3, r3, #16
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008dc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6a39      	ldr	r1, [r7, #32]
 8008dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e5      	bne.n	8008da2 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8008dd6:	e002      	b.n	8008dde <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008dde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008de2:	e000      	b.n	8008de6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8008de4:	2302      	movs	r3, #2
  }
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3730      	adds	r7, #48	@ 0x30
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b0ba      	sub	sp, #232	@ 0xe8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e16:	2300      	movs	r3, #0
 8008e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10f      	bne.n	8008e56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_UART_IRQHandler+0x66>
 8008e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fd83 	bl	800995a <UART_Receive_IT>
      return;
 8008e54:	e25b      	b.n	800930e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80de 	beq.w	800901c <HAL_UART_IRQHandler+0x22c>
 8008e60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	f000 80d1 	beq.w	800901c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <HAL_UART_IRQHandler+0xae>
 8008e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e96:	f043 0201 	orr.w	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ea2:	f003 0304 	and.w	r3, r3, #4
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <HAL_UART_IRQHandler+0xd2>
 8008eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eba:	f043 0202 	orr.w	r2, r3, #2
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00b      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xf6>
 8008ece:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d005      	beq.n	8008ee6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ede:	f043 0204 	orr.w	r2, r3, #4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eea:	f003 0308 	and.w	r3, r3, #8
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d011      	beq.n	8008f16 <HAL_UART_IRQHandler+0x126>
 8008ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d105      	bne.n	8008f0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d005      	beq.n	8008f16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0e:	f043 0208 	orr.w	r2, r3, #8
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f000 81f2 	beq.w	8009304 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <HAL_UART_IRQHandler+0x14e>
 8008f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f30:	f003 0320 	and.w	r3, r3, #32
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fd0e 	bl	800995a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f48:	2b40      	cmp	r3, #64	@ 0x40
 8008f4a:	bf0c      	ite	eq
 8008f4c:	2301      	moveq	r3, #1
 8008f4e:	2300      	movne	r3, #0
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f5a:	f003 0308 	and.w	r3, r3, #8
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d103      	bne.n	8008f6a <HAL_UART_IRQHandler+0x17a>
 8008f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d04f      	beq.n	800900a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fc16 	bl	800979c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f7a:	2b40      	cmp	r3, #64	@ 0x40
 8008f7c:	d141      	bne.n	8009002 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3314      	adds	r3, #20
 8008f84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3314      	adds	r3, #20
 8008fa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008faa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fba:	e841 2300 	strex	r3, r2, [r1]
 8008fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1d9      	bne.n	8008f7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d013      	beq.n	8008ffa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd6:	4a7e      	ldr	r2, [pc, #504]	@ (80091d0 <HAL_UART_IRQHandler+0x3e0>)
 8008fd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fb fb72 	bl	80046c8 <HAL_DMA_Abort_IT>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d016      	beq.n	8009018 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	e00e      	b.n	8009018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9a8 	bl	8009350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009000:	e00a      	b.n	8009018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f9a4 	bl	8009350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009008:	e006      	b.n	8009018 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9a0 	bl	8009350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009016:	e175      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009018:	bf00      	nop
    return;
 800901a:	e173      	b.n	8009304 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009020:	2b01      	cmp	r3, #1
 8009022:	f040 814f 	bne.w	80092c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 8148 	beq.w	80092c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8141 	beq.w	80092c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009042:	2300      	movs	r3, #0
 8009044:	60bb      	str	r3, [r7, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60bb      	str	r3, [r7, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	60bb      	str	r3, [r7, #8]
 8009056:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009062:	2b40      	cmp	r3, #64	@ 0x40
 8009064:	f040 80b6 	bne.w	80091d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009074:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009078:	2b00      	cmp	r3, #0
 800907a:	f000 8145 	beq.w	8009308 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009086:	429a      	cmp	r2, r3
 8009088:	f080 813e 	bcs.w	8009308 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009092:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800909e:	f000 8088 	beq.w	80091b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	330c      	adds	r3, #12
 80090a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80090ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80090d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090de:	e841 2300 	strex	r3, r2, [r1]
 80090e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1d9      	bne.n	80090a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3314      	adds	r3, #20
 80090f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80090fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009100:	f023 0301 	bic.w	r3, r3, #1
 8009104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009112:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009116:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009118:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800911a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e1      	bne.n	80090ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3314      	adds	r3, #20
 8009130:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800913a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800913c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009140:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	3314      	adds	r3, #20
 800914a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800914e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009150:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009152:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009156:	e841 2300 	strex	r3, r2, [r1]
 800915a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800915c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e3      	bne.n	800912a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009182:	f023 0310 	bic.w	r3, r3, #16
 8009186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	330c      	adds	r3, #12
 8009190:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009194:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009196:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009198:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800919a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800919c:	e841 2300 	strex	r3, r2, [r1]
 80091a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e3      	bne.n	8009170 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fb fa1b 	bl	80045e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2202      	movs	r2, #2
 80091b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7f9 ffab 	bl	8003124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091ce:	e09b      	b.n	8009308 <HAL_UART_IRQHandler+0x518>
 80091d0:	08009863 	.word	0x08009863
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f000 808e 	beq.w	800930c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80091f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8089 	beq.w	800930c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	330c      	adds	r3, #12
 8009200:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	e853 3f00 	ldrex	r3, [r3]
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800920a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800920c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	330c      	adds	r3, #12
 800921a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800921e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009220:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009224:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009226:	e841 2300 	strex	r3, r2, [r1]
 800922a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800922c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1e3      	bne.n	80091fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	3314      	adds	r3, #20
 8009238:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	623b      	str	r3, [r7, #32]
   return(result);
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	f023 0301 	bic.w	r3, r3, #1
 8009248:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3314      	adds	r3, #20
 8009252:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009256:	633a      	str	r2, [r7, #48]	@ 0x30
 8009258:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800925c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e3      	bne.n	8009232 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	330c      	adds	r3, #12
 800927e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	e853 3f00 	ldrex	r3, [r3]
 8009286:	60fb      	str	r3, [r7, #12]
   return(result);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0310 	bic.w	r3, r3, #16
 800928e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	330c      	adds	r3, #12
 8009298:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800929c:	61fa      	str	r2, [r7, #28]
 800929e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	69b9      	ldr	r1, [r7, #24]
 80092a2:	69fa      	ldr	r2, [r7, #28]
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	617b      	str	r3, [r7, #20]
   return(result);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e3      	bne.n	8009278 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7f9 ff31 	bl	8003124 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c2:	e023      	b.n	800930c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d009      	beq.n	80092e4 <HAL_UART_IRQHandler+0x4f4>
 80092d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fad4 	bl	800988a <UART_Transmit_IT>
    return;
 80092e2:	e014      	b.n	800930e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00e      	beq.n	800930e <HAL_UART_IRQHandler+0x51e>
 80092f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d008      	beq.n	800930e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 fb14 	bl	800992a <UART_EndTransmit_IT>
    return;
 8009302:	e004      	b.n	800930e <HAL_UART_IRQHandler+0x51e>
    return;
 8009304:	bf00      	nop
 8009306:	e002      	b.n	800930e <HAL_UART_IRQHandler+0x51e>
      return;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <HAL_UART_IRQHandler+0x51e>
      return;
 800930c:	bf00      	nop
  }
}
 800930e:	37e8      	adds	r7, #232	@ 0xe8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b090      	sub	sp, #64	@ 0x40
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800937c:	2b00      	cmp	r3, #0
 800937e:	d137      	bne.n	80093f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	2200      	movs	r2, #0
 8009384:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3314      	adds	r3, #20
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	623b      	str	r3, [r7, #32]
   return(result);
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800939c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800939e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3314      	adds	r3, #20
 80093a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80093a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80093a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80093ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e5      	bne.n	8009386 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	330c      	adds	r3, #12
 80093c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80093d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	330c      	adds	r3, #12
 80093d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093da:	61fa      	str	r2, [r7, #28]
 80093dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	69b9      	ldr	r1, [r7, #24]
 80093e0:	69fa      	ldr	r2, [r7, #28]
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	617b      	str	r3, [r7, #20]
   return(result);
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e5      	bne.n	80093ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093ee:	e002      	b.n	80093f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80093f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80093f2:	f7f9 ff58 	bl	80032a6 <HAL_UART_TxCpltCallback>
}
 80093f6:	bf00      	nop
 80093f8:	3740      	adds	r7, #64	@ 0x40
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f7ff ff81 	bl	8009314 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b09c      	sub	sp, #112	@ 0x70
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009426:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009432:	2b00      	cmp	r3, #0
 8009434:	d172      	bne.n	800951c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009438:	2200      	movs	r2, #0
 800943a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800944c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800944e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009452:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	330c      	adds	r3, #12
 800945a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800945c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800945e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800946a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3314      	adds	r3, #20
 8009476:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	667b      	str	r3, [r7, #100]	@ 0x64
 8009488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3314      	adds	r3, #20
 800948e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009490:	647a      	str	r2, [r7, #68]	@ 0x44
 8009492:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009496:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800949e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e5      	bne.n	8009470 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3314      	adds	r3, #20
 80094aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	623b      	str	r3, [r7, #32]
   return(result);
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80094bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3314      	adds	r3, #20
 80094c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80094c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80094c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e5      	bne.n	80094a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094da:	2220      	movs	r2, #32
 80094dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d119      	bne.n	800951c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	330c      	adds	r3, #12
 80094ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	e853 3f00 	ldrex	r3, [r3]
 80094f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f023 0310 	bic.w	r3, r3, #16
 80094fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	330c      	adds	r3, #12
 8009506:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009508:	61fa      	str	r2, [r7, #28]
 800950a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	69b9      	ldr	r1, [r7, #24]
 800950e:	69fa      	ldr	r2, [r7, #28]
 8009510:	e841 2300 	strex	r3, r2, [r1]
 8009514:	617b      	str	r3, [r7, #20]
   return(result);
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d1e5      	bne.n	80094e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800951c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800951e:	2200      	movs	r2, #0
 8009520:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009526:	2b01      	cmp	r3, #1
 8009528:	d106      	bne.n	8009538 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800952a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800952c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800952e:	4619      	mov	r1, r3
 8009530:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009532:	f7f9 fdf7 	bl	8003124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009536:	e002      	b.n	800953e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009538:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800953a:	f7ff fef5 	bl	8009328 <HAL_UART_RxCpltCallback>
}
 800953e:	bf00      	nop
 8009540:	3770      	adds	r7, #112	@ 0x70
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009552:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800955e:	2b01      	cmp	r3, #1
 8009560:	d108      	bne.n	8009574 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009566:	085b      	lsrs	r3, r3, #1
 8009568:	b29b      	uxth	r3, r3
 800956a:	4619      	mov	r1, r3
 800956c:	68f8      	ldr	r0, [r7, #12]
 800956e:	f7f9 fdd9 	bl	8003124 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009572:	e002      	b.n	800957a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff fee1 	bl	800933c <HAL_UART_RxHalfCpltCallback>
}
 800957a:	bf00      	nop
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800958a:	2300      	movs	r3, #0
 800958c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009592:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800959e:	2b80      	cmp	r3, #128	@ 0x80
 80095a0:	bf0c      	ite	eq
 80095a2:	2301      	moveq	r3, #1
 80095a4:	2300      	movne	r3, #0
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b21      	cmp	r3, #33	@ 0x21
 80095b4:	d108      	bne.n	80095c8 <UART_DMAError+0x46>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d005      	beq.n	80095c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2200      	movs	r2, #0
 80095c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80095c2:	68b8      	ldr	r0, [r7, #8]
 80095c4:	f000 f8c2 	bl	800974c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d2:	2b40      	cmp	r3, #64	@ 0x40
 80095d4:	bf0c      	ite	eq
 80095d6:	2301      	moveq	r3, #1
 80095d8:	2300      	movne	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	2b22      	cmp	r3, #34	@ 0x22
 80095e8:	d108      	bne.n	80095fc <UART_DMAError+0x7a>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	2200      	movs	r2, #0
 80095f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80095f6:	68b8      	ldr	r0, [r7, #8]
 80095f8:	f000 f8d0 	bl	800979c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009600:	f043 0210 	orr.w	r2, r3, #16
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009608:	68b8      	ldr	r0, [r7, #8]
 800960a:	f7ff fea1 	bl	8009350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800960e:	bf00      	nop
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b098      	sub	sp, #96	@ 0x60
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	4613      	mov	r3, r2
 8009624:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	88fa      	ldrh	r2, [r7, #6]
 8009630:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2222      	movs	r2, #34	@ 0x22
 800963c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009644:	4a3e      	ldr	r2, [pc, #248]	@ (8009740 <UART_Start_Receive_DMA+0x128>)
 8009646:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800964c:	4a3d      	ldr	r2, [pc, #244]	@ (8009744 <UART_Start_Receive_DMA+0x12c>)
 800964e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009654:	4a3c      	ldr	r2, [pc, #240]	@ (8009748 <UART_Start_Receive_DMA+0x130>)
 8009656:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965c:	2200      	movs	r2, #0
 800965e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3304      	adds	r3, #4
 8009670:	4619      	mov	r1, r3
 8009672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	f7fa ff5e 	bl	8004538 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800967c:	2300      	movs	r3, #0
 800967e:	613b      	str	r3, [r7, #16]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	613b      	str	r3, [r7, #16]
 8009690:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d019      	beq.n	80096ce <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	330c      	adds	r3, #12
 80096a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096a4:	e853 3f00 	ldrex	r3, [r3]
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	330c      	adds	r3, #12
 80096b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096ba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80096bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096be:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80096c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096c2:	e841 2300 	strex	r3, r2, [r1]
 80096c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e5      	bne.n	800969a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3314      	adds	r3, #20
 80096d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e0:	f043 0301 	orr.w	r3, r3, #1
 80096e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3314      	adds	r3, #20
 80096ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096ee:	63ba      	str	r2, [r7, #56]	@ 0x38
 80096f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80096f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e5      	bne.n	80096ce <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3314      	adds	r3, #20
 8009708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	617b      	str	r3, [r7, #20]
   return(result);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009718:	653b      	str	r3, [r7, #80]	@ 0x50
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3314      	adds	r3, #20
 8009720:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009722:	627a      	str	r2, [r7, #36]	@ 0x24
 8009724:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6a39      	ldr	r1, [r7, #32]
 8009728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e5      	bne.n	8009702 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3760      	adds	r7, #96	@ 0x60
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	0800941b 	.word	0x0800941b
 8009744:	08009547 	.word	0x08009547
 8009748:	08009583 	.word	0x08009583

0800974c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b089      	sub	sp, #36	@ 0x24
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	330c      	adds	r3, #12
 800975a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	60bb      	str	r3, [r7, #8]
   return(result);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800976a:	61fb      	str	r3, [r7, #28]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	69fa      	ldr	r2, [r7, #28]
 8009774:	61ba      	str	r2, [r7, #24]
 8009776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6979      	ldr	r1, [r7, #20]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	613b      	str	r3, [r7, #16]
   return(result);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e5      	bne.n	8009754 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009790:	bf00      	nop
 8009792:	3724      	adds	r7, #36	@ 0x24
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b095      	sub	sp, #84	@ 0x54
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	330c      	adds	r3, #12
 80097aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	330c      	adds	r3, #12
 80097c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e5      	bne.n	80097a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3314      	adds	r3, #20
 80097de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	e853 3f00 	ldrex	r3, [r3]
 80097e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	f023 0301 	bic.w	r3, r3, #1
 80097ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	3314      	adds	r3, #20
 80097f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e5      	bne.n	80097d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009810:	2b01      	cmp	r3, #1
 8009812:	d119      	bne.n	8009848 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	330c      	adds	r3, #12
 800981a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	e853 3f00 	ldrex	r3, [r3]
 8009822:	60bb      	str	r3, [r7, #8]
   return(result);
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f023 0310 	bic.w	r3, r3, #16
 800982a:	647b      	str	r3, [r7, #68]	@ 0x44
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	330c      	adds	r3, #12
 8009832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009834:	61ba      	str	r2, [r7, #24]
 8009836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009838:	6979      	ldr	r1, [r7, #20]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	e841 2300 	strex	r3, r2, [r1]
 8009840:	613b      	str	r3, [r7, #16]
   return(result);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d1e5      	bne.n	8009814 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2220      	movs	r2, #32
 800984c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009856:	bf00      	nop
 8009858:	3754      	adds	r7, #84	@ 0x54
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff fd67 	bl	8009350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009882:	bf00      	nop
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b21      	cmp	r3, #33	@ 0x21
 800989c:	d13e      	bne.n	800991c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098a6:	d114      	bne.n	80098d2 <UART_Transmit_IT+0x48>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d110      	bne.n	80098d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	1c9a      	adds	r2, r3, #2
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	621a      	str	r2, [r3, #32]
 80098d0:	e008      	b.n	80098e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	1c59      	adds	r1, r3, #1
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6211      	str	r1, [r2, #32]
 80098dc:	781a      	ldrb	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	3b01      	subs	r3, #1
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	4619      	mov	r1, r3
 80098f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10f      	bne.n	8009918 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009906:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68da      	ldr	r2, [r3, #12]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009916:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009918:	2300      	movs	r3, #0
 800991a:	e000      	b.n	800991e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800991c:	2302      	movs	r3, #2
  }
}
 800991e:	4618      	mov	r0, r3
 8009920:	3714      	adds	r7, #20
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009940:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2220      	movs	r2, #32
 8009946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7f9 fcab 	bl	80032a6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3708      	adds	r7, #8
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b08c      	sub	sp, #48	@ 0x30
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b22      	cmp	r3, #34	@ 0x22
 800996c:	f040 80ae 	bne.w	8009acc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009978:	d117      	bne.n	80099aa <UART_Receive_IT+0x50>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d113      	bne.n	80099aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009982:	2300      	movs	r3, #0
 8009984:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800998a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009998:	b29a      	uxth	r2, r3
 800999a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800999c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a2:	1c9a      	adds	r2, r3, #2
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80099a8:	e026      	b.n	80099f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80099b0:	2300      	movs	r3, #0
 80099b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099bc:	d007      	beq.n	80099ce <UART_Receive_IT+0x74>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <UART_Receive_IT+0x82>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d8:	701a      	strb	r2, [r3, #0]
 80099da:	e008      	b.n	80099ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e8:	b2da      	uxtb	r2, r3
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	3b01      	subs	r3, #1
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	4619      	mov	r1, r3
 8009a06:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d15d      	bne.n	8009ac8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0220 	bic.w	r2, r2, #32
 8009a1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	695a      	ldr	r2, [r3, #20]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 0201 	bic.w	r2, r2, #1
 8009a3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2220      	movs	r2, #32
 8009a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d135      	bne.n	8009abe <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	330c      	adds	r3, #12
 8009a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	e853 3f00 	ldrex	r3, [r3]
 8009a66:	613b      	str	r3, [r7, #16]
   return(result);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f023 0310 	bic.w	r3, r3, #16
 8009a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	330c      	adds	r3, #12
 8009a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a78:	623a      	str	r2, [r7, #32]
 8009a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	69f9      	ldr	r1, [r7, #28]
 8009a7e:	6a3a      	ldr	r2, [r7, #32]
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e5      	bne.n	8009a58 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d10a      	bne.n	8009ab0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	60fb      	str	r3, [r7, #12]
 8009aae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7f9 fb34 	bl	8003124 <HAL_UARTEx_RxEventCallback>
 8009abc:	e002      	b.n	8009ac4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fc32 	bl	8009328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e002      	b.n	8009ace <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e000      	b.n	8009ace <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009acc:	2302      	movs	r3, #2
  }
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3730      	adds	r7, #48	@ 0x30
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009adc:	b0c0      	sub	sp, #256	@ 0x100
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af4:	68d9      	ldr	r1, [r3, #12]
 8009af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	ea40 0301 	orr.w	r3, r0, r1
 8009b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	431a      	orrs	r2, r3
 8009b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b30:	f021 010c 	bic.w	r1, r1, #12
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b52:	6999      	ldr	r1, [r3, #24]
 8009b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	ea40 0301 	orr.w	r3, r0, r1
 8009b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	4b8f      	ldr	r3, [pc, #572]	@ (8009da4 <UART_SetConfig+0x2cc>)
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d005      	beq.n	8009b78 <UART_SetConfig+0xa0>
 8009b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	4b8d      	ldr	r3, [pc, #564]	@ (8009da8 <UART_SetConfig+0x2d0>)
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d104      	bne.n	8009b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b78:	f7fd f8f0 	bl	8006d5c <HAL_RCC_GetPCLK2Freq>
 8009b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b80:	e003      	b.n	8009b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b82:	f7fd f8d7 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 8009b86:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b94:	f040 810c 	bne.w	8009db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009baa:	4622      	mov	r2, r4
 8009bac:	462b      	mov	r3, r5
 8009bae:	1891      	adds	r1, r2, r2
 8009bb0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009bb2:	415b      	adcs	r3, r3
 8009bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009bba:	4621      	mov	r1, r4
 8009bbc:	eb12 0801 	adds.w	r8, r2, r1
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	eb43 0901 	adc.w	r9, r3, r1
 8009bc6:	f04f 0200 	mov.w	r2, #0
 8009bca:	f04f 0300 	mov.w	r3, #0
 8009bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bda:	4690      	mov	r8, r2
 8009bdc:	4699      	mov	r9, r3
 8009bde:	4623      	mov	r3, r4
 8009be0:	eb18 0303 	adds.w	r3, r8, r3
 8009be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009be8:	462b      	mov	r3, r5
 8009bea:	eb49 0303 	adc.w	r3, r9, r3
 8009bee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009c06:	460b      	mov	r3, r1
 8009c08:	18db      	adds	r3, r3, r3
 8009c0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	eb42 0303 	adc.w	r3, r2, r3
 8009c12:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009c1c:	f7f6 fb28 	bl	8000270 <__aeabi_uldivmod>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4b61      	ldr	r3, [pc, #388]	@ (8009dac <UART_SetConfig+0x2d4>)
 8009c26:	fba3 2302 	umull	r2, r3, r3, r2
 8009c2a:	095b      	lsrs	r3, r3, #5
 8009c2c:	011c      	lsls	r4, r3, #4
 8009c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c38:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c40:	4642      	mov	r2, r8
 8009c42:	464b      	mov	r3, r9
 8009c44:	1891      	adds	r1, r2, r2
 8009c46:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c48:	415b      	adcs	r3, r3
 8009c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c50:	4641      	mov	r1, r8
 8009c52:	eb12 0a01 	adds.w	sl, r2, r1
 8009c56:	4649      	mov	r1, r9
 8009c58:	eb43 0b01 	adc.w	fp, r3, r1
 8009c5c:	f04f 0200 	mov.w	r2, #0
 8009c60:	f04f 0300 	mov.w	r3, #0
 8009c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c70:	4692      	mov	sl, r2
 8009c72:	469b      	mov	fp, r3
 8009c74:	4643      	mov	r3, r8
 8009c76:	eb1a 0303 	adds.w	r3, sl, r3
 8009c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c7e:	464b      	mov	r3, r9
 8009c80:	eb4b 0303 	adc.w	r3, fp, r3
 8009c84:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c94:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	18db      	adds	r3, r3, r3
 8009ca0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	eb42 0303 	adc.w	r3, r2, r3
 8009ca8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009cb2:	f7f6 fadd 	bl	8000270 <__aeabi_uldivmod>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	460b      	mov	r3, r1
 8009cba:	4611      	mov	r1, r2
 8009cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8009dac <UART_SetConfig+0x2d4>)
 8009cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8009cc2:	095b      	lsrs	r3, r3, #5
 8009cc4:	2264      	movs	r2, #100	@ 0x64
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
 8009cca:	1acb      	subs	r3, r1, r3
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009cd2:	4b36      	ldr	r3, [pc, #216]	@ (8009dac <UART_SetConfig+0x2d4>)
 8009cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009ce0:	441c      	add	r4, r3
 8009ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009cf4:	4642      	mov	r2, r8
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	1891      	adds	r1, r2, r2
 8009cfa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cfc:	415b      	adcs	r3, r3
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009d04:	4641      	mov	r1, r8
 8009d06:	1851      	adds	r1, r2, r1
 8009d08:	6339      	str	r1, [r7, #48]	@ 0x30
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	414b      	adcs	r3, r1
 8009d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	f04f 0300 	mov.w	r3, #0
 8009d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	00cb      	lsls	r3, r1, #3
 8009d20:	4651      	mov	r1, sl
 8009d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d26:	4651      	mov	r1, sl
 8009d28:	00ca      	lsls	r2, r1, #3
 8009d2a:	4610      	mov	r0, r2
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4642      	mov	r2, r8
 8009d32:	189b      	adds	r3, r3, r2
 8009d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d38:	464b      	mov	r3, r9
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	eb42 0303 	adc.w	r3, r2, r3
 8009d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d50:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d58:	460b      	mov	r3, r1
 8009d5a:	18db      	adds	r3, r3, r3
 8009d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d5e:	4613      	mov	r3, r2
 8009d60:	eb42 0303 	adc.w	r3, r2, r3
 8009d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d6e:	f7f6 fa7f 	bl	8000270 <__aeabi_uldivmod>
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	4b0d      	ldr	r3, [pc, #52]	@ (8009dac <UART_SetConfig+0x2d4>)
 8009d78:	fba3 1302 	umull	r1, r3, r3, r2
 8009d7c:	095b      	lsrs	r3, r3, #5
 8009d7e:	2164      	movs	r1, #100	@ 0x64
 8009d80:	fb01 f303 	mul.w	r3, r1, r3
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	00db      	lsls	r3, r3, #3
 8009d88:	3332      	adds	r3, #50	@ 0x32
 8009d8a:	4a08      	ldr	r2, [pc, #32]	@ (8009dac <UART_SetConfig+0x2d4>)
 8009d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d90:	095b      	lsrs	r3, r3, #5
 8009d92:	f003 0207 	and.w	r2, r3, #7
 8009d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4422      	add	r2, r4
 8009d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009da0:	e106      	b.n	8009fb0 <UART_SetConfig+0x4d8>
 8009da2:	bf00      	nop
 8009da4:	40011000 	.word	0x40011000
 8009da8:	40011400 	.word	0x40011400
 8009dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009db4:	2200      	movs	r2, #0
 8009db6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009dba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009dc2:	4642      	mov	r2, r8
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	1891      	adds	r1, r2, r2
 8009dc8:	6239      	str	r1, [r7, #32]
 8009dca:	415b      	adcs	r3, r3
 8009dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009dd2:	4641      	mov	r1, r8
 8009dd4:	1854      	adds	r4, r2, r1
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	eb43 0501 	adc.w	r5, r3, r1
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	00eb      	lsls	r3, r5, #3
 8009de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dea:	00e2      	lsls	r2, r4, #3
 8009dec:	4614      	mov	r4, r2
 8009dee:	461d      	mov	r5, r3
 8009df0:	4643      	mov	r3, r8
 8009df2:	18e3      	adds	r3, r4, r3
 8009df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009df8:	464b      	mov	r3, r9
 8009dfa:	eb45 0303 	adc.w	r3, r5, r3
 8009dfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009e0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e12:	f04f 0200 	mov.w	r2, #0
 8009e16:	f04f 0300 	mov.w	r3, #0
 8009e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009e1e:	4629      	mov	r1, r5
 8009e20:	008b      	lsls	r3, r1, #2
 8009e22:	4621      	mov	r1, r4
 8009e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e28:	4621      	mov	r1, r4
 8009e2a:	008a      	lsls	r2, r1, #2
 8009e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e30:	f7f6 fa1e 	bl	8000270 <__aeabi_uldivmod>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4b60      	ldr	r3, [pc, #384]	@ (8009fbc <UART_SetConfig+0x4e4>)
 8009e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	011c      	lsls	r4, r3, #4
 8009e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e54:	4642      	mov	r2, r8
 8009e56:	464b      	mov	r3, r9
 8009e58:	1891      	adds	r1, r2, r2
 8009e5a:	61b9      	str	r1, [r7, #24]
 8009e5c:	415b      	adcs	r3, r3
 8009e5e:	61fb      	str	r3, [r7, #28]
 8009e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e64:	4641      	mov	r1, r8
 8009e66:	1851      	adds	r1, r2, r1
 8009e68:	6139      	str	r1, [r7, #16]
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	414b      	adcs	r3, r1
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	f04f 0200 	mov.w	r2, #0
 8009e74:	f04f 0300 	mov.w	r3, #0
 8009e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e7c:	4659      	mov	r1, fp
 8009e7e:	00cb      	lsls	r3, r1, #3
 8009e80:	4651      	mov	r1, sl
 8009e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e86:	4651      	mov	r1, sl
 8009e88:	00ca      	lsls	r2, r1, #3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	4642      	mov	r2, r8
 8009e92:	189b      	adds	r3, r3, r2
 8009e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e98:	464b      	mov	r3, r9
 8009e9a:	460a      	mov	r2, r1
 8009e9c:	eb42 0303 	adc.w	r3, r2, r3
 8009ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009eae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009eb0:	f04f 0200 	mov.w	r2, #0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	008b      	lsls	r3, r1, #2
 8009ec0:	4641      	mov	r1, r8
 8009ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ec6:	4641      	mov	r1, r8
 8009ec8:	008a      	lsls	r2, r1, #2
 8009eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009ece:	f7f6 f9cf 	bl	8000270 <__aeabi_uldivmod>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4b38      	ldr	r3, [pc, #224]	@ (8009fbc <UART_SetConfig+0x4e4>)
 8009eda:	fba3 2301 	umull	r2, r3, r3, r1
 8009ede:	095b      	lsrs	r3, r3, #5
 8009ee0:	2264      	movs	r2, #100	@ 0x64
 8009ee2:	fb02 f303 	mul.w	r3, r2, r3
 8009ee6:	1acb      	subs	r3, r1, r3
 8009ee8:	011b      	lsls	r3, r3, #4
 8009eea:	3332      	adds	r3, #50	@ 0x32
 8009eec:	4a33      	ldr	r2, [pc, #204]	@ (8009fbc <UART_SetConfig+0x4e4>)
 8009eee:	fba2 2303 	umull	r2, r3, r2, r3
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ef8:	441c      	add	r4, r3
 8009efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009efe:	2200      	movs	r2, #0
 8009f00:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f02:	677a      	str	r2, [r7, #116]	@ 0x74
 8009f04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009f08:	4642      	mov	r2, r8
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	1891      	adds	r1, r2, r2
 8009f0e:	60b9      	str	r1, [r7, #8]
 8009f10:	415b      	adcs	r3, r3
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009f18:	4641      	mov	r1, r8
 8009f1a:	1851      	adds	r1, r2, r1
 8009f1c:	6039      	str	r1, [r7, #0]
 8009f1e:	4649      	mov	r1, r9
 8009f20:	414b      	adcs	r3, r1
 8009f22:	607b      	str	r3, [r7, #4]
 8009f24:	f04f 0200 	mov.w	r2, #0
 8009f28:	f04f 0300 	mov.w	r3, #0
 8009f2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f30:	4659      	mov	r1, fp
 8009f32:	00cb      	lsls	r3, r1, #3
 8009f34:	4651      	mov	r1, sl
 8009f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f3a:	4651      	mov	r1, sl
 8009f3c:	00ca      	lsls	r2, r1, #3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	4619      	mov	r1, r3
 8009f42:	4603      	mov	r3, r0
 8009f44:	4642      	mov	r2, r8
 8009f46:	189b      	adds	r3, r3, r2
 8009f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	460a      	mov	r2, r1
 8009f4e:	eb42 0303 	adc.w	r3, r2, r3
 8009f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f5e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f6c:	4649      	mov	r1, r9
 8009f6e:	008b      	lsls	r3, r1, #2
 8009f70:	4641      	mov	r1, r8
 8009f72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f76:	4641      	mov	r1, r8
 8009f78:	008a      	lsls	r2, r1, #2
 8009f7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f7e:	f7f6 f977 	bl	8000270 <__aeabi_uldivmod>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4b0d      	ldr	r3, [pc, #52]	@ (8009fbc <UART_SetConfig+0x4e4>)
 8009f88:	fba3 1302 	umull	r1, r3, r3, r2
 8009f8c:	095b      	lsrs	r3, r3, #5
 8009f8e:	2164      	movs	r1, #100	@ 0x64
 8009f90:	fb01 f303 	mul.w	r3, r1, r3
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	3332      	adds	r3, #50	@ 0x32
 8009f9a:	4a08      	ldr	r2, [pc, #32]	@ (8009fbc <UART_SetConfig+0x4e4>)
 8009f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	f003 020f 	and.w	r2, r3, #15
 8009fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4422      	add	r2, r4
 8009fae:	609a      	str	r2, [r3, #8]
}
 8009fb0:	bf00      	nop
 8009fb2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fbc:	51eb851f 	.word	0x51eb851f

08009fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	f107 001c 	add.w	r0, r7, #28
 8009fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d123      	bne.n	800a022 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	68db      	ldr	r3, [r3, #12]
 8009fea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009fee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a002:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a006:	2b01      	cmp	r3, #1
 800a008:	d105      	bne.n	800a016 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fae8 	bl	800b5ec <USB_CoreReset>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]
 800a020:	e01b      	b.n	800a05a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 fadc 	bl	800b5ec <USB_CoreReset>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a038:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d106      	bne.n	800a04e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a044:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a04c:	e005      	b.n	800a05a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a052:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a05a:	7fbb      	ldrb	r3, [r7, #30]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d10b      	bne.n	800a078 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f043 0206 	orr.w	r2, r3, #6
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	f043 0220 	orr.w	r2, r3, #32
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a084:	b004      	add	sp, #16
 800a086:	4770      	bx	lr

0800a088 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d165      	bne.n	800a168 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	4a41      	ldr	r2, [pc, #260]	@ (800a1a4 <USB_SetTurnaroundTime+0x11c>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d906      	bls.n	800a0b2 <USB_SetTurnaroundTime+0x2a>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	4a40      	ldr	r2, [pc, #256]	@ (800a1a8 <USB_SetTurnaroundTime+0x120>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d202      	bcs.n	800a0b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0ac:	230f      	movs	r3, #15
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e062      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	4a3c      	ldr	r2, [pc, #240]	@ (800a1a8 <USB_SetTurnaroundTime+0x120>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d306      	bcc.n	800a0c8 <USB_SetTurnaroundTime+0x40>
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	4a3b      	ldr	r2, [pc, #236]	@ (800a1ac <USB_SetTurnaroundTime+0x124>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d202      	bcs.n	800a0c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a0c2:	230e      	movs	r3, #14
 800a0c4:	617b      	str	r3, [r7, #20]
 800a0c6:	e057      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4a38      	ldr	r2, [pc, #224]	@ (800a1ac <USB_SetTurnaroundTime+0x124>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d306      	bcc.n	800a0de <USB_SetTurnaroundTime+0x56>
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	4a37      	ldr	r2, [pc, #220]	@ (800a1b0 <USB_SetTurnaroundTime+0x128>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d202      	bcs.n	800a0de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a0d8:	230d      	movs	r3, #13
 800a0da:	617b      	str	r3, [r7, #20]
 800a0dc:	e04c      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	4a33      	ldr	r2, [pc, #204]	@ (800a1b0 <USB_SetTurnaroundTime+0x128>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d306      	bcc.n	800a0f4 <USB_SetTurnaroundTime+0x6c>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	4a32      	ldr	r2, [pc, #200]	@ (800a1b4 <USB_SetTurnaroundTime+0x12c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d802      	bhi.n	800a0f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a0ee:	230c      	movs	r3, #12
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	e041      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	4a2f      	ldr	r2, [pc, #188]	@ (800a1b4 <USB_SetTurnaroundTime+0x12c>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d906      	bls.n	800a10a <USB_SetTurnaroundTime+0x82>
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	4a2e      	ldr	r2, [pc, #184]	@ (800a1b8 <USB_SetTurnaroundTime+0x130>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d802      	bhi.n	800a10a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a104:	230b      	movs	r3, #11
 800a106:	617b      	str	r3, [r7, #20]
 800a108:	e036      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	4a2a      	ldr	r2, [pc, #168]	@ (800a1b8 <USB_SetTurnaroundTime+0x130>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d906      	bls.n	800a120 <USB_SetTurnaroundTime+0x98>
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	4a29      	ldr	r2, [pc, #164]	@ (800a1bc <USB_SetTurnaroundTime+0x134>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d802      	bhi.n	800a120 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a11a:	230a      	movs	r3, #10
 800a11c:	617b      	str	r3, [r7, #20]
 800a11e:	e02b      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	4a26      	ldr	r2, [pc, #152]	@ (800a1bc <USB_SetTurnaroundTime+0x134>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d906      	bls.n	800a136 <USB_SetTurnaroundTime+0xae>
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4a25      	ldr	r2, [pc, #148]	@ (800a1c0 <USB_SetTurnaroundTime+0x138>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d202      	bcs.n	800a136 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a130:	2309      	movs	r3, #9
 800a132:	617b      	str	r3, [r7, #20]
 800a134:	e020      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	4a21      	ldr	r2, [pc, #132]	@ (800a1c0 <USB_SetTurnaroundTime+0x138>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d306      	bcc.n	800a14c <USB_SetTurnaroundTime+0xc4>
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	4a20      	ldr	r2, [pc, #128]	@ (800a1c4 <USB_SetTurnaroundTime+0x13c>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d802      	bhi.n	800a14c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a146:	2308      	movs	r3, #8
 800a148:	617b      	str	r3, [r7, #20]
 800a14a:	e015      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1c4 <USB_SetTurnaroundTime+0x13c>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d906      	bls.n	800a162 <USB_SetTurnaroundTime+0xda>
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c8 <USB_SetTurnaroundTime+0x140>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d202      	bcs.n	800a162 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a15c:	2307      	movs	r3, #7
 800a15e:	617b      	str	r3, [r7, #20]
 800a160:	e00a      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a162:	2306      	movs	r3, #6
 800a164:	617b      	str	r3, [r7, #20]
 800a166:	e007      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d102      	bne.n	800a174 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a16e:	2309      	movs	r3, #9
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	e001      	b.n	800a178 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a174:	2309      	movs	r3, #9
 800a176:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	68da      	ldr	r2, [r3, #12]
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	029b      	lsls	r3, r3, #10
 800a18c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a190:	431a      	orrs	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	00d8acbf 	.word	0x00d8acbf
 800a1a8:	00e4e1c0 	.word	0x00e4e1c0
 800a1ac:	00f42400 	.word	0x00f42400
 800a1b0:	01067380 	.word	0x01067380
 800a1b4:	011a499f 	.word	0x011a499f
 800a1b8:	01312cff 	.word	0x01312cff
 800a1bc:	014ca43f 	.word	0x014ca43f
 800a1c0:	016e3600 	.word	0x016e3600
 800a1c4:	01a6ab1f 	.word	0x01a6ab1f
 800a1c8:	01e84800 	.word	0x01e84800

0800a1cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	f043 0201 	orr.w	r2, r3, #1
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f023 0201 	bic.w	r2, r3, #1
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a22c:	78fb      	ldrb	r3, [r7, #3]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d115      	bne.n	800a25e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68db      	ldr	r3, [r3, #12]
 800a236:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a23e:	200a      	movs	r0, #10
 800a240:	f7f9 fa1c 	bl	800367c <HAL_Delay>
      ms += 10U;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	330a      	adds	r3, #10
 800a248:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 f93f 	bl	800b4ce <USB_GetMode>
 800a250:	4603      	mov	r3, r0
 800a252:	2b01      	cmp	r3, #1
 800a254:	d01e      	beq.n	800a294 <USB_SetCurrentMode+0x84>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2bc7      	cmp	r3, #199	@ 0xc7
 800a25a:	d9f0      	bls.n	800a23e <USB_SetCurrentMode+0x2e>
 800a25c:	e01a      	b.n	800a294 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a25e:	78fb      	ldrb	r3, [r7, #3]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d115      	bne.n	800a290 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a270:	200a      	movs	r0, #10
 800a272:	f7f9 fa03 	bl	800367c <HAL_Delay>
      ms += 10U;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	330a      	adds	r3, #10
 800a27a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f001 f926 	bl	800b4ce <USB_GetMode>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <USB_SetCurrentMode+0x84>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a28c:	d9f0      	bls.n	800a270 <USB_SetCurrentMode+0x60>
 800a28e:	e001      	b.n	800a294 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e005      	b.n	800a2a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2bc8      	cmp	r3, #200	@ 0xc8
 800a298:	d101      	bne.n	800a29e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b086      	sub	sp, #24
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a2b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	e009      	b.n	800a2dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3340      	adds	r3, #64	@ 0x40
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	4413      	add	r3, r2
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	2b0e      	cmp	r3, #14
 800a2e0:	d9f2      	bls.n	800a2c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a2e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d11c      	bne.n	800a324 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2f8:	f043 0302 	orr.w	r3, r3, #2
 800a2fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	639a      	str	r2, [r3, #56]	@ 0x38
 800a322:	e00b      	b.n	800a33c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a328:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a334:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a342:	461a      	mov	r2, r3
 800a344:	2300      	movs	r3, #0
 800a346:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a348:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d10d      	bne.n	800a36c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a354:	2b00      	cmp	r3, #0
 800a356:	d104      	bne.n	800a362 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a358:	2100      	movs	r1, #0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f968 	bl	800a630 <USB_SetDevSpeed>
 800a360:	e008      	b.n	800a374 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a362:	2101      	movs	r1, #1
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f963 	bl	800a630 <USB_SetDevSpeed>
 800a36a:	e003      	b.n	800a374 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a36c:	2103      	movs	r1, #3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f95e 	bl	800a630 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a374:	2110      	movs	r1, #16
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f8fa 	bl	800a570 <USB_FlushTxFifo>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f924 	bl	800a5d4 <USB_FlushRxFifo>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d001      	beq.n	800a396 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a39c:	461a      	mov	r2, r3
 800a39e:	2300      	movs	r3, #0
 800a3a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	e043      	b.n	800a448 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a3d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a3d6:	d118      	bne.n	800a40a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10a      	bne.n	800a3f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	015a      	lsls	r2, r3, #5
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	e013      	b.n	800a41c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	015a      	lsls	r2, r3, #5
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a400:	461a      	mov	r2, r3
 800a402:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	e008      	b.n	800a41c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a416:	461a      	mov	r2, r3
 800a418:	2300      	movs	r3, #0
 800a41a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a428:	461a      	mov	r2, r3
 800a42a:	2300      	movs	r3, #0
 800a42c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a43a:	461a      	mov	r2, r3
 800a43c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a440:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	3301      	adds	r3, #1
 800a446:	613b      	str	r3, [r7, #16]
 800a448:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a44c:	461a      	mov	r2, r3
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	4293      	cmp	r3, r2
 800a452:	d3b5      	bcc.n	800a3c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
 800a458:	e043      	b.n	800a4e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	015a      	lsls	r2, r3, #5
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	4413      	add	r3, r2
 800a462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a46c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a470:	d118      	bne.n	800a4a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a484:	461a      	mov	r2, r3
 800a486:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a48a:	6013      	str	r3, [r2, #0]
 800a48c:	e013      	b.n	800a4b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	461a      	mov	r2, r3
 800a49c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	e008      	b.n	800a4b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b0:	461a      	mov	r2, r3
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a4da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	613b      	str	r3, [r7, #16]
 800a4e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d3b5      	bcc.n	800a45a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a500:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a50e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a510:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a514:	2b00      	cmp	r3, #0
 800a516:	d105      	bne.n	800a524 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	f043 0210 	orr.w	r2, r3, #16
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	699a      	ldr	r2, [r3, #24]
 800a528:	4b10      	ldr	r3, [pc, #64]	@ (800a56c <USB_DevInit+0x2c4>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a530:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a534:	2b00      	cmp	r3, #0
 800a536:	d005      	beq.n	800a544 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	f043 0208 	orr.w	r2, r3, #8
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a544:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d107      	bne.n	800a55c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a554:	f043 0304 	orr.w	r3, r3, #4
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a568:	b004      	add	sp, #16
 800a56a:	4770      	bx	lr
 800a56c:	803c3800 	.word	0x803c3800

0800a570 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3301      	adds	r3, #1
 800a582:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a58a:	d901      	bls.n	800a590 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e01b      	b.n	800a5c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	daf2      	bge.n	800a57e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	019b      	lsls	r3, r3, #6
 800a5a0:	f043 0220 	orr.w	r2, r3, #32
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5b4:	d901      	bls.n	800a5ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e006      	b.n	800a5c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b20      	cmp	r3, #32
 800a5c4:	d0f0      	beq.n	800a5a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3714      	adds	r7, #20
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a5ec:	d901      	bls.n	800a5f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e018      	b.n	800a624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	daf2      	bge.n	800a5e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2210      	movs	r2, #16
 800a602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	3301      	adds	r3, #1
 800a608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a610:	d901      	bls.n	800a616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e006      	b.n	800a624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	f003 0310 	and.w	r3, r3, #16
 800a61e:	2b10      	cmp	r3, #16
 800a620:	d0f0      	beq.n	800a604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	78fb      	ldrb	r3, [r7, #3]
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a650:	4313      	orrs	r3, r2
 800a652:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a662:	b480      	push	{r7}
 800a664:	b087      	sub	sp, #28
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	f003 0306 	and.w	r3, r3, #6
 800a67a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d102      	bne.n	800a688 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a682:	2300      	movs	r3, #0
 800a684:	75fb      	strb	r3, [r7, #23]
 800a686:	e00a      	b.n	800a69e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d002      	beq.n	800a694 <USB_GetDevSpeed+0x32>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b06      	cmp	r3, #6
 800a692:	d102      	bne.n	800a69a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a694:	2302      	movs	r3, #2
 800a696:	75fb      	strb	r3, [r7, #23]
 800a698:	e001      	b.n	800a69e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a69a:	230f      	movs	r3, #15
 800a69c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a69e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	371c      	adds	r7, #28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d13a      	bne.n	800a73e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6ce:	69da      	ldr	r2, [r3, #28]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	f003 030f 	and.w	r3, r3, #15
 800a6d8:	2101      	movs	r1, #1
 800a6da:	fa01 f303 	lsl.w	r3, r1, r3
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	68f9      	ldr	r1, [r7, #12]
 800a6e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d155      	bne.n	800a7ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	015a      	lsls	r2, r3, #5
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4413      	add	r3, r2
 800a708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	791b      	ldrb	r3, [r3, #4]
 800a71a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a71c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	059b      	lsls	r3, r3, #22
 800a722:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a724:	4313      	orrs	r3, r2
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	0151      	lsls	r1, r2, #5
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	440a      	add	r2, r1
 800a72e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a73a:	6013      	str	r3, [r2, #0]
 800a73c:	e036      	b.n	800a7ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a744:	69da      	ldr	r2, [r3, #28]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	f003 030f 	and.w	r3, r3, #15
 800a74e:	2101      	movs	r1, #1
 800a750:	fa01 f303 	lsl.w	r3, r1, r3
 800a754:	041b      	lsls	r3, r3, #16
 800a756:	68f9      	ldr	r1, [r7, #12]
 800a758:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a75c:	4313      	orrs	r3, r2
 800a75e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d11a      	bne.n	800a7ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	791b      	ldrb	r3, [r3, #4]
 800a790:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a792:	430b      	orrs	r3, r1
 800a794:	4313      	orrs	r3, r2
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	0151      	lsls	r1, r2, #5
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	440a      	add	r2, r1
 800a79e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a7aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3714      	adds	r7, #20
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
	...

0800a7bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b085      	sub	sp, #20
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d161      	bne.n	800a89c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7ee:	d11f      	bne.n	800a830 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	0151      	lsls	r1, r2, #5
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	440a      	add	r2, r1
 800a806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a80a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a80e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	015a      	lsls	r2, r3, #5
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4413      	add	r3, r2
 800a818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68ba      	ldr	r2, [r7, #8]
 800a820:	0151      	lsls	r1, r2, #5
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	440a      	add	r2, r1
 800a826:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a82a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a82e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f003 030f 	and.w	r3, r3, #15
 800a840:	2101      	movs	r1, #1
 800a842:	fa01 f303 	lsl.w	r3, r1, r3
 800a846:	b29b      	uxth	r3, r3
 800a848:	43db      	mvns	r3, r3
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a850:	4013      	ands	r3, r2
 800a852:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a85a:	69da      	ldr	r2, [r3, #28]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	2101      	movs	r1, #1
 800a866:	fa01 f303 	lsl.w	r3, r1, r3
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	43db      	mvns	r3, r3
 800a86e:	68f9      	ldr	r1, [r7, #12]
 800a870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a874:	4013      	ands	r3, r2
 800a876:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	0159      	lsls	r1, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	440b      	add	r3, r1
 800a88e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a892:	4619      	mov	r1, r3
 800a894:	4b35      	ldr	r3, [pc, #212]	@ (800a96c <USB_DeactivateEndpoint+0x1b0>)
 800a896:	4013      	ands	r3, r2
 800a898:	600b      	str	r3, [r1, #0]
 800a89a:	e060      	b.n	800a95e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b2:	d11f      	bne.n	800a8f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	0151      	lsls	r1, r2, #5
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	440a      	add	r2, r1
 800a8ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	015a      	lsls	r2, r3, #5
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4413      	add	r3, r2
 800a8dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	0151      	lsls	r1, r2, #5
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	440a      	add	r2, r1
 800a8ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	781b      	ldrb	r3, [r3, #0]
 800a900:	f003 030f 	and.w	r3, r3, #15
 800a904:	2101      	movs	r1, #1
 800a906:	fa01 f303 	lsl.w	r3, r1, r3
 800a90a:	041b      	lsls	r3, r3, #16
 800a90c:	43db      	mvns	r3, r3
 800a90e:	68f9      	ldr	r1, [r7, #12]
 800a910:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a914:	4013      	ands	r3, r2
 800a916:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a91e:	69da      	ldr	r2, [r3, #28]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f003 030f 	and.w	r3, r3, #15
 800a928:	2101      	movs	r1, #1
 800a92a:	fa01 f303 	lsl.w	r3, r1, r3
 800a92e:	041b      	lsls	r3, r3, #16
 800a930:	43db      	mvns	r3, r3
 800a932:	68f9      	ldr	r1, [r7, #12]
 800a934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a938:	4013      	ands	r3, r2
 800a93a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	0159      	lsls	r1, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	440b      	add	r3, r1
 800a952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a956:	4619      	mov	r1, r3
 800a958:	4b05      	ldr	r3, [pc, #20]	@ (800a970 <USB_DeactivateEndpoint+0x1b4>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	ec337800 	.word	0xec337800
 800a970:	eff37800 	.word	0xeff37800

0800a974 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08a      	sub	sp, #40	@ 0x28
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	785b      	ldrb	r3, [r3, #1]
 800a990:	2b01      	cmp	r3, #1
 800a992:	f040 817f 	bne.w	800ac94 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d132      	bne.n	800aa04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	0151      	lsls	r1, r2, #5
 800a9b0:	69fa      	ldr	r2, [r7, #28]
 800a9b2:	440a      	add	r2, r1
 800a9b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a9bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a9c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	015a      	lsls	r2, r3, #5
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	0151      	lsls	r1, r2, #5
 800a9d4:	69fa      	ldr	r2, [r7, #28]
 800a9d6:	440a      	add	r2, r1
 800a9d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	015a      	lsls	r2, r3, #5
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	0151      	lsls	r1, r2, #5
 800a9f4:	69fa      	ldr	r2, [r7, #28]
 800a9f6:	440a      	add	r2, r1
 800a9f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a9fc:	0cdb      	lsrs	r3, r3, #19
 800a9fe:	04db      	lsls	r3, r3, #19
 800aa00:	6113      	str	r3, [r2, #16]
 800aa02:	e097      	b.n	800ab34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	69fa      	ldr	r2, [r7, #28]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa1e:	0cdb      	lsrs	r3, r3, #19
 800aa20:	04db      	lsls	r3, r3, #19
 800aa22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	0151      	lsls	r1, r2, #5
 800aa36:	69fa      	ldr	r2, [r7, #28]
 800aa38:	440a      	add	r2, r1
 800aa3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa3e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aa42:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aa46:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d11a      	bne.n	800aa84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	691a      	ldr	r2, [r3, #16]
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d903      	bls.n	800aa62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	689a      	ldr	r2, [r3, #8]
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	0151      	lsls	r1, r2, #5
 800aa74:	69fa      	ldr	r2, [r7, #28]
 800aa76:	440a      	add	r2, r1
 800aa78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aa80:	6113      	str	r3, [r2, #16]
 800aa82:	e044      	b.n	800ab0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	691a      	ldr	r2, [r3, #16]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	1e5a      	subs	r2, r3, #1
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa98:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaa6:	691a      	ldr	r2, [r3, #16]
 800aaa8:	8afb      	ldrh	r3, [r7, #22]
 800aaaa:	04d9      	lsls	r1, r3, #19
 800aaac:	4ba4      	ldr	r3, [pc, #656]	@ (800ad40 <USB_EPStartXfer+0x3cc>)
 800aaae:	400b      	ands	r3, r1
 800aab0:	69b9      	ldr	r1, [r7, #24]
 800aab2:	0148      	lsls	r0, r1, #5
 800aab4:	69f9      	ldr	r1, [r7, #28]
 800aab6:	4401      	add	r1, r0
 800aab8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800aabc:	4313      	orrs	r3, r2
 800aabe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	791b      	ldrb	r3, [r3, #4]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d122      	bne.n	800ab0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	69ba      	ldr	r2, [r7, #24]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	69fa      	ldr	r2, [r7, #28]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aae2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800aae6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf4:	691a      	ldr	r2, [r3, #16]
 800aaf6:	8afb      	ldrh	r3, [r7, #22]
 800aaf8:	075b      	lsls	r3, r3, #29
 800aafa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800aafe:	69b9      	ldr	r1, [r7, #24]
 800ab00:	0148      	lsls	r0, r1, #5
 800ab02:	69f9      	ldr	r1, [r7, #28]
 800ab04:	4401      	add	r1, r0
 800ab06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	015a      	lsls	r2, r3, #5
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	4413      	add	r3, r2
 800ab16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab1a:	691a      	ldr	r2, [r3, #16]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab24:	69b9      	ldr	r1, [r7, #24]
 800ab26:	0148      	lsls	r0, r1, #5
 800ab28:	69f9      	ldr	r1, [r7, #28]
 800ab2a:	4401      	add	r1, r0
 800ab2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ab30:	4313      	orrs	r3, r2
 800ab32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab34:	79fb      	ldrb	r3, [r7, #7]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d14b      	bne.n	800abd2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d009      	beq.n	800ab56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	015a      	lsls	r2, r3, #5
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	4413      	add	r3, r2
 800ab4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	791b      	ldrb	r3, [r3, #4]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d128      	bne.n	800abb0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d110      	bne.n	800ab90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	0151      	lsls	r1, r2, #5
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	440a      	add	r2, r1
 800ab84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	e00f      	b.n	800abb0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	0151      	lsls	r1, r2, #5
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	440a      	add	r2, r1
 800aba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	69fb      	ldr	r3, [r7, #28]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69ba      	ldr	r2, [r7, #24]
 800abc0:	0151      	lsls	r1, r2, #5
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	440a      	add	r2, r1
 800abc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	e166      	b.n	800aea0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	69ba      	ldr	r2, [r7, #24]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	69fa      	ldr	r2, [r7, #28]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800abf0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	791b      	ldrb	r3, [r3, #4]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d015      	beq.n	800ac26 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 814e 	beq.w	800aea0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	f003 030f 	and.w	r3, r3, #15
 800ac14:	2101      	movs	r1, #1
 800ac16:	fa01 f303 	lsl.w	r3, r1, r3
 800ac1a:	69f9      	ldr	r1, [r7, #28]
 800ac1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac20:	4313      	orrs	r3, r2
 800ac22:	634b      	str	r3, [r1, #52]	@ 0x34
 800ac24:	e13c      	b.n	800aea0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d110      	bne.n	800ac58 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	0151      	lsls	r1, r2, #5
 800ac48:	69fa      	ldr	r2, [r7, #28]
 800ac4a:	440a      	add	r2, r1
 800ac4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	e00f      	b.n	800ac78 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	69fa      	ldr	r2, [r7, #28]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac76:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	68d9      	ldr	r1, [r3, #12]
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	781a      	ldrb	r2, [r3, #0]
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	b298      	uxth	r0, r3
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	9300      	str	r3, [sp, #0]
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f9b9 	bl	800b004 <USB_WritePacket>
 800ac92:	e105      	b.n	800aea0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	015a      	lsls	r2, r3, #5
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	4413      	add	r3, r2
 800ac9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	0151      	lsls	r1, r2, #5
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	440a      	add	r2, r1
 800acaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acae:	0cdb      	lsrs	r3, r3, #19
 800acb0:	04db      	lsls	r3, r3, #19
 800acb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	0151      	lsls	r1, r2, #5
 800acc6:	69fa      	ldr	r2, [r7, #28]
 800acc8:	440a      	add	r2, r1
 800acca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800acd2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800acd6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d132      	bne.n	800ad44 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d003      	beq.n	800acee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	689a      	ldr	r2, [r3, #8]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	689a      	ldr	r2, [r3, #8]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad02:	691a      	ldr	r2, [r3, #16]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	6a1b      	ldr	r3, [r3, #32]
 800ad08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad0c:	69b9      	ldr	r1, [r7, #24]
 800ad0e:	0148      	lsls	r0, r1, #5
 800ad10:	69f9      	ldr	r1, [r7, #28]
 800ad12:	4401      	add	r1, r0
 800ad14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad1c:	69bb      	ldr	r3, [r7, #24]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	69ba      	ldr	r2, [r7, #24]
 800ad2c:	0151      	lsls	r1, r2, #5
 800ad2e:	69fa      	ldr	r2, [r7, #28]
 800ad30:	440a      	add	r2, r1
 800ad32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad3a:	6113      	str	r3, [r2, #16]
 800ad3c:	e062      	b.n	800ae04 <USB_EPStartXfer+0x490>
 800ad3e:	bf00      	nop
 800ad40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d123      	bne.n	800ad94 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad58:	691a      	ldr	r2, [r3, #16]
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	689b      	ldr	r3, [r3, #8]
 800ad5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad62:	69b9      	ldr	r1, [r7, #24]
 800ad64:	0148      	lsls	r0, r1, #5
 800ad66:	69f9      	ldr	r1, [r7, #28]
 800ad68:	4401      	add	r1, r0
 800ad6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad90:	6113      	str	r3, [r2, #16]
 800ad92:	e037      	b.n	800ae04 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	691a      	ldr	r2, [r3, #16]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	1e5a      	subs	r2, r3, #1
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ada8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	8afa      	ldrh	r2, [r7, #22]
 800adb0:	fb03 f202 	mul.w	r2, r3, r2
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc4:	691a      	ldr	r2, [r3, #16]
 800adc6:	8afb      	ldrh	r3, [r7, #22]
 800adc8:	04d9      	lsls	r1, r3, #19
 800adca:	4b38      	ldr	r3, [pc, #224]	@ (800aeac <USB_EPStartXfer+0x538>)
 800adcc:	400b      	ands	r3, r1
 800adce:	69b9      	ldr	r1, [r7, #24]
 800add0:	0148      	lsls	r0, r1, #5
 800add2:	69f9      	ldr	r1, [r7, #28]
 800add4:	4401      	add	r1, r0
 800add6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800adda:	4313      	orrs	r3, r2
 800addc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	69fb      	ldr	r3, [r7, #28]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adea:	691a      	ldr	r2, [r3, #16]
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	6a1b      	ldr	r3, [r3, #32]
 800adf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adf4:	69b9      	ldr	r1, [r7, #24]
 800adf6:	0148      	lsls	r0, r1, #5
 800adf8:	69f9      	ldr	r1, [r7, #28]
 800adfa:	4401      	add	r1, r0
 800adfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ae00:	4313      	orrs	r3, r2
 800ae02:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d10d      	bne.n	800ae26 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d009      	beq.n	800ae26 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	68d9      	ldr	r1, [r3, #12]
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae22:	460a      	mov	r2, r1
 800ae24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	791b      	ldrb	r3, [r3, #4]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d128      	bne.n	800ae80 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d110      	bne.n	800ae60 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	69ba      	ldr	r2, [r7, #24]
 800ae4e:	0151      	lsls	r1, r2, #5
 800ae50:	69fa      	ldr	r2, [r7, #28]
 800ae52:	440a      	add	r2, r1
 800ae54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	e00f      	b.n	800ae80 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69ba      	ldr	r2, [r7, #24]
 800ae70:	0151      	lsls	r1, r2, #5
 800ae72:	69fa      	ldr	r2, [r7, #28]
 800ae74:	440a      	add	r2, r1
 800ae76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ae7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	0151      	lsls	r1, r2, #5
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	440a      	add	r2, r1
 800ae96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3720      	adds	r7, #32
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	1ff80000 	.word	0x1ff80000

0800aeb0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d14a      	bne.n	800af64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	015a      	lsls	r2, r3, #5
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	4413      	add	r3, r2
 800aed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aee2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aee6:	f040 8086 	bne.w	800aff6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	015a      	lsls	r2, r3, #5
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	4413      	add	r3, r2
 800aef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	7812      	ldrb	r2, [r2, #0]
 800aefe:	0151      	lsls	r1, r2, #5
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	440a      	add	r2, r1
 800af04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800af0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	015a      	lsls	r2, r3, #5
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	4413      	add	r3, r2
 800af18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	683a      	ldr	r2, [r7, #0]
 800af20:	7812      	ldrb	r2, [r2, #0]
 800af22:	0151      	lsls	r1, r2, #5
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	440a      	add	r2, r1
 800af28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3301      	adds	r3, #1
 800af36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800af3e:	4293      	cmp	r3, r2
 800af40:	d902      	bls.n	800af48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	75fb      	strb	r3, [r7, #23]
          break;
 800af46:	e056      	b.n	800aff6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	4413      	add	r3, r2
 800af52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af60:	d0e7      	beq.n	800af32 <USB_EPStopXfer+0x82>
 800af62:	e048      	b.n	800aff6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af7c:	d13b      	bne.n	800aff6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	4413      	add	r3, r2
 800af88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	7812      	ldrb	r2, [r2, #0]
 800af92:	0151      	lsls	r1, r2, #5
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	440a      	add	r2, r1
 800af98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800afa0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	7812      	ldrb	r2, [r2, #0]
 800afb6:	0151      	lsls	r1, r2, #5
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	440a      	add	r2, r1
 800afbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	3301      	adds	r3, #1
 800afca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f242 7210 	movw	r2, #10000	@ 0x2710
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d902      	bls.n	800afdc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	75fb      	strb	r3, [r7, #23]
          break;
 800afda:	e00c      	b.n	800aff6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aff4:	d0e7      	beq.n	800afc6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	371c      	adds	r7, #28
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b004:	b480      	push	{r7}
 800b006:	b089      	sub	sp, #36	@ 0x24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	460b      	mov	r3, r1
 800b014:	71fb      	strb	r3, [r7, #7]
 800b016:	4613      	mov	r3, r2
 800b018:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b022:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	d123      	bne.n	800b072 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b02a:	88bb      	ldrh	r3, [r7, #4]
 800b02c:	3303      	adds	r3, #3
 800b02e:	089b      	lsrs	r3, r3, #2
 800b030:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b032:	2300      	movs	r3, #0
 800b034:	61bb      	str	r3, [r7, #24]
 800b036:	e018      	b.n	800b06a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	031a      	lsls	r2, r3, #12
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	4413      	add	r3, r2
 800b040:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b044:	461a      	mov	r2, r3
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	3301      	adds	r3, #1
 800b050:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	3301      	adds	r3, #1
 800b056:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	3301      	adds	r3, #1
 800b05c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	3301      	adds	r3, #1
 800b062:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	3301      	adds	r3, #1
 800b068:	61bb      	str	r3, [r7, #24]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d3e2      	bcc.n	800b038 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3724      	adds	r7, #36	@ 0x24
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b080:	b480      	push	{r7}
 800b082:	b08b      	sub	sp, #44	@ 0x2c
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	60b9      	str	r1, [r7, #8]
 800b08a:	4613      	mov	r3, r2
 800b08c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b096:	88fb      	ldrh	r3, [r7, #6]
 800b098:	089b      	lsrs	r3, r3, #2
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b09e:	88fb      	ldrh	r3, [r7, #6]
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	623b      	str	r3, [r7, #32]
 800b0aa:	e014      	b.n	800b0d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	623b      	str	r3, [r7, #32]
 800b0d6:	6a3a      	ldr	r2, [r7, #32]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d3e6      	bcc.n	800b0ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b0de:	8bfb      	ldrh	r3, [r7, #30]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01e      	beq.n	800b122 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f107 0310 	add.w	r3, r7, #16
 800b0f4:	6812      	ldr	r2, [r2, #0]
 800b0f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b0f8:	693a      	ldr	r2, [r7, #16]
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	fa22 f303 	lsr.w	r3, r2, r3
 800b104:	b2da      	uxtb	r2, r3
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	701a      	strb	r2, [r3, #0]
      i++;
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	3301      	adds	r3, #1
 800b10e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	3301      	adds	r3, #1
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b116:	8bfb      	ldrh	r3, [r7, #30]
 800b118:	3b01      	subs	r3, #1
 800b11a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b11c:	8bfb      	ldrh	r3, [r7, #30]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1ea      	bne.n	800b0f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b124:	4618      	mov	r0, r3
 800b126:	372c      	adds	r7, #44	@ 0x2c
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d12c      	bne.n	800b1a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	015a      	lsls	r2, r3, #5
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4413      	add	r3, r2
 800b154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	db12      	blt.n	800b184 <USB_EPSetStall+0x54>
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00f      	beq.n	800b184 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	0151      	lsls	r1, r2, #5
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	440a      	add	r2, r1
 800b17a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b17e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b182:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	0151      	lsls	r1, r2, #5
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	440a      	add	r2, r1
 800b19a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b19e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	e02b      	b.n	800b1fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	db12      	blt.n	800b1de <USB_EPSetStall+0xae>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00f      	beq.n	800b1de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b1dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b1fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3714      	adds	r7, #20
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	785b      	ldrb	r3, [r3, #1]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d128      	bne.n	800b27a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	0151      	lsls	r1, r2, #5
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	440a      	add	r2, r1
 800b23e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b242:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b246:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	791b      	ldrb	r3, [r3, #4]
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d003      	beq.n	800b258 <USB_EPClearStall+0x4c>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	791b      	ldrb	r3, [r3, #4]
 800b254:	2b02      	cmp	r3, #2
 800b256:	d138      	bne.n	800b2ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	0151      	lsls	r1, r2, #5
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	440a      	add	r2, r1
 800b26e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b276:	6013      	str	r3, [r2, #0]
 800b278:	e027      	b.n	800b2ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	0151      	lsls	r1, r2, #5
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	440a      	add	r2, r1
 800b290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b294:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b298:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	791b      	ldrb	r3, [r3, #4]
 800b29e:	2b03      	cmp	r3, #3
 800b2a0:	d003      	beq.n	800b2aa <USB_EPClearStall+0x9e>
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	791b      	ldrb	r3, [r3, #4]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	d10f      	bne.n	800b2ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	015a      	lsls	r2, r3, #5
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	0151      	lsls	r1, r2, #5
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	440a      	add	r2, r1
 800b2c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b2c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b2ca:	2300      	movs	r3, #0
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3714      	adds	r7, #20
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b2f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b2fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	011b      	lsls	r3, r3, #4
 800b308:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b30c:	68f9      	ldr	r1, [r7, #12]
 800b30e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b312:	4313      	orrs	r3, r2
 800b314:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3714      	adds	r7, #20
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b352:	f023 0302 	bic.w	r3, r3, #2
 800b356:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b366:	b480      	push	{r7}
 800b368:	b085      	sub	sp, #20
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b380:	f023 0303 	bic.w	r3, r3, #3
 800b384:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b394:	f043 0302 	orr.w	r3, r3, #2
 800b398:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3714      	adds	r7, #20
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	695b      	ldr	r3, [r3, #20]
 800b3b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	699b      	ldr	r3, [r3, #24]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	4013      	ands	r3, r2
 800b3be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b085      	sub	sp, #20
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3ea:	69db      	ldr	r3, [r3, #28]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	0c1b      	lsrs	r3, r3, #16
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b402:	b480      	push	{r7}
 800b404:	b085      	sub	sp, #20
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	4013      	ands	r3, r2
 800b424:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	b29b      	uxth	r3, r3
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b436:	b480      	push	{r7}
 800b438:	b085      	sub	sp, #20
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b446:	78fb      	ldrb	r3, [r7, #3]
 800b448:	015a      	lsls	r2, r3, #5
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	4413      	add	r3, r2
 800b44e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b45c:	695b      	ldr	r3, [r3, #20]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	4013      	ands	r3, r2
 800b462:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b464:	68bb      	ldr	r3, [r7, #8]
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr

0800b472 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b472:	b480      	push	{r7}
 800b474:	b087      	sub	sp, #28
 800b476:	af00      	add	r7, sp, #0
 800b478:	6078      	str	r0, [r7, #4]
 800b47a:	460b      	mov	r3, r1
 800b47c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b494:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b496:	78fb      	ldrb	r3, [r7, #3]
 800b498:	f003 030f 	and.w	r3, r3, #15
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a2:	01db      	lsls	r3, r3, #7
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	693a      	ldr	r2, [r7, #16]
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b4ac:	78fb      	ldrb	r3, [r7, #3]
 800b4ae:	015a      	lsls	r2, r3, #5
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	693a      	ldr	r2, [r7, #16]
 800b4bc:	4013      	ands	r3, r2
 800b4be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	695b      	ldr	r3, [r3, #20]
 800b4da:	f003 0301 	and.w	r3, r3, #1
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	370c      	adds	r7, #12
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68fa      	ldr	r2, [r7, #12]
 800b500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b504:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b508:	f023 0307 	bic.w	r3, r3, #7
 800b50c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b51c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b520:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3714      	adds	r7, #20
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b530:	b480      	push	{r7}
 800b532:	b087      	sub	sp, #28
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	460b      	mov	r3, r1
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	333c      	adds	r3, #60	@ 0x3c
 800b546:	3304      	adds	r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	4a26      	ldr	r2, [pc, #152]	@ (800b5e8 <USB_EP0_OutStart+0xb8>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d90a      	bls.n	800b56a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b560:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b564:	d101      	bne.n	800b56a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	e037      	b.n	800b5da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b570:	461a      	mov	r2, r3
 800b572:	2300      	movs	r3, #0
 800b574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b57c:	691b      	ldr	r3, [r3, #16]
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b584:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b598:	f043 0318 	orr.w	r3, r3, #24
 800b59c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	697a      	ldr	r2, [r7, #20]
 800b5a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b5b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b5b2:	7afb      	ldrb	r3, [r7, #11]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d10f      	bne.n	800b5d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5be:	461a      	mov	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	697a      	ldr	r2, [r7, #20]
 800b5ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b5d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	371c      	adds	r7, #28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	4f54300a 	.word	0x4f54300a

0800b5ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b604:	d901      	bls.n	800b60a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b606:	2303      	movs	r3, #3
 800b608:	e01b      	b.n	800b642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	daf2      	bge.n	800b5f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	691b      	ldr	r3, [r3, #16]
 800b61a:	f043 0201 	orr.w	r2, r3, #1
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3301      	adds	r3, #1
 800b626:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b62e:	d901      	bls.n	800b634 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b630:	2303      	movs	r3, #3
 800b632:	e006      	b.n	800b642 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	691b      	ldr	r3, [r3, #16]
 800b638:	f003 0301 	and.w	r3, r3, #1
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d0f0      	beq.n	800b622 <USB_CoreReset+0x36>

  return HAL_OK;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800b65c:	2054      	movs	r0, #84	@ 0x54
 800b65e:	f002 faf3 	bl	800dc48 <USBD_static_malloc>
 800b662:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	32b0      	adds	r2, #176	@ 0xb0
 800b674:	2100      	movs	r1, #0
 800b676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b67a:	2302      	movs	r3, #2
 800b67c:	e08b      	b.n	800b796 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	32b0      	adds	r2, #176	@ 0xb0
 800b688:	68f9      	ldr	r1, [r7, #12]
 800b68a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	32b0      	adds	r2, #176	@ 0xb0
 800b698:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	7c1b      	ldrb	r3, [r3, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d11b      	bne.n	800b6e2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b6aa:	4b3d      	ldr	r3, [pc, #244]	@ (800b7a0 <USBD_CUSTOM_HID_Init+0x150>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	f003 020f 	and.w	r2, r3, #15
 800b6b2:	6879      	ldr	r1, [r7, #4]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	4413      	add	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	440b      	add	r3, r1
 800b6be:	3326      	adds	r3, #38	@ 0x26
 800b6c0:	2205      	movs	r2, #5
 800b6c2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800b6c4:	4b37      	ldr	r3, [pc, #220]	@ (800b7a4 <USBD_CUSTOM_HID_Init+0x154>)
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 020f 	and.w	r2, r3, #15
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	440b      	add	r3, r1
 800b6d8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b6dc:	2205      	movs	r2, #5
 800b6de:	801a      	strh	r2, [r3, #0]
 800b6e0:	e01a      	b.n	800b718 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b6e2:	4b2f      	ldr	r3, [pc, #188]	@ (800b7a0 <USBD_CUSTOM_HID_Init+0x150>)
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	f003 020f 	and.w	r2, r3, #15
 800b6ea:	6879      	ldr	r1, [r7, #4]
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4413      	add	r3, r2
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	440b      	add	r3, r1
 800b6f6:	3326      	adds	r3, #38	@ 0x26
 800b6f8:	220a      	movs	r2, #10
 800b6fa:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800b6fc:	4b29      	ldr	r3, [pc, #164]	@ (800b7a4 <USBD_CUSTOM_HID_Init+0x154>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	f003 020f 	and.w	r2, r3, #15
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b714:	220a      	movs	r2, #10
 800b716:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800b718:	4b21      	ldr	r3, [pc, #132]	@ (800b7a0 <USBD_CUSTOM_HID_Init+0x150>)
 800b71a:	7819      	ldrb	r1, [r3, #0]
 800b71c:	2302      	movs	r3, #2
 800b71e:	2203      	movs	r2, #3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f002 f980 	bl	800da26 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800b726:	4b1e      	ldr	r3, [pc, #120]	@ (800b7a0 <USBD_CUSTOM_HID_Init+0x150>)
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	f003 020f 	and.w	r2, r3, #15
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	4613      	mov	r3, r2
 800b732:	009b      	lsls	r3, r3, #2
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	440b      	add	r3, r1
 800b73a:	3324      	adds	r3, #36	@ 0x24
 800b73c:	2201      	movs	r2, #1
 800b73e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800b740:	4b18      	ldr	r3, [pc, #96]	@ (800b7a4 <USBD_CUSTOM_HID_Init+0x154>)
 800b742:	7819      	ldrb	r1, [r3, #0]
 800b744:	2302      	movs	r3, #2
 800b746:	2203      	movs	r2, #3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f002 f96c 	bl	800da26 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800b74e:	4b15      	ldr	r3, [pc, #84]	@ (800b7a4 <USBD_CUSTOM_HID_Init+0x154>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	f003 020f 	and.w	r2, r3, #15
 800b756:	6879      	ldr	r1, [r7, #4]
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	440b      	add	r3, r1
 800b762:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b766:	2201      	movs	r2, #1
 800b768:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	33b0      	adds	r3, #176	@ 0xb0
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	4413      	add	r3, r2
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	685b      	ldr	r3, [r3, #4]
 800b784:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800b786:	4b07      	ldr	r3, [pc, #28]	@ (800b7a4 <USBD_CUSTOM_HID_Init+0x154>)
 800b788:	7819      	ldrb	r1, [r3, #0]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	2340      	movs	r3, #64	@ 0x40
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f002 fa38 	bl	800dc04 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	20000092 	.word	0x20000092
 800b7a4:	20000093 	.word	0x20000093

0800b7a8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800b7b4:	4b37      	ldr	r3, [pc, #220]	@ (800b894 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f002 f959 	bl	800da72 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800b7c0:	4b34      	ldr	r3, [pc, #208]	@ (800b894 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	f003 020f 	and.w	r2, r3, #15
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3324      	adds	r3, #36	@ 0x24
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800b7da:	4b2e      	ldr	r3, [pc, #184]	@ (800b894 <USBD_CUSTOM_HID_DeInit+0xec>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	f003 020f 	and.w	r2, r3, #15
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	009b      	lsls	r3, r3, #2
 800b7e8:	4413      	add	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	440b      	add	r3, r1
 800b7ee:	3326      	adds	r3, #38	@ 0x26
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800b7f4:	4b28      	ldr	r3, [pc, #160]	@ (800b898 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f002 f939 	bl	800da72 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800b800:	4b25      	ldr	r3, [pc, #148]	@ (800b898 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f003 020f 	and.w	r2, r3, #15
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	440b      	add	r3, r1
 800b814:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b818:	2200      	movs	r2, #0
 800b81a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 800b81c:	4b1e      	ldr	r3, [pc, #120]	@ (800b898 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	f003 020f 	and.w	r2, r3, #15
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	4613      	mov	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	440b      	add	r3, r1
 800b830:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800b834:	2200      	movs	r2, #0
 800b836:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	32b0      	adds	r2, #176	@ 0xb0
 800b842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01f      	beq.n	800b88a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	33b0      	adds	r3, #176	@ 0xb0
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	4413      	add	r3, r2
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	32b0      	adds	r2, #176	@ 0xb0
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f002 f9f9 	bl	800dc64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	32b0      	adds	r2, #176	@ 0xb0
 800b87c:	2100      	movs	r1, #0
 800b87e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20000092 	.word	0x20000092
 800b898:	20000093 	.word	0x20000093

0800b89c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	32b0      	adds	r2, #176	@ 0xb0
 800b8b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8b4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e102      	b.n	800bad6 <USBD_CUSTOM_HID_Setup+0x23a>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d056      	beq.n	800b98a <USBD_CUSTOM_HID_Setup+0xee>
 800b8dc:	2b20      	cmp	r3, #32
 800b8de:	f040 80f2 	bne.w	800bac6 <USBD_CUSTOM_HID_Setup+0x22a>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	3b02      	subs	r3, #2
 800b8e8:	2b09      	cmp	r3, #9
 800b8ea:	d846      	bhi.n	800b97a <USBD_CUSTOM_HID_Setup+0xde>
 800b8ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f4 <USBD_CUSTOM_HID_Setup+0x58>)
 800b8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f2:	bf00      	nop
 800b8f4:	0800b94d 	.word	0x0800b94d
 800b8f8:	0800b92b 	.word	0x0800b92b
 800b8fc:	0800b97b 	.word	0x0800b97b
 800b900:	0800b97b 	.word	0x0800b97b
 800b904:	0800b97b 	.word	0x0800b97b
 800b908:	0800b97b 	.word	0x0800b97b
 800b90c:	0800b97b 	.word	0x0800b97b
 800b910:	0800b95d 	.word	0x0800b95d
 800b914:	0800b93b 	.word	0x0800b93b
 800b918:	0800b91d 	.word	0x0800b91d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	885b      	ldrh	r3, [r3, #2]
 800b920:	b2db      	uxtb	r3, r3
 800b922:	461a      	mov	r2, r3
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 800b928:	e02e      	b.n	800b988 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	3340      	adds	r3, #64	@ 0x40
 800b92e:	2201      	movs	r2, #1
 800b930:	4619      	mov	r1, r3
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f001 fce2 	bl	800d2fc <USBD_CtlSendData>
          break;
 800b938:	e026      	b.n	800b988 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	885b      	ldrh	r3, [r3, #2]
 800b93e:	0a1b      	lsrs	r3, r3, #8
 800b940:	b29b      	uxth	r3, r3
 800b942:	b2db      	uxtb	r3, r3
 800b944:	461a      	mov	r2, r3
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800b94a:	e01d      	b.n	800b988 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	3344      	adds	r3, #68	@ 0x44
 800b950:	2201      	movs	r2, #1
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f001 fcd1 	bl	800d2fc <USBD_CtlSendData>
          break;
 800b95a:	e015      	b.n	800b988 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2201      	movs	r2, #1
 800b960:	64da      	str	r2, [r3, #76]	@ 0x4c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b962:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	88db      	ldrh	r3, [r3, #6]
 800b968:	2b40      	cmp	r3, #64	@ 0x40
 800b96a:	bf28      	it	cs
 800b96c:	2340      	movcs	r3, #64	@ 0x40
 800b96e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800b970:	461a      	mov	r2, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f001 fcee 	bl	800d354 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 800b978:	e006      	b.n	800b988 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 fc40 	bl	800d202 <USBD_CtlError>
          ret = USBD_FAIL;
 800b982:	2303      	movs	r3, #3
 800b984:	75fb      	strb	r3, [r7, #23]
          break;
 800b986:	bf00      	nop
      }
      break;
 800b988:	e0a4      	b.n	800bad4 <USBD_CUSTOM_HID_Setup+0x238>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	2b0b      	cmp	r3, #11
 800b990:	f200 8090 	bhi.w	800bab4 <USBD_CUSTOM_HID_Setup+0x218>
 800b994:	a201      	add	r2, pc, #4	@ (adr r2, 800b99c <USBD_CUSTOM_HID_Setup+0x100>)
 800b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99a:	bf00      	nop
 800b99c:	0800b9cd 	.word	0x0800b9cd
 800b9a0:	0800bac3 	.word	0x0800bac3
 800b9a4:	0800bab5 	.word	0x0800bab5
 800b9a8:	0800bab5 	.word	0x0800bab5
 800b9ac:	0800bab5 	.word	0x0800bab5
 800b9b0:	0800bab5 	.word	0x0800bab5
 800b9b4:	0800b9f7 	.word	0x0800b9f7
 800b9b8:	0800bab5 	.word	0x0800bab5
 800b9bc:	0800bab5 	.word	0x0800bab5
 800b9c0:	0800bab5 	.word	0x0800bab5
 800b9c4:	0800ba63 	.word	0x0800ba63
 800b9c8:	0800ba8d 	.word	0x0800ba8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	d107      	bne.n	800b9e8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b9d8:	f107 030e 	add.w	r3, r7, #14
 800b9dc:	2202      	movs	r2, #2
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 fc8b 	bl	800d2fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b9e6:	e06d      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f001 fc09 	bl	800d202 <USBD_CtlError>
            ret = USBD_FAIL;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	75fb      	strb	r3, [r7, #23]
          break;
 800b9f4:	e066      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	885b      	ldrh	r3, [r3, #2]
 800b9fa:	0a1b      	lsrs	r3, r3, #8
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	2b22      	cmp	r3, #34	@ 0x22
 800ba00:	d110      	bne.n	800ba24 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88db      	ldrh	r3, [r3, #6]
 800ba06:	2b2c      	cmp	r3, #44	@ 0x2c
 800ba08:	bf28      	it	cs
 800ba0a:	232c      	movcs	r3, #44	@ 0x2c
 800ba0c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	33b0      	adds	r3, #176	@ 0xb0
 800ba18:	009b      	lsls	r3, r3, #2
 800ba1a:	4413      	add	r3, r2
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	e00d      	b.n	800ba40 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	885b      	ldrh	r3, [r3, #2]
 800ba28:	0a1b      	lsrs	r3, r3, #8
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	2b21      	cmp	r3, #33	@ 0x21
 800ba2e:	d107      	bne.n	800ba40 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800ba30:	4b2b      	ldr	r3, [pc, #172]	@ (800bae0 <USBD_CUSTOM_HID_Setup+0x244>)
 800ba32:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	88db      	ldrh	r3, [r3, #6]
 800ba38:	2b09      	cmp	r3, #9
 800ba3a:	bf28      	it	cs
 800ba3c:	2309      	movcs	r3, #9
 800ba3e:	83fb      	strh	r3, [r7, #30]
            }
          }

          if (pbuf != NULL)
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d006      	beq.n	800ba54 <USBD_CUSTOM_HID_Setup+0x1b8>
          {
            (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba46:	8bfb      	ldrh	r3, [r7, #30]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	69b9      	ldr	r1, [r7, #24]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 fc55 	bl	800d2fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba52:	e037      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fbd3 	bl	800d202 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	75fb      	strb	r3, [r7, #23]
          break;
 800ba60:	e030      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d107      	bne.n	800ba7e <USBD_CUSTOM_HID_Setup+0x1e2>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3348      	adds	r3, #72	@ 0x48
 800ba72:	2201      	movs	r2, #1
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f001 fc40 	bl	800d2fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba7c:	e022      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f001 fbbe 	bl	800d202 <USBD_CtlError>
            ret = USBD_FAIL;
 800ba86:	2303      	movs	r3, #3
 800ba88:	75fb      	strb	r3, [r7, #23]
          break;
 800ba8a:	e01b      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d106      	bne.n	800baa6 <USBD_CUSTOM_HID_Setup+0x20a>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	885b      	ldrh	r3, [r3, #2]
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	461a      	mov	r2, r3
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800baa4:	e00e      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>
            USBD_CtlError(pdev, req);
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fbaa 	bl	800d202 <USBD_CtlError>
            ret = USBD_FAIL;
 800baae:	2303      	movs	r3, #3
 800bab0:	75fb      	strb	r3, [r7, #23]
          break;
 800bab2:	e007      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fba3 	bl	800d202 <USBD_CtlError>
          ret = USBD_FAIL;
 800babc:	2303      	movs	r3, #3
 800babe:	75fb      	strb	r3, [r7, #23]
          break;
 800bac0:	e000      	b.n	800bac4 <USBD_CUSTOM_HID_Setup+0x228>
          break;
 800bac2:	bf00      	nop
      }
      break;
 800bac4:	e006      	b.n	800bad4 <USBD_CUSTOM_HID_Setup+0x238>

    default:
      USBD_CtlError(pdev, req);
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f001 fb9a 	bl	800d202 <USBD_CtlError>
      ret = USBD_FAIL;
 800bace:	2303      	movs	r3, #3
 800bad0:	75fb      	strb	r3, [r7, #23]
      break;
 800bad2:	bf00      	nop
  }
  return (uint8_t)ret;
 800bad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3720      	adds	r7, #32
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	2000007c 	.word	0x2000007c

0800bae4 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b086      	sub	sp, #24
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	4613      	mov	r3, r2
 800baf0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	32b0      	adds	r2, #176	@ 0xb0
 800bafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb00:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d101      	bne.n	800bb0c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bb08:	2303      	movs	r3, #3
 800bb0a:	e019      	b.n	800bb40 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	2b03      	cmp	r3, #3
 800bb16:	d112      	bne.n	800bb3e <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10b      	bne.n	800bb3a <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800bb2a:	4b07      	ldr	r3, [pc, #28]	@ (800bb48 <USBD_CUSTOM_HID_SendReport+0x64>)
 800bb2c:	7819      	ldrb	r1, [r3, #0]
 800bb2e:	88fb      	ldrh	r3, [r7, #6]
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f002 f845 	bl	800dbc2 <USBD_LL_Transmit>
 800bb38:	e001      	b.n	800bb3e <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e000      	b.n	800bb40 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20000092 	.word	0x20000092

0800bb4c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800bb54:	2181      	movs	r1, #129	@ 0x81
 800bb56:	4815      	ldr	r0, [pc, #84]	@ (800bbac <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800bb58:	f000 fd1d 	bl	800c596 <USBD_GetEpDesc>
 800bb5c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4812      	ldr	r0, [pc, #72]	@ (800bbac <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800bb62:	f000 fd18 	bl	800c596 <USBD_GetEpDesc>
 800bb66:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f042 0202 	orr.w	r2, r2, #2
 800bb76:	711a      	strb	r2, [r3, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	220a      	movs	r2, #10
 800bb80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d009      	beq.n	800bb9c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f042 0202 	orr.w	r2, r2, #2
 800bb90:	711a      	strb	r2, [r3, #4]
 800bb92:	2200      	movs	r2, #0
 800bb94:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	220a      	movs	r2, #10
 800bb9a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2229      	movs	r2, #41	@ 0x29
 800bba0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800bba2:	4b02      	ldr	r3, [pc, #8]	@ (800bbac <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20000050 	.word	0x20000050

0800bbb0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800bbb8:	2181      	movs	r1, #129	@ 0x81
 800bbba:	4815      	ldr	r0, [pc, #84]	@ (800bc10 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800bbbc:	f000 fceb 	bl	800c596 <USBD_GetEpDesc>
 800bbc0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	4812      	ldr	r0, [pc, #72]	@ (800bc10 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800bbc6:	f000 fce6 	bl	800c596 <USBD_GetEpDesc>
 800bbca:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d009      	beq.n	800bbe6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f042 0202 	orr.w	r2, r2, #2
 800bbda:	711a      	strb	r2, [r3, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2205      	movs	r2, #5
 800bbe4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d009      	beq.n	800bc00 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f042 0202 	orr.w	r2, r2, #2
 800bbf4:	711a      	strb	r2, [r3, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2205      	movs	r2, #5
 800bbfe:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2229      	movs	r2, #41	@ 0x29
 800bc04:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800bc06:	4b02      	ldr	r3, [pc, #8]	@ (800bc10 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000050 	.word	0x20000050

0800bc14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800bc1c:	2181      	movs	r1, #129	@ 0x81
 800bc1e:	4815      	ldr	r0, [pc, #84]	@ (800bc74 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800bc20:	f000 fcb9 	bl	800c596 <USBD_GetEpDesc>
 800bc24:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800bc26:	2101      	movs	r1, #1
 800bc28:	4812      	ldr	r0, [pc, #72]	@ (800bc74 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800bc2a:	f000 fcb4 	bl	800c596 <USBD_GetEpDesc>
 800bc2e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f042 0202 	orr.w	r2, r2, #2
 800bc3e:	711a      	strb	r2, [r3, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	220a      	movs	r2, #10
 800bc48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d009      	beq.n	800bc64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f042 0202 	orr.w	r2, r2, #2
 800bc58:	711a      	strb	r2, [r3, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	220a      	movs	r2, #10
 800bc62:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2229      	movs	r2, #41	@ 0x29
 800bc68:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800bc6a:	4b02      	ldr	r3, [pc, #8]	@ (800bc74 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	20000050 	.word	0x20000050

0800bc78 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	32b0      	adds	r2, #176	@ 0xb0
 800bc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	32b0      	adds	r2, #176	@ 0xb0
 800bcbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d101      	bne.n	800bcc8 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bcc4:	2303      	movs	r3, #3
 800bcc6:	e017      	b.n	800bcf8 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	32b0      	adds	r2, #176	@ 0xb0
 800bcd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	33b0      	adds	r3, #176	@ 0xb0
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	4413      	add	r3, r2
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	7810      	ldrb	r0, [r2, #0]
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	7852      	ldrb	r2, [r2, #1]
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	32b0      	adds	r2, #176	@ 0xb0
 800bd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d101      	bne.n	800bd1e <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e00f      	b.n	800bd3e <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	32b0      	adds	r2, #176	@ 0xb0
 800bd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd2c:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800bd2e:	4b06      	ldr	r3, [pc, #24]	@ (800bd48 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 800bd30:	7819      	ldrb	r1, [r3, #0]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	2340      	movs	r3, #64	@ 0x40
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 ff64 	bl	800dc04 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	20000093 	.word	0x20000093

0800bd4c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	32b0      	adds	r2, #176	@ 0xb0
 800bd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd62:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d101      	bne.n	800bd6e <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	e016      	b.n	800bd9c <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d111      	bne.n	800bd9a <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	33b0      	adds	r3, #176	@ 0xb0
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	7810      	ldrb	r0, [r2, #0]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	7852      	ldrb	r2, [r2, #1]
 800bd90:	4611      	mov	r1, r2
 800bd92:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	220a      	movs	r2, #10
 800bdb0:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800bdb2:	4b03      	ldr	r3, [pc, #12]	@ (800bdc0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr
 800bdc0:	20000088 	.word	0x20000088

0800bdc4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d101      	bne.n	800bdd8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e009      	b.n	800bdec <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	33b0      	adds	r3, #176	@ 0xb0
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	683a      	ldr	r2, [r7, #0]
 800bde8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	370c      	adds	r7, #12
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b086      	sub	sp, #24
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4613      	mov	r3, r2
 800be04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e01f      	b.n	800be50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2200      	movs	r2, #0
 800be14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f001 fd87 	bl	800d958 <USBD_LL_Init>
 800be4a:	4603      	mov	r3, r0
 800be4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800be4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be50:	4618      	mov	r0, r3
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be62:	2300      	movs	r3, #0
 800be64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e025      	b.n	800bebc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	683a      	ldr	r2, [r7, #0]
 800be74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	32ae      	adds	r2, #174	@ 0xae
 800be82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00f      	beq.n	800beac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	32ae      	adds	r2, #174	@ 0xae
 800be96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be9c:	f107 020e 	add.w	r2, r7, #14
 800bea0:	4610      	mov	r0, r2
 800bea2:	4798      	blx	r3
 800bea4:	4602      	mov	r2, r0
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3710      	adds	r7, #16
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 fd8f 	bl	800d9f0 <USBD_LL_Start>
 800bed2:	4603      	mov	r3, r0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bedc:	b480      	push	{r7}
 800bede:	b083      	sub	sp, #12
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bee4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	370c      	adds	r7, #12
 800beea:	46bd      	mov	sp, r7
 800beec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef0:	4770      	bx	lr

0800bef2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	460b      	mov	r3, r1
 800befc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d009      	beq.n	800bf20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	78fa      	ldrb	r2, [r7, #3]
 800bf16:	4611      	mov	r1, r2
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	4798      	blx	r3
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	78fa      	ldrb	r2, [r7, #3]
 800bf44:	4611      	mov	r1, r2
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	4798      	blx	r3
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d001      	beq.n	800bf54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bf50:	2303      	movs	r3, #3
 800bf52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b084      	sub	sp, #16
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	6078      	str	r0, [r7, #4]
 800bf66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f001 f90c 	bl	800d18e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bf84:	461a      	mov	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bf92:	f003 031f 	and.w	r3, r3, #31
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d01a      	beq.n	800bfd0 <USBD_LL_SetupStage+0x72>
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d822      	bhi.n	800bfe4 <USBD_LL_SetupStage+0x86>
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d002      	beq.n	800bfa8 <USBD_LL_SetupStage+0x4a>
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d00a      	beq.n	800bfbc <USBD_LL_SetupStage+0x5e>
 800bfa6:	e01d      	b.n	800bfe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 fb63 	bl	800c67c <USBD_StdDevReq>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bfba:	e020      	b.n	800bffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fbcb 	bl	800c760 <USBD_StdItfReq>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bfce:	e016      	b.n	800bffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fc2d 	bl	800c838 <USBD_StdEPReq>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	73fb      	strb	r3, [r7, #15]
      break;
 800bfe2:	e00c      	b.n	800bffe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bfea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f001 fd5c 	bl	800dab0 <USBD_LL_StallEP>
 800bff8:	4603      	mov	r3, r0
 800bffa:	73fb      	strb	r3, [r7, #15]
      break;
 800bffc:	bf00      	nop
  }

  return ret;
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c000:	4618      	mov	r0, r3
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	460b      	mov	r3, r1
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c016:	2300      	movs	r3, #0
 800c018:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c01a:	7afb      	ldrb	r3, [r7, #11]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d16e      	bne.n	800c0fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c026:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c02e:	2b03      	cmp	r3, #3
 800c030:	f040 8098 	bne.w	800c164 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d913      	bls.n	800c068 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	689a      	ldr	r2, [r3, #8]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	1ad2      	subs	r2, r2, r3
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	4293      	cmp	r3, r2
 800c058:	bf28      	it	cs
 800c05a:	4613      	movcs	r3, r2
 800c05c:	461a      	mov	r2, r3
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f001 f994 	bl	800d38e <USBD_CtlContinueRx>
 800c066:	e07d      	b.n	800c164 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c06e:	f003 031f 	and.w	r3, r3, #31
 800c072:	2b02      	cmp	r3, #2
 800c074:	d014      	beq.n	800c0a0 <USBD_LL_DataOutStage+0x98>
 800c076:	2b02      	cmp	r3, #2
 800c078:	d81d      	bhi.n	800c0b6 <USBD_LL_DataOutStage+0xae>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d002      	beq.n	800c084 <USBD_LL_DataOutStage+0x7c>
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d003      	beq.n	800c08a <USBD_LL_DataOutStage+0x82>
 800c082:	e018      	b.n	800c0b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	75bb      	strb	r3, [r7, #22]
            break;
 800c088:	e018      	b.n	800c0bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c090:	b2db      	uxtb	r3, r3
 800c092:	4619      	mov	r1, r3
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f000 fa64 	bl	800c562 <USBD_CoreFindIF>
 800c09a:	4603      	mov	r3, r0
 800c09c:	75bb      	strb	r3, [r7, #22]
            break;
 800c09e:	e00d      	b.n	800c0bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 fa66 	bl	800c57c <USBD_CoreFindEP>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	75bb      	strb	r3, [r7, #22]
            break;
 800c0b4:	e002      	b.n	800c0bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75bb      	strb	r3, [r7, #22]
            break;
 800c0ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c0bc:	7dbb      	ldrb	r3, [r7, #22]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d119      	bne.n	800c0f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0c8:	b2db      	uxtb	r3, r3
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d113      	bne.n	800c0f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c0ce:	7dba      	ldrb	r2, [r7, #22]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	32ae      	adds	r2, #174	@ 0xae
 800c0d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00b      	beq.n	800c0f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c0de:	7dba      	ldrb	r2, [r7, #22]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c0e6:	7dba      	ldrb	r2, [r7, #22]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	32ae      	adds	r2, #174	@ 0xae
 800c0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f0:	691b      	ldr	r3, [r3, #16]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f001 f95a 	bl	800d3b0 <USBD_CtlSendStatus>
 800c0fc:	e032      	b.n	800c164 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c104:	b2db      	uxtb	r3, r3
 800c106:	4619      	mov	r1, r3
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	f000 fa37 	bl	800c57c <USBD_CoreFindEP>
 800c10e:	4603      	mov	r3, r0
 800c110:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c112:	7dbb      	ldrb	r3, [r7, #22]
 800c114:	2bff      	cmp	r3, #255	@ 0xff
 800c116:	d025      	beq.n	800c164 <USBD_LL_DataOutStage+0x15c>
 800c118:	7dbb      	ldrb	r3, [r7, #22]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d122      	bne.n	800c164 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c124:	b2db      	uxtb	r3, r3
 800c126:	2b03      	cmp	r3, #3
 800c128:	d117      	bne.n	800c15a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c12a:	7dba      	ldrb	r2, [r7, #22]
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	32ae      	adds	r2, #174	@ 0xae
 800c130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00f      	beq.n	800c15a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c13a:	7dba      	ldrb	r2, [r7, #22]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c142:	7dba      	ldrb	r2, [r7, #22]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	32ae      	adds	r2, #174	@ 0xae
 800c148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	7afa      	ldrb	r2, [r7, #11]
 800c150:	4611      	mov	r1, r2
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	4798      	blx	r3
 800c156:	4603      	mov	r3, r0
 800c158:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c160:	7dfb      	ldrb	r3, [r7, #23]
 800c162:	e000      	b.n	800c166 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c164:	2300      	movs	r3, #0
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b086      	sub	sp, #24
 800c172:	af00      	add	r7, sp, #0
 800c174:	60f8      	str	r0, [r7, #12]
 800c176:	460b      	mov	r3, r1
 800c178:	607a      	str	r2, [r7, #4]
 800c17a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c17c:	7afb      	ldrb	r3, [r7, #11]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d16f      	bne.n	800c262 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	3314      	adds	r3, #20
 800c186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d15a      	bne.n	800c248 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	689a      	ldr	r2, [r3, #8]
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d914      	bls.n	800c1c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	689a      	ldr	r2, [r3, #8]
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	1ad2      	subs	r2, r2, r3
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6879      	ldr	r1, [r7, #4]
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f001 f8bc 	bl	800d332 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	2200      	movs	r2, #0
 800c1be:	2100      	movs	r1, #0
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f001 fd1f 	bl	800dc04 <USBD_LL_PrepareReceive>
 800c1c6:	e03f      	b.n	800c248 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	68da      	ldr	r2, [r3, #12]
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d11c      	bne.n	800c20e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d316      	bcc.n	800c20e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	685a      	ldr	r2, [r3, #4]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d20f      	bcs.n	800c20e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	68f8      	ldr	r0, [r7, #12]
 800c1f4:	f001 f89d 	bl	800d332 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c200:	2300      	movs	r3, #0
 800c202:	2200      	movs	r2, #0
 800c204:	2100      	movs	r1, #0
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f001 fcfc 	bl	800dc04 <USBD_LL_PrepareReceive>
 800c20c:	e01c      	b.n	800c248 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c214:	b2db      	uxtb	r3, r3
 800c216:	2b03      	cmp	r3, #3
 800c218:	d10f      	bne.n	800c23a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d009      	beq.n	800c23a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c23a:	2180      	movs	r1, #128	@ 0x80
 800c23c:	68f8      	ldr	r0, [r7, #12]
 800c23e:	f001 fc37 	bl	800dab0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f001 f8c7 	bl	800d3d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d03a      	beq.n	800c2c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c252:	68f8      	ldr	r0, [r7, #12]
 800c254:	f7ff fe42 	bl	800bedc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c260:	e032      	b.n	800c2c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c262:	7afb      	ldrb	r3, [r7, #11]
 800c264:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	4619      	mov	r1, r3
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f985 	bl	800c57c <USBD_CoreFindEP>
 800c272:	4603      	mov	r3, r0
 800c274:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c276:	7dfb      	ldrb	r3, [r7, #23]
 800c278:	2bff      	cmp	r3, #255	@ 0xff
 800c27a:	d025      	beq.n	800c2c8 <USBD_LL_DataInStage+0x15a>
 800c27c:	7dfb      	ldrb	r3, [r7, #23]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d122      	bne.n	800c2c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	2b03      	cmp	r3, #3
 800c28c:	d11c      	bne.n	800c2c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c28e:	7dfa      	ldrb	r2, [r7, #23]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	32ae      	adds	r2, #174	@ 0xae
 800c294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d014      	beq.n	800c2c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c29e:	7dfa      	ldrb	r2, [r7, #23]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c2a6:	7dfa      	ldrb	r2, [r7, #23]
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	32ae      	adds	r2, #174	@ 0xae
 800c2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b0:	695b      	ldr	r3, [r3, #20]
 800c2b2:	7afa      	ldrb	r2, [r7, #11]
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	4798      	blx	r3
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c2be:	7dbb      	ldrb	r3, [r7, #22]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c2c4:	7dbb      	ldrb	r3, [r7, #22]
 800c2c6:	e000      	b.n	800c2ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3718      	adds	r7, #24
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}

0800c2d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c2d2:	b580      	push	{r7, lr}
 800c2d4:	b084      	sub	sp, #16
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d014      	beq.n	800c338 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00e      	beq.n	800c338 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	6852      	ldr	r2, [r2, #4]
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	4611      	mov	r1, r2
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	4798      	blx	r3
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	d001      	beq.n	800c338 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c334:	2303      	movs	r3, #3
 800c336:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c338:	2340      	movs	r3, #64	@ 0x40
 800c33a:	2200      	movs	r2, #0
 800c33c:	2100      	movs	r1, #0
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f001 fb71 	bl	800da26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2240      	movs	r2, #64	@ 0x40
 800c350:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c354:	2340      	movs	r3, #64	@ 0x40
 800c356:	2200      	movs	r2, #0
 800c358:	2180      	movs	r1, #128	@ 0x80
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f001 fb63 	bl	800da26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2240      	movs	r2, #64	@ 0x40
 800c36a:	621a      	str	r2, [r3, #32]

  return ret;
 800c36c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	460b      	mov	r3, r1
 800c380:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	78fa      	ldrb	r2, [r7, #3]
 800c386:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	370c      	adds	r7, #12
 800c38e:	46bd      	mov	sp, r7
 800c390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c394:	4770      	bx	lr

0800c396 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c396:	b480      	push	{r7}
 800c398:	b083      	sub	sp, #12
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b04      	cmp	r3, #4
 800c3a8:	d006      	beq.n	800c3b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2204      	movs	r2, #4
 800c3bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c3c0:	2300      	movs	r3, #0
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	2b04      	cmp	r3, #4
 800c3e0:	d106      	bne.n	800c3f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c3e8:	b2da      	uxtb	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	370c      	adds	r7, #12
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr

0800c3fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	2b03      	cmp	r3, #3
 800c410:	d110      	bne.n	800c434 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c422:	69db      	ldr	r3, [r3, #28]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d005      	beq.n	800c434 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c42e:	69db      	ldr	r3, [r3, #28]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b082      	sub	sp, #8
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	460b      	mov	r3, r1
 800c448:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	32ae      	adds	r2, #174	@ 0xae
 800c454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e01c      	b.n	800c49a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b03      	cmp	r3, #3
 800c46a:	d115      	bne.n	800c498 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	32ae      	adds	r2, #174	@ 0xae
 800c476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	32ae      	adds	r2, #174	@ 0xae
 800c48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48e:	6a1b      	ldr	r3, [r3, #32]
 800c490:	78fa      	ldrb	r2, [r7, #3]
 800c492:	4611      	mov	r1, r2
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b082      	sub	sp, #8
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	32ae      	adds	r2, #174	@ 0xae
 800c4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d101      	bne.n	800c4c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	e01c      	b.n	800c4fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b03      	cmp	r3, #3
 800c4ce:	d115      	bne.n	800c4fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	32ae      	adds	r2, #174	@ 0xae
 800c4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	32ae      	adds	r2, #174	@ 0xae
 800c4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4f4:	78fa      	ldrb	r2, [r7, #3]
 800c4f6:	4611      	mov	r1, r2
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c4fc:	2300      	movs	r3, #0
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}

0800c506 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c506:	b480      	push	{r7}
 800c508:	b083      	sub	sp, #12
 800c50a:	af00      	add	r7, sp, #0
 800c50c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2201      	movs	r2, #1
 800c52c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c536:	2b00      	cmp	r3, #0
 800c538:	d00e      	beq.n	800c558 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	6852      	ldr	r2, [r2, #4]
 800c546:	b2d2      	uxtb	r2, r2
 800c548:	4611      	mov	r1, r2
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4798      	blx	r3
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d001      	beq.n	800c558 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c554:	2303      	movs	r3, #3
 800c556:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c558:	7bfb      	ldrb	r3, [r7, #15]
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
 800c56a:	460b      	mov	r3, r1
 800c56c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c56e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c570:	4618      	mov	r0, r3
 800c572:	370c      	adds	r7, #12
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c588:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	370c      	adds	r7, #12
 800c58e:	46bd      	mov	sp, r7
 800c590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c594:	4770      	bx	lr

0800c596 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b086      	sub	sp, #24
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
 800c59e:	460b      	mov	r3, r1
 800c5a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	885b      	ldrh	r3, [r3, #2]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	7812      	ldrb	r2, [r2, #0]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d91f      	bls.n	800c5fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c5c2:	e013      	b.n	800c5ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c5c4:	f107 030a 	add.w	r3, r7, #10
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6978      	ldr	r0, [r7, #20]
 800c5cc:	f000 f81b 	bl	800c606 <USBD_GetNextDesc>
 800c5d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	785b      	ldrb	r3, [r3, #1]
 800c5d6:	2b05      	cmp	r3, #5
 800c5d8:	d108      	bne.n	800c5ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	789b      	ldrb	r3, [r3, #2]
 800c5e2:	78fa      	ldrb	r2, [r7, #3]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d008      	beq.n	800c5fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	885b      	ldrh	r3, [r3, #2]
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	897b      	ldrh	r3, [r7, #10]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d8e5      	bhi.n	800c5c4 <USBD_GetEpDesc+0x2e>
 800c5f8:	e000      	b.n	800c5fc <USBD_GetEpDesc+0x66>
          break;
 800c5fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c5fc:	693b      	ldr	r3, [r7, #16]
}
 800c5fe:	4618      	mov	r0, r3
 800c600:	3718      	adds	r7, #24
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}

0800c606 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c606:	b480      	push	{r7}
 800c608:	b085      	sub	sp, #20
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
 800c60e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	881b      	ldrh	r3, [r3, #0]
 800c618:	68fa      	ldr	r2, [r7, #12]
 800c61a:	7812      	ldrb	r2, [r2, #0]
 800c61c:	4413      	add	r3, r2
 800c61e:	b29a      	uxth	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4413      	add	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c630:	68fb      	ldr	r3, [r7, #12]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c63e:	b480      	push	{r7}
 800c640:	b087      	sub	sp, #28
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	3301      	adds	r3, #1
 800c654:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c65c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	b21a      	sxth	r2, r3
 800c664:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c668:	4313      	orrs	r3, r2
 800c66a:	b21b      	sxth	r3, r3
 800c66c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c66e:	89fb      	ldrh	r3, [r7, #14]
}
 800c670:	4618      	mov	r0, r3
 800c672:	371c      	adds	r7, #28
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c686:	2300      	movs	r3, #0
 800c688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c692:	2b40      	cmp	r3, #64	@ 0x40
 800c694:	d005      	beq.n	800c6a2 <USBD_StdDevReq+0x26>
 800c696:	2b40      	cmp	r3, #64	@ 0x40
 800c698:	d857      	bhi.n	800c74a <USBD_StdDevReq+0xce>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00f      	beq.n	800c6be <USBD_StdDevReq+0x42>
 800c69e:	2b20      	cmp	r3, #32
 800c6a0:	d153      	bne.n	800c74a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	32ae      	adds	r2, #174	@ 0xae
 800c6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	6839      	ldr	r1, [r7, #0]
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	4798      	blx	r3
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c6bc:	e04a      	b.n	800c754 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	2b09      	cmp	r3, #9
 800c6c4:	d83b      	bhi.n	800c73e <USBD_StdDevReq+0xc2>
 800c6c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6cc <USBD_StdDevReq+0x50>)
 800c6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6cc:	0800c721 	.word	0x0800c721
 800c6d0:	0800c735 	.word	0x0800c735
 800c6d4:	0800c73f 	.word	0x0800c73f
 800c6d8:	0800c72b 	.word	0x0800c72b
 800c6dc:	0800c73f 	.word	0x0800c73f
 800c6e0:	0800c6ff 	.word	0x0800c6ff
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c73f 	.word	0x0800c73f
 800c6ec:	0800c717 	.word	0x0800c717
 800c6f0:	0800c709 	.word	0x0800c709
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 fa3c 	bl	800cb74 <USBD_GetDescriptor>
          break;
 800c6fc:	e024      	b.n	800c748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fba1 	bl	800ce48 <USBD_SetAddress>
          break;
 800c706:	e01f      	b.n	800c748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fbe0 	bl	800ced0 <USBD_SetConfig>
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]
          break;
 800c714:	e018      	b.n	800c748 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c716:	6839      	ldr	r1, [r7, #0]
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fc83 	bl	800d024 <USBD_GetConfig>
          break;
 800c71e:	e013      	b.n	800c748 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fcb4 	bl	800d090 <USBD_GetStatus>
          break;
 800c728:	e00e      	b.n	800c748 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fce3 	bl	800d0f8 <USBD_SetFeature>
          break;
 800c732:	e009      	b.n	800c748 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fd07 	bl	800d14a <USBD_ClrFeature>
          break;
 800c73c:	e004      	b.n	800c748 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fd5e 	bl	800d202 <USBD_CtlError>
          break;
 800c746:	bf00      	nop
      }
      break;
 800c748:	e004      	b.n	800c754 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fd58 	bl	800d202 <USBD_CtlError>
      break;
 800c752:	bf00      	nop
  }

  return ret;
 800c754:	7bfb      	ldrb	r3, [r7, #15]
}
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop

0800c760 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c776:	2b40      	cmp	r3, #64	@ 0x40
 800c778:	d005      	beq.n	800c786 <USBD_StdItfReq+0x26>
 800c77a:	2b40      	cmp	r3, #64	@ 0x40
 800c77c:	d852      	bhi.n	800c824 <USBD_StdItfReq+0xc4>
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <USBD_StdItfReq+0x26>
 800c782:	2b20      	cmp	r3, #32
 800c784:	d14e      	bne.n	800c824 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	3b01      	subs	r3, #1
 800c790:	2b02      	cmp	r3, #2
 800c792:	d840      	bhi.n	800c816 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	889b      	ldrh	r3, [r3, #4]
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d836      	bhi.n	800c80c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	889b      	ldrh	r3, [r3, #4]
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fedb 	bl	800c562 <USBD_CoreFindIF>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7b0:	7bbb      	ldrb	r3, [r7, #14]
 800c7b2:	2bff      	cmp	r3, #255	@ 0xff
 800c7b4:	d01d      	beq.n	800c7f2 <USBD_StdItfReq+0x92>
 800c7b6:	7bbb      	ldrb	r3, [r7, #14]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d11a      	bne.n	800c7f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c7bc:	7bba      	ldrb	r2, [r7, #14]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	32ae      	adds	r2, #174	@ 0xae
 800c7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00f      	beq.n	800c7ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c7cc:	7bba      	ldrb	r2, [r7, #14]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c7d4:	7bba      	ldrb	r2, [r7, #14]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	32ae      	adds	r2, #174	@ 0xae
 800c7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	4798      	blx	r3
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c7ea:	e004      	b.n	800c7f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c7f0:	e001      	b.n	800c7f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	88db      	ldrh	r3, [r3, #6]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d110      	bne.n	800c820 <USBD_StdItfReq+0xc0>
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10d      	bne.n	800c820 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fdd3 	bl	800d3b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c80a:	e009      	b.n	800c820 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fcf7 	bl	800d202 <USBD_CtlError>
          break;
 800c814:	e004      	b.n	800c820 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fcf2 	bl	800d202 <USBD_CtlError>
          break;
 800c81e:	e000      	b.n	800c822 <USBD_StdItfReq+0xc2>
          break;
 800c820:	bf00      	nop
      }
      break;
 800c822:	e004      	b.n	800c82e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fceb 	bl	800d202 <USBD_CtlError>
      break;
 800c82c:	bf00      	nop
  }

  return ret;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c842:	2300      	movs	r3, #0
 800c844:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	889b      	ldrh	r3, [r3, #4]
 800c84a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c854:	2b40      	cmp	r3, #64	@ 0x40
 800c856:	d007      	beq.n	800c868 <USBD_StdEPReq+0x30>
 800c858:	2b40      	cmp	r3, #64	@ 0x40
 800c85a:	f200 817f 	bhi.w	800cb5c <USBD_StdEPReq+0x324>
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d02a      	beq.n	800c8b8 <USBD_StdEPReq+0x80>
 800c862:	2b20      	cmp	r3, #32
 800c864:	f040 817a 	bne.w	800cb5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff fe85 	bl	800c57c <USBD_CoreFindEP>
 800c872:	4603      	mov	r3, r0
 800c874:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c876:	7b7b      	ldrb	r3, [r7, #13]
 800c878:	2bff      	cmp	r3, #255	@ 0xff
 800c87a:	f000 8174 	beq.w	800cb66 <USBD_StdEPReq+0x32e>
 800c87e:	7b7b      	ldrb	r3, [r7, #13]
 800c880:	2b00      	cmp	r3, #0
 800c882:	f040 8170 	bne.w	800cb66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c886:	7b7a      	ldrb	r2, [r7, #13]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c88e:	7b7a      	ldrb	r2, [r7, #13]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	32ae      	adds	r2, #174	@ 0xae
 800c894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 8163 	beq.w	800cb66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c8a0:	7b7a      	ldrb	r2, [r7, #13]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	32ae      	adds	r2, #174	@ 0xae
 800c8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	4798      	blx	r3
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c8b6:	e156      	b.n	800cb66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	785b      	ldrb	r3, [r3, #1]
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	d008      	beq.n	800c8d2 <USBD_StdEPReq+0x9a>
 800c8c0:	2b03      	cmp	r3, #3
 800c8c2:	f300 8145 	bgt.w	800cb50 <USBD_StdEPReq+0x318>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	f000 809b 	beq.w	800ca02 <USBD_StdEPReq+0x1ca>
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d03c      	beq.n	800c94a <USBD_StdEPReq+0x112>
 800c8d0:	e13e      	b.n	800cb50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d002      	beq.n	800c8e4 <USBD_StdEPReq+0xac>
 800c8de:	2b03      	cmp	r3, #3
 800c8e0:	d016      	beq.n	800c910 <USBD_StdEPReq+0xd8>
 800c8e2:	e02c      	b.n	800c93e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c8e4:	7bbb      	ldrb	r3, [r7, #14]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00d      	beq.n	800c906 <USBD_StdEPReq+0xce>
 800c8ea:	7bbb      	ldrb	r3, [r7, #14]
 800c8ec:	2b80      	cmp	r3, #128	@ 0x80
 800c8ee:	d00a      	beq.n	800c906 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c8f0:	7bbb      	ldrb	r3, [r7, #14]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f001 f8db 	bl	800dab0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8fa:	2180      	movs	r1, #128	@ 0x80
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f001 f8d7 	bl	800dab0 <USBD_LL_StallEP>
 800c902:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c904:	e020      	b.n	800c948 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fc7a 	bl	800d202 <USBD_CtlError>
              break;
 800c90e:	e01b      	b.n	800c948 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	885b      	ldrh	r3, [r3, #2]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10e      	bne.n	800c936 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c918:	7bbb      	ldrb	r3, [r7, #14]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d00b      	beq.n	800c936 <USBD_StdEPReq+0xfe>
 800c91e:	7bbb      	ldrb	r3, [r7, #14]
 800c920:	2b80      	cmp	r3, #128	@ 0x80
 800c922:	d008      	beq.n	800c936 <USBD_StdEPReq+0xfe>
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	88db      	ldrh	r3, [r3, #6]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d104      	bne.n	800c936 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	4619      	mov	r1, r3
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f001 f8bd 	bl	800dab0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fd3a 	bl	800d3b0 <USBD_CtlSendStatus>

              break;
 800c93c:	e004      	b.n	800c948 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fc5e 	bl	800d202 <USBD_CtlError>
              break;
 800c946:	bf00      	nop
          }
          break;
 800c948:	e107      	b.n	800cb5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b02      	cmp	r3, #2
 800c954:	d002      	beq.n	800c95c <USBD_StdEPReq+0x124>
 800c956:	2b03      	cmp	r3, #3
 800c958:	d016      	beq.n	800c988 <USBD_StdEPReq+0x150>
 800c95a:	e04b      	b.n	800c9f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c95c:	7bbb      	ldrb	r3, [r7, #14]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00d      	beq.n	800c97e <USBD_StdEPReq+0x146>
 800c962:	7bbb      	ldrb	r3, [r7, #14]
 800c964:	2b80      	cmp	r3, #128	@ 0x80
 800c966:	d00a      	beq.n	800c97e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c968:	7bbb      	ldrb	r3, [r7, #14]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f001 f89f 	bl	800dab0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c972:	2180      	movs	r1, #128	@ 0x80
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f001 f89b 	bl	800dab0 <USBD_LL_StallEP>
 800c97a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c97c:	e040      	b.n	800ca00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 fc3e 	bl	800d202 <USBD_CtlError>
              break;
 800c986:	e03b      	b.n	800ca00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	885b      	ldrh	r3, [r3, #2]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d136      	bne.n	800c9fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c990:	7bbb      	ldrb	r3, [r7, #14]
 800c992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c996:	2b00      	cmp	r3, #0
 800c998:	d004      	beq.n	800c9a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c99a:	7bbb      	ldrb	r3, [r7, #14]
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f001 f8a5 	bl	800daee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fd03 	bl	800d3b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c9aa:	7bbb      	ldrb	r3, [r7, #14]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff fde4 	bl	800c57c <USBD_CoreFindEP>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9b8:	7b7b      	ldrb	r3, [r7, #13]
 800c9ba:	2bff      	cmp	r3, #255	@ 0xff
 800c9bc:	d01f      	beq.n	800c9fe <USBD_StdEPReq+0x1c6>
 800c9be:	7b7b      	ldrb	r3, [r7, #13]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d11c      	bne.n	800c9fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c9c4:	7b7a      	ldrb	r2, [r7, #13]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c9cc:	7b7a      	ldrb	r2, [r7, #13]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	32ae      	adds	r2, #174	@ 0xae
 800c9d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d6:	689b      	ldr	r3, [r3, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d010      	beq.n	800c9fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c9dc:	7b7a      	ldrb	r2, [r7, #13]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	32ae      	adds	r2, #174	@ 0xae
 800c9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e6:	689b      	ldr	r3, [r3, #8]
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	4798      	blx	r3
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c9f2:	e004      	b.n	800c9fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fc03 	bl	800d202 <USBD_CtlError>
              break;
 800c9fc:	e000      	b.n	800ca00 <USBD_StdEPReq+0x1c8>
              break;
 800c9fe:	bf00      	nop
          }
          break;
 800ca00:	e0ab      	b.n	800cb5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca08:	b2db      	uxtb	r3, r3
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d002      	beq.n	800ca14 <USBD_StdEPReq+0x1dc>
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d032      	beq.n	800ca78 <USBD_StdEPReq+0x240>
 800ca12:	e097      	b.n	800cb44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca14:	7bbb      	ldrb	r3, [r7, #14]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d007      	beq.n	800ca2a <USBD_StdEPReq+0x1f2>
 800ca1a:	7bbb      	ldrb	r3, [r7, #14]
 800ca1c:	2b80      	cmp	r3, #128	@ 0x80
 800ca1e:	d004      	beq.n	800ca2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ca20:	6839      	ldr	r1, [r7, #0]
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fbed 	bl	800d202 <USBD_CtlError>
                break;
 800ca28:	e091      	b.n	800cb4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	da0b      	bge.n	800ca4a <USBD_StdEPReq+0x212>
 800ca32:	7bbb      	ldrb	r3, [r7, #14]
 800ca34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ca38:	4613      	mov	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	3310      	adds	r3, #16
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	4413      	add	r3, r2
 800ca46:	3304      	adds	r3, #4
 800ca48:	e00b      	b.n	800ca62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
 800ca4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	4413      	add	r3, r2
 800ca60:	3304      	adds	r3, #4
 800ca62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2200      	movs	r2, #0
 800ca68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 fc43 	bl	800d2fc <USBD_CtlSendData>
              break;
 800ca76:	e06a      	b.n	800cb4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	da11      	bge.n	800caa4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca80:	7bbb      	ldrb	r3, [r7, #14]
 800ca82:	f003 020f 	and.w	r2, r3, #15
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	4613      	mov	r3, r2
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	440b      	add	r3, r1
 800ca92:	3324      	adds	r3, #36	@ 0x24
 800ca94:	881b      	ldrh	r3, [r3, #0]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d117      	bne.n	800caca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 fbb0 	bl	800d202 <USBD_CtlError>
                  break;
 800caa2:	e054      	b.n	800cb4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800caa4:	7bbb      	ldrb	r3, [r7, #14]
 800caa6:	f003 020f 	and.w	r2, r3, #15
 800caaa:	6879      	ldr	r1, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	440b      	add	r3, r1
 800cab6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d104      	bne.n	800caca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fb9d 	bl	800d202 <USBD_CtlError>
                  break;
 800cac8:	e041      	b.n	800cb4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	da0b      	bge.n	800caea <USBD_StdEPReq+0x2b2>
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cad8:	4613      	mov	r3, r2
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	009b      	lsls	r3, r3, #2
 800cae0:	3310      	adds	r3, #16
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	4413      	add	r3, r2
 800cae6:	3304      	adds	r3, #4
 800cae8:	e00b      	b.n	800cb02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800caea:	7bbb      	ldrb	r3, [r7, #14]
 800caec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800caf0:	4613      	mov	r3, r2
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	4413      	add	r3, r2
 800cb00:	3304      	adds	r3, #4
 800cb02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb04:	7bbb      	ldrb	r3, [r7, #14]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d002      	beq.n	800cb10 <USBD_StdEPReq+0x2d8>
 800cb0a:	7bbb      	ldrb	r3, [r7, #14]
 800cb0c:	2b80      	cmp	r3, #128	@ 0x80
 800cb0e:	d103      	bne.n	800cb18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	e00e      	b.n	800cb36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb18:	7bbb      	ldrb	r3, [r7, #14]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f001 f805 	bl	800db2c <USBD_LL_IsStallEP>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d003      	beq.n	800cb30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	601a      	str	r2, [r3, #0]
 800cb2e:	e002      	b.n	800cb36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	2202      	movs	r2, #2
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fbdd 	bl	800d2fc <USBD_CtlSendData>
              break;
 800cb42:	e004      	b.n	800cb4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cb44:	6839      	ldr	r1, [r7, #0]
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fb5b 	bl	800d202 <USBD_CtlError>
              break;
 800cb4c:	bf00      	nop
          }
          break;
 800cb4e:	e004      	b.n	800cb5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fb55 	bl	800d202 <USBD_CtlError>
          break;
 800cb58:	bf00      	nop
      }
      break;
 800cb5a:	e005      	b.n	800cb68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 fb4f 	bl	800d202 <USBD_CtlError>
      break;
 800cb64:	e000      	b.n	800cb68 <USBD_StdEPReq+0x330>
      break;
 800cb66:	bf00      	nop
  }

  return ret;
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3710      	adds	r7, #16
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb86:	2300      	movs	r3, #0
 800cb88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	885b      	ldrh	r3, [r3, #2]
 800cb8e:	0a1b      	lsrs	r3, r3, #8
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	3b01      	subs	r3, #1
 800cb94:	2b06      	cmp	r3, #6
 800cb96:	f200 8128 	bhi.w	800cdea <USBD_GetDescriptor+0x276>
 800cb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800cba0 <USBD_GetDescriptor+0x2c>)
 800cb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba0:	0800cbbd 	.word	0x0800cbbd
 800cba4:	0800cbd5 	.word	0x0800cbd5
 800cba8:	0800cc15 	.word	0x0800cc15
 800cbac:	0800cdeb 	.word	0x0800cdeb
 800cbb0:	0800cdeb 	.word	0x0800cdeb
 800cbb4:	0800cd8b 	.word	0x0800cd8b
 800cbb8:	0800cdb7 	.word	0x0800cdb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	687a      	ldr	r2, [r7, #4]
 800cbc6:	7c12      	ldrb	r2, [r2, #16]
 800cbc8:	f107 0108 	add.w	r1, r7, #8
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4798      	blx	r3
 800cbd0:	60f8      	str	r0, [r7, #12]
      break;
 800cbd2:	e112      	b.n	800cdfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7c1b      	ldrb	r3, [r3, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10d      	bne.n	800cbf8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbe4:	f107 0208 	add.w	r2, r7, #8
 800cbe8:	4610      	mov	r0, r2
 800cbea:	4798      	blx	r3
 800cbec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cbf6:	e100      	b.n	800cdfa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc00:	f107 0208 	add.w	r2, r7, #8
 800cc04:	4610      	mov	r0, r2
 800cc06:	4798      	blx	r3
 800cc08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	2202      	movs	r2, #2
 800cc10:	701a      	strb	r2, [r3, #0]
      break;
 800cc12:	e0f2      	b.n	800cdfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	885b      	ldrh	r3, [r3, #2]
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b05      	cmp	r3, #5
 800cc1c:	f200 80ac 	bhi.w	800cd78 <USBD_GetDescriptor+0x204>
 800cc20:	a201      	add	r2, pc, #4	@ (adr r2, 800cc28 <USBD_GetDescriptor+0xb4>)
 800cc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc26:	bf00      	nop
 800cc28:	0800cc41 	.word	0x0800cc41
 800cc2c:	0800cc75 	.word	0x0800cc75
 800cc30:	0800cca9 	.word	0x0800cca9
 800cc34:	0800ccdd 	.word	0x0800ccdd
 800cc38:	0800cd11 	.word	0x0800cd11
 800cc3c:	0800cd45 	.word	0x0800cd45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d00b      	beq.n	800cc64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	7c12      	ldrb	r2, [r2, #16]
 800cc58:	f107 0108 	add.w	r1, r7, #8
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4798      	blx	r3
 800cc60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc62:	e091      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 facb 	bl	800d202 <USBD_CtlError>
            err++;
 800cc6c:	7afb      	ldrb	r3, [r7, #11]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	72fb      	strb	r3, [r7, #11]
          break;
 800cc72:	e089      	b.n	800cd88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d00b      	beq.n	800cc98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	7c12      	ldrb	r2, [r2, #16]
 800cc8c:	f107 0108 	add.w	r1, r7, #8
 800cc90:	4610      	mov	r0, r2
 800cc92:	4798      	blx	r3
 800cc94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cc96:	e077      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fab1 	bl	800d202 <USBD_CtlError>
            err++;
 800cca0:	7afb      	ldrb	r3, [r7, #11]
 800cca2:	3301      	adds	r3, #1
 800cca4:	72fb      	strb	r3, [r7, #11]
          break;
 800cca6:	e06f      	b.n	800cd88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00b      	beq.n	800cccc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	7c12      	ldrb	r2, [r2, #16]
 800ccc0:	f107 0108 	add.w	r1, r7, #8
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	4798      	blx	r3
 800ccc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccca:	e05d      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fa97 	bl	800d202 <USBD_CtlError>
            err++;
 800ccd4:	7afb      	ldrb	r3, [r7, #11]
 800ccd6:	3301      	adds	r3, #1
 800ccd8:	72fb      	strb	r3, [r7, #11]
          break;
 800ccda:	e055      	b.n	800cd88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00b      	beq.n	800cd00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	7c12      	ldrb	r2, [r2, #16]
 800ccf4:	f107 0108 	add.w	r1, r7, #8
 800ccf8:	4610      	mov	r0, r2
 800ccfa:	4798      	blx	r3
 800ccfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccfe:	e043      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd00:	6839      	ldr	r1, [r7, #0]
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 fa7d 	bl	800d202 <USBD_CtlError>
            err++;
 800cd08:	7afb      	ldrb	r3, [r7, #11]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd0e:	e03b      	b.n	800cd88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00b      	beq.n	800cd34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd22:	695b      	ldr	r3, [r3, #20]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	7c12      	ldrb	r2, [r2, #16]
 800cd28:	f107 0108 	add.w	r1, r7, #8
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	4798      	blx	r3
 800cd30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd32:	e029      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fa63 	bl	800d202 <USBD_CtlError>
            err++;
 800cd3c:	7afb      	ldrb	r3, [r7, #11]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	72fb      	strb	r3, [r7, #11]
          break;
 800cd42:	e021      	b.n	800cd88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd4a:	699b      	ldr	r3, [r3, #24]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cd56:	699b      	ldr	r3, [r3, #24]
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	7c12      	ldrb	r2, [r2, #16]
 800cd5c:	f107 0108 	add.w	r1, r7, #8
 800cd60:	4610      	mov	r0, r2
 800cd62:	4798      	blx	r3
 800cd64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd66:	e00f      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa49 	bl	800d202 <USBD_CtlError>
            err++;
 800cd70:	7afb      	ldrb	r3, [r7, #11]
 800cd72:	3301      	adds	r3, #1
 800cd74:	72fb      	strb	r3, [r7, #11]
          break;
 800cd76:	e007      	b.n	800cd88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fa41 	bl	800d202 <USBD_CtlError>
          err++;
 800cd80:	7afb      	ldrb	r3, [r7, #11]
 800cd82:	3301      	adds	r3, #1
 800cd84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cd86:	bf00      	nop
      }
      break;
 800cd88:	e037      	b.n	800cdfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	7c1b      	ldrb	r3, [r3, #16]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d109      	bne.n	800cda6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd9a:	f107 0208 	add.w	r2, r7, #8
 800cd9e:	4610      	mov	r0, r2
 800cda0:	4798      	blx	r3
 800cda2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cda4:	e029      	b.n	800cdfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fa2a 	bl	800d202 <USBD_CtlError>
        err++;
 800cdae:	7afb      	ldrb	r3, [r7, #11]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	72fb      	strb	r3, [r7, #11]
      break;
 800cdb4:	e021      	b.n	800cdfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	7c1b      	ldrb	r3, [r3, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10d      	bne.n	800cdda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdc6:	f107 0208 	add.w	r2, r7, #8
 800cdca:	4610      	mov	r0, r2
 800cdcc:	4798      	blx	r3
 800cdce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	2207      	movs	r2, #7
 800cdd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdd8:	e00f      	b.n	800cdfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fa10 	bl	800d202 <USBD_CtlError>
        err++;
 800cde2:	7afb      	ldrb	r3, [r7, #11]
 800cde4:	3301      	adds	r3, #1
 800cde6:	72fb      	strb	r3, [r7, #11]
      break;
 800cde8:	e007      	b.n	800cdfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	6878      	ldr	r0, [r7, #4]
 800cdee:	f000 fa08 	bl	800d202 <USBD_CtlError>
      err++;
 800cdf2:	7afb      	ldrb	r3, [r7, #11]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	72fb      	strb	r3, [r7, #11]
      break;
 800cdf8:	bf00      	nop
  }

  if (err != 0U)
 800cdfa:	7afb      	ldrb	r3, [r7, #11]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d11e      	bne.n	800ce3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	88db      	ldrh	r3, [r3, #6]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d016      	beq.n	800ce36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ce08:	893b      	ldrh	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00e      	beq.n	800ce2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	88da      	ldrh	r2, [r3, #6]
 800ce12:	893b      	ldrh	r3, [r7, #8]
 800ce14:	4293      	cmp	r3, r2
 800ce16:	bf28      	it	cs
 800ce18:	4613      	movcs	r3, r2
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce1e:	893b      	ldrh	r3, [r7, #8]
 800ce20:	461a      	mov	r2, r3
 800ce22:	68f9      	ldr	r1, [r7, #12]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 fa69 	bl	800d2fc <USBD_CtlSendData>
 800ce2a:	e009      	b.n	800ce40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f9e7 	bl	800d202 <USBD_CtlError>
 800ce34:	e004      	b.n	800ce40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 faba 	bl	800d3b0 <USBD_CtlSendStatus>
 800ce3c:	e000      	b.n	800ce40 <USBD_GetDescriptor+0x2cc>
    return;
 800ce3e:	bf00      	nop
  }
}
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop

0800ce48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b084      	sub	sp, #16
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	889b      	ldrh	r3, [r3, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d131      	bne.n	800cebe <USBD_SetAddress+0x76>
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	88db      	ldrh	r3, [r3, #6]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d12d      	bne.n	800cebe <USBD_SetAddress+0x76>
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	885b      	ldrh	r3, [r3, #2]
 800ce66:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce68:	d829      	bhi.n	800cebe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	885b      	ldrh	r3, [r3, #2]
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	2b03      	cmp	r3, #3
 800ce80:	d104      	bne.n	800ce8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 f9bc 	bl	800d202 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce8a:	e01d      	b.n	800cec8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7bfa      	ldrb	r2, [r7, #15]
 800ce90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ce94:	7bfb      	ldrb	r3, [r7, #15]
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fe73 	bl	800db84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fa86 	bl	800d3b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d004      	beq.n	800ceb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2202      	movs	r2, #2
 800ceae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceb2:	e009      	b.n	800cec8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cebc:	e004      	b.n	800cec8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cebe:	6839      	ldr	r1, [r7, #0]
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 f99e 	bl	800d202 <USBD_CtlError>
  }
}
 800cec6:	bf00      	nop
 800cec8:	bf00      	nop
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	885b      	ldrh	r3, [r3, #2]
 800cee2:	b2da      	uxtb	r2, r3
 800cee4:	4b4e      	ldr	r3, [pc, #312]	@ (800d020 <USBD_SetConfig+0x150>)
 800cee6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cee8:	4b4d      	ldr	r3, [pc, #308]	@ (800d020 <USBD_SetConfig+0x150>)
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d905      	bls.n	800cefc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f985 	bl	800d202 <USBD_CtlError>
    return USBD_FAIL;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e08c      	b.n	800d016 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d002      	beq.n	800cf0e <USBD_SetConfig+0x3e>
 800cf08:	2b03      	cmp	r3, #3
 800cf0a:	d029      	beq.n	800cf60 <USBD_SetConfig+0x90>
 800cf0c:	e075      	b.n	800cffa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf0e:	4b44      	ldr	r3, [pc, #272]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d020      	beq.n	800cf58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cf16:	4b42      	ldr	r3, [pc, #264]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf20:	4b3f      	ldr	r3, [pc, #252]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7fe ffe3 	bl	800bef2 <USBD_SetClassConfig>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf30:	7bfb      	ldrb	r3, [r7, #15]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d008      	beq.n	800cf48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f962 	bl	800d202 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2202      	movs	r2, #2
 800cf42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf46:	e065      	b.n	800d014 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fa31 	bl	800d3b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2203      	movs	r2, #3
 800cf52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cf56:	e05d      	b.n	800d014 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f000 fa29 	bl	800d3b0 <USBD_CtlSendStatus>
      break;
 800cf5e:	e059      	b.n	800d014 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cf60:	4b2f      	ldr	r3, [pc, #188]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d112      	bne.n	800cf8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cf70:	4b2b      	ldr	r3, [pc, #172]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	461a      	mov	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cf7a:	4b29      	ldr	r3, [pc, #164]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7fe ffd2 	bl	800bf2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fa12 	bl	800d3b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cf8c:	e042      	b.n	800d014 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cf8e:	4b24      	ldr	r3, [pc, #144]	@ (800d020 <USBD_SetConfig+0x150>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	461a      	mov	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d02a      	beq.n	800cff2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7fe ffc0 	bl	800bf2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cfaa:	4b1d      	ldr	r3, [pc, #116]	@ (800d020 <USBD_SetConfig+0x150>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cfb4:	4b1a      	ldr	r3, [pc, #104]	@ (800d020 <USBD_SetConfig+0x150>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f7fe ff99 	bl	800bef2 <USBD_SetClassConfig>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cfc4:	7bfb      	ldrb	r3, [r7, #15]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00f      	beq.n	800cfea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 f918 	bl	800d202 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7fe ffa5 	bl	800bf2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cfe8:	e014      	b.n	800d014 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f000 f9e0 	bl	800d3b0 <USBD_CtlSendStatus>
      break;
 800cff0:	e010      	b.n	800d014 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f9dc 	bl	800d3b0 <USBD_CtlSendStatus>
      break;
 800cff8:	e00c      	b.n	800d014 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 f900 	bl	800d202 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d002:	4b07      	ldr	r3, [pc, #28]	@ (800d020 <USBD_SetConfig+0x150>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7fe ff8e 	bl	800bf2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d00e:	2303      	movs	r3, #3
 800d010:	73fb      	strb	r3, [r7, #15]
      break;
 800d012:	bf00      	nop
  }

  return ret;
 800d014:	7bfb      	ldrb	r3, [r7, #15]
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	2000063c 	.word	0x2000063c

0800d024 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	88db      	ldrh	r3, [r3, #6]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d004      	beq.n	800d040 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d036:	6839      	ldr	r1, [r7, #0]
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 f8e2 	bl	800d202 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d03e:	e023      	b.n	800d088 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b02      	cmp	r3, #2
 800d04a:	dc02      	bgt.n	800d052 <USBD_GetConfig+0x2e>
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	dc03      	bgt.n	800d058 <USBD_GetConfig+0x34>
 800d050:	e015      	b.n	800d07e <USBD_GetConfig+0x5a>
 800d052:	2b03      	cmp	r3, #3
 800d054:	d00b      	beq.n	800d06e <USBD_GetConfig+0x4a>
 800d056:	e012      	b.n	800d07e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	3308      	adds	r3, #8
 800d062:	2201      	movs	r2, #1
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 f948 	bl	800d2fc <USBD_CtlSendData>
        break;
 800d06c:	e00c      	b.n	800d088 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	3304      	adds	r3, #4
 800d072:	2201      	movs	r2, #1
 800d074:	4619      	mov	r1, r3
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f940 	bl	800d2fc <USBD_CtlSendData>
        break;
 800d07c:	e004      	b.n	800d088 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 f8be 	bl	800d202 <USBD_CtlError>
        break;
 800d086:	bf00      	nop
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d81e      	bhi.n	800d0e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	88db      	ldrh	r3, [r3, #6]
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d004      	beq.n	800d0ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f8a5 	bl	800d202 <USBD_CtlError>
        break;
 800d0b8:	e01a      	b.n	800d0f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d005      	beq.n	800d0d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	f043 0202 	orr.w	r2, r3, #2
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	330c      	adds	r3, #12
 800d0da:	2202      	movs	r2, #2
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f000 f90c 	bl	800d2fc <USBD_CtlSendData>
      break;
 800d0e4:	e004      	b.n	800d0f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 f88a 	bl	800d202 <USBD_CtlError>
      break;
 800d0ee:	bf00      	nop
  }
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	885b      	ldrh	r3, [r3, #2]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d107      	bne.n	800d11a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 f94c 	bl	800d3b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d118:	e013      	b.n	800d142 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	885b      	ldrh	r3, [r3, #2]
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d10b      	bne.n	800d13a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	889b      	ldrh	r3, [r3, #4]
 800d126:	0a1b      	lsrs	r3, r3, #8
 800d128:	b29b      	uxth	r3, r3
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 f93c 	bl	800d3b0 <USBD_CtlSendStatus>
}
 800d138:	e003      	b.n	800d142 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d13a:	6839      	ldr	r1, [r7, #0]
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 f860 	bl	800d202 <USBD_CtlError>
}
 800d142:	bf00      	nop
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b082      	sub	sp, #8
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	3b01      	subs	r3, #1
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d80b      	bhi.n	800d17a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	885b      	ldrh	r3, [r3, #2]
 800d166:	2b01      	cmp	r3, #1
 800d168:	d10c      	bne.n	800d184 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f91c 	bl	800d3b0 <USBD_CtlSendStatus>
      }
      break;
 800d178:	e004      	b.n	800d184 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f840 	bl	800d202 <USBD_CtlError>
      break;
 800d182:	e000      	b.n	800d186 <USBD_ClrFeature+0x3c>
      break;
 800d184:	bf00      	nop
  }
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
 800d196:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	781a      	ldrb	r2, [r3, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	781a      	ldrb	r2, [r3, #0]
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1b8:	68f8      	ldr	r0, [r7, #12]
 800d1ba:	f7ff fa40 	bl	800c63e <SWAPBYTE>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff fa33 	bl	800c63e <SWAPBYTE>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	461a      	mov	r2, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff fa26 	bl	800c63e <SWAPBYTE>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	80da      	strh	r2, [r3, #6]
}
 800d1fa:	bf00      	nop
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
 800d20a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d20c:	2180      	movs	r1, #128	@ 0x80
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fc4e 	bl	800dab0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d214:	2100      	movs	r1, #0
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 fc4a 	bl	800dab0 <USBD_LL_StallEP>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b086      	sub	sp, #24
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d230:	2300      	movs	r3, #0
 800d232:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d042      	beq.n	800d2c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d23e:	6938      	ldr	r0, [r7, #16]
 800d240:	f000 f842 	bl	800d2c8 <USBD_GetLen>
 800d244:	4603      	mov	r3, r0
 800d246:	3301      	adds	r3, #1
 800d248:	005b      	lsls	r3, r3, #1
 800d24a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d24e:	d808      	bhi.n	800d262 <USBD_GetString+0x3e>
 800d250:	6938      	ldr	r0, [r7, #16]
 800d252:	f000 f839 	bl	800d2c8 <USBD_GetLen>
 800d256:	4603      	mov	r3, r0
 800d258:	3301      	adds	r3, #1
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	005b      	lsls	r3, r3, #1
 800d25e:	b29a      	uxth	r2, r3
 800d260:	e001      	b.n	800d266 <USBD_GetString+0x42>
 800d262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d26a:	7dfb      	ldrb	r3, [r7, #23]
 800d26c:	68ba      	ldr	r2, [r7, #8]
 800d26e:	4413      	add	r3, r2
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	7812      	ldrb	r2, [r2, #0]
 800d274:	701a      	strb	r2, [r3, #0]
  idx++;
 800d276:	7dfb      	ldrb	r3, [r7, #23]
 800d278:	3301      	adds	r3, #1
 800d27a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4413      	add	r3, r2
 800d282:	2203      	movs	r2, #3
 800d284:	701a      	strb	r2, [r3, #0]
  idx++;
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	3301      	adds	r3, #1
 800d28a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d28c:	e013      	b.n	800d2b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d28e:	7dfb      	ldrb	r3, [r7, #23]
 800d290:	68ba      	ldr	r2, [r7, #8]
 800d292:	4413      	add	r3, r2
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	7812      	ldrb	r2, [r2, #0]
 800d298:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	3301      	adds	r3, #1
 800d29e:	613b      	str	r3, [r7, #16]
    idx++;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e7      	bne.n	800d28e <USBD_GetString+0x6a>
 800d2be:	e000      	b.n	800d2c2 <USBD_GetString+0x9e>
    return;
 800d2c0:	bf00      	nop
  }
}
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2d8:	e005      	b.n	800d2e6 <USBD_GetLen+0x1e>
  {
    len++;
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1f5      	bne.n	800d2da <USBD_GetLen+0x12>
  }

  return len;
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3714      	adds	r7, #20
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2202      	movs	r2, #2
 800d30c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	687a      	ldr	r2, [r7, #4]
 800d314:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	2100      	movs	r1, #0
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f000 fc4d 	bl	800dbc2 <USBD_LL_Transmit>

  return USBD_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	60f8      	str	r0, [r7, #12]
 800d33a:	60b9      	str	r1, [r7, #8]
 800d33c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	68ba      	ldr	r2, [r7, #8]
 800d342:	2100      	movs	r1, #0
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 fc3c 	bl	800dbc2 <USBD_LL_Transmit>

  return USBD_OK;
 800d34a:	2300      	movs	r3, #0
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	60b9      	str	r1, [r7, #8]
 800d35e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2203      	movs	r2, #3
 800d364:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	2100      	movs	r1, #0
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 fc40 	bl	800dc04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b084      	sub	sp, #16
 800d392:	af00      	add	r7, sp, #0
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68ba      	ldr	r2, [r7, #8]
 800d39e:	2100      	movs	r1, #0
 800d3a0:	68f8      	ldr	r0, [r7, #12]
 800d3a2:	f000 fc2f 	bl	800dc04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3710      	adds	r7, #16
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}

0800d3b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b082      	sub	sp, #8
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2204      	movs	r2, #4
 800d3bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 fbfb 	bl	800dbc2 <USBD_LL_Transmit>

  return USBD_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3708      	adds	r7, #8
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b082      	sub	sp, #8
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2205      	movs	r2, #5
 800d3e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fc09 	bl	800dc04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}

0800d3fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d400:	2200      	movs	r2, #0
 800d402:	4912      	ldr	r1, [pc, #72]	@ (800d44c <MX_USB_DEVICE_Init+0x50>)
 800d404:	4812      	ldr	r0, [pc, #72]	@ (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d406:	f7fe fcf7 	bl	800bdf8 <USBD_Init>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d410:	f7f5 f8f2 	bl	80025f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800d414:	490f      	ldr	r1, [pc, #60]	@ (800d454 <MX_USB_DEVICE_Init+0x58>)
 800d416:	480e      	ldr	r0, [pc, #56]	@ (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d418:	f7fe fd1e 	bl	800be58 <USBD_RegisterClass>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d001      	beq.n	800d426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d422:	f7f5 f8e9 	bl	80025f8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800d426:	490c      	ldr	r1, [pc, #48]	@ (800d458 <MX_USB_DEVICE_Init+0x5c>)
 800d428:	4809      	ldr	r0, [pc, #36]	@ (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d42a:	f7fe fccb 	bl	800bdc4 <USBD_CUSTOM_HID_RegisterInterface>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d434:	f7f5 f8e0 	bl	80025f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d438:	4805      	ldr	r0, [pc, #20]	@ (800d450 <MX_USB_DEVICE_Init+0x54>)
 800d43a:	f7fe fd43 	bl	800bec4 <USBD_Start>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d444:	f7f5 f8d8 	bl	80025f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d448:	bf00      	nop
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	200000d0 	.word	0x200000d0
 800d450:	20000640 	.word	0x20000640
 800d454:	20000018 	.word	0x20000018
 800d458:	200000c0 	.word	0x200000c0

0800d45c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d462:	4618      	mov	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800d470:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d472:	4618      	mov	r0, r3
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	4603      	mov	r3, r0
 800d484:	460a      	mov	r2, r1
 800d486:	71fb      	strb	r3, [r7, #7]
 800d488:	4613      	mov	r3, r2
 800d48a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 800d48c:	4806      	ldr	r0, [pc, #24]	@ (800d4a8 <CUSTOM_HID_OutEvent_FS+0x2c>)
 800d48e:	f7fe fc37 	bl	800bd00 <USBD_CUSTOM_HID_ReceivePacket>
 800d492:	4603      	mov	r3, r0
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800d498:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d49c:	e000      	b.n	800d4a0 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 800d49e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	20000640 	.word	0x20000640

0800d4ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	6039      	str	r1, [r7, #0]
 800d4b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	2212      	movs	r2, #18
 800d4bc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d4be:	4b03      	ldr	r3, [pc, #12]	@ (800d4cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	200000ec 	.word	0x200000ec

0800d4d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	6039      	str	r1, [r7, #0]
 800d4da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	2204      	movs	r2, #4
 800d4e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d4e2:	4b03      	ldr	r3, [pc, #12]	@ (800d4f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	20000100 	.word	0x20000100

0800d4f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b082      	sub	sp, #8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	6039      	str	r1, [r7, #0]
 800d4fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d105      	bne.n	800d512 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	4907      	ldr	r1, [pc, #28]	@ (800d528 <USBD_FS_ProductStrDescriptor+0x34>)
 800d50a:	4808      	ldr	r0, [pc, #32]	@ (800d52c <USBD_FS_ProductStrDescriptor+0x38>)
 800d50c:	f7ff fe8a 	bl	800d224 <USBD_GetString>
 800d510:	e004      	b.n	800d51c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	4904      	ldr	r1, [pc, #16]	@ (800d528 <USBD_FS_ProductStrDescriptor+0x34>)
 800d516:	4805      	ldr	r0, [pc, #20]	@ (800d52c <USBD_FS_ProductStrDescriptor+0x38>)
 800d518:	f7ff fe84 	bl	800d224 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d51c:	4b02      	ldr	r3, [pc, #8]	@ (800d528 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	2000091c 	.word	0x2000091c
 800d52c:	0800e66c 	.word	0x0800e66c

0800d530 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	4603      	mov	r3, r0
 800d538:	6039      	str	r1, [r7, #0]
 800d53a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	4904      	ldr	r1, [pc, #16]	@ (800d550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d540:	4804      	ldr	r0, [pc, #16]	@ (800d554 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d542:	f7ff fe6f 	bl	800d224 <USBD_GetString>
  return USBD_StrDesc;
 800d546:	4b02      	ldr	r3, [pc, #8]	@ (800d550 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3708      	adds	r7, #8
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	2000091c 	.word	0x2000091c
 800d554:	0800e680 	.word	0x0800e680

0800d558 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	4603      	mov	r3, r0
 800d560:	6039      	str	r1, [r7, #0]
 800d562:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	221a      	movs	r2, #26
 800d568:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d56a:	f000 f843 	bl	800d5f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d56e:	4b02      	ldr	r3, [pc, #8]	@ (800d578 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	20000104 	.word	0x20000104

0800d57c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	4603      	mov	r3, r0
 800d584:	6039      	str	r1, [r7, #0]
 800d586:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d588:	79fb      	ldrb	r3, [r7, #7]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d105      	bne.n	800d59a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d58e:	683a      	ldr	r2, [r7, #0]
 800d590:	4907      	ldr	r1, [pc, #28]	@ (800d5b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d592:	4808      	ldr	r0, [pc, #32]	@ (800d5b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d594:	f7ff fe46 	bl	800d224 <USBD_GetString>
 800d598:	e004      	b.n	800d5a4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	4904      	ldr	r1, [pc, #16]	@ (800d5b0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d59e:	4805      	ldr	r0, [pc, #20]	@ (800d5b4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d5a0:	f7ff fe40 	bl	800d224 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5a4:	4b02      	ldr	r3, [pc, #8]	@ (800d5b0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	2000091c 	.word	0x2000091c
 800d5b4:	0800e690 	.word	0x0800e690

0800d5b8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b082      	sub	sp, #8
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	4603      	mov	r3, r0
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d5c4:	79fb      	ldrb	r3, [r7, #7]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d105      	bne.n	800d5d6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	4907      	ldr	r1, [pc, #28]	@ (800d5ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5ce:	4808      	ldr	r0, [pc, #32]	@ (800d5f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5d0:	f7ff fe28 	bl	800d224 <USBD_GetString>
 800d5d4:	e004      	b.n	800d5e0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d5d6:	683a      	ldr	r2, [r7, #0]
 800d5d8:	4904      	ldr	r1, [pc, #16]	@ (800d5ec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d5da:	4805      	ldr	r0, [pc, #20]	@ (800d5f0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d5dc:	f7ff fe22 	bl	800d224 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d5e0:	4b02      	ldr	r3, [pc, #8]	@ (800d5ec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	2000091c 	.word	0x2000091c
 800d5f0:	0800e6a4 	.word	0x0800e6a4

0800d5f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800d638 <Get_SerialNum+0x44>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d600:	4b0e      	ldr	r3, [pc, #56]	@ (800d63c <Get_SerialNum+0x48>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d606:	4b0e      	ldr	r3, [pc, #56]	@ (800d640 <Get_SerialNum+0x4c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	4413      	add	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d009      	beq.n	800d62e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d61a:	2208      	movs	r2, #8
 800d61c:	4909      	ldr	r1, [pc, #36]	@ (800d644 <Get_SerialNum+0x50>)
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 f814 	bl	800d64c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d624:	2204      	movs	r2, #4
 800d626:	4908      	ldr	r1, [pc, #32]	@ (800d648 <Get_SerialNum+0x54>)
 800d628:	68b8      	ldr	r0, [r7, #8]
 800d62a:	f000 f80f 	bl	800d64c <IntToUnicode>
  }
}
 800d62e:	bf00      	nop
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	1fff7a10 	.word	0x1fff7a10
 800d63c:	1fff7a14 	.word	0x1fff7a14
 800d640:	1fff7a18 	.word	0x1fff7a18
 800d644:	20000106 	.word	0x20000106
 800d648:	20000116 	.word	0x20000116

0800d64c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b087      	sub	sp, #28
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	4613      	mov	r3, r2
 800d658:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d65a:	2300      	movs	r3, #0
 800d65c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d65e:	2300      	movs	r3, #0
 800d660:	75fb      	strb	r3, [r7, #23]
 800d662:	e027      	b.n	800d6b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	0f1b      	lsrs	r3, r3, #28
 800d668:	2b09      	cmp	r3, #9
 800d66a:	d80b      	bhi.n	800d684 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	0f1b      	lsrs	r3, r3, #28
 800d670:	b2da      	uxtb	r2, r3
 800d672:	7dfb      	ldrb	r3, [r7, #23]
 800d674:	005b      	lsls	r3, r3, #1
 800d676:	4619      	mov	r1, r3
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	440b      	add	r3, r1
 800d67c:	3230      	adds	r2, #48	@ 0x30
 800d67e:	b2d2      	uxtb	r2, r2
 800d680:	701a      	strb	r2, [r3, #0]
 800d682:	e00a      	b.n	800d69a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	0f1b      	lsrs	r3, r3, #28
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	7dfb      	ldrb	r3, [r7, #23]
 800d68c:	005b      	lsls	r3, r3, #1
 800d68e:	4619      	mov	r1, r3
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	440b      	add	r3, r1
 800d694:	3237      	adds	r2, #55	@ 0x37
 800d696:	b2d2      	uxtb	r2, r2
 800d698:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d6a0:	7dfb      	ldrb	r3, [r7, #23]
 800d6a2:	005b      	lsls	r3, r3, #1
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	68ba      	ldr	r2, [r7, #8]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	75fb      	strb	r3, [r7, #23]
 800d6b4:	7dfa      	ldrb	r2, [r7, #23]
 800d6b6:	79fb      	ldrb	r3, [r7, #7]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d3d3      	bcc.n	800d664 <IntToUnicode+0x18>
  }
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	371c      	adds	r7, #28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr
	...

0800d6cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b08a      	sub	sp, #40	@ 0x28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d6d4:	f107 0314 	add.w	r3, r7, #20
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	605a      	str	r2, [r3, #4]
 800d6de:	609a      	str	r2, [r3, #8]
 800d6e0:	60da      	str	r2, [r3, #12]
 800d6e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d6ec:	d13a      	bne.n	800d764 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	613b      	str	r3, [r7, #16]
 800d6f2:	4b1e      	ldr	r3, [pc, #120]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d6f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6f6:	4a1d      	ldr	r2, [pc, #116]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d6f8:	f043 0301 	orr.w	r3, r3, #1
 800d6fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d6fe:	4b1b      	ldr	r3, [pc, #108]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	613b      	str	r3, [r7, #16]
 800d708:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d70a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d70e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d710:	2302      	movs	r3, #2
 800d712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d714:	2300      	movs	r3, #0
 800d716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d718:	2303      	movs	r3, #3
 800d71a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d71c:	230a      	movs	r3, #10
 800d71e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d720:	f107 0314 	add.w	r3, r7, #20
 800d724:	4619      	mov	r1, r3
 800d726:	4812      	ldr	r0, [pc, #72]	@ (800d770 <HAL_PCD_MspInit+0xa4>)
 800d728:	f7f7 fa5a 	bl	8004be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d72c:	4b0f      	ldr	r3, [pc, #60]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d72e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d730:	4a0e      	ldr	r2, [pc, #56]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d736:	6353      	str	r3, [r2, #52]	@ 0x34
 800d738:	2300      	movs	r3, #0
 800d73a:	60fb      	str	r3, [r7, #12]
 800d73c:	4b0b      	ldr	r3, [pc, #44]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d73e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d740:	4a0a      	ldr	r2, [pc, #40]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d742:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d746:	6453      	str	r3, [r2, #68]	@ 0x44
 800d748:	4b08      	ldr	r3, [pc, #32]	@ (800d76c <HAL_PCD_MspInit+0xa0>)
 800d74a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d74c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d750:	60fb      	str	r3, [r7, #12]
 800d752:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d754:	2200      	movs	r2, #0
 800d756:	2100      	movs	r1, #0
 800d758:	2043      	movs	r0, #67	@ 0x43
 800d75a:	f7f6 fdba 	bl	80042d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d75e:	2043      	movs	r0, #67	@ 0x43
 800d760:	f7f6 fdd3 	bl	800430a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d764:	bf00      	nop
 800d766:	3728      	adds	r7, #40	@ 0x28
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	40023800 	.word	0x40023800
 800d770:	40020000 	.word	0x40020000

0800d774 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b082      	sub	sp, #8
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d788:	4619      	mov	r1, r3
 800d78a:	4610      	mov	r0, r2
 800d78c:	f7fe fbe7 	bl	800bf5e <USBD_LL_SetupStage>
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d7aa:	78fa      	ldrb	r2, [r7, #3]
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	440b      	add	r3, r1
 800d7b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	78fb      	ldrb	r3, [r7, #3]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	f7fe fc21 	bl	800c008 <USBD_LL_DataOutStage>
}
 800d7c6:	bf00      	nop
 800d7c8:	3708      	adds	r7, #8
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b082      	sub	sp, #8
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	460b      	mov	r3, r1
 800d7d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d7e0:	78fa      	ldrb	r2, [r7, #3]
 800d7e2:	6879      	ldr	r1, [r7, #4]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	440b      	add	r3, r1
 800d7ee:	3320      	adds	r3, #32
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	78fb      	ldrb	r3, [r7, #3]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	f7fe fcba 	bl	800c16e <USBD_LL_DataInStage>
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d810:	4618      	mov	r0, r3
 800d812:	f7fe fdf4 	bl	800c3fe <USBD_LL_SOF>
}
 800d816:	bf00      	nop
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d826:	2301      	movs	r3, #1
 800d828:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	79db      	ldrb	r3, [r3, #7]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d102      	bne.n	800d838 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d832:	2300      	movs	r3, #0
 800d834:	73fb      	strb	r3, [r7, #15]
 800d836:	e008      	b.n	800d84a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	79db      	ldrb	r3, [r3, #7]
 800d83c:	2b02      	cmp	r3, #2
 800d83e:	d102      	bne.n	800d846 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d840:	2301      	movs	r3, #1
 800d842:	73fb      	strb	r3, [r7, #15]
 800d844:	e001      	b.n	800d84a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d846:	f7f4 fed7 	bl	80025f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d850:	7bfa      	ldrb	r2, [r7, #15]
 800d852:	4611      	mov	r1, r2
 800d854:	4618      	mov	r0, r3
 800d856:	f7fe fd8e 	bl	800c376 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fd36 	bl	800c2d2 <USBD_LL_Reset>
}
 800d866:	bf00      	nop
 800d868:	3710      	adds	r7, #16
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d87e:	4618      	mov	r0, r3
 800d880:	f7fe fd89 	bl	800c396 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	6812      	ldr	r2, [r2, #0]
 800d892:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d896:	f043 0301 	orr.w	r3, r3, #1
 800d89a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	7adb      	ldrb	r3, [r3, #11]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d005      	beq.n	800d8b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8a4:	4b04      	ldr	r3, [pc, #16]	@ (800d8b8 <HAL_PCD_SuspendCallback+0x48>)
 800d8a6:	691b      	ldr	r3, [r3, #16]
 800d8a8:	4a03      	ldr	r2, [pc, #12]	@ (800d8b8 <HAL_PCD_SuspendCallback+0x48>)
 800d8aa:	f043 0306 	orr.w	r3, r3, #6
 800d8ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	e000ed00 	.word	0xe000ed00

0800d8bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fd7f 	bl	800c3ce <USBD_LL_Resume>
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d8ea:	78fa      	ldrb	r2, [r7, #3]
 800d8ec:	4611      	mov	r1, r2
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fe fdd7 	bl	800c4a2 <USBD_LL_IsoOUTIncomplete>
}
 800d8f4:	bf00      	nop
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	460b      	mov	r3, r1
 800d906:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d90e:	78fa      	ldrb	r2, [r7, #3]
 800d910:	4611      	mov	r1, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe fd93 	bl	800c43e <USBD_LL_IsoINIncomplete>
}
 800d918:	bf00      	nop
 800d91a:	3708      	adds	r7, #8
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fe fde9 	bl	800c506 <USBD_LL_DevConnected>
}
 800d934:	bf00      	nop
 800d936:	3708      	adds	r7, #8
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fe fde6 	bl	800c51c <USBD_LL_DevDisconnected>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d13c      	bne.n	800d9e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d968:	4a20      	ldr	r2, [pc, #128]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4a1e      	ldr	r2, [pc, #120]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d974:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d978:	4b1c      	ldr	r3, [pc, #112]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d97a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d97e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d980:	4b1a      	ldr	r3, [pc, #104]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d982:	2204      	movs	r2, #4
 800d984:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d986:	4b19      	ldr	r3, [pc, #100]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d988:	2202      	movs	r2, #2
 800d98a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d98c:	4b17      	ldr	r3, [pc, #92]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d98e:	2200      	movs	r2, #0
 800d990:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d992:	4b16      	ldr	r3, [pc, #88]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d994:	2202      	movs	r2, #2
 800d996:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d998:	4b14      	ldr	r3, [pc, #80]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d99e:	4b13      	ldr	r3, [pc, #76]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d9a4:	4b11      	ldr	r3, [pc, #68]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d9aa:	4b10      	ldr	r3, [pc, #64]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d9b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d9b6:	480d      	ldr	r0, [pc, #52]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9b8:	f7f7 fb12 	bl	8004fe0 <HAL_PCD_Init>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d001      	beq.n	800d9c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d9c2:	f7f4 fe19 	bl	80025f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d9c6:	2180      	movs	r1, #128	@ 0x80
 800d9c8:	4808      	ldr	r0, [pc, #32]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9ca:	f7f8 fd26 	bl	800641a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d9ce:	2240      	movs	r2, #64	@ 0x40
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	4806      	ldr	r0, [pc, #24]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9d4:	f7f8 fcda 	bl	800638c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d9d8:	2280      	movs	r2, #128	@ 0x80
 800d9da:	2101      	movs	r1, #1
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <USBD_LL_Init+0x94>)
 800d9de:	f7f8 fcd5 	bl	800638c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3708      	adds	r7, #8
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	20000b1c 	.word	0x20000b1c

0800d9f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da06:	4618      	mov	r0, r3
 800da08:	f7f7 fbf9 	bl	80051fe <HAL_PCD_Start>
 800da0c:	4603      	mov	r3, r0
 800da0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f930 	bl	800dc78 <USBD_Get_USB_Status>
 800da18:	4603      	mov	r3, r0
 800da1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	4608      	mov	r0, r1
 800da30:	4611      	mov	r1, r2
 800da32:	461a      	mov	r2, r3
 800da34:	4603      	mov	r3, r0
 800da36:	70fb      	strb	r3, [r7, #3]
 800da38:	460b      	mov	r3, r1
 800da3a:	70bb      	strb	r3, [r7, #2]
 800da3c:	4613      	mov	r3, r2
 800da3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da44:	2300      	movs	r3, #0
 800da46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da4e:	78bb      	ldrb	r3, [r7, #2]
 800da50:	883a      	ldrh	r2, [r7, #0]
 800da52:	78f9      	ldrb	r1, [r7, #3]
 800da54:	f7f8 f8cd 	bl	8005bf2 <HAL_PCD_EP_Open>
 800da58:	4603      	mov	r3, r0
 800da5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 f90a 	bl	800dc78 <USBD_Get_USB_Status>
 800da64:	4603      	mov	r3, r0
 800da66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da68:	7bbb      	ldrb	r3, [r7, #14]
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}

0800da72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	6078      	str	r0, [r7, #4]
 800da7a:	460b      	mov	r3, r1
 800da7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da82:	2300      	movs	r3, #0
 800da84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da8c:	78fa      	ldrb	r2, [r7, #3]
 800da8e:	4611      	mov	r1, r2
 800da90:	4618      	mov	r0, r3
 800da92:	f7f8 f918 	bl	8005cc6 <HAL_PCD_EP_Close>
 800da96:	4603      	mov	r3, r0
 800da98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f000 f8eb 	bl	800dc78 <USBD_Get_USB_Status>
 800daa2:	4603      	mov	r3, r0
 800daa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	460b      	mov	r3, r1
 800daba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daca:	78fa      	ldrb	r2, [r7, #3]
 800dacc:	4611      	mov	r1, r2
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f8 f9b8 	bl	8005e44 <HAL_PCD_EP_SetStall>
 800dad4:	4603      	mov	r3, r0
 800dad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	4618      	mov	r0, r3
 800dadc:	f000 f8cc 	bl	800dc78 <USBD_Get_USB_Status>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae4:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b084      	sub	sp, #16
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	460b      	mov	r3, r1
 800daf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dafa:	2300      	movs	r3, #0
 800dafc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafe:	2300      	movs	r3, #0
 800db00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db08:	78fa      	ldrb	r2, [r7, #3]
 800db0a:	4611      	mov	r1, r2
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7f8 f9fc 	bl	8005f0a <HAL_PCD_EP_ClrStall>
 800db12:	4603      	mov	r3, r0
 800db14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db16:	7bfb      	ldrb	r3, [r7, #15]
 800db18:	4618      	mov	r0, r3
 800db1a:	f000 f8ad 	bl	800dc78 <USBD_Get_USB_Status>
 800db1e:	4603      	mov	r3, r0
 800db20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db22:	7bbb      	ldrb	r3, [r7, #14]
}
 800db24:	4618      	mov	r0, r3
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	460b      	mov	r3, r1
 800db36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db44:	2b00      	cmp	r3, #0
 800db46:	da0b      	bge.n	800db60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db48:	78fb      	ldrb	r3, [r7, #3]
 800db4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db4e:	68f9      	ldr	r1, [r7, #12]
 800db50:	4613      	mov	r3, r2
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	4413      	add	r3, r2
 800db56:	009b      	lsls	r3, r3, #2
 800db58:	440b      	add	r3, r1
 800db5a:	3316      	adds	r3, #22
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	e00b      	b.n	800db78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db60:	78fb      	ldrb	r3, [r7, #3]
 800db62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	4613      	mov	r3, r2
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	4413      	add	r3, r2
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	440b      	add	r3, r1
 800db72:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800db76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3714      	adds	r7, #20
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b084      	sub	sp, #16
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	460b      	mov	r3, r1
 800db8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db9e:	78fa      	ldrb	r2, [r7, #3]
 800dba0:	4611      	mov	r1, r2
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7f8 f801 	bl	8005baa <HAL_PCD_SetAddress>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbac:	7bfb      	ldrb	r3, [r7, #15]
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f000 f862 	bl	800dc78 <USBD_Get_USB_Status>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}

0800dbc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b086      	sub	sp, #24
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	60f8      	str	r0, [r7, #12]
 800dbca:	607a      	str	r2, [r7, #4]
 800dbcc:	603b      	str	r3, [r7, #0]
 800dbce:	460b      	mov	r3, r1
 800dbd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dbe0:	7af9      	ldrb	r1, [r7, #11]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	f7f8 f8f3 	bl	8005dd0 <HAL_PCD_EP_Transmit>
 800dbea:	4603      	mov	r3, r0
 800dbec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f000 f841 	bl	800dc78 <USBD_Get_USB_Status>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbfa:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3718      	adds	r7, #24
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	607a      	str	r2, [r7, #4]
 800dc0e:	603b      	str	r3, [r7, #0]
 800dc10:	460b      	mov	r3, r1
 800dc12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800dc22:	7af9      	ldrb	r1, [r7, #11]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	f7f8 f897 	bl	8005d5a <HAL_PCD_EP_Receive>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 f820 	bl	800dc78 <USBD_Get_USB_Status>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dc3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
	...

0800dc48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800dc50:	4b03      	ldr	r3, [pc, #12]	@ (800dc60 <USBD_static_malloc+0x18>)
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	370c      	adds	r7, #12
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	20001000 	.word	0x20001000

0800dc64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]

}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dc78:	b480      	push	{r7}
 800dc7a:	b085      	sub	sp, #20
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc82:	2300      	movs	r3, #0
 800dc84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dc86:	79fb      	ldrb	r3, [r7, #7]
 800dc88:	2b03      	cmp	r3, #3
 800dc8a:	d817      	bhi.n	800dcbc <USBD_Get_USB_Status+0x44>
 800dc8c:	a201      	add	r2, pc, #4	@ (adr r2, 800dc94 <USBD_Get_USB_Status+0x1c>)
 800dc8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc92:	bf00      	nop
 800dc94:	0800dca5 	.word	0x0800dca5
 800dc98:	0800dcab 	.word	0x0800dcab
 800dc9c:	0800dcb1 	.word	0x0800dcb1
 800dca0:	0800dcb7 	.word	0x0800dcb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	73fb      	strb	r3, [r7, #15]
    break;
 800dca8:	e00b      	b.n	800dcc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcaa:	2303      	movs	r3, #3
 800dcac:	73fb      	strb	r3, [r7, #15]
    break;
 800dcae:	e008      	b.n	800dcc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb4:	e005      	b.n	800dcc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dcb6:	2303      	movs	r3, #3
 800dcb8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcba:	e002      	b.n	800dcc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dcbc:	2303      	movs	r3, #3
 800dcbe:	73fb      	strb	r3, [r7, #15]
    break;
 800dcc0:	bf00      	nop
  }
  return usb_status;
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3714      	adds	r7, #20
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr

0800dcd0 <sniprintf>:
 800dcd0:	b40c      	push	{r2, r3}
 800dcd2:	b530      	push	{r4, r5, lr}
 800dcd4:	4b18      	ldr	r3, [pc, #96]	@ (800dd38 <sniprintf+0x68>)
 800dcd6:	1e0c      	subs	r4, r1, #0
 800dcd8:	681d      	ldr	r5, [r3, #0]
 800dcda:	b09d      	sub	sp, #116	@ 0x74
 800dcdc:	da08      	bge.n	800dcf0 <sniprintf+0x20>
 800dcde:	238b      	movs	r3, #139	@ 0x8b
 800dce0:	602b      	str	r3, [r5, #0]
 800dce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dce6:	b01d      	add	sp, #116	@ 0x74
 800dce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcec:	b002      	add	sp, #8
 800dcee:	4770      	bx	lr
 800dcf0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dcf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800dcfe:	bf14      	ite	ne
 800dd00:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800dd04:	4623      	moveq	r3, r4
 800dd06:	9304      	str	r3, [sp, #16]
 800dd08:	9307      	str	r3, [sp, #28]
 800dd0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd0e:	9002      	str	r0, [sp, #8]
 800dd10:	9006      	str	r0, [sp, #24]
 800dd12:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd16:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dd18:	ab21      	add	r3, sp, #132	@ 0x84
 800dd1a:	a902      	add	r1, sp, #8
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	f000 f9a2 	bl	800e068 <_svfiprintf_r>
 800dd24:	1c43      	adds	r3, r0, #1
 800dd26:	bfbc      	itt	lt
 800dd28:	238b      	movlt	r3, #139	@ 0x8b
 800dd2a:	602b      	strlt	r3, [r5, #0]
 800dd2c:	2c00      	cmp	r4, #0
 800dd2e:	d0da      	beq.n	800dce6 <sniprintf+0x16>
 800dd30:	9b02      	ldr	r3, [sp, #8]
 800dd32:	2200      	movs	r2, #0
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	e7d6      	b.n	800dce6 <sniprintf+0x16>
 800dd38:	20000120 	.word	0x20000120

0800dd3c <memset>:
 800dd3c:	4402      	add	r2, r0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4293      	cmp	r3, r2
 800dd42:	d100      	bne.n	800dd46 <memset+0xa>
 800dd44:	4770      	bx	lr
 800dd46:	f803 1b01 	strb.w	r1, [r3], #1
 800dd4a:	e7f9      	b.n	800dd40 <memset+0x4>

0800dd4c <__errno>:
 800dd4c:	4b01      	ldr	r3, [pc, #4]	@ (800dd54 <__errno+0x8>)
 800dd4e:	6818      	ldr	r0, [r3, #0]
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	20000120 	.word	0x20000120

0800dd58 <__libc_init_array>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	4d0d      	ldr	r5, [pc, #52]	@ (800dd90 <__libc_init_array+0x38>)
 800dd5c:	4c0d      	ldr	r4, [pc, #52]	@ (800dd94 <__libc_init_array+0x3c>)
 800dd5e:	1b64      	subs	r4, r4, r5
 800dd60:	10a4      	asrs	r4, r4, #2
 800dd62:	2600      	movs	r6, #0
 800dd64:	42a6      	cmp	r6, r4
 800dd66:	d109      	bne.n	800dd7c <__libc_init_array+0x24>
 800dd68:	4d0b      	ldr	r5, [pc, #44]	@ (800dd98 <__libc_init_array+0x40>)
 800dd6a:	4c0c      	ldr	r4, [pc, #48]	@ (800dd9c <__libc_init_array+0x44>)
 800dd6c:	f000 fc64 	bl	800e638 <_init>
 800dd70:	1b64      	subs	r4, r4, r5
 800dd72:	10a4      	asrs	r4, r4, #2
 800dd74:	2600      	movs	r6, #0
 800dd76:	42a6      	cmp	r6, r4
 800dd78:	d105      	bne.n	800dd86 <__libc_init_array+0x2e>
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}
 800dd7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd80:	4798      	blx	r3
 800dd82:	3601      	adds	r6, #1
 800dd84:	e7ee      	b.n	800dd64 <__libc_init_array+0xc>
 800dd86:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd8a:	4798      	blx	r3
 800dd8c:	3601      	adds	r6, #1
 800dd8e:	e7f2      	b.n	800dd76 <__libc_init_array+0x1e>
 800dd90:	0800e718 	.word	0x0800e718
 800dd94:	0800e718 	.word	0x0800e718
 800dd98:	0800e718 	.word	0x0800e718
 800dd9c:	0800e71c 	.word	0x0800e71c

0800dda0 <__retarget_lock_acquire_recursive>:
 800dda0:	4770      	bx	lr

0800dda2 <__retarget_lock_release_recursive>:
 800dda2:	4770      	bx	lr

0800dda4 <memcpy>:
 800dda4:	440a      	add	r2, r1
 800dda6:	4291      	cmp	r1, r2
 800dda8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ddac:	d100      	bne.n	800ddb0 <memcpy+0xc>
 800ddae:	4770      	bx	lr
 800ddb0:	b510      	push	{r4, lr}
 800ddb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddba:	4291      	cmp	r1, r2
 800ddbc:	d1f9      	bne.n	800ddb2 <memcpy+0xe>
 800ddbe:	bd10      	pop	{r4, pc}

0800ddc0 <_free_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4605      	mov	r5, r0
 800ddc4:	2900      	cmp	r1, #0
 800ddc6:	d041      	beq.n	800de4c <_free_r+0x8c>
 800ddc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddcc:	1f0c      	subs	r4, r1, #4
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	bfb8      	it	lt
 800ddd2:	18e4      	addlt	r4, r4, r3
 800ddd4:	f000 f8e0 	bl	800df98 <__malloc_lock>
 800ddd8:	4a1d      	ldr	r2, [pc, #116]	@ (800de50 <_free_r+0x90>)
 800ddda:	6813      	ldr	r3, [r2, #0]
 800dddc:	b933      	cbnz	r3, 800ddec <_free_r+0x2c>
 800ddde:	6063      	str	r3, [r4, #4]
 800dde0:	6014      	str	r4, [r2, #0]
 800dde2:	4628      	mov	r0, r5
 800dde4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dde8:	f000 b8dc 	b.w	800dfa4 <__malloc_unlock>
 800ddec:	42a3      	cmp	r3, r4
 800ddee:	d908      	bls.n	800de02 <_free_r+0x42>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	1821      	adds	r1, r4, r0
 800ddf4:	428b      	cmp	r3, r1
 800ddf6:	bf01      	itttt	eq
 800ddf8:	6819      	ldreq	r1, [r3, #0]
 800ddfa:	685b      	ldreq	r3, [r3, #4]
 800ddfc:	1809      	addeq	r1, r1, r0
 800ddfe:	6021      	streq	r1, [r4, #0]
 800de00:	e7ed      	b.n	800ddde <_free_r+0x1e>
 800de02:	461a      	mov	r2, r3
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	b10b      	cbz	r3, 800de0c <_free_r+0x4c>
 800de08:	42a3      	cmp	r3, r4
 800de0a:	d9fa      	bls.n	800de02 <_free_r+0x42>
 800de0c:	6811      	ldr	r1, [r2, #0]
 800de0e:	1850      	adds	r0, r2, r1
 800de10:	42a0      	cmp	r0, r4
 800de12:	d10b      	bne.n	800de2c <_free_r+0x6c>
 800de14:	6820      	ldr	r0, [r4, #0]
 800de16:	4401      	add	r1, r0
 800de18:	1850      	adds	r0, r2, r1
 800de1a:	4283      	cmp	r3, r0
 800de1c:	6011      	str	r1, [r2, #0]
 800de1e:	d1e0      	bne.n	800dde2 <_free_r+0x22>
 800de20:	6818      	ldr	r0, [r3, #0]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	6053      	str	r3, [r2, #4]
 800de26:	4408      	add	r0, r1
 800de28:	6010      	str	r0, [r2, #0]
 800de2a:	e7da      	b.n	800dde2 <_free_r+0x22>
 800de2c:	d902      	bls.n	800de34 <_free_r+0x74>
 800de2e:	230c      	movs	r3, #12
 800de30:	602b      	str	r3, [r5, #0]
 800de32:	e7d6      	b.n	800dde2 <_free_r+0x22>
 800de34:	6820      	ldr	r0, [r4, #0]
 800de36:	1821      	adds	r1, r4, r0
 800de38:	428b      	cmp	r3, r1
 800de3a:	bf04      	itt	eq
 800de3c:	6819      	ldreq	r1, [r3, #0]
 800de3e:	685b      	ldreq	r3, [r3, #4]
 800de40:	6063      	str	r3, [r4, #4]
 800de42:	bf04      	itt	eq
 800de44:	1809      	addeq	r1, r1, r0
 800de46:	6021      	streq	r1, [r4, #0]
 800de48:	6054      	str	r4, [r2, #4]
 800de4a:	e7ca      	b.n	800dde2 <_free_r+0x22>
 800de4c:	bd38      	pop	{r3, r4, r5, pc}
 800de4e:	bf00      	nop
 800de50:	2000119c 	.word	0x2000119c

0800de54 <sbrk_aligned>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	4e0f      	ldr	r6, [pc, #60]	@ (800de94 <sbrk_aligned+0x40>)
 800de58:	460c      	mov	r4, r1
 800de5a:	6831      	ldr	r1, [r6, #0]
 800de5c:	4605      	mov	r5, r0
 800de5e:	b911      	cbnz	r1, 800de66 <sbrk_aligned+0x12>
 800de60:	f000 fba4 	bl	800e5ac <_sbrk_r>
 800de64:	6030      	str	r0, [r6, #0]
 800de66:	4621      	mov	r1, r4
 800de68:	4628      	mov	r0, r5
 800de6a:	f000 fb9f 	bl	800e5ac <_sbrk_r>
 800de6e:	1c43      	adds	r3, r0, #1
 800de70:	d103      	bne.n	800de7a <sbrk_aligned+0x26>
 800de72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800de76:	4620      	mov	r0, r4
 800de78:	bd70      	pop	{r4, r5, r6, pc}
 800de7a:	1cc4      	adds	r4, r0, #3
 800de7c:	f024 0403 	bic.w	r4, r4, #3
 800de80:	42a0      	cmp	r0, r4
 800de82:	d0f8      	beq.n	800de76 <sbrk_aligned+0x22>
 800de84:	1a21      	subs	r1, r4, r0
 800de86:	4628      	mov	r0, r5
 800de88:	f000 fb90 	bl	800e5ac <_sbrk_r>
 800de8c:	3001      	adds	r0, #1
 800de8e:	d1f2      	bne.n	800de76 <sbrk_aligned+0x22>
 800de90:	e7ef      	b.n	800de72 <sbrk_aligned+0x1e>
 800de92:	bf00      	nop
 800de94:	20001198 	.word	0x20001198

0800de98 <_malloc_r>:
 800de98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de9c:	1ccd      	adds	r5, r1, #3
 800de9e:	f025 0503 	bic.w	r5, r5, #3
 800dea2:	3508      	adds	r5, #8
 800dea4:	2d0c      	cmp	r5, #12
 800dea6:	bf38      	it	cc
 800dea8:	250c      	movcc	r5, #12
 800deaa:	2d00      	cmp	r5, #0
 800deac:	4606      	mov	r6, r0
 800deae:	db01      	blt.n	800deb4 <_malloc_r+0x1c>
 800deb0:	42a9      	cmp	r1, r5
 800deb2:	d904      	bls.n	800debe <_malloc_r+0x26>
 800deb4:	230c      	movs	r3, #12
 800deb6:	6033      	str	r3, [r6, #0]
 800deb8:	2000      	movs	r0, #0
 800deba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800debe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800df94 <_malloc_r+0xfc>
 800dec2:	f000 f869 	bl	800df98 <__malloc_lock>
 800dec6:	f8d8 3000 	ldr.w	r3, [r8]
 800deca:	461c      	mov	r4, r3
 800decc:	bb44      	cbnz	r4, 800df20 <_malloc_r+0x88>
 800dece:	4629      	mov	r1, r5
 800ded0:	4630      	mov	r0, r6
 800ded2:	f7ff ffbf 	bl	800de54 <sbrk_aligned>
 800ded6:	1c43      	adds	r3, r0, #1
 800ded8:	4604      	mov	r4, r0
 800deda:	d158      	bne.n	800df8e <_malloc_r+0xf6>
 800dedc:	f8d8 4000 	ldr.w	r4, [r8]
 800dee0:	4627      	mov	r7, r4
 800dee2:	2f00      	cmp	r7, #0
 800dee4:	d143      	bne.n	800df6e <_malloc_r+0xd6>
 800dee6:	2c00      	cmp	r4, #0
 800dee8:	d04b      	beq.n	800df82 <_malloc_r+0xea>
 800deea:	6823      	ldr	r3, [r4, #0]
 800deec:	4639      	mov	r1, r7
 800deee:	4630      	mov	r0, r6
 800def0:	eb04 0903 	add.w	r9, r4, r3
 800def4:	f000 fb5a 	bl	800e5ac <_sbrk_r>
 800def8:	4581      	cmp	r9, r0
 800defa:	d142      	bne.n	800df82 <_malloc_r+0xea>
 800defc:	6821      	ldr	r1, [r4, #0]
 800defe:	1a6d      	subs	r5, r5, r1
 800df00:	4629      	mov	r1, r5
 800df02:	4630      	mov	r0, r6
 800df04:	f7ff ffa6 	bl	800de54 <sbrk_aligned>
 800df08:	3001      	adds	r0, #1
 800df0a:	d03a      	beq.n	800df82 <_malloc_r+0xea>
 800df0c:	6823      	ldr	r3, [r4, #0]
 800df0e:	442b      	add	r3, r5
 800df10:	6023      	str	r3, [r4, #0]
 800df12:	f8d8 3000 	ldr.w	r3, [r8]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	bb62      	cbnz	r2, 800df74 <_malloc_r+0xdc>
 800df1a:	f8c8 7000 	str.w	r7, [r8]
 800df1e:	e00f      	b.n	800df40 <_malloc_r+0xa8>
 800df20:	6822      	ldr	r2, [r4, #0]
 800df22:	1b52      	subs	r2, r2, r5
 800df24:	d420      	bmi.n	800df68 <_malloc_r+0xd0>
 800df26:	2a0b      	cmp	r2, #11
 800df28:	d917      	bls.n	800df5a <_malloc_r+0xc2>
 800df2a:	1961      	adds	r1, r4, r5
 800df2c:	42a3      	cmp	r3, r4
 800df2e:	6025      	str	r5, [r4, #0]
 800df30:	bf18      	it	ne
 800df32:	6059      	strne	r1, [r3, #4]
 800df34:	6863      	ldr	r3, [r4, #4]
 800df36:	bf08      	it	eq
 800df38:	f8c8 1000 	streq.w	r1, [r8]
 800df3c:	5162      	str	r2, [r4, r5]
 800df3e:	604b      	str	r3, [r1, #4]
 800df40:	4630      	mov	r0, r6
 800df42:	f000 f82f 	bl	800dfa4 <__malloc_unlock>
 800df46:	f104 000b 	add.w	r0, r4, #11
 800df4a:	1d23      	adds	r3, r4, #4
 800df4c:	f020 0007 	bic.w	r0, r0, #7
 800df50:	1ac2      	subs	r2, r0, r3
 800df52:	bf1c      	itt	ne
 800df54:	1a1b      	subne	r3, r3, r0
 800df56:	50a3      	strne	r3, [r4, r2]
 800df58:	e7af      	b.n	800deba <_malloc_r+0x22>
 800df5a:	6862      	ldr	r2, [r4, #4]
 800df5c:	42a3      	cmp	r3, r4
 800df5e:	bf0c      	ite	eq
 800df60:	f8c8 2000 	streq.w	r2, [r8]
 800df64:	605a      	strne	r2, [r3, #4]
 800df66:	e7eb      	b.n	800df40 <_malloc_r+0xa8>
 800df68:	4623      	mov	r3, r4
 800df6a:	6864      	ldr	r4, [r4, #4]
 800df6c:	e7ae      	b.n	800decc <_malloc_r+0x34>
 800df6e:	463c      	mov	r4, r7
 800df70:	687f      	ldr	r7, [r7, #4]
 800df72:	e7b6      	b.n	800dee2 <_malloc_r+0x4a>
 800df74:	461a      	mov	r2, r3
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	42a3      	cmp	r3, r4
 800df7a:	d1fb      	bne.n	800df74 <_malloc_r+0xdc>
 800df7c:	2300      	movs	r3, #0
 800df7e:	6053      	str	r3, [r2, #4]
 800df80:	e7de      	b.n	800df40 <_malloc_r+0xa8>
 800df82:	230c      	movs	r3, #12
 800df84:	6033      	str	r3, [r6, #0]
 800df86:	4630      	mov	r0, r6
 800df88:	f000 f80c 	bl	800dfa4 <__malloc_unlock>
 800df8c:	e794      	b.n	800deb8 <_malloc_r+0x20>
 800df8e:	6005      	str	r5, [r0, #0]
 800df90:	e7d6      	b.n	800df40 <_malloc_r+0xa8>
 800df92:	bf00      	nop
 800df94:	2000119c 	.word	0x2000119c

0800df98 <__malloc_lock>:
 800df98:	4801      	ldr	r0, [pc, #4]	@ (800dfa0 <__malloc_lock+0x8>)
 800df9a:	f7ff bf01 	b.w	800dda0 <__retarget_lock_acquire_recursive>
 800df9e:	bf00      	nop
 800dfa0:	20001194 	.word	0x20001194

0800dfa4 <__malloc_unlock>:
 800dfa4:	4801      	ldr	r0, [pc, #4]	@ (800dfac <__malloc_unlock+0x8>)
 800dfa6:	f7ff befc 	b.w	800dda2 <__retarget_lock_release_recursive>
 800dfaa:	bf00      	nop
 800dfac:	20001194 	.word	0x20001194

0800dfb0 <__ssputs_r>:
 800dfb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb4:	688e      	ldr	r6, [r1, #8]
 800dfb6:	461f      	mov	r7, r3
 800dfb8:	42be      	cmp	r6, r7
 800dfba:	680b      	ldr	r3, [r1, #0]
 800dfbc:	4682      	mov	sl, r0
 800dfbe:	460c      	mov	r4, r1
 800dfc0:	4690      	mov	r8, r2
 800dfc2:	d82d      	bhi.n	800e020 <__ssputs_r+0x70>
 800dfc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dfc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dfcc:	d026      	beq.n	800e01c <__ssputs_r+0x6c>
 800dfce:	6965      	ldr	r5, [r4, #20]
 800dfd0:	6909      	ldr	r1, [r1, #16]
 800dfd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfd6:	eba3 0901 	sub.w	r9, r3, r1
 800dfda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfde:	1c7b      	adds	r3, r7, #1
 800dfe0:	444b      	add	r3, r9
 800dfe2:	106d      	asrs	r5, r5, #1
 800dfe4:	429d      	cmp	r5, r3
 800dfe6:	bf38      	it	cc
 800dfe8:	461d      	movcc	r5, r3
 800dfea:	0553      	lsls	r3, r2, #21
 800dfec:	d527      	bpl.n	800e03e <__ssputs_r+0x8e>
 800dfee:	4629      	mov	r1, r5
 800dff0:	f7ff ff52 	bl	800de98 <_malloc_r>
 800dff4:	4606      	mov	r6, r0
 800dff6:	b360      	cbz	r0, 800e052 <__ssputs_r+0xa2>
 800dff8:	6921      	ldr	r1, [r4, #16]
 800dffa:	464a      	mov	r2, r9
 800dffc:	f7ff fed2 	bl	800dda4 <memcpy>
 800e000:	89a3      	ldrh	r3, [r4, #12]
 800e002:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e00a:	81a3      	strh	r3, [r4, #12]
 800e00c:	6126      	str	r6, [r4, #16]
 800e00e:	6165      	str	r5, [r4, #20]
 800e010:	444e      	add	r6, r9
 800e012:	eba5 0509 	sub.w	r5, r5, r9
 800e016:	6026      	str	r6, [r4, #0]
 800e018:	60a5      	str	r5, [r4, #8]
 800e01a:	463e      	mov	r6, r7
 800e01c:	42be      	cmp	r6, r7
 800e01e:	d900      	bls.n	800e022 <__ssputs_r+0x72>
 800e020:	463e      	mov	r6, r7
 800e022:	6820      	ldr	r0, [r4, #0]
 800e024:	4632      	mov	r2, r6
 800e026:	4641      	mov	r1, r8
 800e028:	f000 faa6 	bl	800e578 <memmove>
 800e02c:	68a3      	ldr	r3, [r4, #8]
 800e02e:	1b9b      	subs	r3, r3, r6
 800e030:	60a3      	str	r3, [r4, #8]
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	4433      	add	r3, r6
 800e036:	6023      	str	r3, [r4, #0]
 800e038:	2000      	movs	r0, #0
 800e03a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e03e:	462a      	mov	r2, r5
 800e040:	f000 fac4 	bl	800e5cc <_realloc_r>
 800e044:	4606      	mov	r6, r0
 800e046:	2800      	cmp	r0, #0
 800e048:	d1e0      	bne.n	800e00c <__ssputs_r+0x5c>
 800e04a:	6921      	ldr	r1, [r4, #16]
 800e04c:	4650      	mov	r0, sl
 800e04e:	f7ff feb7 	bl	800ddc0 <_free_r>
 800e052:	230c      	movs	r3, #12
 800e054:	f8ca 3000 	str.w	r3, [sl]
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e05e:	81a3      	strh	r3, [r4, #12]
 800e060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e064:	e7e9      	b.n	800e03a <__ssputs_r+0x8a>
	...

0800e068 <_svfiprintf_r>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	4698      	mov	r8, r3
 800e06e:	898b      	ldrh	r3, [r1, #12]
 800e070:	061b      	lsls	r3, r3, #24
 800e072:	b09d      	sub	sp, #116	@ 0x74
 800e074:	4607      	mov	r7, r0
 800e076:	460d      	mov	r5, r1
 800e078:	4614      	mov	r4, r2
 800e07a:	d510      	bpl.n	800e09e <_svfiprintf_r+0x36>
 800e07c:	690b      	ldr	r3, [r1, #16]
 800e07e:	b973      	cbnz	r3, 800e09e <_svfiprintf_r+0x36>
 800e080:	2140      	movs	r1, #64	@ 0x40
 800e082:	f7ff ff09 	bl	800de98 <_malloc_r>
 800e086:	6028      	str	r0, [r5, #0]
 800e088:	6128      	str	r0, [r5, #16]
 800e08a:	b930      	cbnz	r0, 800e09a <_svfiprintf_r+0x32>
 800e08c:	230c      	movs	r3, #12
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e094:	b01d      	add	sp, #116	@ 0x74
 800e096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09a:	2340      	movs	r3, #64	@ 0x40
 800e09c:	616b      	str	r3, [r5, #20]
 800e09e:	2300      	movs	r3, #0
 800e0a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0a2:	2320      	movs	r3, #32
 800e0a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0ac:	2330      	movs	r3, #48	@ 0x30
 800e0ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e24c <_svfiprintf_r+0x1e4>
 800e0b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0b6:	f04f 0901 	mov.w	r9, #1
 800e0ba:	4623      	mov	r3, r4
 800e0bc:	469a      	mov	sl, r3
 800e0be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0c2:	b10a      	cbz	r2, 800e0c8 <_svfiprintf_r+0x60>
 800e0c4:	2a25      	cmp	r2, #37	@ 0x25
 800e0c6:	d1f9      	bne.n	800e0bc <_svfiprintf_r+0x54>
 800e0c8:	ebba 0b04 	subs.w	fp, sl, r4
 800e0cc:	d00b      	beq.n	800e0e6 <_svfiprintf_r+0x7e>
 800e0ce:	465b      	mov	r3, fp
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f7ff ff6b 	bl	800dfb0 <__ssputs_r>
 800e0da:	3001      	adds	r0, #1
 800e0dc:	f000 80a7 	beq.w	800e22e <_svfiprintf_r+0x1c6>
 800e0e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0e2:	445a      	add	r2, fp
 800e0e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0e6:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f000 809f 	beq.w	800e22e <_svfiprintf_r+0x1c6>
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e0f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0fa:	f10a 0a01 	add.w	sl, sl, #1
 800e0fe:	9304      	str	r3, [sp, #16]
 800e100:	9307      	str	r3, [sp, #28]
 800e102:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e106:	931a      	str	r3, [sp, #104]	@ 0x68
 800e108:	4654      	mov	r4, sl
 800e10a:	2205      	movs	r2, #5
 800e10c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e110:	484e      	ldr	r0, [pc, #312]	@ (800e24c <_svfiprintf_r+0x1e4>)
 800e112:	f7f2 f85d 	bl	80001d0 <memchr>
 800e116:	9a04      	ldr	r2, [sp, #16]
 800e118:	b9d8      	cbnz	r0, 800e152 <_svfiprintf_r+0xea>
 800e11a:	06d0      	lsls	r0, r2, #27
 800e11c:	bf44      	itt	mi
 800e11e:	2320      	movmi	r3, #32
 800e120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e124:	0711      	lsls	r1, r2, #28
 800e126:	bf44      	itt	mi
 800e128:	232b      	movmi	r3, #43	@ 0x2b
 800e12a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e12e:	f89a 3000 	ldrb.w	r3, [sl]
 800e132:	2b2a      	cmp	r3, #42	@ 0x2a
 800e134:	d015      	beq.n	800e162 <_svfiprintf_r+0xfa>
 800e136:	9a07      	ldr	r2, [sp, #28]
 800e138:	4654      	mov	r4, sl
 800e13a:	2000      	movs	r0, #0
 800e13c:	f04f 0c0a 	mov.w	ip, #10
 800e140:	4621      	mov	r1, r4
 800e142:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e146:	3b30      	subs	r3, #48	@ 0x30
 800e148:	2b09      	cmp	r3, #9
 800e14a:	d94b      	bls.n	800e1e4 <_svfiprintf_r+0x17c>
 800e14c:	b1b0      	cbz	r0, 800e17c <_svfiprintf_r+0x114>
 800e14e:	9207      	str	r2, [sp, #28]
 800e150:	e014      	b.n	800e17c <_svfiprintf_r+0x114>
 800e152:	eba0 0308 	sub.w	r3, r0, r8
 800e156:	fa09 f303 	lsl.w	r3, r9, r3
 800e15a:	4313      	orrs	r3, r2
 800e15c:	9304      	str	r3, [sp, #16]
 800e15e:	46a2      	mov	sl, r4
 800e160:	e7d2      	b.n	800e108 <_svfiprintf_r+0xa0>
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	1d19      	adds	r1, r3, #4
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	9103      	str	r1, [sp, #12]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	bfbb      	ittet	lt
 800e16e:	425b      	neglt	r3, r3
 800e170:	f042 0202 	orrlt.w	r2, r2, #2
 800e174:	9307      	strge	r3, [sp, #28]
 800e176:	9307      	strlt	r3, [sp, #28]
 800e178:	bfb8      	it	lt
 800e17a:	9204      	strlt	r2, [sp, #16]
 800e17c:	7823      	ldrb	r3, [r4, #0]
 800e17e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e180:	d10a      	bne.n	800e198 <_svfiprintf_r+0x130>
 800e182:	7863      	ldrb	r3, [r4, #1]
 800e184:	2b2a      	cmp	r3, #42	@ 0x2a
 800e186:	d132      	bne.n	800e1ee <_svfiprintf_r+0x186>
 800e188:	9b03      	ldr	r3, [sp, #12]
 800e18a:	1d1a      	adds	r2, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	9203      	str	r2, [sp, #12]
 800e190:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e194:	3402      	adds	r4, #2
 800e196:	9305      	str	r3, [sp, #20]
 800e198:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e25c <_svfiprintf_r+0x1f4>
 800e19c:	7821      	ldrb	r1, [r4, #0]
 800e19e:	2203      	movs	r2, #3
 800e1a0:	4650      	mov	r0, sl
 800e1a2:	f7f2 f815 	bl	80001d0 <memchr>
 800e1a6:	b138      	cbz	r0, 800e1b8 <_svfiprintf_r+0x150>
 800e1a8:	9b04      	ldr	r3, [sp, #16]
 800e1aa:	eba0 000a 	sub.w	r0, r0, sl
 800e1ae:	2240      	movs	r2, #64	@ 0x40
 800e1b0:	4082      	lsls	r2, r0
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	3401      	adds	r4, #1
 800e1b6:	9304      	str	r3, [sp, #16]
 800e1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1bc:	4824      	ldr	r0, [pc, #144]	@ (800e250 <_svfiprintf_r+0x1e8>)
 800e1be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1c2:	2206      	movs	r2, #6
 800e1c4:	f7f2 f804 	bl	80001d0 <memchr>
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d036      	beq.n	800e23a <_svfiprintf_r+0x1d2>
 800e1cc:	4b21      	ldr	r3, [pc, #132]	@ (800e254 <_svfiprintf_r+0x1ec>)
 800e1ce:	bb1b      	cbnz	r3, 800e218 <_svfiprintf_r+0x1b0>
 800e1d0:	9b03      	ldr	r3, [sp, #12]
 800e1d2:	3307      	adds	r3, #7
 800e1d4:	f023 0307 	bic.w	r3, r3, #7
 800e1d8:	3308      	adds	r3, #8
 800e1da:	9303      	str	r3, [sp, #12]
 800e1dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1de:	4433      	add	r3, r6
 800e1e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1e2:	e76a      	b.n	800e0ba <_svfiprintf_r+0x52>
 800e1e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1e8:	460c      	mov	r4, r1
 800e1ea:	2001      	movs	r0, #1
 800e1ec:	e7a8      	b.n	800e140 <_svfiprintf_r+0xd8>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	3401      	adds	r4, #1
 800e1f2:	9305      	str	r3, [sp, #20]
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	f04f 0c0a 	mov.w	ip, #10
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e200:	3a30      	subs	r2, #48	@ 0x30
 800e202:	2a09      	cmp	r2, #9
 800e204:	d903      	bls.n	800e20e <_svfiprintf_r+0x1a6>
 800e206:	2b00      	cmp	r3, #0
 800e208:	d0c6      	beq.n	800e198 <_svfiprintf_r+0x130>
 800e20a:	9105      	str	r1, [sp, #20]
 800e20c:	e7c4      	b.n	800e198 <_svfiprintf_r+0x130>
 800e20e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e212:	4604      	mov	r4, r0
 800e214:	2301      	movs	r3, #1
 800e216:	e7f0      	b.n	800e1fa <_svfiprintf_r+0x192>
 800e218:	ab03      	add	r3, sp, #12
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	462a      	mov	r2, r5
 800e21e:	4b0e      	ldr	r3, [pc, #56]	@ (800e258 <_svfiprintf_r+0x1f0>)
 800e220:	a904      	add	r1, sp, #16
 800e222:	4638      	mov	r0, r7
 800e224:	f3af 8000 	nop.w
 800e228:	1c42      	adds	r2, r0, #1
 800e22a:	4606      	mov	r6, r0
 800e22c:	d1d6      	bne.n	800e1dc <_svfiprintf_r+0x174>
 800e22e:	89ab      	ldrh	r3, [r5, #12]
 800e230:	065b      	lsls	r3, r3, #25
 800e232:	f53f af2d 	bmi.w	800e090 <_svfiprintf_r+0x28>
 800e236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e238:	e72c      	b.n	800e094 <_svfiprintf_r+0x2c>
 800e23a:	ab03      	add	r3, sp, #12
 800e23c:	9300      	str	r3, [sp, #0]
 800e23e:	462a      	mov	r2, r5
 800e240:	4b05      	ldr	r3, [pc, #20]	@ (800e258 <_svfiprintf_r+0x1f0>)
 800e242:	a904      	add	r1, sp, #16
 800e244:	4638      	mov	r0, r7
 800e246:	f000 f879 	bl	800e33c <_printf_i>
 800e24a:	e7ed      	b.n	800e228 <_svfiprintf_r+0x1c0>
 800e24c:	0800e6dc 	.word	0x0800e6dc
 800e250:	0800e6e6 	.word	0x0800e6e6
 800e254:	00000000 	.word	0x00000000
 800e258:	0800dfb1 	.word	0x0800dfb1
 800e25c:	0800e6e2 	.word	0x0800e6e2

0800e260 <_printf_common>:
 800e260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e264:	4616      	mov	r6, r2
 800e266:	4698      	mov	r8, r3
 800e268:	688a      	ldr	r2, [r1, #8]
 800e26a:	690b      	ldr	r3, [r1, #16]
 800e26c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e270:	4293      	cmp	r3, r2
 800e272:	bfb8      	it	lt
 800e274:	4613      	movlt	r3, r2
 800e276:	6033      	str	r3, [r6, #0]
 800e278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e27c:	4607      	mov	r7, r0
 800e27e:	460c      	mov	r4, r1
 800e280:	b10a      	cbz	r2, 800e286 <_printf_common+0x26>
 800e282:	3301      	adds	r3, #1
 800e284:	6033      	str	r3, [r6, #0]
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	0699      	lsls	r1, r3, #26
 800e28a:	bf42      	ittt	mi
 800e28c:	6833      	ldrmi	r3, [r6, #0]
 800e28e:	3302      	addmi	r3, #2
 800e290:	6033      	strmi	r3, [r6, #0]
 800e292:	6825      	ldr	r5, [r4, #0]
 800e294:	f015 0506 	ands.w	r5, r5, #6
 800e298:	d106      	bne.n	800e2a8 <_printf_common+0x48>
 800e29a:	f104 0a19 	add.w	sl, r4, #25
 800e29e:	68e3      	ldr	r3, [r4, #12]
 800e2a0:	6832      	ldr	r2, [r6, #0]
 800e2a2:	1a9b      	subs	r3, r3, r2
 800e2a4:	42ab      	cmp	r3, r5
 800e2a6:	dc26      	bgt.n	800e2f6 <_printf_common+0x96>
 800e2a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2ac:	6822      	ldr	r2, [r4, #0]
 800e2ae:	3b00      	subs	r3, #0
 800e2b0:	bf18      	it	ne
 800e2b2:	2301      	movne	r3, #1
 800e2b4:	0692      	lsls	r2, r2, #26
 800e2b6:	d42b      	bmi.n	800e310 <_printf_common+0xb0>
 800e2b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2bc:	4641      	mov	r1, r8
 800e2be:	4638      	mov	r0, r7
 800e2c0:	47c8      	blx	r9
 800e2c2:	3001      	adds	r0, #1
 800e2c4:	d01e      	beq.n	800e304 <_printf_common+0xa4>
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	6922      	ldr	r2, [r4, #16]
 800e2ca:	f003 0306 	and.w	r3, r3, #6
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	bf02      	ittt	eq
 800e2d2:	68e5      	ldreq	r5, [r4, #12]
 800e2d4:	6833      	ldreq	r3, [r6, #0]
 800e2d6:	1aed      	subeq	r5, r5, r3
 800e2d8:	68a3      	ldr	r3, [r4, #8]
 800e2da:	bf0c      	ite	eq
 800e2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2e0:	2500      	movne	r5, #0
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	bfc4      	itt	gt
 800e2e6:	1a9b      	subgt	r3, r3, r2
 800e2e8:	18ed      	addgt	r5, r5, r3
 800e2ea:	2600      	movs	r6, #0
 800e2ec:	341a      	adds	r4, #26
 800e2ee:	42b5      	cmp	r5, r6
 800e2f0:	d11a      	bne.n	800e328 <_printf_common+0xc8>
 800e2f2:	2000      	movs	r0, #0
 800e2f4:	e008      	b.n	800e308 <_printf_common+0xa8>
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	4652      	mov	r2, sl
 800e2fa:	4641      	mov	r1, r8
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	47c8      	blx	r9
 800e300:	3001      	adds	r0, #1
 800e302:	d103      	bne.n	800e30c <_printf_common+0xac>
 800e304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e30c:	3501      	adds	r5, #1
 800e30e:	e7c6      	b.n	800e29e <_printf_common+0x3e>
 800e310:	18e1      	adds	r1, r4, r3
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	2030      	movs	r0, #48	@ 0x30
 800e316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e31a:	4422      	add	r2, r4
 800e31c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e324:	3302      	adds	r3, #2
 800e326:	e7c7      	b.n	800e2b8 <_printf_common+0x58>
 800e328:	2301      	movs	r3, #1
 800e32a:	4622      	mov	r2, r4
 800e32c:	4641      	mov	r1, r8
 800e32e:	4638      	mov	r0, r7
 800e330:	47c8      	blx	r9
 800e332:	3001      	adds	r0, #1
 800e334:	d0e6      	beq.n	800e304 <_printf_common+0xa4>
 800e336:	3601      	adds	r6, #1
 800e338:	e7d9      	b.n	800e2ee <_printf_common+0x8e>
	...

0800e33c <_printf_i>:
 800e33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e340:	7e0f      	ldrb	r7, [r1, #24]
 800e342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e344:	2f78      	cmp	r7, #120	@ 0x78
 800e346:	4691      	mov	r9, r2
 800e348:	4680      	mov	r8, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	469a      	mov	sl, r3
 800e34e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e352:	d807      	bhi.n	800e364 <_printf_i+0x28>
 800e354:	2f62      	cmp	r7, #98	@ 0x62
 800e356:	d80a      	bhi.n	800e36e <_printf_i+0x32>
 800e358:	2f00      	cmp	r7, #0
 800e35a:	f000 80d1 	beq.w	800e500 <_printf_i+0x1c4>
 800e35e:	2f58      	cmp	r7, #88	@ 0x58
 800e360:	f000 80b8 	beq.w	800e4d4 <_printf_i+0x198>
 800e364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e36c:	e03a      	b.n	800e3e4 <_printf_i+0xa8>
 800e36e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e372:	2b15      	cmp	r3, #21
 800e374:	d8f6      	bhi.n	800e364 <_printf_i+0x28>
 800e376:	a101      	add	r1, pc, #4	@ (adr r1, 800e37c <_printf_i+0x40>)
 800e378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e37c:	0800e3d5 	.word	0x0800e3d5
 800e380:	0800e3e9 	.word	0x0800e3e9
 800e384:	0800e365 	.word	0x0800e365
 800e388:	0800e365 	.word	0x0800e365
 800e38c:	0800e365 	.word	0x0800e365
 800e390:	0800e365 	.word	0x0800e365
 800e394:	0800e3e9 	.word	0x0800e3e9
 800e398:	0800e365 	.word	0x0800e365
 800e39c:	0800e365 	.word	0x0800e365
 800e3a0:	0800e365 	.word	0x0800e365
 800e3a4:	0800e365 	.word	0x0800e365
 800e3a8:	0800e4e7 	.word	0x0800e4e7
 800e3ac:	0800e413 	.word	0x0800e413
 800e3b0:	0800e4a1 	.word	0x0800e4a1
 800e3b4:	0800e365 	.word	0x0800e365
 800e3b8:	0800e365 	.word	0x0800e365
 800e3bc:	0800e509 	.word	0x0800e509
 800e3c0:	0800e365 	.word	0x0800e365
 800e3c4:	0800e413 	.word	0x0800e413
 800e3c8:	0800e365 	.word	0x0800e365
 800e3cc:	0800e365 	.word	0x0800e365
 800e3d0:	0800e4a9 	.word	0x0800e4a9
 800e3d4:	6833      	ldr	r3, [r6, #0]
 800e3d6:	1d1a      	adds	r2, r3, #4
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6032      	str	r2, [r6, #0]
 800e3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e09c      	b.n	800e522 <_printf_i+0x1e6>
 800e3e8:	6833      	ldr	r3, [r6, #0]
 800e3ea:	6820      	ldr	r0, [r4, #0]
 800e3ec:	1d19      	adds	r1, r3, #4
 800e3ee:	6031      	str	r1, [r6, #0]
 800e3f0:	0606      	lsls	r6, r0, #24
 800e3f2:	d501      	bpl.n	800e3f8 <_printf_i+0xbc>
 800e3f4:	681d      	ldr	r5, [r3, #0]
 800e3f6:	e003      	b.n	800e400 <_printf_i+0xc4>
 800e3f8:	0645      	lsls	r5, r0, #25
 800e3fa:	d5fb      	bpl.n	800e3f4 <_printf_i+0xb8>
 800e3fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e400:	2d00      	cmp	r5, #0
 800e402:	da03      	bge.n	800e40c <_printf_i+0xd0>
 800e404:	232d      	movs	r3, #45	@ 0x2d
 800e406:	426d      	negs	r5, r5
 800e408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e40c:	4858      	ldr	r0, [pc, #352]	@ (800e570 <_printf_i+0x234>)
 800e40e:	230a      	movs	r3, #10
 800e410:	e011      	b.n	800e436 <_printf_i+0xfa>
 800e412:	6821      	ldr	r1, [r4, #0]
 800e414:	6833      	ldr	r3, [r6, #0]
 800e416:	0608      	lsls	r0, r1, #24
 800e418:	f853 5b04 	ldr.w	r5, [r3], #4
 800e41c:	d402      	bmi.n	800e424 <_printf_i+0xe8>
 800e41e:	0649      	lsls	r1, r1, #25
 800e420:	bf48      	it	mi
 800e422:	b2ad      	uxthmi	r5, r5
 800e424:	2f6f      	cmp	r7, #111	@ 0x6f
 800e426:	4852      	ldr	r0, [pc, #328]	@ (800e570 <_printf_i+0x234>)
 800e428:	6033      	str	r3, [r6, #0]
 800e42a:	bf14      	ite	ne
 800e42c:	230a      	movne	r3, #10
 800e42e:	2308      	moveq	r3, #8
 800e430:	2100      	movs	r1, #0
 800e432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e436:	6866      	ldr	r6, [r4, #4]
 800e438:	60a6      	str	r6, [r4, #8]
 800e43a:	2e00      	cmp	r6, #0
 800e43c:	db05      	blt.n	800e44a <_printf_i+0x10e>
 800e43e:	6821      	ldr	r1, [r4, #0]
 800e440:	432e      	orrs	r6, r5
 800e442:	f021 0104 	bic.w	r1, r1, #4
 800e446:	6021      	str	r1, [r4, #0]
 800e448:	d04b      	beq.n	800e4e2 <_printf_i+0x1a6>
 800e44a:	4616      	mov	r6, r2
 800e44c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e450:	fb03 5711 	mls	r7, r3, r1, r5
 800e454:	5dc7      	ldrb	r7, [r0, r7]
 800e456:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e45a:	462f      	mov	r7, r5
 800e45c:	42bb      	cmp	r3, r7
 800e45e:	460d      	mov	r5, r1
 800e460:	d9f4      	bls.n	800e44c <_printf_i+0x110>
 800e462:	2b08      	cmp	r3, #8
 800e464:	d10b      	bne.n	800e47e <_printf_i+0x142>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	07df      	lsls	r7, r3, #31
 800e46a:	d508      	bpl.n	800e47e <_printf_i+0x142>
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	6861      	ldr	r1, [r4, #4]
 800e470:	4299      	cmp	r1, r3
 800e472:	bfde      	ittt	le
 800e474:	2330      	movle	r3, #48	@ 0x30
 800e476:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e47a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e47e:	1b92      	subs	r2, r2, r6
 800e480:	6122      	str	r2, [r4, #16]
 800e482:	f8cd a000 	str.w	sl, [sp]
 800e486:	464b      	mov	r3, r9
 800e488:	aa03      	add	r2, sp, #12
 800e48a:	4621      	mov	r1, r4
 800e48c:	4640      	mov	r0, r8
 800e48e:	f7ff fee7 	bl	800e260 <_printf_common>
 800e492:	3001      	adds	r0, #1
 800e494:	d14a      	bne.n	800e52c <_printf_i+0x1f0>
 800e496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e49a:	b004      	add	sp, #16
 800e49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a0:	6823      	ldr	r3, [r4, #0]
 800e4a2:	f043 0320 	orr.w	r3, r3, #32
 800e4a6:	6023      	str	r3, [r4, #0]
 800e4a8:	4832      	ldr	r0, [pc, #200]	@ (800e574 <_printf_i+0x238>)
 800e4aa:	2778      	movs	r7, #120	@ 0x78
 800e4ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	6831      	ldr	r1, [r6, #0]
 800e4b4:	061f      	lsls	r7, r3, #24
 800e4b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4ba:	d402      	bmi.n	800e4c2 <_printf_i+0x186>
 800e4bc:	065f      	lsls	r7, r3, #25
 800e4be:	bf48      	it	mi
 800e4c0:	b2ad      	uxthmi	r5, r5
 800e4c2:	6031      	str	r1, [r6, #0]
 800e4c4:	07d9      	lsls	r1, r3, #31
 800e4c6:	bf44      	itt	mi
 800e4c8:	f043 0320 	orrmi.w	r3, r3, #32
 800e4cc:	6023      	strmi	r3, [r4, #0]
 800e4ce:	b11d      	cbz	r5, 800e4d8 <_printf_i+0x19c>
 800e4d0:	2310      	movs	r3, #16
 800e4d2:	e7ad      	b.n	800e430 <_printf_i+0xf4>
 800e4d4:	4826      	ldr	r0, [pc, #152]	@ (800e570 <_printf_i+0x234>)
 800e4d6:	e7e9      	b.n	800e4ac <_printf_i+0x170>
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	f023 0320 	bic.w	r3, r3, #32
 800e4de:	6023      	str	r3, [r4, #0]
 800e4e0:	e7f6      	b.n	800e4d0 <_printf_i+0x194>
 800e4e2:	4616      	mov	r6, r2
 800e4e4:	e7bd      	b.n	800e462 <_printf_i+0x126>
 800e4e6:	6833      	ldr	r3, [r6, #0]
 800e4e8:	6825      	ldr	r5, [r4, #0]
 800e4ea:	6961      	ldr	r1, [r4, #20]
 800e4ec:	1d18      	adds	r0, r3, #4
 800e4ee:	6030      	str	r0, [r6, #0]
 800e4f0:	062e      	lsls	r6, r5, #24
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	d501      	bpl.n	800e4fa <_printf_i+0x1be>
 800e4f6:	6019      	str	r1, [r3, #0]
 800e4f8:	e002      	b.n	800e500 <_printf_i+0x1c4>
 800e4fa:	0668      	lsls	r0, r5, #25
 800e4fc:	d5fb      	bpl.n	800e4f6 <_printf_i+0x1ba>
 800e4fe:	8019      	strh	r1, [r3, #0]
 800e500:	2300      	movs	r3, #0
 800e502:	6123      	str	r3, [r4, #16]
 800e504:	4616      	mov	r6, r2
 800e506:	e7bc      	b.n	800e482 <_printf_i+0x146>
 800e508:	6833      	ldr	r3, [r6, #0]
 800e50a:	1d1a      	adds	r2, r3, #4
 800e50c:	6032      	str	r2, [r6, #0]
 800e50e:	681e      	ldr	r6, [r3, #0]
 800e510:	6862      	ldr	r2, [r4, #4]
 800e512:	2100      	movs	r1, #0
 800e514:	4630      	mov	r0, r6
 800e516:	f7f1 fe5b 	bl	80001d0 <memchr>
 800e51a:	b108      	cbz	r0, 800e520 <_printf_i+0x1e4>
 800e51c:	1b80      	subs	r0, r0, r6
 800e51e:	6060      	str	r0, [r4, #4]
 800e520:	6863      	ldr	r3, [r4, #4]
 800e522:	6123      	str	r3, [r4, #16]
 800e524:	2300      	movs	r3, #0
 800e526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e52a:	e7aa      	b.n	800e482 <_printf_i+0x146>
 800e52c:	6923      	ldr	r3, [r4, #16]
 800e52e:	4632      	mov	r2, r6
 800e530:	4649      	mov	r1, r9
 800e532:	4640      	mov	r0, r8
 800e534:	47d0      	blx	sl
 800e536:	3001      	adds	r0, #1
 800e538:	d0ad      	beq.n	800e496 <_printf_i+0x15a>
 800e53a:	6823      	ldr	r3, [r4, #0]
 800e53c:	079b      	lsls	r3, r3, #30
 800e53e:	d413      	bmi.n	800e568 <_printf_i+0x22c>
 800e540:	68e0      	ldr	r0, [r4, #12]
 800e542:	9b03      	ldr	r3, [sp, #12]
 800e544:	4298      	cmp	r0, r3
 800e546:	bfb8      	it	lt
 800e548:	4618      	movlt	r0, r3
 800e54a:	e7a6      	b.n	800e49a <_printf_i+0x15e>
 800e54c:	2301      	movs	r3, #1
 800e54e:	4632      	mov	r2, r6
 800e550:	4649      	mov	r1, r9
 800e552:	4640      	mov	r0, r8
 800e554:	47d0      	blx	sl
 800e556:	3001      	adds	r0, #1
 800e558:	d09d      	beq.n	800e496 <_printf_i+0x15a>
 800e55a:	3501      	adds	r5, #1
 800e55c:	68e3      	ldr	r3, [r4, #12]
 800e55e:	9903      	ldr	r1, [sp, #12]
 800e560:	1a5b      	subs	r3, r3, r1
 800e562:	42ab      	cmp	r3, r5
 800e564:	dcf2      	bgt.n	800e54c <_printf_i+0x210>
 800e566:	e7eb      	b.n	800e540 <_printf_i+0x204>
 800e568:	2500      	movs	r5, #0
 800e56a:	f104 0619 	add.w	r6, r4, #25
 800e56e:	e7f5      	b.n	800e55c <_printf_i+0x220>
 800e570:	0800e6ed 	.word	0x0800e6ed
 800e574:	0800e6fe 	.word	0x0800e6fe

0800e578 <memmove>:
 800e578:	4288      	cmp	r0, r1
 800e57a:	b510      	push	{r4, lr}
 800e57c:	eb01 0402 	add.w	r4, r1, r2
 800e580:	d902      	bls.n	800e588 <memmove+0x10>
 800e582:	4284      	cmp	r4, r0
 800e584:	4623      	mov	r3, r4
 800e586:	d807      	bhi.n	800e598 <memmove+0x20>
 800e588:	1e43      	subs	r3, r0, #1
 800e58a:	42a1      	cmp	r1, r4
 800e58c:	d008      	beq.n	800e5a0 <memmove+0x28>
 800e58e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e592:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e596:	e7f8      	b.n	800e58a <memmove+0x12>
 800e598:	4402      	add	r2, r0
 800e59a:	4601      	mov	r1, r0
 800e59c:	428a      	cmp	r2, r1
 800e59e:	d100      	bne.n	800e5a2 <memmove+0x2a>
 800e5a0:	bd10      	pop	{r4, pc}
 800e5a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5aa:	e7f7      	b.n	800e59c <memmove+0x24>

0800e5ac <_sbrk_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4d06      	ldr	r5, [pc, #24]	@ (800e5c8 <_sbrk_r+0x1c>)
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	4608      	mov	r0, r1
 800e5b6:	602b      	str	r3, [r5, #0]
 800e5b8:	f7f4 fc34 	bl	8002e24 <_sbrk>
 800e5bc:	1c43      	adds	r3, r0, #1
 800e5be:	d102      	bne.n	800e5c6 <_sbrk_r+0x1a>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	b103      	cbz	r3, 800e5c6 <_sbrk_r+0x1a>
 800e5c4:	6023      	str	r3, [r4, #0]
 800e5c6:	bd38      	pop	{r3, r4, r5, pc}
 800e5c8:	20001190 	.word	0x20001190

0800e5cc <_realloc_r>:
 800e5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d0:	4607      	mov	r7, r0
 800e5d2:	4614      	mov	r4, r2
 800e5d4:	460d      	mov	r5, r1
 800e5d6:	b921      	cbnz	r1, 800e5e2 <_realloc_r+0x16>
 800e5d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5dc:	4611      	mov	r1, r2
 800e5de:	f7ff bc5b 	b.w	800de98 <_malloc_r>
 800e5e2:	b92a      	cbnz	r2, 800e5f0 <_realloc_r+0x24>
 800e5e4:	f7ff fbec 	bl	800ddc0 <_free_r>
 800e5e8:	4625      	mov	r5, r4
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f0:	f000 f81a 	bl	800e628 <_malloc_usable_size_r>
 800e5f4:	4284      	cmp	r4, r0
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	d802      	bhi.n	800e600 <_realloc_r+0x34>
 800e5fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e5fe:	d8f4      	bhi.n	800e5ea <_realloc_r+0x1e>
 800e600:	4621      	mov	r1, r4
 800e602:	4638      	mov	r0, r7
 800e604:	f7ff fc48 	bl	800de98 <_malloc_r>
 800e608:	4680      	mov	r8, r0
 800e60a:	b908      	cbnz	r0, 800e610 <_realloc_r+0x44>
 800e60c:	4645      	mov	r5, r8
 800e60e:	e7ec      	b.n	800e5ea <_realloc_r+0x1e>
 800e610:	42b4      	cmp	r4, r6
 800e612:	4622      	mov	r2, r4
 800e614:	4629      	mov	r1, r5
 800e616:	bf28      	it	cs
 800e618:	4632      	movcs	r2, r6
 800e61a:	f7ff fbc3 	bl	800dda4 <memcpy>
 800e61e:	4629      	mov	r1, r5
 800e620:	4638      	mov	r0, r7
 800e622:	f7ff fbcd 	bl	800ddc0 <_free_r>
 800e626:	e7f1      	b.n	800e60c <_realloc_r+0x40>

0800e628 <_malloc_usable_size_r>:
 800e628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e62c:	1f18      	subs	r0, r3, #4
 800e62e:	2b00      	cmp	r3, #0
 800e630:	bfbc      	itt	lt
 800e632:	580b      	ldrlt	r3, [r1, r0]
 800e634:	18c0      	addlt	r0, r0, r3
 800e636:	4770      	bx	lr

0800e638 <_init>:
 800e638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e63a:	bf00      	nop
 800e63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e63e:	bc08      	pop	{r3}
 800e640:	469e      	mov	lr, r3
 800e642:	4770      	bx	lr

0800e644 <_fini>:
 800e644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e646:	bf00      	nop
 800e648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e64a:	bc08      	pop	{r3}
 800e64c:	469e      	mov	lr, r3
 800e64e:	4770      	bx	lr
