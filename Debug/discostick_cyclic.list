
discostick_cyclic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800ef28  0800ef28  0000ff28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f018  0800f018  00011338  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f020  0800f020  00011338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f020  0800f020  00010020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f024  0800f024  00010024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000338  20000000  0800f028  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011338  2**0
                  CONTENTS
 10 .bss          000011a0  20000338  20000338  00011338  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014d8  200014d8  00011338  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011338  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232dd  00000000  00000000  00011368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006108  00000000  00000000  00034645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cb0  00000000  00000000  0003a750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015d1  00000000  00000000  0003c400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028aef  00000000  00000000  0003d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002836e  00000000  00000000  000664c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0b51  00000000  00000000  0008e82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f37f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007990  00000000  00000000  0016f3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00176d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ef10 	.word	0x0800ef10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	0800ef10 	.word	0x0800ef10

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b28      	ldr	r3, [pc, #160]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005b0:	4a28      	ldr	r2, [pc, #160]	@ (8000654 <MX_ADC1_Init+0xb8>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b24      	ldr	r3, [pc, #144]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005c2:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005de:	4a1e      	ldr	r2, [pc, #120]	@ (8000658 <MX_ADC1_Init+0xbc>)
 80005e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005e8:	4b19      	ldr	r3, [pc, #100]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005f6:	4b16      	ldr	r3, [pc, #88]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	4814      	ldr	r0, [pc, #80]	@ (8000650 <MX_ADC1_Init+0xb4>)
 80005fe:	f003 f95b 	bl	80038b8 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 ff50 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000614:	2305      	movs	r3, #5
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <MX_ADC1_Init+0xb4>)
 800061e:	f003 fbd1 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 ff40 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800062c:	230e      	movs	r3, #14
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000634:	463b      	mov	r3, r7
 8000636:	4619      	mov	r1, r3
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <MX_ADC1_Init+0xb4>)
 800063a:	f003 fbc3 	bl	8003dc4 <HAL_ADC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000644:	f001 ff32 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000354 	.word	0x20000354
 8000654:	40012000 	.word	0x40012000
 8000658:	0f000001 	.word	0x0f000001

0800065c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a33      	ldr	r2, [pc, #204]	@ (8000748 <HAL_ADC_MspInit+0xec>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d160      	bne.n	8000740 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b32      	ldr	r3, [pc, #200]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000686:	4a31      	ldr	r2, [pc, #196]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 8000688:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800068c:	6453      	str	r3, [r2, #68]	@ 0x44
 800068e:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b2b      	ldr	r3, [pc, #172]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a2a      	ldr	r2, [pc, #168]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b28      	ldr	r3, [pc, #160]	@ (800074c <HAL_ADC_MspInit+0xf0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CYCLIC_PITCH_Pin|CYCLIC_ROLL_Pin;
 80006b6:	2330      	movs	r3, #48	@ 0x30
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4821      	ldr	r0, [pc, #132]	@ (8000750 <HAL_ADC_MspInit+0xf4>)
 80006ca:	f004 fb87 	bl	8004ddc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006ce:	4b21      	ldr	r3, [pc, #132]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006d0:	4a21      	ldr	r2, [pc, #132]	@ (8000758 <HAL_ADC_MspInit+0xfc>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 80006f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000700:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000704:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000708:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800070c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000714:	480f      	ldr	r0, [pc, #60]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000716:	f003 ff5f 	bl	80045d8 <HAL_DMA_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000720:	f001 fec4 	bl	80024ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 8000728:	639a      	str	r2, [r3, #56]	@ 0x38
 800072a:	4a0a      	ldr	r2, [pc, #40]	@ (8000754 <HAL_ADC_MspInit+0xf8>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2012      	movs	r0, #18
 8000736:	f003 feca 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800073a:	2012      	movs	r0, #18
 800073c:	f003 fee3 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	3728      	adds	r7, #40	@ 0x28
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40012000 	.word	0x40012000
 800074c:	40023800 	.word	0x40023800
 8000750:	40020800 	.word	0x40020800
 8000754:	2000039c 	.word	0x2000039c
 8000758:	40026410 	.word	0x40026410

0800075c <u8_to_i16>:
 */


#include "bitutils.h"

int16_t u8_to_i16(uint8_t high, uint8_t low)	{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
	return (int16_t)(high << 8 | low);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	b21b      	sxth	r3, r3
 8000770:	021b      	lsls	r3, r3, #8
 8000772:	b21a      	sxth	r2, r3
 8000774:	79bb      	ldrb	r3, [r7, #6]
 8000776:	b21b      	sxth	r3, r3
 8000778:	4313      	orrs	r3, r2
 800077a:	b21b      	sxth	r3, r3
}
 800077c:	4618      	mov	r0, r3
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr

08000788 <u8_to_u32>:

uint32_t u8_to_u32(uint8_t* num)	{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	uint32_t ret = (((uint32_t)num[3] << 24) | ((uint32_t)num[2] << 16) | ((uint32_t)num[1] << 8) | ((uint32_t)num[0]<< 0));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3303      	adds	r3, #3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	061a      	lsls	r2, r3, #24
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3302      	adds	r3, #2
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	041b      	lsls	r3, r3, #16
 80007a0:	431a      	orrs	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	3301      	adds	r3, #1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	4313      	orrs	r3, r2
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
	return ret;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <u8_to_float>:

float u8_to_float(uint8_t* num)	{
 80007c2:	b480      	push	{r7}
 80007c4:	b085      	sub	sp, #20
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
	float_st temp_num = {.bytes[0] = num[0], .bytes[1] = num[1], .bytes[2] = num[2], .bytes[3] = num[3]};
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	733b      	strb	r3, [r7, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	785b      	ldrb	r3, [r3, #1]
 80007d4:	737b      	strb	r3, [r7, #13]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	789b      	ldrb	r3, [r3, #2]
 80007da:	73bb      	strb	r3, [r7, #14]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	78db      	ldrb	r3, [r3, #3]
 80007e0:	73fb      	strb	r3, [r7, #15]
	return temp_num.value;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	ee07 3a90 	vmov	s15, r3

}
 80007e8:	eeb0 0a67 	vmov.f32	s0, s15
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <i16_high_to_u8>:

uint8_t i16_high_to_u8(int16_t num)	{
 80007f6:	b480      	push	{r7}
 80007f8:	b083      	sub	sp, #12
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)((num & 0xFF00) >> 8);
 8000800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000804:	121b      	asrs	r3, r3, #8
 8000806:	b2db      	uxtb	r3, r3
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <i16_low_to_u8>:

uint8_t i16_low_to_u8(int16_t num)	{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	80fb      	strh	r3, [r7, #6]
	return (uint8_t)(num & 0x00FF);
 800081e:	88fb      	ldrh	r3, [r7, #6]
 8000820:	b2db      	uxtb	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <i16_to_u8>:

void i16_to_u8(int16_t num, uint8_t* data)	{
 800082e:	b590      	push	{r4, r7, lr}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	6039      	str	r1, [r7, #0]
 8000838:	80fb      	strh	r3, [r7, #6]
	data[0] = i16_high_to_u8(num);
 800083a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ffd9 	bl	80007f6 <i16_high_to_u8>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	701a      	strb	r2, [r3, #0]
	data[1] = i16_low_to_u8(num);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	1c5c      	adds	r4, r3, #1
 8000850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffdd 	bl	8000814 <i16_low_to_u8>
 800085a:	4603      	mov	r3, r0
 800085c:	7023      	strb	r3, [r4, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bd90      	pop	{r4, r7, pc}

08000866 <float_to_u8>:

void float_to_u8(float num, uint8_t* data)	{
 8000866:	b480      	push	{r7}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	ed87 0a01 	vstr	s0, [r7, #4]
 8000870:	6038      	str	r0, [r7, #0]
	float_st temp_num = {.value = num};
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	60fb      	str	r3, [r7, #12]

	data[0] = temp_num.bytes[0];
 8000876:	7b3a      	ldrb	r2, [r7, #12]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	701a      	strb	r2, [r3, #0]
	data[1] = temp_num.bytes[1];
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	3301      	adds	r3, #1
 8000880:	7b7a      	ldrb	r2, [r7, #13]
 8000882:	701a      	strb	r2, [r3, #0]
	data[2] = temp_num.bytes[2];
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	3302      	adds	r3, #2
 8000888:	7bba      	ldrb	r2, [r7, #14]
 800088a:	701a      	strb	r2, [r3, #0]
	data[3] = temp_num.bytes[3];
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3303      	adds	r3, #3
 8000890:	7bfa      	ldrb	r2, [r7, #15]
 8000892:	701a      	strb	r2, [r3, #0]

}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <apply_calibration>:


#include "calibration.h"
#include "bitutils.h"

int16_t apply_calibration(axis_calibration_factors_t* cal, int16_t input){
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	807b      	strh	r3, [r7, #2]
	int16_t value = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	81fb      	strh	r3, [r7, #14]
	if(input == cal->zero)	{
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80008b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d101      	bne.n	80008c2 <apply_calibration+0x22>
		return 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	e02f      	b.n	8000922 <apply_calibration+0x82>
	}
	else {
		value = input - cal->zero;
 80008c2:	887a      	ldrh	r2, [r7, #2]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	1ad3      	subs	r3, r2, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	81fb      	strh	r3, [r7, #14]
		value = (int16_t)((float)value * cal->step_size);
 80008d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80008e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008ec:	ee17 3a90 	vmov	r3, s15
 80008f0:	81fb      	strh	r3, [r7, #14]
	}

	if(value >= cal->logical_max)	{
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80008f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	db03      	blt.n	8000908 <apply_calibration+0x68>
		return cal->logical_max;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000906:	e00c      	b.n	8000922 <apply_calibration+0x82>
	}
	else if (value <= cal->logical_min){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800090e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000912:	429a      	cmp	r2, r3
 8000914:	dc03      	bgt.n	800091e <apply_calibration+0x7e>
		return cal->logical_min;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800091c:	e001      	b.n	8000922 <apply_calibration+0x82>
	}

	return value;
 800091e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <set_calibration>:

void set_calibration(axis_calibration_factors_t* cal, uint8_t* data, uint8_t data_size)	{
 800092e:	b580      	push	{r7, lr}
 8000930:	b084      	sub	sp, #16
 8000932:	af00      	add	r7, sp, #0
 8000934:	60f8      	str	r0, [r7, #12]
 8000936:	60b9      	str	r1, [r7, #8]
 8000938:	4613      	mov	r3, r2
 800093a:	71fb      	strb	r3, [r7, #7]
	if(data_size != CALIBRATION_FACTOR_SIZE){
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b13      	cmp	r3, #19
 8000940:	d15a      	bne.n	80009f8 <set_calibration+0xca>
		return;
	}
	cal->physical_max 	= u8_to_i16(data[0], data[1]);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	3301      	adds	r3, #1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	4619      	mov	r1, r3
 800094e:	4610      	mov	r0, r2
 8000950:	f7ff ff04 	bl	800075c <u8_to_i16>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	801a      	strh	r2, [r3, #0]
	cal->physical_min 	= u8_to_i16(data[2], data[3]);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	3302      	adds	r3, #2
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	3303      	adds	r3, #3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4610      	mov	r0, r2
 800096c:	f7ff fef6 	bl	800075c <u8_to_i16>
 8000970:	4603      	mov	r3, r0
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	805a      	strh	r2, [r3, #2]
	cal->physical_range = u8_to_i16(data[4], data[5]);
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3304      	adds	r3, #4
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	3305      	adds	r3, #5
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	4610      	mov	r0, r2
 8000988:	f7ff fee8 	bl	800075c <u8_to_i16>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	809a      	strh	r2, [r3, #4]
	cal->logical_max 	= DEFAULT_LOGICAL_MAX;//u8_to_i16(data[6], data[7]);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800099a:	80da      	strh	r2, [r3, #6]
	cal->logical_min 	= DEFAULT_LOGICAL_MIN;//u8_to_i16(data[8], data[9]);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f44f 427c 	mov.w	r2, #64512	@ 0xfc00
 80009a2:	811a      	strh	r2, [r3, #8]
	cal->logical_range 	= cal->logical_max - cal->logical_min;//u8_to_i16(data[10], data[11]);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009aa:	b29a      	uxth	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	815a      	strh	r2, [r3, #10]
	cal->zero 			= u8_to_i16(data[12], data[13]);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	330c      	adds	r3, #12
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	330d      	adds	r3, #13
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	4610      	mov	r0, r2
 80009ce:	f7ff fec5 	bl	800075c <u8_to_i16>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	819a      	strh	r2, [r3, #12]
	cal->step_size		= u8_to_float(&data[14]);
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	330e      	adds	r3, #14
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff feef 	bl	80007c2 <u8_to_float>
 80009e4:	eef0 7a40 	vmov.f32	s15, s0
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	edc3 7a04 	vstr	s15, [r3, #16]
	cal->is_reversed	= data[18];
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	7c9a      	ldrb	r2, [r3, #18]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	751a      	strb	r2, [r3, #20]
 80009f6:	e000      	b.n	80009fa <set_calibration+0xcc>
		return;
 80009f8:	bf00      	nop
}
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <get_calibration>:

void get_calibration(axis_calibration_factors_t* cal, uint8_t* data, uint8_t data_size)	{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	if(data_size != CALIBRATION_FACTOR_SIZE){
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2b13      	cmp	r3, #19
 8000a12:	d14b      	bne.n	8000aac <get_calibration+0xac>
		return;
	}
	i16_to_u8(cal->physical_max, 	&data[0]);
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff06 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->physical_min, 	&data[2]);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4610      	mov	r0, r2
 8000a30:	f7ff fefd 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->physical_range, 	&data[4]);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4610      	mov	r0, r2
 8000a42:	f7ff fef4 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->logical_max, 	&data[6]);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	3306      	adds	r3, #6
 8000a50:	4619      	mov	r1, r3
 8000a52:	4610      	mov	r0, r2
 8000a54:	f7ff feeb 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->logical_min, 	&data[8]);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	3308      	adds	r3, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	4610      	mov	r0, r2
 8000a66:	f7ff fee2 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->logical_range, 	&data[10]);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	330a      	adds	r3, #10
 8000a74:	4619      	mov	r1, r3
 8000a76:	4610      	mov	r0, r2
 8000a78:	f7ff fed9 	bl	800082e <i16_to_u8>
	i16_to_u8(cal->zero, 			&data[12]);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	330c      	adds	r3, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	4610      	mov	r0, r2
 8000a8a:	f7ff fed0 	bl	800082e <i16_to_u8>
	float_to_u8(cal->step_size, 	&data[14]);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	330e      	adds	r3, #14
 8000a98:	4618      	mov	r0, r3
 8000a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9e:	f7ff fee2 	bl	8000866 <float_to_u8>
				cal->is_reversed = 	data[18];
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	7c9a      	ldrb	r2, [r3, #18]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	751a      	strb	r2, [r3, #20]
 8000aaa:	e000      	b.n	8000aae <get_calibration+0xae>
		return;
 8000aac:	bf00      	nop

}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <clear_calibration>:

void clear_calibration(axis_calibration_factors_t* cal)	{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	cal->physical_max 	= 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	801a      	strh	r2, [r3, #0]
	cal->physical_min 	= 0;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	805a      	strh	r2, [r3, #2]
	cal->physical_range = 0;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2200      	movs	r2, #0
 8000acc:	809a      	strh	r2, [r3, #4]
	//cal->logical_max 	= 0;
	//cal->logical_min 	= 0;
	//cal->logical_range 	= 0;
	cal->zero 			= 0;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	819a      	strh	r2, [r3, #12]
	cal->step_size		= 0.0f;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f04f 0200 	mov.w	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
	cal->is_reversed	= 0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	751a      	strb	r2, [r3, #20]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <recalculate_calibration>:

void recalculate_calibration(axis_calibration_factors_t* cal)	{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	if(cal->physical_max > cal->physical_min){
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	dd1b      	ble.n	8000b3e <recalculate_calibration+0x50>
		cal->physical_range = cal->physical_max - cal->physical_min;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	809a      	strh	r2, [r3, #4]
		cal->zero = (cal->physical_max + cal->physical_min) / 2;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b26:	461a      	mov	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b2e:	4413      	add	r3, r2
 8000b30:	0fda      	lsrs	r2, r3, #31
 8000b32:	4413      	add	r3, r2
 8000b34:	105b      	asrs	r3, r3, #1
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	819a      	strh	r2, [r3, #12]
 8000b3c:	e01d      	b.n	8000b7a <recalculate_calibration+0x8c>
	}
	else	{
		cal->physical_range = cal->physical_min - cal->physical_max;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	809a      	strh	r2, [r3, #4]
		cal->zero = (cal->physical_min + cal->physical_max) / 2;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b66:	4413      	add	r3, r2
 8000b68:	0fda      	lsrs	r2, r3, #31
 8000b6a:	4413      	add	r3, r2
 8000b6c:	105b      	asrs	r3, r3, #1
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	819a      	strh	r2, [r3, #12]
		cal->is_reversed = 1;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	751a      	strb	r2, [r3, #20]
	}
	//cal->logical_range = cal->logical_max + cal->logical_min;
	if(/*cal->physical_range <= cal->logical_range && */cal->physical_range !=0)	{
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <recalculate_calibration+0xbe>
		cal->step_size = (float)((float)cal->logical_range / (float)cal->physical_range);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	edc3 7a04 	vstr	s15, [r3, #16]
	}
	else	{
		cal->step_size = 1;
	}
}
 8000baa:	e003      	b.n	8000bb4 <recalculate_calibration+0xc6>
		cal->step_size = 1;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000bb2:	611a      	str	r2, [r3, #16]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <com_packet_init>:
#include "bitutils.h"
#include "string.h"

static CRC_HandleTypeDef* crc_handle;

void com_packet_init(com_packet_t* packet, CRC_HandleTypeDef* crc)	{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	packet->version = COM_PACKET_VERSION;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	705a      	strb	r2, [r3, #1]
	packet->payload_length = 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	709a      	strb	r2, [r3, #2]
	packet->padding = 0;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	70da      	strb	r2, [r3, #3]
	packet->packet_size.value = 0;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
	packet->crc32.value = 0;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
	memset(packet->payload, 0, COM_PACKET_PAYLOAD_SIZE);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	330c      	adds	r3, #12
 8000bf2:	2280      	movs	r2, #128	@ 0x80
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00d fd0c 	bl	800e614 <memset>

	crc_handle = crc;
 8000bfc:	4a03      	ldr	r2, [pc, #12]	@ (8000c0c <com_packet_init+0x4c>)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	6013      	str	r3, [r2, #0]
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200003fc 	.word	0x200003fc

08000c10 <com_packet_clear_payload>:

void com_packet_clear_payload(com_packet_t* packet)	{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	packet->version = COM_PACKET_VERSION;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	705a      	strb	r2, [r3, #1]
	packet->payload_length = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2200      	movs	r2, #0
 8000c28:	709a      	strb	r2, [r3, #2]
	packet->padding = 0;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	70da      	strb	r2, [r3, #3]
	packet->packet_size.value = 0;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
	packet->crc32.value = 0;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	memset(packet->payload, 0, COM_PACKET_PAYLOAD_SIZE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	330c      	adds	r3, #12
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00d fce5 	bl	800e614 <memset>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <com_packet_create>:

void com_packet_create(com_packet_t* packet, uint8_t* data, uint32_t size){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
	com_packet_clear_payload(packet);
 8000c60:	68f8      	ldr	r0, [r7, #12]
 8000c62:	f7ff ffd5 	bl	8000c10 <com_packet_clear_payload>
	packet->packet_type = (uint8_t)COM_PACKET_NORMAL;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	705a      	strb	r2, [r3, #1]
	if(size >= COM_PACKET_PAYLOAD_SIZE){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c70:	d91d      	bls.n	8000cae <com_packet_create+0x5a>
		memcpy(packet->payload, data, COM_PACKET_PAYLOAD_SIZE);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	330c      	adds	r3, #12
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00d fcfe 	bl	800e67c <memcpy>
		packet->payload_length = COM_PACKET_PAYLOAD_SIZE;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2280      	movs	r2, #128	@ 0x80
 8000c84:	709a      	strb	r2, [r3, #2]
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + COM_PACKET_PAYLOAD_SIZE;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	228c      	movs	r2, #140	@ 0x8c
 8000c8a:	605a      	str	r2, [r3, #4]
		packet->padding = 0;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	70da      	strb	r2, [r3, #3]
		uint32_t crc_size = COM_PACKET_PAYLOAD_SIZE/sizeof(uint32_t);
 8000c92:	2320      	movs	r3, #32
 8000c94:	617b      	str	r3, [r7, #20]
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <com_packet_create+0xdc>)
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	330c      	adds	r3, #12
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f003 fc66 	bl	8004572 <HAL_CRC_Calculate>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	609a      	str	r2, [r3, #8]
			packet->padding = (uint8_t)misaligned_bytes;
		}
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + packet->payload_length;
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
	}
}
 8000cac:	e03b      	b.n	8000d26 <com_packet_create+0xd2>
		memcpy(packet->payload, data, size);
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00d fce0 	bl	800e67c <memcpy>
		uint32_t crc_size = size/sizeof(uint32_t);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	089b      	lsrs	r3, r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
		packet->payload_length = crc_size * sizeof(uint32_t);
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	709a      	strb	r2, [r3, #2]
		uint32_t misaligned_bytes = sizeof(uint32_t) - (size % sizeof(uint32_t));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	f1c3 0304 	rsb	r3, r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
		if(misaligned_bytes != 0 && (size + misaligned_bytes) < COM_PACKET_PAYLOAD_SIZE){
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d011      	beq.n	8000d04 <com_packet_create+0xb0>
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ce8:	d80c      	bhi.n	8000d04 <com_packet_create+0xb0>
			crc_size++;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3301      	adds	r3, #1
 8000cee:	61fb      	str	r3, [r7, #28]
			packet->payload_length += sizeof(uint32_t);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	709a      	strb	r2, [r3, #2]
			packet->padding = (uint8_t)misaligned_bytes;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	70da      	strb	r2, [r3, #3]
		packet->packet_size.value = COM_PACKET_HEADER_SIZE + packet->payload_length;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	330c      	adds	r3, #12
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	605a      	str	r2, [r3, #4]
		packet->crc32.value = HAL_CRC_Calculate(crc_handle, (uint32_t*)packet->payload, crc_size);
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <com_packet_create+0xdc>)
 8000d12:	6818      	ldr	r0, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	330c      	adds	r3, #12
 8000d18:	69fa      	ldr	r2, [r7, #28]
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f003 fc29 	bl	8004572 <HAL_CRC_Calculate>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	609a      	str	r2, [r3, #8]
}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200003fc 	.word	0x200003fc

08000d34 <com_packet_parse>:
			packet->crc32.value = 0xFFFFFFFF;
			break;
	}
}

packet_type_t com_packet_parse(com_packet_t* packet, uint8_t* data, uint32_t size){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
	packet_type_t retval = COM_PACKET_FALSE;
 8000d44:	2304      	movs	r3, #4
 8000d46:	76fb      	strb	r3, [r7, #27]
	if(size < COM_PACKET_HEADER_SIZE){
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b0b      	cmp	r3, #11
 8000d4c:	f200 80e3 	bhi.w	8000f16 <com_packet_parse+0x1e2>
		return retval;
 8000d50:	7efb      	ldrb	r3, [r7, #27]
 8000d52:	e0ea      	b.n	8000f2a <com_packet_parse+0x1f6>
	 * index + 4:	packet_size
	 * index + 8: 	crc32
	 * index + 12:	beginning of payload
	 */
	while((index + COM_PACKET_HEADER_SIZE) <= size && retval==COM_PACKET_FALSE){
		if(data[index] == COM_PACKET_VERSION)	{
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	f040 80d7 	bne.w	8000f10 <com_packet_parse+0x1dc>
			 if((index + u8_to_u32(&data[index+4])) <= size){
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fd0c 	bl	8000788 <u8_to_u32>
 8000d70:	4602      	mov	r2, r0
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	4413      	add	r3, r2
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	f0c0 80c9 	bcc.w	8000f10 <com_packet_parse+0x1dc>
				 packet_type_t type = data[index+1];
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3301      	adds	r3, #1
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4413      	add	r3, r2
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	76bb      	strb	r3, [r7, #26]
				 uint32_t test_crc = u8_to_u32(&data[index+8]);
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3308      	adds	r3, #8
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fcf8 	bl	8000788 <u8_to_u32>
 8000d98:	6178      	str	r0, [r7, #20]
				 uint32_t calc_crc = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
				 switch(type)	{
 8000d9e:	7ebb      	ldrb	r3, [r7, #26]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	f200 80ac 	bhi.w	8000efe <com_packet_parse+0x1ca>
 8000da6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <com_packet_parse+0x78>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000e57 	.word	0x08000e57
 8000db4:	08000ee3 	.word	0x08000ee3
 8000db8:	08000ef1 	.word	0x08000ef1
				 	 case COM_PACKET_NORMAL:
				 		 calc_crc = HAL_CRC_Calculate(crc_handle, (uint32_t*)&data[index+COM_PACKET_HEADER_SIZE],data[index+2]/sizeof(uint32_t));
 8000dbc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f34 <com_packet_parse+0x200>)
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	330c      	adds	r3, #12
 8000dc4:	68ba      	ldr	r2, [r7, #8]
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	3302      	adds	r3, #2
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	4413      	add	r3, r2
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	f003 fbcb 	bl	8004572 <HAL_CRC_Calculate>
 8000ddc:	6138      	str	r0, [r7, #16]
				 		 if(calc_crc==test_crc)	{
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	f040 808d 	bne.w	8000f02 <com_packet_parse+0x1ce>
				 			 retval = type;
 8000de8:	7ebb      	ldrb	r3, [r7, #26]
 8000dea:	76fb      	strb	r3, [r7, #27]
				 			 packet->version 			= data[index];
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	4413      	add	r3, r2
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	701a      	strb	r2, [r3, #0]
				 			 packet->packet_type 		= data[index+1];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	4413      	add	r3, r2
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	705a      	strb	r2, [r3, #1]
				 			 packet->payload_length 	= data[index+2];
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	709a      	strb	r2, [r3, #2]
				 			 packet->padding 			= data[index+3];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3303      	adds	r3, #3
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	70da      	strb	r2, [r3, #3]
				 			 packet->packet_size.value	= u8_to_u32(&data[index+4]);
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff fcac 	bl	8000788 <u8_to_u32>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	605a      	str	r2, [r3, #4]
				 			 packet->crc32.value		= test_crc;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	609a      	str	r2, [r3, #8]
				 			 memcpy(packet->payload, &data[index+12], packet->payload_length);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 000c 	add.w	r0, r3, #12
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	330c      	adds	r3, #12
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	18d1      	adds	r1, r2, r3
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	789b      	ldrb	r3, [r3, #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f00d fc14 	bl	800e67c <memcpy>
				 		 }
				 		 break;
 8000e54:	e055      	b.n	8000f02 <com_packet_parse+0x1ce>
				 	 case COM_PACKET_CMD:
				 		 calc_crc = HAL_CRC_Calculate(crc_handle, (uint32_t*)&data[index+COM_PACKET_HEADER_SIZE],1);
 8000e56:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <com_packet_parse+0x200>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	330c      	adds	r3, #12
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	4413      	add	r3, r2
 8000e62:	2201      	movs	r2, #1
 8000e64:	4619      	mov	r1, r3
 8000e66:	f003 fb84 	bl	8004572 <HAL_CRC_Calculate>
 8000e6a:	6138      	str	r0, [r7, #16]
				 		 if(calc_crc==test_crc)	{
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d148      	bne.n	8000f06 <com_packet_parse+0x1d2>
				 			 retval = type;
 8000e74:	7ebb      	ldrb	r3, [r7, #26]
 8000e76:	76fb      	strb	r3, [r7, #27]
				 			 packet->version 			= data[index];
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	701a      	strb	r2, [r3, #0]
				 			 packet->packet_type 		= data[index+1];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	3301      	adds	r3, #1
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	705a      	strb	r2, [r3, #1]
				 			 packet->payload_length 	= data[index+2];
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3302      	adds	r3, #2
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	709a      	strb	r2, [r3, #2]
				 			 packet->padding 			= data[index+3];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	3303      	adds	r3, #3
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	70da      	strb	r2, [r3, #3]
				 			 packet->packet_size.value	= u8_to_u32(&data[index+4]);
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fc66 	bl	8000788 <u8_to_u32>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	605a      	str	r2, [r3, #4]
				 			 packet->crc32.value		= test_crc;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	609a      	str	r2, [r3, #8]
				 			 memcpy(packet->payload, &data[index+12], packet->payload_length);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f103 000c 	add.w	r0, r3, #12
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	330c      	adds	r3, #12
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	18d1      	adds	r1, r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	789b      	ldrb	r3, [r3, #2]
 8000eda:	461a      	mov	r2, r3
 8000edc:	f00d fbce 	bl	800e67c <memcpy>
				 		 }
				 		 break;
 8000ee0:	e011      	b.n	8000f06 <com_packet_parse+0x1d2>
				 	 case COM_PACKET_ACK:
				 		 if(test_crc == ACK_CRC32){
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	@ (8000f38 <com_packet_parse+0x204>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10f      	bne.n	8000f0a <com_packet_parse+0x1d6>
				 			 retval = type;
 8000eea:	7ebb      	ldrb	r3, [r7, #26]
 8000eec:	76fb      	strb	r3, [r7, #27]
				 		 }
				 		 break;
 8000eee:	e00c      	b.n	8000f0a <com_packet_parse+0x1d6>
				 	 case COM_PACKET_NACK:
				 		if(test_crc == NACK_CRC32){
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <com_packet_parse+0x208>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d10a      	bne.n	8000f0e <com_packet_parse+0x1da>
				 			 retval = type;
 8000ef8:	7ebb      	ldrb	r3, [r7, #26]
 8000efa:	76fb      	strb	r3, [r7, #27]
				 		 }
				 		 break;
 8000efc:	e007      	b.n	8000f0e <com_packet_parse+0x1da>
				 	 default:
					 	 break;
 8000efe:	bf00      	nop
 8000f00:	e006      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f02:	bf00      	nop
 8000f04:	e004      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f06:	bf00      	nop
 8000f08:	e002      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f0a:	bf00      	nop
 8000f0c:	e000      	b.n	8000f10 <com_packet_parse+0x1dc>
				 		 break;
 8000f0e:	bf00      	nop
				 }
			 }
		}
		index++;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	3301      	adds	r3, #1
 8000f14:	61fb      	str	r3, [r7, #28]
	while((index + COM_PACKET_HEADER_SIZE) <= size && retval==COM_PACKET_FALSE){
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d303      	bcc.n	8000f28 <com_packet_parse+0x1f4>
 8000f20:	7efb      	ldrb	r3, [r7, #27]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	f43f af16 	beq.w	8000d54 <com_packet_parse+0x20>
	}
	return retval;
 8000f28:	7efb      	ldrb	r3, [r7, #27]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3720      	adds	r7, #32
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003fc 	.word	0x200003fc
 8000f38:	0abcd001 	.word	0x0abcd001
 8000f3c:	0abcd002 	.word	0x0abcd002

08000f40 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <MX_CRC_Init+0x20>)
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <MX_CRC_Init+0x24>)
 8000f48:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_CRC_Init+0x20>)
 8000f4c:	f003 faf5 	bl	800453a <HAL_CRC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f56:	f001 faa9 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000400 	.word	0x20000400
 8000f64:	40023000 	.word	0x40023000

08000f68 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_CRC_MspInit+0x3c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10d      	bne.n	8000f96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a09      	ldr	r2, [pc, #36]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <HAL_CRC_MspInit+0x40>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023000 	.word	0x40023000
 8000fa8:	40023800 	.word	0x40023800

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a22      	ldr	r2, [pc, #136]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fbc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_DMA_Init+0x98>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f003 fa6d 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f003 fa86 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	200d      	movs	r0, #13
 8001000:	f003 fa65 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001004:	200d      	movs	r0, #13
 8001006:	f003 fa7e 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	200e      	movs	r0, #14
 8001010:	f003 fa5d 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001014:	200e      	movs	r0, #14
 8001016:	f003 fa76 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200f      	movs	r0, #15
 8001020:	f003 fa55 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001024:	200f      	movs	r0, #15
 8001026:	f003 fa6e 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2038      	movs	r0, #56	@ 0x38
 8001030:	f003 fa4d 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001034:	2038      	movs	r0, #56	@ 0x38
 8001036:	f003 fa66 	bl	8004506 <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <fifo_init>:
 *      Author: zuidec
 */

#include "fifo.h"

void fifo_init(fifo_buffer_t* fifo, uint8_t* buffer, uint32_t size) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]

    fifo->buffer = buffer;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	601a      	str	r2, [r3, #0]
    fifo->read_index = 0;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    fifo->write_index = 0;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    fifo->mask = size - 1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	1e5a      	subs	r2, r3, #1
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	605a      	str	r2, [r3, #4]
    fifo->size = size;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]

}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <fifo_bytes_available>:

    // Return true if read index and write index are the same
    return fifo->read_index == fifo->write_index;
}

uint32_t fifo_bytes_available(fifo_buffer_t* fifo)	{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	if(fifo->write_index >= fifo->read_index)	{
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d305      	bcc.n	80010a0 <fifo_bytes_available+0x20>
		return fifo->write_index-fifo->read_index;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	e007      	b.n	80010b0 <fifo_bytes_available+0x30>
	}
	else	{
		return (fifo->size - fifo->read_index) + fifo->write_index;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691a      	ldr	r2, [r3, #16]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	1ad2      	subs	r2, r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	4413      	add	r3, r2
	}
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <fifo_write>:

uint32_t fifo_write(fifo_buffer_t* fifo, uint8_t* data, uint32_t size)   {
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]

    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	61fb      	str	r3, [r7, #28]
    uint32_t local_write_index = fifo->write_index;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	613b      	str	r3, [r7, #16]
    uint32_t next_write_index = local_write_index;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	61bb      	str	r3, [r7, #24]
    uint32_t bytes_written = 0;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

    while(bytes_written < size){
 80010dc:	e01d      	b.n	800111a <fifo_write+0x5e>
        local_write_index = next_write_index;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	613b      	str	r3, [r7, #16]
        fifo->buffer[local_write_index] = data[bytes_written];
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	441a      	add	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6819      	ldr	r1, [r3, #0]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	440b      	add	r3, r1
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	701a      	strb	r2, [r3, #0]
        bytes_written++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
        next_write_index = (local_write_index + 1) & fifo->mask;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if(next_write_index == local_read_index){
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	429a      	cmp	r2, r3
 800110c:	d105      	bne.n	800111a <fifo_write+0x5e>
        	local_read_index = (local_read_index + 1) & fifo->mask; // Push read index
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	61fb      	str	r3, [r7, #28]
    while(bytes_written < size){
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3dd      	bcc.n	80010de <fifo_write+0x22>
        }
    }

    fifo->write_index = next_write_index;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	60da      	str	r2, [r3, #12]
    fifo->read_index = local_read_index;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	609a      	str	r2, [r3, #8]

    return bytes_written;
 800112e:	697b      	ldr	r3, [r7, #20]

}
 8001130:	4618      	mov	r0, r3
 8001132:	3724      	adds	r7, #36	@ 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <fifo_peek_continuous>:

    return fifo->buffer[local_read_index+peek_distance];
}


uint32_t fifo_peek_continuous(fifo_buffer_t* fifo, uint8_t* data, uint32_t distance)    {
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]

    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	61fb      	str	r3, [r7, #28]
    uint32_t local_write_index = fifo->write_index;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	617b      	str	r3, [r7, #20]

    // return if theres no data to read
    if(local_read_index == local_write_index)   {
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	d101      	bne.n	8001160 <fifo_peek_continuous+0x24>
        return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e01d      	b.n	800119c <fifo_peek_continuous+0x60>
    }

    uint32_t bytes_read = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
    while(bytes_read < distance && local_read_index != local_write_index)	{
 8001164:	e011      	b.n	800118a <fifo_peek_continuous+0x4e>
    	data[bytes_read] = fifo->buffer[local_read_index];
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	441a      	add	r2, r3
 800116e:	68b9      	ldr	r1, [r7, #8]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	440b      	add	r3, r1
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	701a      	strb	r2, [r3, #0]
    	bytes_read++;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3301      	adds	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
        local_read_index = (local_read_index + 1) & fifo->mask;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4013      	ands	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
    while(bytes_read < distance && local_read_index != local_write_index)	{
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d203      	bcs.n	800119a <fifo_peek_continuous+0x5e>
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	429a      	cmp	r2, r3
 8001198:	d1e5      	bne.n	8001166 <fifo_peek_continuous+0x2a>
    }

    return bytes_read;
 800119a:	69bb      	ldr	r3, [r7, #24]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	@ 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <fifo_push_read_index>:

void fifo_push_read_index(fifo_buffer_t* fifo, uint32_t distance)	{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    // Copy the indices locally in case they change
    uint32_t local_read_index = fifo->read_index;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	617b      	str	r3, [r7, #20]
    uint32_t local_write_index = fifo->write_index;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60fb      	str	r3, [r7, #12]

    // return if theres no data to read
    if(local_read_index == local_write_index)   {
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d019      	beq.n	80011fa <fifo_push_read_index+0x52>
        return;
    }

    uint32_t bytes_read = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
    for(uint32_t i = 0; (i < distance) && (local_read_index != local_write_index); i++)	{
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	e008      	b.n	80011e2 <fifo_push_read_index+0x3a>
        local_read_index = (local_read_index + 1) & fifo->mask;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	4013      	ands	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
    for(uint32_t i = 0; (i < distance) && (local_read_index != local_write_index); i++)	{
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	3301      	adds	r3, #1
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d203      	bcs.n	80011f2 <fifo_push_read_index+0x4a>
 80011ea:	697a      	ldr	r2, [r7, #20]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d1ee      	bne.n	80011d0 <fifo_push_read_index+0x28>
    }

    fifo->read_index = local_read_index;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e000      	b.n	80011fc <fifo_push_read_index+0x54>
        return;
 80011fa:	bf00      	nop
}
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <MX_GPIO_Init>:
     PA3   ------> USART2_RX
     PC12   ------> UART5_TX
     PD2   ------> UART5_RX
*/
void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	4bb6      	ldr	r3, [pc, #728]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4ab5      	ldr	r2, [pc, #724]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4bb3      	ldr	r3, [pc, #716]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	61bb      	str	r3, [r7, #24]
 8001238:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	4baf      	ldr	r3, [pc, #700]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4aae      	ldr	r2, [pc, #696]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4bac      	ldr	r3, [pc, #688]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4ba8      	ldr	r3, [pc, #672]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4aa7      	ldr	r2, [pc, #668]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4ba5      	ldr	r3, [pc, #660]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4ba1      	ldr	r3, [pc, #644]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4aa0      	ldr	r2, [pc, #640]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b9e      	ldr	r3, [pc, #632]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b9a      	ldr	r3, [pc, #616]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a99      	ldr	r2, [pc, #612]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b97      	ldr	r3, [pc, #604]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b93      	ldr	r3, [pc, #588]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a92      	ldr	r2, [pc, #584]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b90      	ldr	r3, [pc, #576]	@ (80014fc <MX_GPIO_Init+0x2f4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2170      	movs	r1, #112	@ 0x70
 80012ca:	488d      	ldr	r0, [pc, #564]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 80012cc:	f003 ff3a 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d6:	488b      	ldr	r0, [pc, #556]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 80012d8:	f003 ff34 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
 80012dc:	2201      	movs	r2, #1
 80012de:	2180      	movs	r1, #128	@ 0x80
 80012e0:	4889      	ldr	r0, [pc, #548]	@ (8001508 <MX_GPIO_Init+0x300>)
 80012e2:	f003 ff2f 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PITCH_STEP_DIR_Pin|PITCH_STEP_EN_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80012ec:	4887      	ldr	r0, [pc, #540]	@ (800150c <MX_GPIO_Init+0x304>)
 80012ee:	f003 ff29 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ROLL_STEP_DIR_Pin|ROLL_STEP_EN_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2103      	movs	r1, #3
 80012f6:	4882      	ldr	r0, [pc, #520]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 80012f8:	f003 ff24 	bl	8005144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_OK_Pin */
  GPIO_InitStruct.Pin = SW_OK_Pin;
 80012fc:	2304      	movs	r3, #4
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SW_OK_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	487c      	ldr	r0, [pc, #496]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 8001310:	f003 fd64 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_CAL_Pin */
  GPIO_InitStruct.Pin = SW_CAL_Pin;
 8001314:	2308      	movs	r3, #8
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001318:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800131c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131e:	2301      	movs	r3, #1
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SW_CAL_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4875      	ldr	r0, [pc, #468]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 800132a:	f003 fd57 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 800132e:	2370      	movs	r3, #112	@ 0x70
 8001330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001332:	2311      	movs	r3, #17
 8001334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	486e      	ldr	r0, [pc, #440]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 8001346:	f003 fd49 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_4_Pin */
  GPIO_InitStruct.Pin = LED_4_Pin;
 800134a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001350:	2311      	movs	r3, #17
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001354:	2301      	movs	r3, #1
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_4_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4868      	ldr	r0, [pc, #416]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 8001364:	f003 fd3a 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001368:	f24c 0387 	movw	r3, #49287	@ 0xc087
 800136c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_2|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4861      	ldr	r0, [pc, #388]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 800137e:	f003 fd2d 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_EN_Pin */
  GPIO_InitStruct.Pin = UART4_EN_Pin;
 8001382:	2308      	movs	r3, #8
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART4_EN_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4619      	mov	r1, r3
 8001394:	485b      	ldr	r0, [pc, #364]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 8001396:	f003 fd21 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139a:	230c      	movs	r3, #12
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4856      	ldr	r0, [pc, #344]	@ (8001510 <MX_GPIO_Init+0x308>)
 80013b6:	f003 fd11 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : UART2_EN_Pin */
  GPIO_InitStruct.Pin = UART2_EN_Pin;
 80013ba:	2310      	movs	r3, #16
 80013bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UART2_EN_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4850      	ldr	r0, [pc, #320]	@ (8001510 <MX_GPIO_Init+0x308>)
 80013ce:	f003 fd05 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013d2:	f248 73e0 	movw	r3, #34784	@ 0x87e0
 80013d6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	484a      	ldr	r0, [pc, #296]	@ (8001510 <MX_GPIO_Init+0x308>)
 80013e8:	f003 fcf8 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80013ec:	f64f 4303 	movw	r3, #64515	@ 0xfc03
 80013f0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	4619      	mov	r1, r3
 8001400:	4842      	ldr	r0, [pc, #264]	@ (800150c <MX_GPIO_Init+0x304>)
 8001402:	f003 fceb 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001406:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800140a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140c:	2303      	movs	r3, #3
 800140e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4619      	mov	r1, r3
 800141a:	4839      	ldr	r0, [pc, #228]	@ (8001500 <MX_GPIO_Init+0x2f8>)
 800141c:	f003 fcde 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD0 PD1 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 8001420:	f240 137b 	movw	r3, #379	@ 0x17b
 8001424:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001426:	2303      	movs	r3, #3
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4834      	ldr	r0, [pc, #208]	@ (8001508 <MX_GPIO_Init+0x300>)
 8001436:	f003 fcd1 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : CYC_ICS_SW_Pin CYC_CARGO_REL_Pin CYC_CDR_REL_Pin CYC_AP_REL_Pin
                           CYC_HAT_LEFT_Pin CYC_HAT_DOWN_Pin CYC_HAT_UP_Pin */
  GPIO_InitStruct.Pin = CYC_ICS_SW_Pin|CYC_CARGO_REL_Pin|CYC_CDR_REL_Pin|CYC_AP_REL_Pin
 800143a:	f44f 437e 	mov.w	r3, #65024	@ 0xfe00
 800143e:	61fb      	str	r3, [r7, #28]
                          |CYC_HAT_LEFT_Pin|CYC_HAT_DOWN_Pin|CYC_HAT_UP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	482e      	ldr	r0, [pc, #184]	@ (8001508 <MX_GPIO_Init+0x300>)
 8001450:	f003 fcc4 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : CYC_HAT_RIGHT_Pin */
  GPIO_InitStruct.Pin = CYC_HAT_RIGHT_Pin;
 8001454:	2340      	movs	r3, #64	@ 0x40
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CYC_HAT_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4827      	ldr	r0, [pc, #156]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 8001468:	f003 fcb8 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800146c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800147e:	2308      	movs	r3, #8
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	481e      	ldr	r0, [pc, #120]	@ (8001504 <MX_GPIO_Init+0x2fc>)
 800148a:	f003 fca7 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800148e:	2304      	movs	r3, #4
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800149e:	2308      	movs	r3, #8
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4817      	ldr	r0, [pc, #92]	@ (8001508 <MX_GPIO_Init+0x300>)
 80014aa:	f003 fc97 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4619      	mov	r1, r3
 80014c4:	4810      	ldr	r0, [pc, #64]	@ (8001508 <MX_GPIO_Init+0x300>)
 80014c6:	f003 fc89 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PITCH_STEP_DIR_Pin PITCH_STEP_EN_Pin */
  GPIO_InitStruct.Pin = PITCH_STEP_DIR_Pin|PITCH_STEP_EN_Pin;
 80014ca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	480a      	ldr	r0, [pc, #40]	@ (800150c <MX_GPIO_Init+0x304>)
 80014e4:	f003 fc7a 	bl	8004ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : ROLL_STEP_DIR_Pin ROLL_STEP_EN_Pin */
  GPIO_InitStruct.Pin = ROLL_STEP_DIR_Pin|ROLL_STEP_EN_Pin;
 80014e8:	2303      	movs	r3, #3
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014f8:	e00c      	b.n	8001514 <MX_GPIO_Init+0x30c>
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40020800 	.word	0x40020800
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40020400 	.word	0x40020400
 8001510:	40020000 	.word	0x40020000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4807      	ldr	r0, [pc, #28]	@ (8001538 <MX_GPIO_Init+0x330>)
 800151c:	f003 fc5e 	bl	8004ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2009      	movs	r0, #9
 8001526:	f002 ffd2 	bl	80044ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800152a:	2009      	movs	r0, #9
 800152c:	f002 ffeb 	bl	8004506 <HAL_NVIC_EnableIRQ>

}
 8001530:	bf00      	nop
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000

0800153c <input_filter_init>:
 */


#include "input_filter.h"

void input_filter_init(input_filter_t* filter, float alpha)	{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	ed87 0a00 	vstr	s0, [r7]
	input_filter_set_alpha(filter, alpha);
 8001548:	ed97 0a00 	vldr	s0, [r7]
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f808 	bl	8001562 <input_filter_set_alpha>
	filter->output = 0.0f;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <input_filter_set_alpha>:

void input_filter_set_alpha(input_filter_t* filter, float alpha)	{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	ed87 0a00 	vstr	s0, [r7]
	if(alpha > 1.0f){
 800156e:	edd7 7a00 	vldr	s15, [r7]
 8001572:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	dd03      	ble.n	8001588 <input_filter_set_alpha+0x26>
		alpha = 1.0f;
 8001580:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	e009      	b.n	800159c <input_filter_set_alpha+0x3a>
	}
	else if (alpha < 0.0f){
 8001588:	edd7 7a00 	vldr	s15, [r7]
 800158c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	d502      	bpl.n	800159c <input_filter_set_alpha+0x3a>
		alpha = 0.0f;
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
	}
	filter->alpha = alpha;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <input_filter_update>:

float input_filter_update(input_filter_t* filter, float input)	{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	ed87 0a00 	vstr	s0, [r7]
	filter->output = filter->alpha * input + (1.0f - filter->alpha) * filter->output;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a00 	vldr	s15, [r7]
 80015c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80015dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	edc3 7a01 	vstr	s15, [r3, #4]
	return filter->output;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	ee07 3a90 	vmov	s15, r3
}
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	f5ad 6db3 	sub.w	sp, sp, #1432	@ 0x598
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800160a:	f002 f8bf 	bl	800378c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160e:	f000 fa4d 	bl	8001aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001612:	f7ff fdf9 	bl	8001208 <MX_GPIO_Init>
  MX_DMA_Init();
 8001616:	f7ff fcc9 	bl	8000fac <MX_DMA_Init>
  MX_ADC1_Init();
 800161a:	f7fe ffbf 	bl	800059c <MX_ADC1_Init>
  MX_SPI1_Init();
 800161e:	f000 ff4b 	bl	80024b8 <MX_SPI1_Init>
  MX_TIM8_Init();
 8001622:	f001 f9d5 	bl	80029d0 <MX_TIM8_Init>
  MX_TIM4_Init();
 8001626:	f001 f947 	bl	80028b8 <MX_TIM4_Init>
  MX_TIM3_Init();
 800162a:	f001 f8f7 	bl	800281c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800162e:	f001 fd91 	bl	8003154 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8001632:	f7ff fc85 	bl	8000f40 <MX_CRC_Init>
  MX_UART4_Init();
 8001636:	f001 fd63 	bl	8003100 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800163a:	f001 ff0f 	bl	800345c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, NUM_ADC_CHANNEL);
 800163e:	2202      	movs	r2, #2
 8001640:	49c5      	ldr	r1, [pc, #788]	@ (8001958 <main+0x358>)
 8001642:	48c6      	ldr	r0, [pc, #792]	@ (800195c <main+0x35c>)
 8001644:	f002 fa8c 	bl	8003b60 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim8);
 8001648:	48c5      	ldr	r0, [pc, #788]	@ (8001960 <main+0x360>)
 800164a:	f006 fbd9 	bl	8007e00 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 800164e:	48c5      	ldr	r0, [pc, #788]	@ (8001964 <main+0x364>)
 8001650:	f006 fbd6 	bl	8007e00 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001654:	2100      	movs	r1, #0
 8001656:	48c4      	ldr	r0, [pc, #784]	@ (8001968 <main+0x368>)
 8001658:	f006 fc94 	bl	8007f84 <HAL_TIM_PWM_Start>
  MX_USB_DEVICE_Init();
 800165c:	f00a f91e 	bl	800b89c <MX_USB_DEVICE_Init>
  init_flash();
 8001660:	f000 fad6 	bl	8001c10 <init_flash>
  init_cyclic_input();
 8001664:	f000 fadc 	bl	8001c20 <init_cyclic_input>
  init_steppers();
 8001668:	f000 fa8a 	bl	8001b80 <init_steppers>
  uart_handle_t uart4;
  uart_handle_t uart3;
  uart_init(&uart4, &huart4);
 800166c:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001670:	49be      	ldr	r1, [pc, #760]	@ (800196c <main+0x36c>)
 8001672:	4618      	mov	r0, r3
 8001674:	f001 fae6 	bl	8002c44 <uart_init>
  uart_init(&uart3, &huart3);
 8001678:	f507 73e8 	add.w	r3, r7, #464	@ 0x1d0
 800167c:	49bc      	ldr	r1, [pc, #752]	@ (8001970 <main+0x370>)
 800167e:	4618      	mov	r0, r3
 8001680:	f001 fae0 	bl	8002c44 <uart_init>
  com_packet_t packet;
  com_packet_init(&packet, &hcrc);
 8001684:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001688:	49ba      	ldr	r1, [pc, #744]	@ (8001974 <main+0x374>)
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff fa98 	bl	8000bc0 <com_packet_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint64_t usb_timer = HAL_GetTick();
 8001690:	f002 f8e2 	bl	8003858 <HAL_GetTick>
 8001694:	4603      	mov	r3, r0
 8001696:	2200      	movs	r2, #0
 8001698:	461c      	mov	r4, r3
 800169a:	4615      	mov	r5, r2
 800169c:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 80016a0:	e9c3 4500 	strd	r4, r5, [r3]
  uint64_t uart_timer = HAL_GetTick();
 80016a4:	f002 f8d8 	bl	8003858 <HAL_GetTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2200      	movs	r2, #0
 80016ac:	4698      	mov	r8, r3
 80016ae:	4691      	mov	r9, r2
 80016b0:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80016b4:	e9c3 8900 	strd	r8, r9, [r3]
  uint32_t usb_interval_ms = 5;
 80016b8:	2305      	movs	r3, #5
 80016ba:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
  uint32_t packet_count =0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584

  bool ack_received = false;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
  uint32_t retx_count = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(IRQ_Calibrate_Flag){
 80016d0:	4ba9      	ldr	r3, [pc, #676]	@ (8001978 <main+0x378>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <main+0xdc>
		  calibration_routine();
 80016d8:	f000 fb86 	bl	8001de8 <calibration_routine>
	  }
	  update_cyclic_input();
 80016dc:	f000 fad0 	bl	8001c80 <update_cyclic_input>

	  // Check if CDR is pressed and release stepper motors if it is
	  if(CDR_BIT(cyclic_report.buttons))	{
 80016e0:	4ba6      	ldr	r3, [pc, #664]	@ (800197c <main+0x37c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da06      	bge.n	80016f8 <main+0xf8>
		  stepper_disable(&pitch_motor);
 80016ea:	48a5      	ldr	r0, [pc, #660]	@ (8001980 <main+0x380>)
 80016ec:	f000 ff7b 	bl	80025e6 <stepper_disable>
		  stepper_disable(&roll_motor);
 80016f0:	48a4      	ldr	r0, [pc, #656]	@ (8001984 <main+0x384>)
 80016f2:	f000 ff78 	bl	80025e6 <stepper_disable>
 80016f6:	e005      	b.n	8001704 <main+0x104>
	  }
	  else	{
		  stepper_enable(&pitch_motor);
 80016f8:	48a1      	ldr	r0, [pc, #644]	@ (8001980 <main+0x380>)
 80016fa:	f000 ff63 	bl	80025c4 <stepper_enable>
		  stepper_enable(&roll_motor);
 80016fe:	48a1      	ldr	r0, [pc, #644]	@ (8001984 <main+0x384>)
 8001700:	f000 ff60 	bl	80025c4 <stepper_enable>
	  }


	  if(HAL_GetTick()-usb_timer >= usb_interval_ms )	{
 8001704:	f002 f8a8 	bl	8003858 <HAL_GetTick>
 8001708:	4603      	mov	r3, r0
 800170a:	2200      	movs	r2, #0
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800170e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001710:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800171c:	4621      	mov	r1, r4
 800171e:	ebb1 0a02 	subs.w	sl, r1, r2
 8001722:	4629      	mov	r1, r5
 8001724:	eb61 0b03 	sbc.w	fp, r1, r3
 8001728:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 800172c:	2200      	movs	r2, #0
 800172e:	623b      	str	r3, [r7, #32]
 8001730:	627a      	str	r2, [r7, #36]	@ 0x24
 8001732:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001736:	460b      	mov	r3, r1
 8001738:	459a      	cmp	sl, r3
 800173a:	4613      	mov	r3, r2
 800173c:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001740:	d374      	bcc.n	800182c <main+0x22c>
		  uint8_t temp_buffer[6] = {0x01, cyclic_report.buttons,cyclic_report.roll, cyclic_report.roll >> 8,cyclic_report.pitch, cyclic_report.pitch >> 8};
 8001742:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001746:	f2a3 525c 	subw	r2, r3, #1372	@ 0x55c
 800174a:	2301      	movs	r3, #1
 800174c:	7013      	strb	r3, [r2, #0]
 800174e:	4b8b      	ldr	r3, [pc, #556]	@ (800197c <main+0x37c>)
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001756:	f2a3 525c 	subw	r2, r3, #1372	@ 0x55c
 800175a:	460b      	mov	r3, r1
 800175c:	7053      	strb	r3, [r2, #1]
 800175e:	4b87      	ldr	r3, [pc, #540]	@ (800197c <main+0x37c>)
 8001760:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001764:	b2d9      	uxtb	r1, r3
 8001766:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 800176a:	f2a3 525c 	subw	r2, r3, #1372	@ 0x55c
 800176e:	460b      	mov	r3, r1
 8001770:	7093      	strb	r3, [r2, #2]
 8001772:	4b82      	ldr	r3, [pc, #520]	@ (800197c <main+0x37c>)
 8001774:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001778:	121b      	asrs	r3, r3, #8
 800177a:	b21b      	sxth	r3, r3
 800177c:	b2d9      	uxtb	r1, r3
 800177e:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001782:	f2a3 525c 	subw	r2, r3, #1372	@ 0x55c
 8001786:	460b      	mov	r3, r1
 8001788:	70d3      	strb	r3, [r2, #3]
 800178a:	4b7c      	ldr	r3, [pc, #496]	@ (800197c <main+0x37c>)
 800178c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001790:	b2d9      	uxtb	r1, r3
 8001792:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001796:	f2a3 525c 	subw	r2, r3, #1372	@ 0x55c
 800179a:	460b      	mov	r3, r1
 800179c:	7113      	strb	r3, [r2, #4]
 800179e:	4b77      	ldr	r3, [pc, #476]	@ (800197c <main+0x37c>)
 80017a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017a4:	121b      	asrs	r3, r3, #8
 80017a6:	b21b      	sxth	r3, r3
 80017a8:	b2d9      	uxtb	r1, r3
 80017aa:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017ae:	f2a3 525c 	subw	r2, r3, #1372	@ 0x55c
 80017b2:	460b      	mov	r3, r1
 80017b4:	7153      	strb	r3, [r2, #5]
		  uint8_t otherbuffer[7] = {0x02,0xDE,0xAD,0xC0,0xDE,0xDE,0xAD};
 80017b6:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 80017ba:	f2a3 5364 	subw	r3, r3, #1380	@ 0x564
 80017be:	4972      	ldr	r1, [pc, #456]	@ (8001988 <main+0x388>)
 80017c0:	461a      	mov	r2, r3
 80017c2:	460b      	mov	r3, r1
 80017c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017c8:	6010      	str	r0, [r2, #0]
 80017ca:	3204      	adds	r2, #4
 80017cc:	8011      	strh	r1, [r2, #0]
 80017ce:	3202      	adds	r2, #2
 80017d0:	0c0b      	lsrs	r3, r1, #16
 80017d2:	7013      	strb	r3, [r2, #0]
		 uint8_t status =  USBD_CUSTOM_HID_SendReport(&hUsbDevice, temp_buffer, sizeof(temp_buffer));
 80017d4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017d8:	2206      	movs	r2, #6
 80017da:	4619      	mov	r1, r3
 80017dc:	486b      	ldr	r0, [pc, #428]	@ (800198c <main+0x38c>)
 80017de:	f00a fe5d 	bl	800c49c <USBD_CUSTOM_HID_SendReport>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 3577 	strb.w	r3, [r7, #1399]	@ 0x577
		 if(status == USBD_FAIL || status == USBD_BUSY)	{
 80017e8:	f897 3577 	ldrb.w	r3, [r7, #1399]	@ 0x577
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d003      	beq.n	80017f8 <main+0x1f8>
 80017f0:	f897 3577 	ldrb.w	r3, [r7, #1399]	@ 0x577
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <main+0x206>
			 USBD_CUSTOM_HID_SendReport(&hUsbDevice, temp_buffer, sizeof(temp_buffer));
 80017f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017fc:	2206      	movs	r2, #6
 80017fe:	4619      	mov	r1, r3
 8001800:	4862      	ldr	r0, [pc, #392]	@ (800198c <main+0x38c>)
 8001802:	f00a fe4b 	bl	800c49c <USBD_CUSTOM_HID_SendReport>
		 }
		 USBD_CUSTOM_HID2_SendReport(&hUsbDevice, otherbuffer, sizeof(otherbuffer));
 8001806:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800180a:	2207      	movs	r2, #7
 800180c:	4619      	mov	r1, r3
 800180e:	485f      	ldr	r0, [pc, #380]	@ (800198c <main+0x38c>)
 8001810:	f00b f958 	bl	800cac4 <USBD_CUSTOM_HID2_SendReport>
		  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)&cyclic_report, cyclic_report.size);
          usb_timer = HAL_GetTick();
 8001814:	f002 f820 	bl	8003858 <HAL_GetTick>
 8001818:	4603      	mov	r3, r0
 800181a:	2200      	movs	r2, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	60fa      	str	r2, [r7, #12]
 8001820:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 8001824:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001828:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  if(uart_update(&uart4) == UART_RX_FAIL)	{
 800182c:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001830:	4618      	mov	r0, r3
 8001832:	f001 faa7 	bl	8002d84 <uart_update>
 8001836:	4603      	mov	r3, r0
 8001838:	2b04      	cmp	r3, #4
 800183a:	d04e      	beq.n	80018da <main+0x2da>
	  		  // handle rx failure
	  }
	  else if(uart4.unread_bytes > 0)	{
 800183c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8001840:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001844:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d046      	beq.n	80018da <main+0x2da>
		   memset(temp,'\0', RX_BUFFER_SIZE);
 800184c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001850:	2280      	movs	r2, #128	@ 0x80
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00c fedd 	bl	800e614 <memset>
		   uint32_t bytes_read =  fifo_peek_continuous(&uart4.rx_fifo, temp, uart4.unread_bytes);
 800185a:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 800185e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8001862:	f8d3 21c4 	ldr.w	r2, [r3, #452]	@ 0x1c4
 8001866:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 800186a:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 800186e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fc62 	bl	800113c <fifo_peek_continuous>
 8001878:	f8c7 0570 	str.w	r0, [r7, #1392]	@ 0x570
		   //uint32_t bytes_read = uart_read(&uart4,temp,RX_BUFFER_SIZE);

		   packet_type_t packet_type = com_packet_parse(&packet,temp,bytes_read);
 800187c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001880:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001884:	f8d7 2570 	ldr.w	r2, [r7, #1392]	@ 0x570
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fa53 	bl	8000d34 <com_packet_parse>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 356f 	strb.w	r3, [r7, #1391]	@ 0x56f
		   if(packet_type != COM_PACKET_FALSE)	{
 8001894:	f897 356f 	ldrb.w	r3, [r7, #1391]	@ 0x56f
 8001898:	2b04      	cmp	r3, #4
 800189a:	d01e      	beq.n	80018da <main+0x2da>
			   switch(packet_type)	{
 800189c:	f897 356f 	ldrb.w	r3, [r7, #1391]	@ 0x56f
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d00c      	beq.n	80018be <main+0x2be>
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	dc0c      	bgt.n	80018c2 <main+0x2c2>
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d00c      	beq.n	80018c6 <main+0x2c6>
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d108      	bne.n	80018c2 <main+0x2c2>
				   case COM_PACKET_ACK:
					   ack_received = true;
 80018b0:	2301      	movs	r3, #1
 80018b2:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
					   retx_count = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
					   break;
 80018bc:	e004      	b.n	80018c8 <main+0x2c8>
				   case COM_PACKET_NACK:
					   break;
 80018be:	bf00      	nop
 80018c0:	e002      	b.n	80018c8 <main+0x2c8>
				   case COM_PACKET_CMD:
					   break;
				   default:
					   break;
 80018c2:	bf00      	nop
 80018c4:	e000      	b.n	80018c8 <main+0x2c8>
					   break;
 80018c6:	bf00      	nop
			   }
			   fifo_push_read_index(&uart4.rx_fifo, bytes_read);
 80018c8:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 80018cc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80018d0:	f8d7 1570 	ldr.w	r1, [r7, #1392]	@ 0x570
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fc67 	bl	80011a8 <fifo_push_read_index>
		   }

	  }
	  if (ack_received){// && HAL_GetTick() - uart_timer >= 2){
 80018da:	f897 3583 	ldrb.w	r3, [r7, #1411]	@ 0x583
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d058      	beq.n	8001994 <main+0x394>

		  uint32_t bytes_read = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
		  memset(temp,'\0', RX_BUFFER_SIZE);
 80018e8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80018ec:	2280      	movs	r2, #128	@ 0x80
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00c fe8f 	bl	800e614 <memset>
		  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 80018f6:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80018fa:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 80018fe:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <main+0x390>)
 8001900:	2180      	movs	r1, #128	@ 0x80
 8001902:	f00c fe51 	bl	800e5a8 <sniprintf>
 8001906:	4603      	mov	r3, r0
 8001908:	f8c7 3560 	str.w	r3, [r7, #1376]	@ 0x560
		  com_packet_create(&packet, temp, bytes_read);
 800190c:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001910:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001914:	f8d7 2560 	ldr.w	r2, [r7, #1376]	@ 0x560
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f99b 	bl	8000c54 <com_packet_create>
		  (void)uart_write_packet(&uart4, &packet);
 800191e:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8001922:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fa4a 	bl	8002dc2 <uart_write_packet>
		  ack_received = false;
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
		  packet_count++;
 8001934:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001938:	3301      	adds	r3, #1
 800193a:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
          uart_timer = HAL_GetTick();
 800193e:	f001 ff8b 	bl	8003858 <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	2200      	movs	r2, #0
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	f507 62b1 	add.w	r2, r7, #1416	@ 0x588
 800194e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001952:	e9c2 3400 	strd	r3, r4, [r2]
 8001956:	e6bb      	b.n	80016d0 <main+0xd0>
 8001958:	20000408 	.word	0x20000408
 800195c:	20000354 	.word	0x20000354
 8001960:	20000584 	.word	0x20000584
 8001964:	200004f4 	.word	0x200004f4
 8001968:	2000053c 	.word	0x2000053c
 800196c:	200005f0 	.word	0x200005f0
 8001970:	20000638 	.word	0x20000638
 8001974:	20000400 	.word	0x20000400
 8001978:	2000040c 	.word	0x2000040c
 800197c:	20000410 	.word	0x20000410
 8001980:	20000448 	.word	0x20000448
 8001984:	20000468 	.word	0x20000468
 8001988:	0800ef3c 	.word	0x0800ef3c
 800198c:	20000ce8 	.word	0x20000ce8
 8001990:	0800ef28 	.word	0x0800ef28

	  }
	  else if(ack_received == false && HAL_GetTick() - uart_timer >= 150)	{
 8001994:	f897 3583 	ldrb.w	r3, [r7, #1411]	@ 0x583
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d051      	beq.n	8001a46 <main+0x446>
 80019a2:	f001 ff59 	bl	8003858 <HAL_GetTick>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2200      	movs	r2, #0
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	61fa      	str	r2, [r7, #28]
 80019ae:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80019ba:	4621      	mov	r1, r4
 80019bc:	1a89      	subs	r1, r1, r2
 80019be:	6139      	str	r1, [r7, #16]
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb61 0303 	sbc.w	r3, r1, r3
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80019cc:	460b      	mov	r3, r1
 80019ce:	2b96      	cmp	r3, #150	@ 0x96
 80019d0:	4613      	mov	r3, r2
 80019d2:	f173 0300 	sbcs.w	r3, r3, #0
 80019d6:	d336      	bcc.n	8001a46 <main+0x446>
		  if(retx_count < 3)	{
 80019d8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d82b      	bhi.n	8001a38 <main+0x438>

			  uint32_t bytes_read = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
		  	  memset(temp,'\0', RX_BUFFER_SIZE);
 80019e6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00c fe10 	bl	800e614 <memset>
		  	  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 80019f4:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 80019f8:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 80019fc:	4a2a      	ldr	r2, [pc, #168]	@ (8001aa8 <main+0x4a8>)
 80019fe:	2180      	movs	r1, #128	@ 0x80
 8001a00:	f00c fdd2 	bl	800e5a8 <sniprintf>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f8c7 3568 	str.w	r3, [r7, #1384]	@ 0x568
		  	  com_packet_create(&packet, temp, bytes_read);
 8001a0a:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001a0e:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001a12:	f8d7 2568 	ldr.w	r2, [r7, #1384]	@ 0x568
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f91c 	bl	8000c54 <com_packet_create>
		  	  (void)uart_write_packet(&uart4, &packet);
 8001a1c:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8001a20:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f001 f9cb 	bl	8002dc2 <uart_write_packet>
		  	  retx_count++;
 8001a2c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
 8001a30:	3301      	adds	r3, #1
 8001a32:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
		  if(retx_count < 3)	{
 8001a36:	e036      	b.n	8001aa6 <main+0x4a6>
		  }
		  else	{
			  retx_count = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
			  ack_received = true;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f887 3583 	strb.w	r3, [r7, #1411]	@ 0x583
		  if(retx_count < 3)	{
 8001a44:	e02f      	b.n	8001aa6 <main+0x4a6>
		  }
	  }
	  else if(packet_count ==0)	{
 8001a46:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f47f ae40 	bne.w	80016d0 <main+0xd0>
		  uint32_t bytes_read = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
          memset(temp,'\0', RX_BUFFER_SIZE);
 8001a56:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f00c fdd8 	bl	800e614 <memset>
		  bytes_read = (uint32_t)snprintf((char*)temp, RX_BUFFER_SIZE, "Packets sent: %lu", packet_count);
 8001a64:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001a68:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa8 <main+0x4a8>)
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	f00c fd9a 	bl	800e5a8 <sniprintf>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
		  packet_count++;
 8001a7a:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8001a7e:	3301      	adds	r3, #1
 8001a80:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
		  com_packet_create(&packet, temp, bytes_read);
 8001a84:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001a88:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001a8c:	f8d7 2564 	ldr.w	r2, [r7, #1380]	@ 0x564
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f8df 	bl	8000c54 <com_packet_create>
		  (void)uart_write_packet(&uart4, &packet);
 8001a96:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8001a9a:	f507 7366 	add.w	r3, r7, #920	@ 0x398
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 f98e 	bl	8002dc2 <uart_write_packet>
	  if(IRQ_Calibrate_Flag){
 8001aa6:	e613      	b.n	80016d0 <main+0xd0>
 8001aa8:	0800ef28 	.word	0x0800ef28

08001aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b094      	sub	sp, #80	@ 0x50
 8001ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ab2:	f107 0320 	add.w	r3, r7, #32
 8001ab6:	2230      	movs	r2, #48	@ 0x30
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f00c fdaa 	bl	800e614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <SystemClock_Config+0xcc>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <SystemClock_Config+0xcc>)
 8001ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ade:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <SystemClock_Config+0xcc>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	4b22      	ldr	r3, [pc, #136]	@ (8001b7c <SystemClock_Config+0xd0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <SystemClock_Config+0xd0>)
 8001af6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b7c <SystemClock_Config+0xd0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b12:	2302      	movs	r3, #2
 8001b14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b20:	23a8      	movs	r3, #168	@ 0xa8
 8001b22:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b24:	2302      	movs	r3, #2
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fd8d 	bl	8006650 <HAL_RCC_OscConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b3c:	f000 fcb6 	bl	80024ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b40:	230f      	movs	r3, #15
 8001b42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b44:	2302      	movs	r3, #2
 8001b46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b4c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b56:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2105      	movs	r1, #5
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f004 ffee 	bl	8006b40 <HAL_RCC_ClockConfig>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b6a:	f000 fc9f 	bl	80024ac <Error_Handler>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	3750      	adds	r7, #80	@ 0x50
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000

08001b80 <init_steppers>:

/* USER CODE BEGIN 4 */
void init_steppers(void)	{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

	  pitch_motor.en_gpio_port = PITCH_STEP_EN_GPIO_Port;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <init_steppers+0x7c>)
 8001b86:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <init_steppers+0x80>)
 8001b88:	601a      	str	r2, [r3, #0]
	  pitch_motor.en_gpio_pin = PITCH_STEP_EN_Pin;
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bfc <init_steppers+0x7c>)
 8001b8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b90:	605a      	str	r2, [r3, #4]
	  pitch_motor.dir_gpio_port = PITCH_STEP_DIR_GPIO_Port;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <init_steppers+0x7c>)
 8001b94:	4a1a      	ldr	r2, [pc, #104]	@ (8001c00 <init_steppers+0x80>)
 8001b96:	609a      	str	r2, [r3, #8]
	  pitch_motor.dir_gpio_pin = PITCH_STEP_DIR_Pin;
 8001b98:	4b18      	ldr	r3, [pc, #96]	@ (8001bfc <init_steppers+0x7c>)
 8001b9a:	2280      	movs	r2, #128	@ 0x80
 8001b9c:	60da      	str	r2, [r3, #12]
	  pitch_motor.pul_gpio_port = PITCH_STEP_PUL_GPIO_Port;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <init_steppers+0x7c>)
 8001ba0:	4a17      	ldr	r2, [pc, #92]	@ (8001c00 <init_steppers+0x80>)
 8001ba2:	611a      	str	r2, [r3, #16]
	  pitch_motor.pul_gpio_pin = PITCH_STEP_PUL_Pin;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	@ (8001bfc <init_steppers+0x7c>)
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	615a      	str	r2, [r3, #20]
	  pitch_motor.timer = &htim8;
 8001baa:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <init_steppers+0x7c>)
 8001bac:	4a15      	ldr	r2, [pc, #84]	@ (8001c04 <init_steppers+0x84>)
 8001bae:	619a      	str	r2, [r3, #24]
	  pitch_motor.mode = MICROSTEP_16;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <init_steppers+0x7c>)
 8001bb2:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001bb6:	839a      	strh	r2, [r3, #28]

	  roll_motor.en_gpio_port = ROLL_STEP_EN_GPIO_Port;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <init_steppers+0x88>)
 8001bba:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <init_steppers+0x8c>)
 8001bbc:	601a      	str	r2, [r3, #0]
	  roll_motor.en_gpio_pin = ROLL_STEP_EN_Pin;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <init_steppers+0x88>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	605a      	str	r2, [r3, #4]
	  roll_motor.dir_gpio_port = ROLL_STEP_DIR_GPIO_Port;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <init_steppers+0x88>)
 8001bc6:	4a11      	ldr	r2, [pc, #68]	@ (8001c0c <init_steppers+0x8c>)
 8001bc8:	609a      	str	r2, [r3, #8]
	  roll_motor.dir_gpio_pin = ROLL_STEP_DIR_Pin;
 8001bca:	4b0f      	ldr	r3, [pc, #60]	@ (8001c08 <init_steppers+0x88>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	60da      	str	r2, [r3, #12]
	  roll_motor.pul_gpio_port = ROLL_STEP_PUL_GPIO_Port;
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <init_steppers+0x88>)
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c00 <init_steppers+0x80>)
 8001bd4:	611a      	str	r2, [r3, #16]
	  roll_motor.pul_gpio_pin = ROLL_STEP_PUL_Pin;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <init_steppers+0x88>)
 8001bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bdc:	615a      	str	r2, [r3, #20]
	  roll_motor.timer = &htim8;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <init_steppers+0x88>)
 8001be0:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <init_steppers+0x84>)
 8001be2:	619a      	str	r2, [r3, #24]
	  roll_motor.mode = MICROSTEP_16;
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <init_steppers+0x88>)
 8001be6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8001bea:	839a      	strh	r2, [r3, #28]

	  stepper_enable(&pitch_motor);
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <init_steppers+0x7c>)
 8001bee:	f000 fce9 	bl	80025c4 <stepper_enable>
	  stepper_enable(&roll_motor);
 8001bf2:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <init_steppers+0x88>)
 8001bf4:	f000 fce6 	bl	80025c4 <stepper_enable>
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000448 	.word	0x20000448
 8001c00:	40020400 	.word	0x40020400
 8001c04:	20000584 	.word	0x20000584
 8001c08:	20000468 	.word	0x20000468
 8001c0c:	40021000 	.word	0x40021000

08001c10 <init_flash>:

void init_flash(void)	{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

	  //volatile uint64_t id_value = w25q16_get_id(&flash_handle);
	  //volatile uint32_t jedec_id = w25q16_get_jedec_id(&flash_handle);

}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <init_cyclic_input>:

void init_cyclic_input(void)	{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	  axis_calibration_factors_t* axis_ptr[2] = {&pitch_calibrations, &roll_calibrations};
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <init_cyclic_input+0x4c>)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c2e:	e883 0003 	stmia.w	r3, {r0, r1}
	cyclic_report.buttons = 0;
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <init_cyclic_input+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
	  cyclic_report.size = sizeof(cyclic_report.buttons) + sizeof(cyclic_report.roll) + sizeof(cyclic_report.pitch);
 8001c38:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <init_cyclic_input+0x50>)
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	719a      	strb	r2, [r3, #6]
	  HAL_Delay(10); // Allow extra time for flash chip to come up, probably unnecessary but is for extra safe-ness
 8001c3e:	200a      	movs	r0, #10
 8001c40:	f001 fe16 	bl	8003870 <HAL_Delay>
	  load_calibrations(axis_ptr,2);
 8001c44:	463b      	mov	r3, r7
 8001c46:	2102      	movs	r1, #2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fafb 	bl	8002244 <load_calibrations>
	  input_filter_init(&roll_filter, ROLL_ALPHA);
 8001c4e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001c74 <init_cyclic_input+0x54>
 8001c52:	4809      	ldr	r0, [pc, #36]	@ (8001c78 <init_cyclic_input+0x58>)
 8001c54:	f7ff fc72 	bl	800153c <input_filter_init>
	  input_filter_init(&pitch_filter, PITCH_ALPHA);
 8001c58:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001c74 <init_cyclic_input+0x54>
 8001c5c:	4807      	ldr	r0, [pc, #28]	@ (8001c7c <init_cyclic_input+0x5c>)
 8001c5e:	f7ff fc6d 	bl	800153c <input_filter_init>
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	0800ef44 	.word	0x0800ef44
 8001c70:	20000410 	.word	0x20000410
 8001c74:	3e99999a 	.word	0x3e99999a
 8001c78:	20000488 	.word	0x20000488
 8001c7c:	20000490 	.word	0x20000490

08001c80 <update_cyclic_input>:

void update_cyclic_input(void)	{
 8001c80:	b598      	push	{r3, r4, r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	  cyclic_report.buttons = 0;
 8001c84:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <update_cyclic_input+0xc8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001c8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c8e:	482f      	ldr	r0, [pc, #188]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001c90:	f003 fa40 	bl	8005114 <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	b25c      	sxtb	r4, r3
			  	  	  	  	  (HAL_GPIO_ReadPin(CYC_ICS_SW_GPIO_Port, CYC_ICS_SW_Pin) << 1) |
 8001c98:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c9c:	482b      	ldr	r0, [pc, #172]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001c9e:	f003 fa39 	bl	8005114 <HAL_GPIO_ReadPin>
 8001ca2:	4603      	mov	r3, r0
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	4323      	orrs	r3, r4
 8001cac:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_CARGO_REL_GPIO_Port, CYC_CARGO_REL_Pin) << 2) |
 8001cae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cb2:	4826      	ldr	r0, [pc, #152]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001cb4:	f003 fa2e 	bl	8005114 <HAL_GPIO_ReadPin>
 8001cb8:	4603      	mov	r3, r0
			  	  	  	  	  (HAL_GPIO_ReadPin(CYC_ICS_SW_GPIO_Port, CYC_ICS_SW_Pin) << 1) |
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	4323      	orrs	r3, r4
 8001cc2:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_UP_GPIO_Port, CYC_HAT_UP_Pin) << 3) |
 8001cc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cc8:	4820      	ldr	r0, [pc, #128]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001cca:	f003 fa23 	bl	8005114 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_CARGO_REL_GPIO_Port, CYC_CARGO_REL_Pin) << 2) |
 8001cd0:	b25b      	sxtb	r3, r3
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	b25b      	sxtb	r3, r3
 8001cd6:	4323      	orrs	r3, r4
 8001cd8:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_DOWN_GPIO_Port, CYC_HAT_DOWN_Pin) << 4) |
 8001cda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cde:	481b      	ldr	r0, [pc, #108]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001ce0:	f003 fa18 	bl	8005114 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_UP_GPIO_Port, CYC_HAT_UP_Pin) << 3) |
 8001ce6:	b25b      	sxtb	r3, r3
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	4323      	orrs	r3, r4
 8001cee:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_RIGHT_GPIO_Port, CYC_HAT_RIGHT_Pin) << 5) |
 8001cf0:	2140      	movs	r1, #64	@ 0x40
 8001cf2:	4817      	ldr	r0, [pc, #92]	@ (8001d50 <update_cyclic_input+0xd0>)
 8001cf4:	f003 fa0e 	bl	8005114 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_DOWN_GPIO_Port, CYC_HAT_DOWN_Pin) << 4) |
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	4323      	orrs	r3, r4
 8001d02:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_HAT_LEFT_GPIO_Port, CYC_HAT_LEFT_Pin) << 6) |
 8001d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d08:	4810      	ldr	r0, [pc, #64]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001d0a:	f003 fa03 	bl	8005114 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_RIGHT_GPIO_Port, CYC_HAT_RIGHT_Pin) << 5) |
 8001d10:	b25b      	sxtb	r3, r3
 8001d12:	019b      	lsls	r3, r3, #6
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b25c      	sxtb	r4, r3
							  (HAL_GPIO_ReadPin(CYC_CDR_REL_GPIO_Port, CYC_CDR_REL_Pin) << 7);
 8001d1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d1e:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <update_cyclic_input+0xcc>)
 8001d20:	f003 f9f8 	bl	8005114 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
							  (HAL_GPIO_ReadPin(CYC_HAT_LEFT_GPIO_Port, CYC_HAT_LEFT_Pin) << 6) |
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	01db      	lsls	r3, r3, #7
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	4323      	orrs	r3, r4
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	b2da      	uxtb	r2, r3
	  cyclic_report.buttons = (HAL_GPIO_ReadPin(CYC_AP_REL_GPIO_Port, CYC_AP_REL_Pin)) |
 8001d32:	4b05      	ldr	r3, [pc, #20]	@ (8001d48 <update_cyclic_input+0xc8>)
 8001d34:	701a      	strb	r2, [r3, #0]

	  cyclic_report.buttons = (cyclic_report.buttons ^ CYCLIC_BUTTON_MASK);
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <update_cyclic_input+0xc8>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b01      	ldr	r3, [pc, #4]	@ (8001d48 <update_cyclic_input+0xc8>)
 8001d42:	701a      	strb	r2, [r3, #0]
}
 8001d44:	bf00      	nop
 8001d46:	bd98      	pop	{r3, r4, r7, pc}
 8001d48:	20000410 	.word	0x20000410
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40020800 	.word	0x40020800

08001d54 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	cyclic_report.roll = input_filter_update(&roll_filter, (float) apply_calibration(&roll_calibrations,adc_buffer[0]));
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4619      	mov	r1, r3
 8001d66:	481b      	ldr	r0, [pc, #108]	@ (8001dd4 <HAL_ADC_ConvCpltCallback+0x80>)
 8001d68:	f7fe fd9a 	bl	80008a0 <apply_calibration>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7a:	4817      	ldr	r0, [pc, #92]	@ (8001dd8 <HAL_ADC_ConvCpltCallback+0x84>)
 8001d7c:	f7ff fc17 	bl	80015ae <input_filter_update>
 8001d80:	eef0 7a40 	vmov.f32	s15, s0
 8001d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d88:	ee17 3a90 	vmov	r3, s15
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_ADC_ConvCpltCallback+0x88>)
 8001d90:	805a      	strh	r2, [r3, #2]
	cyclic_report.pitch = input_filter_update(&pitch_filter, (float) apply_calibration(&pitch_calibrations, adc_buffer[1]));
 8001d92:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001d94:	885b      	ldrh	r3, [r3, #2]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4810      	ldr	r0, [pc, #64]	@ (8001de0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001d9e:	f7fe fd7f 	bl	80008a0 <apply_calibration>
 8001da2:	4603      	mov	r3, r0
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	eeb0 0a67 	vmov.f32	s0, s15
 8001db0:	480c      	ldr	r0, [pc, #48]	@ (8001de4 <HAL_ADC_ConvCpltCallback+0x90>)
 8001db2:	f7ff fbfc 	bl	80015ae <input_filter_update>
 8001db6:	eef0 7a40 	vmov.f32	s15, s0
 8001dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dbe:	ee17 3a90 	vmov	r3, s15
 8001dc2:	b21a      	sxth	r2, r3
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <HAL_ADC_ConvCpltCallback+0x88>)
 8001dc6:	809a      	strh	r2, [r3, #4]
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000408 	.word	0x20000408
 8001dd4:	20000418 	.word	0x20000418
 8001dd8:	20000488 	.word	0x20000488
 8001ddc:	20000410 	.word	0x20000410
 8001de0:	20000430 	.word	0x20000430
 8001de4:	20000490 	.word	0x20000490

08001de8 <calibration_routine>:

void calibration_routine(void)	{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b092      	sub	sp, #72	@ 0x48
 8001dee:	af00      	add	r7, sp, #0
	  axis_calibration_factors_t* axis_ptr[2] = {&pitch_calibrations, &roll_calibrations};
 8001df0:	4b57      	ldr	r3, [pc, #348]	@ (8001f50 <calibration_routine+0x168>)
 8001df2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001df6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001dfa:	e882 0003 	stmia.w	r2, {r0, r1}
	  calibrate_axis(&roll_calibrations, &adc_buffer[0]);
 8001dfe:	4955      	ldr	r1, [pc, #340]	@ (8001f54 <calibration_routine+0x16c>)
 8001e00:	4855      	ldr	r0, [pc, #340]	@ (8001f58 <calibration_routine+0x170>)
 8001e02:	f000 f8b3 	bl	8001f6c <calibrate_axis>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2120      	movs	r1, #32
 8001e0a:	4854      	ldr	r0, [pc, #336]	@ (8001f5c <calibration_routine+0x174>)
 8001e0c:	f003 f99a 	bl	8005144 <HAL_GPIO_WritePin>
	  calibrate_axis(&pitch_calibrations, &adc_buffer[1]);
 8001e10:	4953      	ldr	r1, [pc, #332]	@ (8001f60 <calibration_routine+0x178>)
 8001e12:	4854      	ldr	r0, [pc, #336]	@ (8001f64 <calibration_routine+0x17c>)
 8001e14:	f000 f8aa 	bl	8001f6c <calibrate_axis>
	  uint64_t time = HAL_GetTick();
 8001e18:	f001 fd1e 	bl	8003858 <HAL_GetTick>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	61fa      	str	r2, [r7, #28]
 8001e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e28:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2120      	movs	r1, #32
 8001e30:	484a      	ldr	r0, [pc, #296]	@ (8001f5c <calibration_routine+0x174>)
 8001e32:	f003 f987 	bl	8005144 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2110      	movs	r1, #16
 8001e3a:	4848      	ldr	r0, [pc, #288]	@ (8001f5c <calibration_routine+0x174>)
 8001e3c:	f003 f982 	bl	8005144 <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001e40:	bf00      	nop
 8001e42:	f001 fd09 	bl	8003858 <HAL_GetTick>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8001e4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e54:	1a8c      	subs	r4, r1, r2
 8001e56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e58:	eb61 0503 	sbc.w	r5, r1, r3
 8001e5c:	2c64      	cmp	r4, #100	@ 0x64
 8001e5e:	f175 0300 	sbcs.w	r3, r5, #0
 8001e62:	d3ee      	bcc.n	8001e42 <calibration_routine+0x5a>
	  time = HAL_GetTick();
 8001e64:	f001 fcf8 	bl	8003858 <HAL_GetTick>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	617a      	str	r2, [r7, #20]
 8001e70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e74:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	4837      	ldr	r0, [pc, #220]	@ (8001f5c <calibration_routine+0x174>)
 8001e7e:	f003 f961 	bl	8005144 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2110      	movs	r1, #16
 8001e86:	4835      	ldr	r0, [pc, #212]	@ (8001f5c <calibration_routine+0x174>)
 8001e88:	f003 f95c 	bl	8005144 <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001e8c:	bf00      	nop
 8001e8e:	f001 fce3 	bl	8003858 <HAL_GetTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2200      	movs	r2, #0
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e9e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001ea2:	4621      	mov	r1, r4
 8001ea4:	ebb1 0a02 	subs.w	sl, r1, r2
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	eb61 0b03 	sbc.w	fp, r1, r3
 8001eae:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8001eb2:	f17b 0300 	sbcs.w	r3, fp, #0
 8001eb6:	d3ea      	bcc.n	8001e8e <calibration_routine+0xa6>
	  time = HAL_GetTick();
 8001eb8:	f001 fcce 	bl	8003858 <HAL_GetTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	60fa      	str	r2, [r7, #12]
 8001ec4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ec8:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2120      	movs	r1, #32
 8001ed0:	4822      	ldr	r0, [pc, #136]	@ (8001f5c <calibration_routine+0x174>)
 8001ed2:	f003 f937 	bl	8005144 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2110      	movs	r1, #16
 8001eda:	4820      	ldr	r0, [pc, #128]	@ (8001f5c <calibration_routine+0x174>)
 8001edc:	f003 f932 	bl	8005144 <HAL_GPIO_WritePin>
	  while(HAL_GetTick() - time < 100){;;}
 8001ee0:	bf00      	nop
 8001ee2:	f001 fcb9 	bl	8003858 <HAL_GetTick>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2200      	movs	r2, #0
 8001eea:	623b      	str	r3, [r7, #32]
 8001eec:	627a      	str	r2, [r7, #36]	@ 0x24
 8001eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001ef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	ebb1 0802 	subs.w	r8, r1, r2
 8001efc:	4629      	mov	r1, r5
 8001efe:	eb61 0903 	sbc.w	r9, r1, r3
 8001f02:	f1b8 0f64 	cmp.w	r8, #100	@ 0x64
 8001f06:	f179 0300 	sbcs.w	r3, r9, #0
 8001f0a:	d3ea      	bcc.n	8001ee2 <calibration_routine+0xfa>
	  time = HAL_GetTick();
 8001f0c:	f001 fca4 	bl	8003858 <HAL_GetTick>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2200      	movs	r2, #0
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f1c:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2120      	movs	r1, #32
 8001f24:	480d      	ldr	r0, [pc, #52]	@ (8001f5c <calibration_routine+0x174>)
 8001f26:	f003 f90d 	bl	8005144 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	480b      	ldr	r0, [pc, #44]	@ (8001f5c <calibration_routine+0x174>)
 8001f30:	f003 f908 	bl	8005144 <HAL_GPIO_WritePin>

	  save_calibrations(axis_ptr, 2);
 8001f34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f9ee 	bl	800231c <save_calibrations>
	  IRQ_Calibrate_Flag = false;
 8001f40:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <calibration_routine+0x180>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

}
 8001f46:	bf00      	nop
 8001f48:	3748      	adds	r7, #72	@ 0x48
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f50:	0800ef44 	.word	0x0800ef44
 8001f54:	20000408 	.word	0x20000408
 8001f58:	20000418 	.word	0x20000418
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	2000040a 	.word	0x2000040a
 8001f64:	20000430 	.word	0x20000430
 8001f68:	2000040c 	.word	0x2000040c

08001f6c <calibrate_axis>:

void calibrate_axis(axis_calibration_factors_t* cal, volatile uint16_t* adc_buf)	{
 8001f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f70:	b0a8      	sub	sp, #160	@ 0xa0
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8001f78:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88

	clear_calibration(cal);
 8001f7c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001f80:	f7fe fd98 	bl	8000ab4 <clear_calibration>

	uint64_t time = HAL_GetTick();
 8001f84:	f001 fc68 	bl	8003858 <HAL_GetTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	469a      	mov	sl, r3
 8001f8e:	4693      	mov	fp, r2
 8001f90:	e9c7 ab26 	strd	sl, fp, [r7, #152]	@ 0x98
	while(HAL_GetTick()-time < 250)	{;;}
 8001f94:	bf00      	nop
 8001f96:	f001 fc5f 	bl	8003858 <HAL_GetTick>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	4691      	mov	r9, r2
 8001fa2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001fa6:	ebb8 0402 	subs.w	r4, r8, r2
 8001faa:	eb69 0503 	sbc.w	r5, r9, r3
 8001fae:	2cfa      	cmp	r4, #250	@ 0xfa
 8001fb0:	f175 0300 	sbcs.w	r3, r5, #0
 8001fb4:	d3ef      	bcc.n	8001f96 <calibrate_axis+0x2a>
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 8001fb6:	e02a      	b.n	800200e <calibrate_axis+0xa2>
		if(HAL_GetTick() - time > 500 ){
 8001fb8:	f001 fc4e 	bl	8003858 <HAL_GetTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fc4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001fc8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8001fcc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	1a89      	subs	r1, r1, r2
 8001fd4:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001fd6:	4629      	mov	r1, r5
 8001fd8:	eb61 0303 	sbc.w	r3, r1, r3
 8001fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001fde:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001fe2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	460b      	mov	r3, r1
 8001fec:	f173 0300 	sbcs.w	r3, r3, #0
 8001ff0:	d30d      	bcc.n	800200e <calibrate_axis+0xa2>
			HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	4891      	ldr	r0, [pc, #580]	@ (800223c <calibrate_axis+0x2d0>)
 8001ff6:	f003 f8be 	bl	8005176 <HAL_GPIO_TogglePin>
			time = HAL_GetTick();
 8001ffa:	f001 fc2d 	bl	8003858 <HAL_GetTick>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2200      	movs	r2, #0
 8002002:	613b      	str	r3, [r7, #16]
 8002004:	617a      	str	r2, [r7, #20]
 8002006:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800200a:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 800200e:	2104      	movs	r1, #4
 8002010:	488a      	ldr	r0, [pc, #552]	@ (800223c <calibrate_axis+0x2d0>)
 8002012:	f003 f87f 	bl	8005114 <HAL_GPIO_ReadPin>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1cd      	bne.n	8001fb8 <calibrate_axis+0x4c>
		}
	}

	int16_t val1 = (int16_t)adc_buf[0];
 800201c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	while(HAL_GetTick()-time < 50)	{;;}
 8002028:	bf00      	nop
 800202a:	f001 fc15 	bl	8003858 <HAL_GetTick>
 800202e:	4603      	mov	r3, r0
 8002030:	2200      	movs	r2, #0
 8002032:	673b      	str	r3, [r7, #112]	@ 0x70
 8002034:	677a      	str	r2, [r7, #116]	@ 0x74
 8002036:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800203a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800203e:	4621      	mov	r1, r4
 8002040:	1a89      	subs	r1, r1, r2
 8002042:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002044:	4629      	mov	r1, r5
 8002046:	eb61 0303 	sbc.w	r3, r1, r3
 800204a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800204c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8002050:	460b      	mov	r3, r1
 8002052:	2b32      	cmp	r3, #50	@ 0x32
 8002054:	4613      	mov	r3, r2
 8002056:	f173 0300 	sbcs.w	r3, r3, #0
 800205a:	d3e6      	bcc.n	800202a <calibrate_axis+0xbe>
	int16_t val2 = (int16_t)adc_buf[0];
 800205c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	while(HAL_GetTick()-time < 50)	{;;}
 8002068:	bf00      	nop
 800206a:	f001 fbf5 	bl	8003858 <HAL_GetTick>
 800206e:	4603      	mov	r3, r0
 8002070:	2200      	movs	r2, #0
 8002072:	663b      	str	r3, [r7, #96]	@ 0x60
 8002074:	667a      	str	r2, [r7, #100]	@ 0x64
 8002076:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800207a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800207e:	4621      	mov	r1, r4
 8002080:	1a89      	subs	r1, r1, r2
 8002082:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002084:	4629      	mov	r1, r5
 8002086:	eb61 0303 	sbc.w	r3, r1, r3
 800208a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800208c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002090:	460b      	mov	r3, r1
 8002092:	2b32      	cmp	r3, #50	@ 0x32
 8002094:	4613      	mov	r3, r2
 8002096:	f173 0300 	sbcs.w	r3, r3, #0
 800209a:	d3e6      	bcc.n	800206a <calibrate_axis+0xfe>
	int16_t val3 = (int16_t)adc_buf[0];
 800209c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	cal->physical_max = (val1+val2+val3)/3;
 80020a8:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 80020ac:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 80020b0:	441a      	add	r2, r3
 80020b2:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 80020b6:	18d1      	adds	r1, r2, r3
 80020b8:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <calibrate_axis+0x2d4>)
 80020ba:	fb83 3201 	smull	r3, r2, r3, r1
 80020be:	17cb      	asrs	r3, r1, #31
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80020c8:	8013      	strh	r3, [r2, #0]
	time = HAL_GetTick();
 80020ca:	f001 fbc5 	bl	8003858 <HAL_GetTick>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2200      	movs	r2, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	60fa      	str	r2, [r7, #12]
 80020d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80020da:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GetTick()-time < 250)	{;;}
 80020de:	bf00      	nop
 80020e0:	f001 fbba 	bl	8003858 <HAL_GetTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2200      	movs	r2, #0
 80020e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80020ea:	657a      	str	r2, [r7, #84]	@ 0x54
 80020ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80020f0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80020f4:	4621      	mov	r1, r4
 80020f6:	1a89      	subs	r1, r1, r2
 80020f8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80020fa:	4629      	mov	r1, r5
 80020fc:	eb61 0303 	sbc.w	r3, r1, r3
 8002100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002102:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8002106:	460b      	mov	r3, r1
 8002108:	2bfa      	cmp	r3, #250	@ 0xfa
 800210a:	4613      	mov	r3, r2
 800210c:	f173 0300 	sbcs.w	r3, r3, #0
 8002110:	d3e6      	bcc.n	80020e0 <calibrate_axis+0x174>
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 8002112:	e026      	b.n	8002162 <calibrate_axis+0x1f6>
			if(HAL_GetTick() - time > 150 ){
 8002114:	f001 fba0 	bl	8003858 <HAL_GetTick>
 8002118:	4603      	mov	r3, r0
 800211a:	2200      	movs	r2, #0
 800211c:	643b      	str	r3, [r7, #64]	@ 0x40
 800211e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002120:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002124:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002128:	4621      	mov	r1, r4
 800212a:	1a89      	subs	r1, r1, r2
 800212c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800212e:	4629      	mov	r1, r5
 8002130:	eb61 0303 	sbc.w	r3, r1, r3
 8002134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002136:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800213a:	460b      	mov	r3, r1
 800213c:	2b97      	cmp	r3, #151	@ 0x97
 800213e:	4613      	mov	r3, r2
 8002140:	f173 0300 	sbcs.w	r3, r3, #0
 8002144:	d30d      	bcc.n	8002162 <calibrate_axis+0x1f6>
				HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002146:	2110      	movs	r1, #16
 8002148:	483c      	ldr	r0, [pc, #240]	@ (800223c <calibrate_axis+0x2d0>)
 800214a:	f003 f814 	bl	8005176 <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 800214e:	f001 fb83 	bl	8003858 <HAL_GetTick>
 8002152:	4603      	mov	r3, r0
 8002154:	2200      	movs	r2, #0
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800215e:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
	while(HAL_GPIO_ReadPin(SW_OK_GPIO_Port, SW_OK_Pin))	{
 8002162:	2104      	movs	r1, #4
 8002164:	4835      	ldr	r0, [pc, #212]	@ (800223c <calibrate_axis+0x2d0>)
 8002166:	f002 ffd5 	bl	8005114 <HAL_GPIO_ReadPin>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1d1      	bne.n	8002114 <calibrate_axis+0x1a8>
			}
		}

	val1 = (int16_t)adc_buf[0];
 8002170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
	while(HAL_GetTick()-time < 50)	{;;}
 800217c:	bf00      	nop
 800217e:	f001 fb6b 	bl	8003858 <HAL_GetTick>
 8002182:	4603      	mov	r3, r0
 8002184:	2200      	movs	r2, #0
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
 8002188:	637a      	str	r2, [r7, #52]	@ 0x34
 800218a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800218e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002192:	4621      	mov	r1, r4
 8002194:	1a89      	subs	r1, r1, r2
 8002196:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002198:	4629      	mov	r1, r5
 800219a:	eb61 0303 	sbc.w	r3, r1, r3
 800219e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80021a4:	460b      	mov	r3, r1
 80021a6:	2b32      	cmp	r3, #50	@ 0x32
 80021a8:	4613      	mov	r3, r2
 80021aa:	f173 0300 	sbcs.w	r3, r3, #0
 80021ae:	d3e6      	bcc.n	800217e <calibrate_axis+0x212>
	val2 = (int16_t)adc_buf[0];
 80021b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	while(HAL_GetTick()-time < 50)	{;;}
 80021bc:	bf00      	nop
 80021be:	f001 fb4b 	bl	8003858 <HAL_GetTick>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2200      	movs	r2, #0
 80021c6:	623b      	str	r3, [r7, #32]
 80021c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80021ca:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80021ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021d2:	4621      	mov	r1, r4
 80021d4:	1a89      	subs	r1, r1, r2
 80021d6:	61b9      	str	r1, [r7, #24]
 80021d8:	4629      	mov	r1, r5
 80021da:	eb61 0303 	sbc.w	r3, r1, r3
 80021de:	61fb      	str	r3, [r7, #28]
 80021e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80021e4:	460b      	mov	r3, r1
 80021e6:	2b32      	cmp	r3, #50	@ 0x32
 80021e8:	4613      	mov	r3, r2
 80021ea:	f173 0300 	sbcs.w	r3, r3, #0
 80021ee:	d3e6      	bcc.n	80021be <calibrate_axis+0x252>
	val3 = (int16_t)adc_buf[0];
 80021f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

	cal->physical_min = (val1+val2+val3)/3;
 80021fc:	f9b7 2096 	ldrsh.w	r2, [r7, #150]	@ 0x96
 8002200:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8002204:	441a      	add	r2, r3
 8002206:	f9b7 3092 	ldrsh.w	r3, [r7, #146]	@ 0x92
 800220a:	4413      	add	r3, r2
 800220c:	4a0c      	ldr	r2, [pc, #48]	@ (8002240 <calibrate_axis+0x2d4>)
 800220e:	fb82 1203 	smull	r1, r2, r2, r3
 8002212:	17db      	asrs	r3, r3, #31
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	b21a      	sxth	r2, r3
 8002218:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800221c:	805a      	strh	r2, [r3, #2]

	recalculate_calibration(cal);
 800221e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8002222:	f7fe fc64 	bl	8000aee <recalculate_calibration>
	HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2110      	movs	r1, #16
 800222a:	4804      	ldr	r0, [pc, #16]	@ (800223c <calibrate_axis+0x2d0>)
 800222c:	f002 ff8a 	bl	8005144 <HAL_GPIO_WritePin>
}
 8002230:	bf00      	nop
 8002232:	37a0      	adds	r7, #160	@ 0xa0
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	55555556 	.word	0x55555556

08002244 <load_calibrations>:

void load_calibrations(axis_calibration_factors_t* cal[], uint8_t calibration_count)	{
 8002244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	460b      	mov	r3, r1
 8002250:	70fb      	strb	r3, [r7, #3]
 8002252:	466b      	mov	r3, sp
 8002254:	461e      	mov	r6, r3
	uint8_t buffer_size = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i < calibration_count; i++)	{
 800225a:	2300      	movs	r3, #0
 800225c:	75bb      	strb	r3, [r7, #22]
 800225e:	e005      	b.n	800226c <load_calibrations+0x28>
		buffer_size += CALIBRATION_FACTOR_SIZE;
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	3313      	adds	r3, #19
 8002264:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i < calibration_count; i++)	{
 8002266:	7dbb      	ldrb	r3, [r7, #22]
 8002268:	3301      	adds	r3, #1
 800226a:	75bb      	strb	r3, [r7, #22]
 800226c:	7dba      	ldrb	r2, [r7, #22]
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	429a      	cmp	r2, r3
 8002272:	d3f5      	bcc.n	8002260 <load_calibrations+0x1c>
	}
	uint8_t size_offset = buffer_size / calibration_count;
 8002274:	7dfa      	ldrb	r2, [r7, #23]
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	753b      	strb	r3, [r7, #20]
	uint8_t data_buffer[buffer_size];
 800227e:	7df9      	ldrb	r1, [r7, #23]
 8002280:	460b      	mov	r3, r1
 8002282:	3b01      	subs	r3, #1
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	b2cb      	uxtb	r3, r1
 8002288:	2200      	movs	r2, #0
 800228a:	4698      	mov	r8, r3
 800228c:	4691      	mov	r9, r2
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800229a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800229e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022a2:	b2cb      	uxtb	r3, r1
 80022a4:	2200      	movs	r2, #0
 80022a6:	461c      	mov	r4, r3
 80022a8:	4615      	mov	r5, r2
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	00eb      	lsls	r3, r5, #3
 80022b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b8:	00e2      	lsls	r2, r4, #3
 80022ba:	460b      	mov	r3, r1
 80022bc:	3307      	adds	r3, #7
 80022be:	08db      	lsrs	r3, r3, #3
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	ebad 0d03 	sub.w	sp, sp, r3
 80022c6:	466b      	mov	r3, sp
 80022c8:	3300      	adds	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]

	w25q16_read(&flash_handle, FLASH_CALIBRATION_ADDRESS, data_buffer, buffer_size);
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 80022d4:	4810      	ldr	r0, [pc, #64]	@ (8002318 <load_calibrations+0xd4>)
 80022d6:	f001 f965 	bl	80035a4 <w25q16_read>
	for(uint8_t i=0; i< calibration_count; i++){
 80022da:	2300      	movs	r3, #0
 80022dc:	757b      	strb	r3, [r7, #21]
 80022de:	e011      	b.n	8002304 <load_calibrations+0xc0>
		set_calibration(cal[i], &data_buffer[i*size_offset], size_offset);
 80022e0:	7d7b      	ldrb	r3, [r7, #21]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	4413      	add	r3, r2
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	7d7b      	ldrb	r3, [r7, #21]
 80022ec:	7d3a      	ldrb	r2, [r7, #20]
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	7d3a      	ldrb	r2, [r7, #20]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f7fe fb18 	bl	800092e <set_calibration>
	for(uint8_t i=0; i< calibration_count; i++){
 80022fe:	7d7b      	ldrb	r3, [r7, #21]
 8002300:	3301      	adds	r3, #1
 8002302:	757b      	strb	r3, [r7, #21]
 8002304:	7d7a      	ldrb	r2, [r7, #21]
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3e9      	bcc.n	80022e0 <load_calibrations+0x9c>
 800230c:	46b5      	mov	sp, r6
	}
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002318:	20000000 	.word	0x20000000

0800231c <save_calibrations>:

void save_calibrations(axis_calibration_factors_t* cal[], uint8_t calibration_count)	{
 800231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002320:	b08d      	sub	sp, #52	@ 0x34
 8002322:	af00      	add	r7, sp, #0
 8002324:	6178      	str	r0, [r7, #20]
 8002326:	460b      	mov	r3, r1
 8002328:	74fb      	strb	r3, [r7, #19]
 800232a:	466b      	mov	r3, sp
 800232c:	461e      	mov	r6, r3
	uint8_t buffer_size = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(uint8_t i=0; i < calibration_count; i++)	{
 8002334:	2300      	movs	r3, #0
 8002336:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800233a:	e009      	b.n	8002350 <save_calibrations+0x34>
		buffer_size += CALIBRATION_FACTOR_SIZE;
 800233c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002340:	3313      	adds	r3, #19
 8002342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(uint8_t i=0; i < calibration_count; i++)	{
 8002346:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800234a:	3301      	adds	r3, #1
 800234c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002350:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	429a      	cmp	r2, r3
 8002358:	d3f0      	bcc.n	800233c <save_calibrations+0x20>
	}
	uint8_t size_offset = buffer_size / calibration_count;
 800235a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t data_buffer[buffer_size];
 8002368:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800236c:	460b      	mov	r3, r1
 800236e:	3b01      	subs	r3, #1
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
 8002372:	b2cb      	uxtb	r3, r1
 8002374:	2200      	movs	r2, #0
 8002376:	469a      	mov	sl, r3
 8002378:	4693      	mov	fp, r2
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002386:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800238a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800238e:	b2cb      	uxtb	r3, r1
 8002390:	2200      	movs	r2, #0
 8002392:	4698      	mov	r8, r3
 8002394:	4691      	mov	r9, r2
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023aa:	460b      	mov	r3, r1
 80023ac:	3307      	adds	r3, #7
 80023ae:	08db      	lsrs	r3, r3, #3
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	ebad 0d03 	sub.w	sp, sp, r3
 80023b6:	466b      	mov	r3, sp
 80023b8:	3300      	adds	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]

	for(uint8_t i=0; i< calibration_count; i++){
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80023c2:	e017      	b.n	80023f4 <save_calibrations+0xd8>
		get_calibration(cal[i], &data_buffer[i*size_offset], size_offset);
 80023c4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4413      	add	r3, r2
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80023d4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	6a3a      	ldr	r2, [r7, #32]
 80023de:	4413      	add	r3, r2
 80023e0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fb0b 	bl	8000a00 <get_calibration>
	for(uint8_t i=0; i< calibration_count; i++){
 80023ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80023ee:	3301      	adds	r3, #1
 80023f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80023f4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d3e2      	bcc.n	80023c4 <save_calibrations+0xa8>
	}

	w25q16_sector_erase_4k(&flash_handle, FLASH_CALIBRATION_ADDRESS);
 80023fe:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002402:	4821      	ldr	r0, [pc, #132]	@ (8002488 <save_calibrations+0x16c>)
 8002404:	f001 f94a 	bl	800369c <w25q16_sector_erase_4k>
	uint8_t busy_flag = w25q16_read_SR1(&flash_handle)&0x01;
 8002408:	481f      	ldr	r0, [pc, #124]	@ (8002488 <save_calibrations+0x16c>)
 800240a:	f001 f96f 	bl	80036ec <w25q16_read_SR1>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	uint64_t timer = HAL_GetTick();
 8002418:	f001 fa1e 	bl	8003858 <HAL_GetTick>
 800241c:	4603      	mov	r3, r0
 800241e:	2200      	movs	r2, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002428:	e9c7 2306 	strd	r2, r3, [r7, #24]
	while(busy_flag && HAL_GetTick()-timer<200)	{
 800242c:	e007      	b.n	800243e <save_calibrations+0x122>
		busy_flag = w25q16_read_SR1(&flash_handle)&0x01;
 800242e:	4816      	ldr	r0, [pc, #88]	@ (8002488 <save_calibrations+0x16c>)
 8002430:	f001 f95c 	bl	80036ec <w25q16_read_SR1>
 8002434:	4603      	mov	r3, r0
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	while(busy_flag && HAL_GetTick()-timer<200)	{
 800243e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <save_calibrations+0x150>
 8002446:	f001 fa07 	bl	8003858 <HAL_GetTick>
 800244a:	4603      	mov	r3, r0
 800244c:	2200      	movs	r2, #0
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	60fa      	str	r2, [r7, #12]
 8002452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002456:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800245a:	4641      	mov	r1, r8
 800245c:	1a8c      	subs	r4, r1, r2
 800245e:	4649      	mov	r1, r9
 8002460:	eb61 0503 	sbc.w	r5, r1, r3
 8002464:	2cc8      	cmp	r4, #200	@ 0xc8
 8002466:	f175 0300 	sbcs.w	r3, r5, #0
 800246a:	d3e0      	bcc.n	800242e <save_calibrations+0x112>
	}
	w25q16_write(&flash_handle, FLASH_CALIBRATION_ADDRESS, data_buffer, buffer_size);
 800246c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002470:	6a3a      	ldr	r2, [r7, #32]
 8002472:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
 8002476:	4804      	ldr	r0, [pc, #16]	@ (8002488 <save_calibrations+0x16c>)
 8002478:	f001 f8c4 	bl	8003604 <w25q16_write>
 800247c:	46b5      	mov	sp, r6
}
 800247e:	bf00      	nop
 8002480:	3734      	adds	r7, #52	@ 0x34
 8002482:	46bd      	mov	sp, r7
 8002484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002488:	20000000 	.word	0x20000000

0800248c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)	{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	80fb      	strh	r3, [r7, #6]
	IRQ_Calibrate_Flag = true;
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	2000040c 	.word	0x2000040c

080024ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024b4:	bf00      	nop
 80024b6:	e7fd      	b.n	80024b4 <Error_Handler+0x8>

080024b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_SPI1_Init+0x64>)
 80024be:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <MX_SPI1_Init+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <MX_SPI1_Init+0x64>)
 80024c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80024c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_SPI1_Init+0x64>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <MX_SPI1_Init+0x64>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_SPI1_Init+0x64>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_SPI1_Init+0x64>)
 80024de:	2200      	movs	r2, #0
 80024e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <MX_SPI1_Init+0x64>)
 80024e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024ea:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <MX_SPI1_Init+0x64>)
 80024ec:	2208      	movs	r2, #8
 80024ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f0:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <MX_SPI1_Init+0x64>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <MX_SPI1_Init+0x64>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <MX_SPI1_Init+0x64>)
 80024fe:	2200      	movs	r2, #0
 8002500:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <MX_SPI1_Init+0x64>)
 8002504:	220a      	movs	r2, #10
 8002506:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002508:	4804      	ldr	r0, [pc, #16]	@ (800251c <MX_SPI1_Init+0x64>)
 800250a:	f004 fd39 	bl	8006f80 <HAL_SPI_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002514:	f7ff ffca 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000498 	.word	0x20000498
 8002520:	40013000 	.word	0x40013000

08002524 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1d      	ldr	r2, [pc, #116]	@ (80025b8 <HAL_SPI_MspInit+0x94>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d133      	bne.n	80025ae <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <HAL_SPI_MspInit+0x98>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_SPI_MspInit+0x98>)
 8002550:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_SPI_MspInit+0x98>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_SPI_MspInit+0x98>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a14      	ldr	r2, [pc, #80]	@ (80025bc <HAL_SPI_MspInit+0x98>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_SPI_MspInit+0x98>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800257e:	2338      	movs	r3, #56	@ 0x38
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800258e:	2305      	movs	r3, #5
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4809      	ldr	r0, [pc, #36]	@ (80025c0 <HAL_SPI_MspInit+0x9c>)
 800259a:	f002 fc1f 	bl	8004ddc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2023      	movs	r0, #35	@ 0x23
 80025a4:	f001 ff93 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025a8:	2023      	movs	r0, #35	@ 0x23
 80025aa:	f001 ffac 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40013000 	.word	0x40013000
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020400 	.word	0x40020400

080025c4 <stepper_enable>:
 */


#include "stepper.h"

void stepper_enable(stepper_handle_t* motor)	{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2201      	movs	r2, #1
 80025d8:	4619      	mov	r1, r3
 80025da:	f002 fdb3 	bl	8005144 <HAL_GPIO_WritePin>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <stepper_disable>:

void stepper_disable(stepper_handle_t* motor)	{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	f002 fda2 	bl	8005144 <HAL_GPIO_WritePin>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <HAL_MspInit+0x4c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	4a0f      	ldr	r2, [pc, #60]	@ (8002654 <HAL_MspInit+0x4c>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261c:	6453      	str	r3, [r2, #68]	@ 0x44
 800261e:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <HAL_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_MspInit+0x4c>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a08      	ldr	r2, [pc, #32]	@ (8002654 <HAL_MspInit+0x4c>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_MspInit+0x4c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800

08002658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <NMI_Handler+0x4>

08002660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	bf00      	nop
 800266e:	e7fd      	b.n	800266c <MemManage_Handler+0x4>

08002670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <BusFault_Handler+0x4>

08002678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800267c:	bf00      	nop
 800267e:	e7fd      	b.n	800267c <UsageFault_Handler+0x4>

08002680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ae:	f001 f8bf 	bl	8003830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_CAL_Pin);
 80026ba:	2008      	movs	r0, #8
 80026bc:	f002 fd76 	bl	80051ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80026c8:	4802      	ldr	r0, [pc, #8]	@ (80026d4 <DMA1_Stream1_IRQHandler+0x10>)
 80026ca:	f002 f91d 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000740 	.word	0x20000740

080026d8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80026dc:	4802      	ldr	r0, [pc, #8]	@ (80026e8 <DMA1_Stream2_IRQHandler+0x10>)
 80026de:	f002 f913 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000680 	.word	0x20000680

080026ec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80026f0:	4802      	ldr	r0, [pc, #8]	@ (80026fc <DMA1_Stream3_IRQHandler+0x10>)
 80026f2:	f002 f909 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200007a0 	.word	0x200007a0

08002700 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002704:	4802      	ldr	r0, [pc, #8]	@ (8002710 <DMA1_Stream4_IRQHandler+0x10>)
 8002706:	f002 f8ff 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200006e0 	.word	0x200006e0

08002714 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002718:	4802      	ldr	r0, [pc, #8]	@ (8002724 <ADC_IRQHandler+0x10>)
 800271a:	f001 f910 	bl	800393e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000354 	.word	0x20000354

08002728 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800272c:	4802      	ldr	r0, [pc, #8]	@ (8002738 <SPI1_IRQHandler+0x10>)
 800272e:	f005 f8b7 	bl	80078a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000498 	.word	0x20000498

0800273c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <USART3_IRQHandler+0x10>)
 8002742:	f006 fc55 	bl	8008ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000638 	.word	0x20000638

08002750 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <UART4_IRQHandler+0x10>)
 8002756:	f006 fc4b 	bl	8008ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200005f0 	.word	0x200005f0

08002764 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002768:	4802      	ldr	r0, [pc, #8]	@ (8002774 <DMA2_Stream0_IRQHandler+0x10>)
 800276a:	f002 f8cd 	bl	8004908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	2000039c 	.word	0x2000039c

08002778 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <OTG_FS_IRQHandler+0x10>)
 800277e:	f002 fe71 	bl	8005464 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000800 	.word	0x20000800

0800278c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002794:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <_sbrk+0x5c>)
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <_sbrk+0x60>)
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027a0:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <_sbrk+0x64>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <_sbrk+0x64>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	@ (80027f4 <_sbrk+0x68>)
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ae:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <_sbrk+0x64>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4413      	add	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d207      	bcs.n	80027cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027bc:	f00b ff32 	bl	800e624 <__errno>
 80027c0:	4603      	mov	r3, r0
 80027c2:	220c      	movs	r2, #12
 80027c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027ca:	e009      	b.n	80027e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027d2:	4b07      	ldr	r3, [pc, #28]	@ (80027f0 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	4a05      	ldr	r2, [pc, #20]	@ (80027f0 <_sbrk+0x64>)
 80027dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20020000 	.word	0x20020000
 80027ec:	00000400 	.word	0x00000400
 80027f0:	200004f0 	.word	0x200004f0
 80027f4:	200014d8 	.word	0x200014d8

080027f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <SystemInit+0x20>)
 80027fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002802:	4a05      	ldr	r2, [pc, #20]	@ (8002818 <SystemInit+0x20>)
 8002804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002822:	f107 0308 	add.w	r3, r7, #8
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002830:	463b      	mov	r3, r7
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002838:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <MX_TIM3_Init+0x94>)
 800283a:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <MX_TIM3_Init+0x98>)
 800283c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800283e:	4b1c      	ldr	r3, [pc, #112]	@ (80028b0 <MX_TIM3_Init+0x94>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b1a      	ldr	r3, [pc, #104]	@ (80028b0 <MX_TIM3_Init+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800284a:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <MX_TIM3_Init+0x94>)
 800284c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002850:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b17      	ldr	r3, [pc, #92]	@ (80028b0 <MX_TIM3_Init+0x94>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <MX_TIM3_Init+0x94>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800285e:	4814      	ldr	r0, [pc, #80]	@ (80028b0 <MX_TIM3_Init+0x94>)
 8002860:	f005 fa7e 	bl	8007d60 <HAL_TIM_Base_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800286a:	f7ff fe1f 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800286e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002872:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002874:	f107 0308 	add.w	r3, r7, #8
 8002878:	4619      	mov	r1, r3
 800287a:	480d      	ldr	r0, [pc, #52]	@ (80028b0 <MX_TIM3_Init+0x94>)
 800287c:	f005 fd66 	bl	800834c <HAL_TIM_ConfigClockSource>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002886:	f7ff fe11 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002892:	463b      	mov	r3, r7
 8002894:	4619      	mov	r1, r3
 8002896:	4806      	ldr	r0, [pc, #24]	@ (80028b0 <MX_TIM3_Init+0x94>)
 8002898:	f006 fa08 	bl	8008cac <HAL_TIMEx_MasterConfigSynchronization>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80028a2:	f7ff fe03 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200004f4 	.word	0x200004f4
 80028b4:	40000400 	.word	0x40000400

080028b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b092      	sub	sp, #72	@ 0x48
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80028cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028e6:	463b      	mov	r3, r7
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
 80028f4:	615a      	str	r2, [r3, #20]
 80028f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80028f8:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <MX_TIM4_Init+0x110>)
 80028fa:	4a34      	ldr	r2, [pc, #208]	@ (80029cc <MX_TIM4_Init+0x114>)
 80028fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80028fe:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <MX_TIM4_Init+0x110>)
 8002900:	2253      	movs	r2, #83	@ 0x53
 8002902:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002904:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <MX_TIM4_Init+0x110>)
 8002906:	2200      	movs	r2, #0
 8002908:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50-1;
 800290a:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <MX_TIM4_Init+0x110>)
 800290c:	2231      	movs	r2, #49	@ 0x31
 800290e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <MX_TIM4_Init+0x110>)
 8002912:	2200      	movs	r2, #0
 8002914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <MX_TIM4_Init+0x110>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800291c:	482a      	ldr	r0, [pc, #168]	@ (80029c8 <MX_TIM4_Init+0x110>)
 800291e:	f005 fa1f 	bl	8007d60 <HAL_TIM_Base_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002928:	f7ff fdc0 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800292c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002930:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002932:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002936:	4619      	mov	r1, r3
 8002938:	4823      	ldr	r0, [pc, #140]	@ (80029c8 <MX_TIM4_Init+0x110>)
 800293a:	f005 fd07 	bl	800834c <HAL_TIM_ConfigClockSource>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002944:	f7ff fdb2 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002948:	481f      	ldr	r0, [pc, #124]	@ (80029c8 <MX_TIM4_Init+0x110>)
 800294a:	f005 fac1 	bl	8007ed0 <HAL_TIM_PWM_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002954:	f7ff fdaa 	bl	80024ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002958:	2305      	movs	r3, #5
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 800295c:	2330      	movs	r3, #48	@ 0x30
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	4818      	ldr	r0, [pc, #96]	@ (80029c8 <MX_TIM4_Init+0x110>)
 8002968:	f005 fdb7 	bl	80084da <HAL_TIM_SlaveConfigSynchro>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 8002972:	f7ff fd9b 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002976:	2320      	movs	r3, #32
 8002978:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	4619      	mov	r1, r3
 8002984:	4810      	ldr	r0, [pc, #64]	@ (80029c8 <MX_TIM4_Init+0x110>)
 8002986:	f006 f991 	bl	8008cac <HAL_TIMEx_MasterConfigSynchronization>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8002990:	f7ff fd8c 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002994:	2360      	movs	r3, #96	@ 0x60
 8002996:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25;
 8002998:	2319      	movs	r3, #25
 800299a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800299c:	2302      	movs	r3, #2
 800299e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	2200      	movs	r2, #0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4807      	ldr	r0, [pc, #28]	@ (80029c8 <MX_TIM4_Init+0x110>)
 80029ac:	f005 fc0c 	bl	80081c8 <HAL_TIM_PWM_ConfigChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80029b6:	f7ff fd79 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029ba:	4803      	ldr	r0, [pc, #12]	@ (80029c8 <MX_TIM4_Init+0x110>)
 80029bc:	f000 f908 	bl	8002bd0 <HAL_TIM_MspPostInit>

}
 80029c0:	bf00      	nop
 80029c2:	3748      	adds	r7, #72	@ 0x48
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000053c 	.word	0x2000053c
 80029cc:	40000800 	.word	0x40000800

080029d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80029ee:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <MX_TIM8_Init+0xac>)
 80029f0:	4a23      	ldr	r2, [pc, #140]	@ (8002a80 <MX_TIM8_Init+0xb0>)
 80029f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80029f4:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <MX_TIM8_Init+0xac>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80029fa:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <MX_TIM8_Init+0xac>)
 80029fc:	2210      	movs	r2, #16
 80029fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2-1;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002a18:	4818      	ldr	r0, [pc, #96]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a1a:	f005 f9a1 	bl	8007d60 <HAL_TIM_Base_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002a24:	f7ff fd42 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8002a28:	2108      	movs	r1, #8
 8002a2a:	4814      	ldr	r0, [pc, #80]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a2c:	f005 fb72 	bl	8008114 <HAL_TIM_OnePulse_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 8002a36:	f7ff fd39 	bl	80024ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8002a42:	f107 030c 	add.w	r3, r7, #12
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a4a:	f005 fd46 	bl	80084da <HAL_TIM_SlaveConfigSynchro>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8002a54:	f7ff fd2a 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8002a58:	2310      	movs	r3, #16
 8002a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <MX_TIM8_Init+0xac>)
 8002a66:	f006 f921 	bl	8008cac <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002a70:	f7ff fd1c 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	3720      	adds	r7, #32
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000584 	.word	0x20000584
 8002a80:	40010400 	.word	0x40010400

08002a84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	@ 0x30
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 031c 	add.w	r3, r7, #28
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a45      	ldr	r2, [pc, #276]	@ (8002bb8 <HAL_TIM_Base_MspInit+0x134>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	4b44      	ldr	r3, [pc, #272]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a43      	ldr	r2, [pc, #268]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002ab0:	f043 0302 	orr.w	r3, r3, #2
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b41      	ldr	r3, [pc, #260]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002ac2:	e075      	b.n	8002bb0 <HAL_TIM_Base_MspInit+0x12c>
  else if(tim_baseHandle->Instance==TIM4)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x13c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12d      	bne.n	8002b2a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a39      	ldr	r2, [pc, #228]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a32      	ldr	r2, [pc, #200]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b30      	ldr	r3, [pc, #192]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ROLL_STEP_PUL_Pin;
 8002b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ROLL_STEP_PUL_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	4828      	ldr	r0, [pc, #160]	@ (8002bc4 <HAL_TIM_Base_MspInit+0x140>)
 8002b24:	f002 f95a 	bl	8004ddc <HAL_GPIO_Init>
}
 8002b28:	e042      	b.n	8002bb0 <HAL_TIM_Base_MspInit+0x12c>
  else if(tim_baseHandle->Instance==TIM8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a26      	ldr	r2, [pc, #152]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x144>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d13d      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b20      	ldr	r3, [pc, #128]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002b3e:	f043 0302 	orr.w	r3, r3, #2
 8002b42:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002b5a:	f043 0304 	orr.w	r3, r3, #4
 8002b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b60:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <HAL_TIM_Base_MspInit+0x138>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4810      	ldr	r0, [pc, #64]	@ (8002bcc <HAL_TIM_Base_MspInit+0x148>)
 8002b8a:	f002 f927 	bl	8004ddc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4808      	ldr	r0, [pc, #32]	@ (8002bcc <HAL_TIM_Base_MspInit+0x148>)
 8002bac:	f002 f916 	bl	8004ddc <HAL_GPIO_Init>
}
 8002bb0:	bf00      	nop
 8002bb2:	3730      	adds	r7, #48	@ 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40010400 	.word	0x40010400
 8002bcc:	40020800 	.word	0x40020800

08002bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 030c 	add.w	r3, r7, #12
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a12      	ldr	r2, [pc, #72]	@ (8002c38 <HAL_TIM_MspPostInit+0x68>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d11d      	bne.n	8002c2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_TIM_MspPostInit+0x6c>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <HAL_TIM_MspPostInit+0x6c>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <HAL_TIM_MspPostInit+0x6c>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PITCH_STEP_PUL_Pin;
 8002c0e:	2340      	movs	r3, #64	@ 0x40
 8002c10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	2302      	movs	r3, #2
 8002c14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PITCH_STEP_PUL_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <HAL_TIM_MspPostInit+0x70>)
 8002c2a:	f002 f8d7 	bl	8004ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c2e:	bf00      	nop
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020400 	.word	0x40020400

08002c44 <uart_init>:
/*
static void uart_dma_tx_callback(uart_handle_t* uart);
static void uart_dma_rx_callback(uart_handle_t* uart, uint16_t* new_index);
*/

uart_status_t uart_init(uart_handle_t* uart, UART_HandleTypeDef* h_uart){
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]

	uart->instance_id = uart_register_instance(uart);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f862 	bl	8002d18 <uart_register_instance>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	711a      	strb	r2, [r3, #4]
	if(h_uart == NULL || uart->instance_id == NULL_UART_INST)	{
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <uart_init+0x26>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	2bff      	cmp	r3, #255	@ 0xff
 8002c68:	d105      	bne.n	8002c76 <uart_init+0x32>
		uart->status = UART_INIT_FAIL;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2202      	movs	r2, #2
 8002c6e:	715a      	strb	r2, [r3, #5]
		return uart->status;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	795b      	ldrb	r3, [r3, #5]
 8002c74:	e04c      	b.n	8002d10 <uart_init+0xcc>
	}

	uart->huart = h_uart;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	601a      	str	r2, [r3, #0]
	uart->unread_bytes = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	uart->tx_busy = 0;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	719a      	strb	r2, [r3, #6]
	uart->tx_remaining = 0;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
	uart->tx_size = 0;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
	memset(uart->rx_buffer, 0, UART_BUFFER_SIZE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3310      	adds	r3, #16
 8002c9a:	2280      	movs	r2, #128	@ 0x80
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f00b fcb8 	bl	800e614 <memset>
	memset(uart->tx_buffer, 0, UART_BUFFER_SIZE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3390      	adds	r3, #144	@ 0x90
 8002ca8:	2280      	movs	r2, #128	@ 0x80
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f00b fcb1 	bl	800e614 <memset>
	fifo_init(&uart->rx_fifo, uart->rx_buffer, UART_BUFFER_SIZE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3310      	adds	r3, #16
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7fe f9c2 	bl	8001048 <fifo_init>
	fifo_init(&uart->tx_fifo, uart->tx_buffer, UART_BUFFER_SIZE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f503 7092 	add.w	r0, r3, #292	@ 0x124
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3390      	adds	r3, #144	@ 0x90
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	f7fe f9b9 	bl	8001048 <fifo_init>
	memset(uart->dma_buffer, 0, DMA_BUF_SIZE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8002cdc:	2280      	movs	r2, #128	@ 0x80
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f00b fc97 	bl	800e614 <memset>
	uart->dma_index = 0;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    uart->rxlock = false;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
	HAL_UARTEx_ReceiveToIdle_DMA(h_uart, uart->dma_buffer, DMA_BUF_SIZE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f203 1339 	addw	r3, r3, #313	@ 0x139
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	4619      	mov	r1, r3
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f006 f91b 	bl	8008f3c <HAL_UARTEx_ReceiveToIdle_DMA>
	uart->status = UART_OK;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	715a      	strb	r2, [r3, #5]
	return uart->status;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	795b      	ldrb	r3, [r3, #5]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <uart_register_instance>:

uint8_t uart_register_instance(uart_handle_t* uart)	{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

	for(uint8_t i =0; i < MAX_UART_COUNT; i++){
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
 8002d24:	e020      	b.n	8002d68 <uart_register_instance+0x50>
		if(!(uart_instance_id & (1<<i)))	{
 8002d26:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <uart_register_instance+0x64>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	fa42 f303 	asr.w	r3, r2, r3
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d113      	bne.n	8002d62 <uart_register_instance+0x4a>
				uart_instance_id |= (1<<i);
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	b25a      	sxtb	r2, r3
 8002d44:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <uart_register_instance+0x64>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b25b      	sxtb	r3, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <uart_register_instance+0x64>)
 8002d52:	701a      	strb	r2, [r3, #0]
				uart_instances[i] = uart;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	490a      	ldr	r1, [pc, #40]	@ (8002d80 <uart_register_instance+0x68>)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return i;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	e006      	b.n	8002d70 <uart_register_instance+0x58>
	for(uint8_t i =0; i < MAX_UART_COUNT; i++){
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	2b07      	cmp	r3, #7
 8002d6c:	d9db      	bls.n	8002d26 <uart_register_instance+0xe>
			}
	}
	return NULL_UART_INST;
 8002d6e:	23ff      	movs	r3, #255	@ 0xff
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	200005ec 	.word	0x200005ec
 8002d80:	200005cc 	.word	0x200005cc

08002d84 <uart_update>:

void uart_unregister_instance(uart_handle_t* uart){
	uart_instance_id = uart_instance_id & ~(1<<uart->instance_id);
}

uart_status_t uart_update(uart_handle_t* uart){
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]

	uart->unread_bytes = fifo_bytes_available(&uart->rx_fifo);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe f974 	bl	8001080 <fifo_bytes_available>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
	if(uart->unread_bytes > UART_BUFFER_SIZE)	{
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d902      	bls.n	8002db0 <uart_update+0x2c>
		uart->status = UART_RX_FULL;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2205      	movs	r2, #5
 8002dae:	715a      	strb	r2, [r3, #5]
	}
	if(uart->tx_remaining > 0 && uart->tx_busy != true){
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
		}
		uart->unread_bytes += ret;
	}

*/
	return uart->status;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	795b      	ldrb	r3, [r3, #5]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <uart_write_packet>:
		uart->tx_waiting = true;
	}
	return ret;
}

uint32_t uart_write_packet(uart_handle_t* uart, com_packet_t* packet)	{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
	uint32_t ret = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
	memset(uart->tx_buffer, 0, packet->packet_size.value);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2100      	movs	r1, #0
 8002dde:	f00b fc19 	bl	800e614 <memset>
	uart->tx_buffer[0]	= packet->version;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	781a      	ldrb	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	uart->tx_buffer[1]	= packet->packet_type;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	785a      	ldrb	r2, [r3, #1]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	uart->tx_buffer[2]	= packet->payload_length;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	789a      	ldrb	r2, [r3, #2]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	uart->tx_buffer[3]	= packet->padding;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	78da      	ldrb	r2, [r3, #3]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f883 2093 	strb.w	r2, [r3, #147]	@ 0x93
	memcpy(&uart->tx_buffer[4], packet->packet_size.bytes, sizeof(uint32_t));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3394      	adds	r3, #148	@ 0x94
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	3204      	adds	r2, #4
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	601a      	str	r2, [r3, #0]
	memcpy(&uart->tx_buffer[8], packet->crc32.bytes, sizeof(uint32_t));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3398      	adds	r3, #152	@ 0x98
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	601a      	str	r2, [r3, #0]
	//u32_to_u8(packet->packet_size.value, &temp[4]);
	//u32_to_u8(packet->crc32.value, &temp[8]);
	memcpy(&uart->tx_buffer[12],packet->payload,packet->payload_length);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 009c 	add.w	r0, r3, #156	@ 0x9c
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	f103 010c 	add.w	r1, r3, #12
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	789b      	ldrb	r3, [r3, #2]
 8002e32:	461a      	mov	r2, r3
 8002e34:	f00b fc22 	bl	800e67c <memcpy>
	if(!(uart->tx_busy)){
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	799b      	ldrb	r3, [r3, #6]
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <uart_write_packet+0xa0>
		uart->tx_busy = 1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	719a      	strb	r2, [r3, #6]
		//ret = fifo_write(&uart->tx_fifo, uart->tx_buffer, packet->packet_size.value);
		HAL_UART_Transmit_DMA(uart->huart, uart->tx_buffer, packet->packet_size.value);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f005 fff1 	bl	8008e44 <HAL_UART_Transmit_DMA>
	}
	return ret;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <get_uart_handle>:

uart_handle_t* get_uart_handle(UART_HandleTypeDef* huart)	{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0; i < MAX_UART_COUNT; i++)	{
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e00f      	b.n	8002e9a <get_uart_handle+0x2e>
		if(huart==uart_instances[i]->huart){
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002eb0 <get_uart_handle+0x44>)
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d104      	bne.n	8002e94 <get_uart_handle+0x28>
			return uart_instances[i];
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	4a08      	ldr	r2, [pc, #32]	@ (8002eb0 <get_uart_handle+0x44>)
 8002e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e92:	e006      	b.n	8002ea2 <get_uart_handle+0x36>
	for(uint8_t i=0; i < MAX_UART_COUNT; i++)	{
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	3301      	adds	r3, #1
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
 8002e9c:	2b07      	cmp	r3, #7
 8002e9e:	d9ec      	bls.n	8002e7a <get_uart_handle+0xe>
		}
	}
	return (uart_handle_t*)NULL_UART_INST;
 8002ea0:	23ff      	movs	r3, #255	@ 0xff
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	200005cc 	.word	0x200005cc

08002eb4 <HAL_UARTEx_RxEventCallback>:
		HAL_UARTEx_ReceiveToIdle_DMA(uart->huart, uart->dma_buffer, DMA_BUF_SIZE);
	}
}
*/

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)	{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	807b      	strh	r3, [r7, #2]

	switch(huart->RxEventType)	{
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_UARTEx_RxEventCallback+0x1a>
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d138      	bne.n	8002f3e <HAL_UARTEx_RxEventCallback+0x8a>
		case HAL_UART_RXEVENT_HT:	{
			// Do nothing
			break;
 8002ecc:	e0af      	b.n	800302e <HAL_UARTEx_RxEventCallback+0x17a>
		}
		case HAL_UART_RXEVENT_TC:	{
            uart_handle_t* uart = get_uart_handle(huart);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ffcc 	bl	8002e6c <get_uart_handle>
 8002ed4:	6138      	str	r0, [r7, #16]
            if(uart != NULL)	{
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a7 	beq.w	800302c <HAL_UARTEx_RxEventCallback+0x178>
                if(!uart->rxlock&&uart->dma_index!=DMA_BUF_SIZE)   {
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 809e 	beq.w	800302c <HAL_UARTEx_RxEventCallback+0x178>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002ef6:	2b80      	cmp	r3, #128	@ 0x80
 8002ef8:	f000 8098 	beq.w	800302c <HAL_UARTEx_RxEventCallback+0x178>
                      uart->rxlock = true;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                      uint32_t new_bytes = fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (DMA_BUF_SIZE - uart->dma_index));
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f10:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f20:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002f24:	461a      	mov	r2, r3
 8002f26:	f7fe f8c9 	bl	80010bc <fifo_write>
 8002f2a:	60f8      	str	r0, [r7, #12]
                      uart->dma_index = Size;
 8002f2c:	887a      	ldrh	r2, [r7, #2]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
                     uart->rxlock = false;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                 }
              }
			break;
 8002f3c:	e076      	b.n	800302c <HAL_UARTEx_RxEventCallback+0x178>
		}
		default:	{
			uart_handle_t* uart = get_uart_handle(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff94 	bl	8002e6c <get_uart_handle>
 8002f44:	60b8      	str	r0, [r7, #8]
            if(uart != NULL)	{
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d070      	beq.n	800302e <HAL_UARTEx_RxEventCallback+0x17a>
                if(!uart->rxlock)   {
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d068      	beq.n	800302e <HAL_UARTEx_RxEventCallback+0x17a>
                    uart->rxlock = true;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                    uint32_t new_bytes = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
                    if(Size !=0)	{
 8002f68:	887b      	ldrh	r3, [r7, #2]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d059      	beq.n	8003022 <HAL_UARTEx_RxEventCallback+0x16e>
                        if(Size > uart->dma_index){
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d91f      	bls.n	8002fba <HAL_UARTEx_RxEventCallback+0x106>
                            new_bytes += fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (Size - uart->dma_index));
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f86:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	887a      	ldrh	r2, [r7, #2]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f7fe f88e 	bl	80010bc <fifo_write>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
                            uart->dma_index += new_bytes;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f8d3 21bc 	ldr.w	r2, [r3, #444]	@ 0x1bc
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 8002fb8:	e033      	b.n	8003022 <HAL_UARTEx_RxEventCallback+0x16e>
                        }
                        else if(Size <= uart->dma_index){
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d82d      	bhi.n	8003022 <HAL_UARTEx_RxEventCallback+0x16e>
                            if(uart->dma_index < DMA_BUF_SIZE)	{
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002fcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002fce:	d816      	bhi.n	8002ffe <HAL_UARTEx_RxEventCallback+0x14a>
                            	new_bytes += fifo_write(&uart->rx_fifo, &uart->dma_buffer[uart->dma_index], (DMA_BUF_SIZE - uart->dma_index));
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002fdc:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	1c59      	adds	r1, r3, #1
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8002fec:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f7fe f863 	bl	80010bc <fifo_write>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
                            }
                            new_bytes += fifo_write(&uart->rx_fifo, uart->dma_buffer, Size);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f203 1339 	addw	r3, r3, #313	@ 0x139
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	4619      	mov	r1, r3
 800300e:	f7fe f855 	bl	80010bc <fifo_write>
 8003012:	4602      	mov	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	4413      	add	r3, r2
 8003018:	617b      	str	r3, [r7, #20]
                            uart->dma_index = Size;
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
                        }
                    }
                    uart->rxlock = false;
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
                }
            }
		}
	}
}
 800302a:	e000      	b.n	800302e <HAL_UARTEx_RxEventCallback+0x17a>
			break;
 800302c:	bf00      	nop
}
 800302e:	bf00      	nop
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef* huart)	{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
	uart_handle_t* uart = get_uart_handle(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff ff14 	bl	8002e6c <get_uart_handle>
 8003044:	60f8      	str	r0, [r7, #12]
	if(uart != NULL)	{
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d054      	beq.n	80030f6 <HAL_UART_TxCpltCallback+0xc0>

		if(uart->tx_waiting == false)	{
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	79db      	ldrb	r3, [r3, #7]
 8003050:	f083 0301 	eor.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00f      	beq.n	800307a <HAL_UART_TxCpltCallback+0x44>
			//fifo_flush_unread(&uart->tx_fifo);
			fifo_push_read_index(&uart->tx_fifo, uart->tx_size);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4619      	mov	r1, r3
 8003066:	4610      	mov	r0, r2
 8003068:	f7fe f89e 	bl	80011a8 <fifo_push_read_index>
			uart->tx_remaining = 0;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
			uart->tx_busy = 0;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	719a      	strb	r2, [r3, #6]
			else	{
				uart->tx_busy = false;
			}
		}
	}
}
 8003078:	e03d      	b.n	80030f6 <HAL_UART_TxCpltCallback+0xc0>
			fifo_push_read_index(&uart->tx_fifo, uart->tx_size);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f7fe f88e 	bl	80011a8 <fifo_push_read_index>
			if(uart->tx_remaining > UART_BUFFER_SIZE - uart->tx_fifo.read_index)	{
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003096:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800309a:	429a      	cmp	r2, r3
 800309c:	d907      	bls.n	80030ae <HAL_UART_TxCpltCallback+0x78>
				uart->tx_size = UART_BUFFER_SIZE - uart->tx_fifo.read_index;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80030a4:	f1c3 0280 	rsb	r2, r3, #128	@ 0x80
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	e006      	b.n	80030bc <HAL_UART_TxCpltCallback+0x86>
				uart->tx_size = uart->tx_remaining;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	60da      	str	r2, [r3, #12]
				uart->tx_waiting = false;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	71da      	strb	r2, [r3, #7]
			uart->tx_remaining -= uart->tx_size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	1ad2      	subs	r2, r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	609a      	str	r2, [r3, #8]
			if(uart->tx_size>0)	{
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00e      	beq.n	80030f0 <HAL_UART_TxCpltCallback+0xba>
				HAL_UART_Transmit_DMA(uart->huart, &uart->tx_buffer[uart->tx_fifo.read_index], uart->tx_size);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80030dc:	3390      	adds	r3, #144	@ 0x90
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	18d1      	adds	r1, r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	f005 feab 	bl	8008e44 <HAL_UART_Transmit_DMA>
}
 80030ee:	e002      	b.n	80030f6 <HAL_UART_TxCpltCallback+0xc0>
				uart->tx_busy = false;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	719a      	strb	r2, [r3, #6]
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003104:	4b11      	ldr	r3, [pc, #68]	@ (800314c <MX_UART4_Init+0x4c>)
 8003106:	4a12      	ldr	r2, [pc, #72]	@ (8003150 <MX_UART4_Init+0x50>)
 8003108:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 460800;
 800310a:	4b10      	ldr	r3, [pc, #64]	@ (800314c <MX_UART4_Init+0x4c>)
 800310c:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8003110:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003112:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <MX_UART4_Init+0x4c>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003118:	4b0c      	ldr	r3, [pc, #48]	@ (800314c <MX_UART4_Init+0x4c>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <MX_UART4_Init+0x4c>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003124:	4b09      	ldr	r3, [pc, #36]	@ (800314c <MX_UART4_Init+0x4c>)
 8003126:	220c      	movs	r2, #12
 8003128:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312a:	4b08      	ldr	r3, [pc, #32]	@ (800314c <MX_UART4_Init+0x4c>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003130:	4b06      	ldr	r3, [pc, #24]	@ (800314c <MX_UART4_Init+0x4c>)
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003136:	4805      	ldr	r0, [pc, #20]	@ (800314c <MX_UART4_Init+0x4c>)
 8003138:	f005 fe34 	bl	8008da4 <HAL_UART_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003142:	f7ff f9b3 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	200005f0 	.word	0x200005f0
 8003150:	40004c00 	.word	0x40004c00

08003154 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003158:	4b11      	ldr	r3, [pc, #68]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 800315a:	4a12      	ldr	r2, [pc, #72]	@ (80031a4 <MX_USART3_UART_Init+0x50>)
 800315c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800315e:	4b10      	ldr	r3, [pc, #64]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 8003160:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003166:	4b0e      	ldr	r3, [pc, #56]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 800316e:	2200      	movs	r2, #0
 8003170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003172:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 800317a:	220c      	movs	r2, #12
 800317c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 8003186:	2200      	movs	r2, #0
 8003188:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800318a:	4805      	ldr	r0, [pc, #20]	@ (80031a0 <MX_USART3_UART_Init+0x4c>)
 800318c:	f005 fe0a 	bl	8008da4 <HAL_UART_Init>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003196:	f7ff f989 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000638 	.word	0x20000638
 80031a4:	40004800 	.word	0x40004800

080031a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08c      	sub	sp, #48	@ 0x30
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 031c 	add.w	r3, r7, #28
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a98      	ldr	r2, [pc, #608]	@ (8003428 <HAL_UART_MspInit+0x280>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	f040 8092 	bne.w	80032f0 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	4b96      	ldr	r3, [pc, #600]	@ (800342c <HAL_UART_MspInit+0x284>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	4a95      	ldr	r2, [pc, #596]	@ (800342c <HAL_UART_MspInit+0x284>)
 80031d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031da:	6413      	str	r3, [r2, #64]	@ 0x40
 80031dc:	4b93      	ldr	r3, [pc, #588]	@ (800342c <HAL_UART_MspInit+0x284>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <HAL_UART_MspInit+0x284>)
 80031ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f0:	4a8e      	ldr	r2, [pc, #568]	@ (800342c <HAL_UART_MspInit+0x284>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f8:	4b8c      	ldr	r3, [pc, #560]	@ (800342c <HAL_UART_MspInit+0x284>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003204:	2303      	movs	r3, #3
 8003206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003214:	2308      	movs	r3, #8
 8003216:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 031c 	add.w	r3, r7, #28
 800321c:	4619      	mov	r1, r3
 800321e:	4884      	ldr	r0, [pc, #528]	@ (8003430 <HAL_UART_MspInit+0x288>)
 8003220:	f001 fddc 	bl	8004ddc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003224:	4b83      	ldr	r3, [pc, #524]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003226:	4a84      	ldr	r2, [pc, #528]	@ (8003438 <HAL_UART_MspInit+0x290>)
 8003228:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800322a:	4b82      	ldr	r3, [pc, #520]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 800322c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003230:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003232:	4b80      	ldr	r3, [pc, #512]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003238:	4b7e      	ldr	r3, [pc, #504]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323e:	4b7d      	ldr	r3, [pc, #500]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003240:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003244:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003246:	4b7b      	ldr	r3, [pc, #492]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003248:	2200      	movs	r2, #0
 800324a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800324c:	4b79      	ldr	r3, [pc, #484]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003252:	4b78      	ldr	r3, [pc, #480]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003258:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800325a:	4b76      	ldr	r3, [pc, #472]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003260:	4b74      	ldr	r3, [pc, #464]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003262:	2200      	movs	r2, #0
 8003264:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003266:	4873      	ldr	r0, [pc, #460]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 8003268:	f001 f9b6 	bl	80045d8 <HAL_DMA_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003272:	f7ff f91b 	bl	80024ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a6e      	ldr	r2, [pc, #440]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 800327a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800327c:	4a6d      	ldr	r2, [pc, #436]	@ (8003434 <HAL_UART_MspInit+0x28c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003282:	4b6e      	ldr	r3, [pc, #440]	@ (800343c <HAL_UART_MspInit+0x294>)
 8003284:	4a6e      	ldr	r2, [pc, #440]	@ (8003440 <HAL_UART_MspInit+0x298>)
 8003286:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003288:	4b6c      	ldr	r3, [pc, #432]	@ (800343c <HAL_UART_MspInit+0x294>)
 800328a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800328e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003290:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <HAL_UART_MspInit+0x294>)
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003296:	4b69      	ldr	r3, [pc, #420]	@ (800343c <HAL_UART_MspInit+0x294>)
 8003298:	2200      	movs	r2, #0
 800329a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800329c:	4b67      	ldr	r3, [pc, #412]	@ (800343c <HAL_UART_MspInit+0x294>)
 800329e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032a2:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032a4:	4b65      	ldr	r3, [pc, #404]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032aa:	4b64      	ldr	r3, [pc, #400]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80032b0:	4b62      	ldr	r3, [pc, #392]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032b6:	4b61      	ldr	r3, [pc, #388]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032bc:	4b5f      	ldr	r3, [pc, #380]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80032c2:	485e      	ldr	r0, [pc, #376]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032c4:	f001 f988 	bl	80045d8 <HAL_DMA_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80032ce:	f7ff f8ed 	bl	80024ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a59      	ldr	r2, [pc, #356]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80032d8:	4a58      	ldr	r2, [pc, #352]	@ (800343c <HAL_UART_MspInit+0x294>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	2034      	movs	r0, #52	@ 0x34
 80032e4:	f001 f8f3 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80032e8:	2034      	movs	r0, #52	@ 0x34
 80032ea:	f001 f90c 	bl	8004506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80032ee:	e097      	b.n	8003420 <HAL_UART_MspInit+0x278>
  else if(uartHandle->Instance==USART3)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a53      	ldr	r2, [pc, #332]	@ (8003444 <HAL_UART_MspInit+0x29c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f040 8092 	bne.w	8003420 <HAL_UART_MspInit+0x278>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <HAL_UART_MspInit+0x284>)
 8003302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003304:	4a49      	ldr	r2, [pc, #292]	@ (800342c <HAL_UART_MspInit+0x284>)
 8003306:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800330a:	6413      	str	r3, [r2, #64]	@ 0x40
 800330c:	4b47      	ldr	r3, [pc, #284]	@ (800342c <HAL_UART_MspInit+0x284>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_UART_MspInit+0x284>)
 800331e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003320:	4a42      	ldr	r2, [pc, #264]	@ (800342c <HAL_UART_MspInit+0x284>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6313      	str	r3, [r2, #48]	@ 0x30
 8003328:	4b40      	ldr	r3, [pc, #256]	@ (800342c <HAL_UART_MspInit+0x284>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003334:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003346:	2307      	movs	r3, #7
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334a:	f107 031c 	add.w	r3, r7, #28
 800334e:	4619      	mov	r1, r3
 8003350:	483d      	ldr	r0, [pc, #244]	@ (8003448 <HAL_UART_MspInit+0x2a0>)
 8003352:	f001 fd43 	bl	8004ddc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003356:	4b3d      	ldr	r3, [pc, #244]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 8003358:	4a3d      	ldr	r2, [pc, #244]	@ (8003450 <HAL_UART_MspInit+0x2a8>)
 800335a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800335c:	4b3b      	ldr	r3, [pc, #236]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 800335e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003362:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003364:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336a:	4b38      	ldr	r3, [pc, #224]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003370:	4b36      	ldr	r3, [pc, #216]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 8003372:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003376:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003378:	4b34      	ldr	r3, [pc, #208]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800337e:	4b33      	ldr	r3, [pc, #204]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003384:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 8003386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800338a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800338c:	4b2f      	ldr	r3, [pc, #188]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 800338e:	2200      	movs	r2, #0
 8003390:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003392:	4b2e      	ldr	r3, [pc, #184]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 8003394:	2200      	movs	r2, #0
 8003396:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003398:	482c      	ldr	r0, [pc, #176]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 800339a:	f001 f91d 	bl	80045d8 <HAL_DMA_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_UART_MspInit+0x200>
      Error_Handler();
 80033a4:	f7ff f882 	bl	80024ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a28      	ldr	r2, [pc, #160]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 80033ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033ae:	4a27      	ldr	r2, [pc, #156]	@ (800344c <HAL_UART_MspInit+0x2a4>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80033b4:	4b27      	ldr	r3, [pc, #156]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033b6:	4a28      	ldr	r2, [pc, #160]	@ (8003458 <HAL_UART_MspInit+0x2b0>)
 80033b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80033ba:	4b26      	ldr	r3, [pc, #152]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033bc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033c0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c2:	4b24      	ldr	r3, [pc, #144]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033c4:	2240      	movs	r2, #64	@ 0x40
 80033c6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c8:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033ce:	4b21      	ldr	r3, [pc, #132]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033de:	2200      	movs	r2, #0
 80033e0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80033e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033ee:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80033f4:	4817      	ldr	r0, [pc, #92]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 80033f6:	f001 f8ef 	bl	80045d8 <HAL_DMA_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_MspInit+0x25c>
      Error_Handler();
 8003400:	f7ff f854 	bl	80024ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a13      	ldr	r2, [pc, #76]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 8003408:	639a      	str	r2, [r3, #56]	@ 0x38
 800340a:	4a12      	ldr	r2, [pc, #72]	@ (8003454 <HAL_UART_MspInit+0x2ac>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003410:	2200      	movs	r2, #0
 8003412:	2100      	movs	r1, #0
 8003414:	2027      	movs	r0, #39	@ 0x27
 8003416:	f001 f85a 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800341a:	2027      	movs	r0, #39	@ 0x27
 800341c:	f001 f873 	bl	8004506 <HAL_NVIC_EnableIRQ>
}
 8003420:	bf00      	nop
 8003422:	3730      	adds	r7, #48	@ 0x30
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40004c00 	.word	0x40004c00
 800342c:	40023800 	.word	0x40023800
 8003430:	40020000 	.word	0x40020000
 8003434:	20000680 	.word	0x20000680
 8003438:	40026040 	.word	0x40026040
 800343c:	200006e0 	.word	0x200006e0
 8003440:	40026070 	.word	0x40026070
 8003444:	40004800 	.word	0x40004800
 8003448:	40020800 	.word	0x40020800
 800344c:	20000740 	.word	0x20000740
 8003450:	40026028 	.word	0x40026028
 8003454:	200007a0 	.word	0x200007a0
 8003458:	40026058 	.word	0x40026058

0800345c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003462:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003466:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003468:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800346a:	2204      	movs	r2, #4
 800346c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800346e:	4b11      	ldr	r3, [pc, #68]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003470:	2202      	movs	r2, #2
 8003472:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003474:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003476:	2200      	movs	r2, #0
 8003478:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800347a:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800347c:	2202      	movs	r2, #2
 800347e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003480:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003482:	2200      	movs	r2, #0
 8003484:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003488:	2200      	movs	r2, #0
 800348a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800348c:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800348e:	2200      	movs	r2, #0
 8003490:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003494:	2200      	movs	r2, #0
 8003496:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003498:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800349a:	2200      	movs	r2, #0
 800349c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	@ (80034b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80034a0:	f001 fe9c 	bl	80051dc <HAL_PCD_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80034aa:	f7fe ffff 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000800 	.word	0x20000800

080034b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034d8:	d13a      	bne.n	8003550 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	4b1e      	ldr	r3, [pc, #120]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80034ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80034f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003504:	2303      	movs	r3, #3
 8003506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003508:	230a      	movs	r3, #10
 800350a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	4812      	ldr	r0, [pc, #72]	@ (800355c <HAL_PCD_MspInit+0xa4>)
 8003514:	f001 fc62 	bl	8004ddc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003518:	4b0f      	ldr	r3, [pc, #60]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 800351a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351c:	4a0e      	ldr	r2, [pc, #56]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 800351e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003522:	6353      	str	r3, [r2, #52]	@ 0x34
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 800352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352c:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 800352e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003532:	6453      	str	r3, [r2, #68]	@ 0x44
 8003534:	4b08      	ldr	r3, [pc, #32]	@ (8003558 <HAL_PCD_MspInit+0xa0>)
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	2043      	movs	r0, #67	@ 0x43
 8003546:	f000 ffc2 	bl	80044ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800354a:	2043      	movs	r0, #67	@ 0x43
 800354c:	f000 ffdb 	bl	8004506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003550:	bf00      	nop
 8003552:	3728      	adds	r7, #40	@ 0x28
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000

08003560 <cs_enable>:
 *      Author: zuidec
 */

#include "w25q16jv.h"

static void cs_enable(w25q16_handle_t* flash_dev)	{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash_dev->cs_port, flash_dev->cs_pin, GPIO_PIN_RESET);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6858      	ldr	r0, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	b29b      	uxth	r3, r3
 8003572:	2200      	movs	r2, #0
 8003574:	4619      	mov	r1, r3
 8003576:	f001 fde5 	bl	8005144 <HAL_GPIO_WritePin>
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <cs_release>:

static void cs_release(w25q16_handle_t* flash_dev)	{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(flash_dev->cs_port, flash_dev->cs_pin, GPIO_PIN_SET);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6858      	ldr	r0, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	b29b      	uxth	r3, r3
 8003594:	2201      	movs	r2, #1
 8003596:	4619      	mov	r1, r3
 8003598:	f001 fdd4 	bl	8005144 <HAL_GPIO_WritePin>
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <w25q16_read>:

void w25q16_read(w25q16_handle_t* flash_dev, uint32_t address, uint8_t* buffer, uint8_t buffer_size)	{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	70fb      	strb	r3, [r7, #3]
	uint8_t data[4] = {W25Q16_READ_DATA, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 80035b2:	2303      	movs	r3, #3
 80035b4:	753b      	strb	r3, [r7, #20]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	757b      	strb	r3, [r7, #21]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	75bb      	strb	r3, [r7, #22]
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	75fb      	strb	r3, [r7, #23]
	cs_enable(flash_dev);
 80035cc:	68f8      	ldr	r0, [r7, #12]
 80035ce:	f7ff ffc7 	bl	8003560 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data),W25Q16_SPI_TIMEOUT);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	f107 0114 	add.w	r1, r7, #20
 80035da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035de:	2204      	movs	r2, #4
 80035e0:	f003 fd57 	bl	8007092 <HAL_SPI_Transmit>
	HAL_SPI_Receive(flash_dev->spi, buffer, buffer_size, W25Q16_SPI_TIMEOUT);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	f003 fe92 	bl	800731a <HAL_SPI_Receive>
	cs_release(flash_dev);
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f7ff ffc3 	bl	8003582 <cs_release>
}
 80035fc:	bf00      	nop
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <w25q16_write>:

void w25q16_write(w25q16_handle_t* flash_dev, uint32_t address, uint8_t* buffer, uint8_t bytes_to_write)	{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	70fb      	strb	r3, [r7, #3]
	uint8_t data[4] = {W25Q16_PAGE_PROGRAM, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 8003612:	2302      	movs	r3, #2
 8003614:	753b      	strb	r3, [r7, #20]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2db      	uxtb	r3, r3
 800361c:	757b      	strb	r3, [r7, #21]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	b2db      	uxtb	r3, r3
 8003624:	75bb      	strb	r3, [r7, #22]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	75fb      	strb	r3, [r7, #23]
	w25q16_enable_write(flash_dev);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f81c 	bl	800366a <w25q16_enable_write>
	cs_enable(flash_dev);
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff ff94 	bl	8003560 <cs_enable>
	if(bytes_to_write > 256){
		HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
		HAL_SPI_Transmit(flash_dev->spi, buffer, 256, W25Q16_SPI_TIMEOUT);
	}
	else 	{
		HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6818      	ldr	r0, [r3, #0]
 800363c:	f107 0114 	add.w	r1, r7, #20
 8003640:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003644:	2204      	movs	r2, #4
 8003646:	f003 fd24 	bl	8007092 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(flash_dev->spi, buffer, bytes_to_write, W25Q16_SPI_TIMEOUT);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	b29a      	uxth	r2, r3
 8003652:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	f003 fd1b 	bl	8007092 <HAL_SPI_Transmit>
	}
	cs_release(flash_dev);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff ff90 	bl	8003582 <cs_release>
	// Write is disabled by chip once programming page is complete
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <w25q16_enable_write>:

void w25q16_enable_write(w25q16_handle_t* flash_dev)	{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	uint8_t data = (uint8_t)W25Q16_WRITE_ENABLE;
 8003672:	2306      	movs	r3, #6
 8003674:	73fb      	strb	r3, [r7, #15]
	cs_enable(flash_dev);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff72 	bl	8003560 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	f107 010f 	add.w	r1, r7, #15
 8003684:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003688:	2201      	movs	r2, #1
 800368a:	f003 fd02 	bl	8007092 <HAL_SPI_Transmit>
	cs_release(flash_dev);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff ff77 	bl	8003582 <cs_release>
}
 8003694:	bf00      	nop
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <w25q16_sector_erase_4k>:
	cs_enable(flash_dev);
	HAL_SPI_Transmit(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
	cs_release(flash_dev);
}

void w25q16_sector_erase_4k(w25q16_handle_t* flash_dev, uint32_t address)	{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
	uint8_t data[4] = {W25Q16_SECTOR_ERASE_4K, (uint8_t)(address >> 16), (uint8_t)(address >> 8), (uint8_t)address};
 80036a6:	2320      	movs	r3, #32
 80036a8:	733b      	strb	r3, [r7, #12]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	737b      	strb	r3, [r7, #13]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	0a1b      	lsrs	r3, r3, #8
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	73bb      	strb	r3, [r7, #14]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	73fb      	strb	r3, [r7, #15]
	w25q16_enable_write(flash_dev);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff ffd2 	bl	800366a <w25q16_enable_write>
	cs_enable(flash_dev);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff4a 	bl	8003560 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, data, sizeof(data), W25Q16_SPI_TIMEOUT);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
 80036d0:	f107 010c 	add.w	r1, r7, #12
 80036d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80036d8:	2204      	movs	r2, #4
 80036da:	f003 fcda 	bl	8007092 <HAL_SPI_Transmit>
	cs_release(flash_dev);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff4f 	bl	8003582 <cs_release>
	// Write is disabled by chip once erase is complete

}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <w25q16_read_SR1>:

void w25q16_block_erase_64k(w25q16_handle_t* flash_dev, uint32_t address)	{

}

uint8_t w25q16_read_SR1(w25q16_handle_t* flash_dev)	{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
	uint8_t payload = W25Q16_READ_SR1;
 80036f8:	2305      	movs	r3, #5
 80036fa:	73bb      	strb	r3, [r7, #14]
	cs_enable(flash_dev);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7ff ff2f 	bl	8003560 <cs_enable>
	HAL_SPI_Transmit(flash_dev->spi, &payload, sizeof(payload),W25Q16_SPI_TIMEOUT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	f107 010e 	add.w	r1, r7, #14
 800370a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800370e:	2201      	movs	r2, #1
 8003710:	f003 fcbf 	bl	8007092 <HAL_SPI_Transmit>
	HAL_SPI_Receive(flash_dev->spi, &data, sizeof(data), W25Q16_SPI_TIMEOUT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	f107 010f 	add.w	r1, r7, #15
 800371c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003720:	2201      	movs	r2, #1
 8003722:	f003 fdfa 	bl	800731a <HAL_SPI_Receive>
	cs_release(flash_dev);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff2b 	bl	8003582 <cs_release>

	return data;
 800372c:	7bfb      	ldrb	r3, [r7, #15]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003738:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003770 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800373c:	f7ff f85c 	bl	80027f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003740:	480c      	ldr	r0, [pc, #48]	@ (8003774 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003742:	490d      	ldr	r1, [pc, #52]	@ (8003778 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003744:	4a0d      	ldr	r2, [pc, #52]	@ (800377c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003748:	e002      	b.n	8003750 <LoopCopyDataInit>

0800374a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800374a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800374c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800374e:	3304      	adds	r3, #4

08003750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003754:	d3f9      	bcc.n	800374a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003756:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003758:	4c0a      	ldr	r4, [pc, #40]	@ (8003784 <LoopFillZerobss+0x22>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800375c:	e001      	b.n	8003762 <LoopFillZerobss>

0800375e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800375e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003760:	3204      	adds	r2, #4

08003762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003764:	d3fb      	bcc.n	800375e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003766:	f00a ff63 	bl	800e630 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800376a:	f7fd ff49 	bl	8001600 <main>
  bx  lr    
 800376e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003770:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003778:	20000338 	.word	0x20000338
  ldr r2, =_sidata
 800377c:	0800f028 	.word	0x0800f028
  ldr r2, =_sbss
 8003780:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8003784:	200014d8 	.word	0x200014d8

08003788 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003788:	e7fe      	b.n	8003788 <CAN1_RX0_IRQHandler>
	...

0800378c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003790:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <HAL_Init+0x40>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a0d      	ldr	r2, [pc, #52]	@ (80037cc <HAL_Init+0x40>)
 8003796:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800379a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800379c:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_Init+0x40>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <HAL_Init+0x40>)
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a8:	4b08      	ldr	r3, [pc, #32]	@ (80037cc <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a07      	ldr	r2, [pc, #28]	@ (80037cc <HAL_Init+0x40>)
 80037ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b4:	2003      	movs	r0, #3
 80037b6:	f000 fe7f 	bl	80044b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ba:	200f      	movs	r0, #15
 80037bc:	f000 f808 	bl	80037d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c0:	f7fe ff22 	bl	8002608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <HAL_InitTick+0x54>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <HAL_InitTick+0x58>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fe97 	bl	8004522 <HAL_SYSTICK_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00e      	b.n	800381c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d80a      	bhi.n	800381a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003804:	2200      	movs	r2, #0
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800380c:	f000 fe5f 	bl	80044ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4a06      	ldr	r2, [pc, #24]	@ (800382c <HAL_InitTick+0x5c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	2000000c 	.word	0x2000000c
 8003828:	20000014 	.word	0x20000014
 800382c:	20000010 	.word	0x20000010

08003830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <HAL_IncTick+0x20>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <HAL_IncTick+0x24>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4413      	add	r3, r2
 8003840:	4a04      	ldr	r2, [pc, #16]	@ (8003854 <HAL_IncTick+0x24>)
 8003842:	6013      	str	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000014 	.word	0x20000014
 8003854:	20000ce4 	.word	0x20000ce4

08003858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
  return uwTick;
 800385c:	4b03      	ldr	r3, [pc, #12]	@ (800386c <HAL_GetTick+0x14>)
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	20000ce4 	.word	0x20000ce4

08003870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff ffee 	bl	8003858 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003888:	d005      	beq.n	8003896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388a:	4b0a      	ldr	r3, [pc, #40]	@ (80038b4 <HAL_Delay+0x44>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4413      	add	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003896:	bf00      	nop
 8003898:	f7ff ffde 	bl	8003858 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d8f7      	bhi.n	8003898 <HAL_Delay+0x28>
  {
  }
}
 80038a8:	bf00      	nop
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000014 	.word	0x20000014

080038b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e033      	b.n	8003936 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d109      	bne.n	80038ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fc fec0 	bl	800065c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d118      	bne.n	8003928 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038fe:	f023 0302 	bic.w	r3, r3, #2
 8003902:	f043 0202 	orr.w	r2, r3, #2
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fb7c 	bl	8004008 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	f043 0201 	orr.w	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40
 8003926:	e001      	b.n	800392c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b086      	sub	sp, #24
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 0320 	and.w	r3, r3, #32
 800396c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d049      	beq.n	8003a08 <HAL_ADC_IRQHandler+0xca>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d046      	beq.n	8003a08 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d105      	bne.n	8003992 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d12b      	bne.n	80039f8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d127      	bne.n	80039f8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d006      	beq.n	80039c4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d119      	bne.n	80039f8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0220 	bic.w	r2, r2, #32
 80039d2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fe f9ab 	bl	8001d54 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f06f 0212 	mvn.w	r2, #18
 8003a06:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d057      	beq.n	8003ace <HAL_ADC_IRQHandler+0x190>
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d054      	beq.n	8003ace <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d139      	bne.n	8003abe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d006      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d12b      	bne.n	8003abe <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d124      	bne.n	8003abe <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d11d      	bne.n	8003abe <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a98:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d105      	bne.n	8003abe <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f043 0201 	orr.w	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fc20 	bl	8004304 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 020c 	mvn.w	r2, #12
 8003acc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d017      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x1d6>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d014      	beq.n	8003b14 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f949 	bl	8003d9c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f06f 0201 	mvn.w	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b22:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d015      	beq.n	8003b56 <HAL_ADC_IRQHandler+0x218>
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0220 	mvn.w	r2, #32
 8003b44:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f932 	bl	8003db0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0220 	mvn.w	r2, #32
 8003b54:	601a      	str	r2, [r3, #0]
  }
}
 8003b56:	bf00      	nop
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_ADC_Start_DMA+0x22>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e0eb      	b.n	8003d5a <HAL_ADC_Start_DMA+0x1fa>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d018      	beq.n	8003bca <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba8:	4b6e      	ldr	r3, [pc, #440]	@ (8003d64 <HAL_ADC_Start_DMA+0x204>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a6e      	ldr	r2, [pc, #440]	@ (8003d68 <HAL_ADC_Start_DMA+0x208>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0c9a      	lsrs	r2, r3, #18
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003bbc:	e002      	b.n	8003bc4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f9      	bne.n	8003bbe <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bd8:	d107      	bne.n	8003bea <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003be8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	f040 80a3 	bne.w	8003d40 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c38:	d106      	bne.n	8003c48 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3e:	f023 0206 	bic.w	r2, r3, #6
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
 8003c46:	e002      	b.n	8003c4e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c56:	4b45      	ldr	r3, [pc, #276]	@ (8003d6c <HAL_ADC_Start_DMA+0x20c>)
 8003c58:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5e:	4a44      	ldr	r2, [pc, #272]	@ (8003d70 <HAL_ADC_Start_DMA+0x210>)
 8003c60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	4a43      	ldr	r2, [pc, #268]	@ (8003d74 <HAL_ADC_Start_DMA+0x214>)
 8003c68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6e:	4a42      	ldr	r2, [pc, #264]	@ (8003d78 <HAL_ADC_Start_DMA+0x218>)
 8003c70:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003c8a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c9a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	334c      	adds	r3, #76	@ 0x4c
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f000 fd42 	bl	8004734 <HAL_DMA_Start_IT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d12a      	bne.n	8003d16 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d7c <HAL_ADC_Start_DMA+0x21c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d015      	beq.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2c      	ldr	r2, [pc, #176]	@ (8003d80 <HAL_ADC_Start_DMA+0x220>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d105      	bne.n	8003ce0 <HAL_ADC_Start_DMA+0x180>
 8003cd4:	4b25      	ldr	r3, [pc, #148]	@ (8003d6c <HAL_ADC_Start_DMA+0x20c>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 031f 	and.w	r3, r3, #31
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a27      	ldr	r2, [pc, #156]	@ (8003d84 <HAL_ADC_Start_DMA+0x224>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d136      	bne.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
 8003cea:	4b20      	ldr	r3, [pc, #128]	@ (8003d6c <HAL_ADC_Start_DMA+0x20c>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d130      	bne.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d129      	bne.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e020      	b.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a18      	ldr	r2, [pc, #96]	@ (8003d7c <HAL_ADC_Start_DMA+0x21c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d11b      	bne.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d114      	bne.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003d3c:	609a      	str	r2, [r3, #8]
 8003d3e:	e00b      	b.n	8003d58 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d44:	f043 0210 	orr.w	r2, r3, #16
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	2000000c 	.word	0x2000000c
 8003d68:	431bde83 	.word	0x431bde83
 8003d6c:	40012300 	.word	0x40012300
 8003d70:	08004201 	.word	0x08004201
 8003d74:	080042bb 	.word	0x080042bb
 8003d78:	080042d7 	.word	0x080042d7
 8003d7c:	40012000 	.word	0x40012000
 8003d80:	40012100 	.word	0x40012100
 8003d84:	40012200 	.word	0x40012200

08003d88 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x1c>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e105      	b.n	8003fec <HAL_ADC_ConfigChannel+0x228>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b09      	cmp	r3, #9
 8003dee:	d925      	bls.n	8003e3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68d9      	ldr	r1, [r3, #12]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	3b1e      	subs	r3, #30
 8003e06:	2207      	movs	r2, #7
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43da      	mvns	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	400a      	ands	r2, r1
 8003e14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68d9      	ldr	r1, [r3, #12]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	4603      	mov	r3, r0
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	4403      	add	r3, r0
 8003e2e:	3b1e      	subs	r3, #30
 8003e30:	409a      	lsls	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	e022      	b.n	8003e82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6919      	ldr	r1, [r3, #16]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	2207      	movs	r2, #7
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	4618      	mov	r0, r3
 8003e72:	4603      	mov	r3, r0
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4403      	add	r3, r0
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b06      	cmp	r3, #6
 8003e88:	d824      	bhi.n	8003ed4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	3b05      	subs	r3, #5
 8003e9c:	221f      	movs	r2, #31
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43da      	mvns	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	400a      	ands	r2, r1
 8003eaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b05      	subs	r3, #5
 8003ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ed2:	e04c      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d824      	bhi.n	8003f26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	3b23      	subs	r3, #35	@ 0x23
 8003eee:	221f      	movs	r2, #31
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	400a      	ands	r2, r1
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	3b23      	subs	r3, #35	@ 0x23
 8003f18:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f24:	e023      	b.n	8003f6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	3b41      	subs	r3, #65	@ 0x41
 8003f38:	221f      	movs	r2, #31
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	400a      	ands	r2, r1
 8003f46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	3b41      	subs	r3, #65	@ 0x41
 8003f62:	fa00 f203 	lsl.w	r2, r0, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x234>)
 8003f70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a21      	ldr	r2, [pc, #132]	@ (8003ffc <HAL_ADC_ConfigChannel+0x238>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d109      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x1cc>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b12      	cmp	r3, #18
 8003f82:	d105      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <HAL_ADC_ConfigChannel+0x238>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d123      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x21e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d003      	beq.n	8003faa <HAL_ADC_ConfigChannel+0x1e6>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b11      	cmp	r3, #17
 8003fa8:	d11b      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d111      	bne.n	8003fe2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003fbe:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <HAL_ADC_ConfigChannel+0x23c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a10      	ldr	r2, [pc, #64]	@ (8004004 <HAL_ADC_ConfigChannel+0x240>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	0c9a      	lsrs	r2, r3, #18
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fd4:	e002      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f9      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40012300 	.word	0x40012300
 8003ffc:	40012000 	.word	0x40012000
 8004000:	2000000c 	.word	0x2000000c
 8004004:	431bde83 	.word	0x431bde83

08004008 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004010:	4b79      	ldr	r3, [pc, #484]	@ (80041f8 <ADC_Init+0x1f0>)
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	431a      	orrs	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800403c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	021a      	lsls	r2, r3, #8
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004060:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6859      	ldr	r1, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004082:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6899      	ldr	r1, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	4a58      	ldr	r2, [pc, #352]	@ (80041fc <ADC_Init+0x1f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d022      	beq.n	80040e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80040d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6899      	ldr	r1, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	e00f      	b.n	8004106 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80040f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004104:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0202 	bic.w	r2, r2, #2
 8004114:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6899      	ldr	r1, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	7e1b      	ldrb	r3, [r3, #24]
 8004120:	005a      	lsls	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01b      	beq.n	800416c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004142:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004152:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	3b01      	subs	r3, #1
 8004160:	035a      	lsls	r2, r3, #13
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e007      	b.n	800417c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800417a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800418a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	3b01      	subs	r3, #1
 8004198:	051a      	lsls	r2, r3, #20
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80041b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6899      	ldr	r1, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80041be:	025a      	lsls	r2, r3, #9
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689a      	ldr	r2, [r3, #8]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6899      	ldr	r1, [r3, #8]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	029a      	lsls	r2, r3, #10
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]
}
 80041ec:	bf00      	nop
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40012300 	.word	0x40012300
 80041fc:	0f000001 	.word	0x0f000001

08004200 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004216:	2b00      	cmp	r3, #0
 8004218:	d13c      	bne.n	8004294 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d12b      	bne.n	800428c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004238:	2b00      	cmp	r3, #0
 800423a:	d127      	bne.n	800428c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004254:	2b00      	cmp	r3, #0
 8004256:	d119      	bne.n	800428c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0220 	bic.w	r2, r2, #32
 8004266:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0201 	orr.w	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f7fd fd61 	bl	8001d54 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004292:	e00e      	b.n	80042b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fd85 	bl	8003db0 <HAL_ADC_ErrorCallback>
}
 80042a6:	e004      	b.n	80042b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	4798      	blx	r3
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f7ff fd5d 	bl	8003d88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2240      	movs	r2, #64	@ 0x40
 80042e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f043 0204 	orr.w	r2, r3, #4
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f7ff fd5a 	bl	8003db0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004334:	4013      	ands	r3, r2
 8004336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800434a:	4a04      	ldr	r2, [pc, #16]	@ (800435c <__NVIC_SetPriorityGrouping+0x44>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	60d3      	str	r3, [r2, #12]
}
 8004350:	bf00      	nop
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004364:	4b04      	ldr	r3, [pc, #16]	@ (8004378 <__NVIC_GetPriorityGrouping+0x18>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	0a1b      	lsrs	r3, r3, #8
 800436a:	f003 0307 	and.w	r3, r3, #7
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	db0b      	blt.n	80043a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	4907      	ldr	r1, [pc, #28]	@ (80043b4 <__NVIC_EnableIRQ+0x38>)
 8004396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2001      	movs	r0, #1
 800439e:	fa00 f202 	lsl.w	r2, r0, r2
 80043a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	e000e100 	.word	0xe000e100

080043b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	6039      	str	r1, [r7, #0]
 80043c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	db0a      	blt.n	80043e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	490c      	ldr	r1, [pc, #48]	@ (8004404 <__NVIC_SetPriority+0x4c>)
 80043d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d6:	0112      	lsls	r2, r2, #4
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	440b      	add	r3, r1
 80043dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e0:	e00a      	b.n	80043f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4908      	ldr	r1, [pc, #32]	@ (8004408 <__NVIC_SetPriority+0x50>)
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	3b04      	subs	r3, #4
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	440b      	add	r3, r1
 80043f6:	761a      	strb	r2, [r3, #24]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000e100 	.word	0xe000e100
 8004408:	e000ed00 	.word	0xe000ed00

0800440c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800440c:	b480      	push	{r7}
 800440e:	b089      	sub	sp, #36	@ 0x24
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f1c3 0307 	rsb	r3, r3, #7
 8004426:	2b04      	cmp	r3, #4
 8004428:	bf28      	it	cs
 800442a:	2304      	movcs	r3, #4
 800442c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	3304      	adds	r3, #4
 8004432:	2b06      	cmp	r3, #6
 8004434:	d902      	bls.n	800443c <NVIC_EncodePriority+0x30>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3b03      	subs	r3, #3
 800443a:	e000      	b.n	800443e <NVIC_EncodePriority+0x32>
 800443c:	2300      	movs	r3, #0
 800443e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	401a      	ands	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004454:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43d9      	mvns	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	4313      	orrs	r3, r2
         );
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	@ 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3b01      	subs	r3, #1
 8004480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004484:	d301      	bcc.n	800448a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004486:	2301      	movs	r3, #1
 8004488:	e00f      	b.n	80044aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448a:	4a0a      	ldr	r2, [pc, #40]	@ (80044b4 <SysTick_Config+0x40>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3b01      	subs	r3, #1
 8004490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004492:	210f      	movs	r1, #15
 8004494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004498:	f7ff ff8e 	bl	80043b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <SysTick_Config+0x40>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a2:	4b04      	ldr	r3, [pc, #16]	@ (80044b4 <SysTick_Config+0x40>)
 80044a4:	2207      	movs	r2, #7
 80044a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	e000e010 	.word	0xe000e010

080044b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff29 	bl	8004318 <__NVIC_SetPriorityGrouping>
}
 80044c6:	bf00      	nop
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	4603      	mov	r3, r0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e0:	f7ff ff3e 	bl	8004360 <__NVIC_GetPriorityGrouping>
 80044e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	6978      	ldr	r0, [r7, #20]
 80044ec:	f7ff ff8e 	bl	800440c <NVIC_EncodePriority>
 80044f0:	4602      	mov	r2, r0
 80044f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f6:	4611      	mov	r1, r2
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff ff5d 	bl	80043b8 <__NVIC_SetPriority>
}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	4603      	mov	r3, r0
 800450e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff31 	bl	800437c <__NVIC_EnableIRQ>
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff ffa2 	bl	8004474 <SysTick_Config>
 8004530:	4603      	mov	r3, r0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e00e      	b.n	800456a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	795b      	ldrb	r3, [r3, #5]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d105      	bne.n	8004562 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fc fd03 	bl	8000f68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004572:	b480      	push	{r7}
 8004574:	b087      	sub	sp, #28
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2202      	movs	r2, #2
 8004586:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e00a      	b.n	80045b4 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	441a      	add	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	3301      	adds	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3f0      	bcc.n	800459e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80045ca:	693b      	ldr	r3, [r7, #16]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045e4:	f7ff f938 	bl	8003858 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e099      	b.n	8004728 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004614:	e00f      	b.n	8004636 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004616:	f7ff f91f 	bl	8003858 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b05      	cmp	r3, #5
 8004622:	d908      	bls.n	8004636 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2203      	movs	r2, #3
 800462e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e078      	b.n	8004728 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e8      	bne.n	8004616 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4b38      	ldr	r3, [pc, #224]	@ (8004730 <HAL_DMA_Init+0x158>)
 8004650:	4013      	ands	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004662:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800466e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004698:	4313      	orrs	r3, r2
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f023 0307 	bic.w	r3, r3, #7
 80046b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d117      	bne.n	80046fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00e      	beq.n	80046fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fb01 	bl	8004ce4 <DMA_CheckFifoParam>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80046f6:	2301      	movs	r3, #1
 80046f8:	e016      	b.n	8004728 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fab8 	bl	8004c78 <DMA_CalcBaseAndBitshift>
 8004708:	4603      	mov	r3, r0
 800470a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004710:	223f      	movs	r2, #63	@ 0x3f
 8004712:	409a      	lsls	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	f010803f 	.word	0xf010803f

08004734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_DMA_Start_IT+0x26>
 8004756:	2302      	movs	r3, #2
 8004758:	e040      	b.n	80047dc <HAL_DMA_Start_IT+0xa8>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b01      	cmp	r3, #1
 800476c:	d12f      	bne.n	80047ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa4a 	bl	8004c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478c:	223f      	movs	r2, #63	@ 0x3f
 800478e:	409a      	lsls	r2, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0216 	orr.w	r2, r2, #22
 80047a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d007      	beq.n	80047bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0208 	orr.w	r2, r2, #8
 80047ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0201 	orr.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e005      	b.n	80047da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
 80047d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047f2:	f7ff f831 	bl	8003858 <HAL_GetTick>
 80047f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d008      	beq.n	8004816 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2280      	movs	r2, #128	@ 0x80
 8004808:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e052      	b.n	80048bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0216 	bic.w	r2, r2, #22
 8004824:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695a      	ldr	r2, [r3, #20]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004834:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d103      	bne.n	8004846 <HAL_DMA_Abort+0x62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0208 	bic.w	r2, r2, #8
 8004854:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004866:	e013      	b.n	8004890 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004868:	f7fe fff6 	bl	8003858 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b05      	cmp	r3, #5
 8004874:	d90c      	bls.n	8004890 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2203      	movs	r2, #3
 8004880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e015      	b.n	80048bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e4      	bne.n	8004868 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a2:	223f      	movs	r2, #63	@ 0x3f
 80048a4:	409a      	lsls	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d004      	beq.n	80048e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2280      	movs	r2, #128	@ 0x80
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00c      	b.n	80048fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2205      	movs	r2, #5
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004914:	4b8e      	ldr	r3, [pc, #568]	@ (8004b50 <HAL_DMA_IRQHandler+0x248>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a8e      	ldr	r2, [pc, #568]	@ (8004b54 <HAL_DMA_IRQHandler+0x24c>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0a9b      	lsrs	r3, r3, #10
 8004920:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	2208      	movs	r2, #8
 8004934:	409a      	lsls	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01a      	beq.n	8004974 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	2208      	movs	r2, #8
 8004962:	409a      	lsls	r2, r3
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496c:	f043 0201 	orr.w	r2, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d012      	beq.n	80049aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004996:	2201      	movs	r2, #1
 8004998:	409a      	lsls	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a2:	f043 0202 	orr.w	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ae:	2204      	movs	r2, #4
 80049b0:	409a      	lsls	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d012      	beq.n	80049e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	2204      	movs	r2, #4
 80049ce:	409a      	lsls	r2, r3
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	2210      	movs	r2, #16
 80049e6:	409a      	lsls	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d043      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0308 	and.w	r3, r3, #8
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d03c      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a02:	2210      	movs	r2, #16
 8004a04:	409a      	lsls	r2, r3
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d018      	beq.n	8004a4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d108      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d024      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
 8004a36:	e01f      	b.n	8004a78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4798      	blx	r3
 8004a48:	e016      	b.n	8004a78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0208 	bic.w	r2, r2, #8
 8004a66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	409a      	lsls	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 808f 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8087 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	d136      	bne.n	8004b20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0216 	bic.w	r2, r2, #22
 8004ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ad0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <HAL_DMA_IRQHandler+0x1da>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0208 	bic.w	r2, r2, #8
 8004af0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af6:	223f      	movs	r2, #63	@ 0x3f
 8004af8:	409a      	lsls	r2, r3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d07e      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	4798      	blx	r3
        }
        return;
 8004b1e:	e079      	b.n	8004c14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01d      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10d      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	4798      	blx	r3
 8004b4c:	e02c      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
 8004b4e:	bf00      	nop
 8004b50:	2000000c 	.word	0x2000000c
 8004b54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d023      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
 8004b68:	e01e      	b.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10f      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0210 	bic.w	r2, r2, #16
 8004b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d032      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d307      	bcc.n	8004bf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f2      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x2cc>
 8004bee:	e000      	b.n	8004bf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
 8004c12:	e000      	b.n	8004c16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c14:	bf00      	nop
    }
  }
}
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d108      	bne.n	8004c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c5a:	e007      	b.n	8004c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	3b10      	subs	r3, #16
 8004c88:	4a14      	ldr	r2, [pc, #80]	@ (8004cdc <DMA_CalcBaseAndBitshift+0x64>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c92:	4a13      	ldr	r2, [pc, #76]	@ (8004ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d909      	bls.n	8004cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cb8:	e007      	b.n	8004cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cc2:	f023 0303 	bic.w	r3, r3, #3
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	aaaaaaab 	.word	0xaaaaaaab
 8004ce0:	0800efdc 	.word	0x0800efdc

08004ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11f      	bne.n	8004d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d856      	bhi.n	8004db2 <DMA_CheckFifoParam+0xce>
 8004d04:	a201      	add	r2, pc, #4	@ (adr r2, 8004d0c <DMA_CheckFifoParam+0x28>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d2f 	.word	0x08004d2f
 8004d14:	08004d1d 	.word	0x08004d1d
 8004d18:	08004db3 	.word	0x08004db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d046      	beq.n	8004db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2c:	e043      	b.n	8004db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d36:	d140      	bne.n	8004dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e03d      	b.n	8004dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d46:	d121      	bne.n	8004d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d837      	bhi.n	8004dbe <DMA_CheckFifoParam+0xda>
 8004d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <DMA_CheckFifoParam+0x70>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d6b 	.word	0x08004d6b
 8004d5c:	08004d65 	.word	0x08004d65
 8004d60:	08004d7d 	.word	0x08004d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	e030      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d025      	beq.n	8004dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7a:	e022      	b.n	8004dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d84:	d11f      	bne.n	8004dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d8a:	e01c      	b.n	8004dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d903      	bls.n	8004d9a <DMA_CheckFifoParam+0xb6>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d003      	beq.n	8004da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d98:	e018      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8004d9e:	e015      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      break;
 8004db0:	e00b      	b.n	8004dca <DMA_CheckFifoParam+0xe6>
      break;
 8004db2:	bf00      	nop
 8004db4:	e00a      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004db6:	bf00      	nop
 8004db8:	e008      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e006      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e004      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <DMA_CheckFifoParam+0xe8>
      break;
 8004dca:	bf00      	nop
    }
  } 
  
  return status; 
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b089      	sub	sp, #36	@ 0x24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e16b      	b.n	80050d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004df8:	2201      	movs	r2, #1
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	f040 815a 	bne.w	80050ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d005      	beq.n	8004e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d130      	bne.n	8004e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	2203      	movs	r2, #3
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e64:	2201      	movs	r2, #1
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4013      	ands	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	091b      	lsrs	r3, r3, #4
 8004e7a:	f003 0201 	and.w	r2, r3, #1
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d017      	beq.n	8004ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689a      	ldr	r2, [r3, #8]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d123      	bne.n	8004f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	08da      	lsrs	r2, r3, #3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3208      	adds	r2, #8
 8004ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	220f      	movs	r2, #15
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	08da      	lsrs	r2, r3, #3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3208      	adds	r2, #8
 8004f1a:	69b9      	ldr	r1, [r7, #24]
 8004f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	2203      	movs	r2, #3
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 0203 	and.w	r2, r3, #3
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80b4 	beq.w	80050ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	4b60      	ldr	r3, [pc, #384]	@ (80050e8 <HAL_GPIO_Init+0x30c>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80050e8 <HAL_GPIO_Init+0x30c>)
 8004f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f72:	4b5d      	ldr	r3, [pc, #372]	@ (80050e8 <HAL_GPIO_Init+0x30c>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80050ec <HAL_GPIO_Init+0x310>)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	3302      	adds	r3, #2
 8004f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0303 	and.w	r3, r3, #3
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	220f      	movs	r2, #15
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a52      	ldr	r2, [pc, #328]	@ (80050f0 <HAL_GPIO_Init+0x314>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <HAL_GPIO_Init+0x226>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a51      	ldr	r2, [pc, #324]	@ (80050f4 <HAL_GPIO_Init+0x318>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d025      	beq.n	8004ffe <HAL_GPIO_Init+0x222>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a50      	ldr	r2, [pc, #320]	@ (80050f8 <HAL_GPIO_Init+0x31c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <HAL_GPIO_Init+0x21e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80050fc <HAL_GPIO_Init+0x320>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x21a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8005100 <HAL_GPIO_Init+0x324>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x216>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8005104 <HAL_GPIO_Init+0x328>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x212>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8005108 <HAL_GPIO_Init+0x32c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x20e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800510c <HAL_GPIO_Init+0x330>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x20a>
 8004fe2:	2307      	movs	r3, #7
 8004fe4:	e00e      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	e00c      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004fea:	2306      	movs	r3, #6
 8004fec:	e00a      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004fee:	2305      	movs	r3, #5
 8004ff0:	e008      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ff2:	2304      	movs	r3, #4
 8004ff4:	e006      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e004      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e002      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <HAL_GPIO_Init+0x228>
 8005002:	2300      	movs	r3, #0
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	f002 0203 	and.w	r2, r2, #3
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	4093      	lsls	r3, r2
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4313      	orrs	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005014:	4935      	ldr	r1, [pc, #212]	@ (80050ec <HAL_GPIO_Init+0x310>)
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	3302      	adds	r3, #2
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005022:	4b3b      	ldr	r3, [pc, #236]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	43db      	mvns	r3, r3
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	4013      	ands	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005046:	4a32      	ldr	r2, [pc, #200]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800504c:	4b30      	ldr	r3, [pc, #192]	@ (8005110 <HAL_GPIO_Init+0x334>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005070:	4a27      	ldr	r2, [pc, #156]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005076:	4b26      	ldr	r3, [pc, #152]	@ (8005110 <HAL_GPIO_Init+0x334>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800509a:	4a1d      	ldr	r2, [pc, #116]	@ (8005110 <HAL_GPIO_Init+0x334>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005110 <HAL_GPIO_Init+0x334>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050c4:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <HAL_GPIO_Init+0x334>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b0f      	cmp	r3, #15
 80050d4:	f67f ae90 	bls.w	8004df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	3724      	adds	r7, #36	@ 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40013800 	.word	0x40013800
 80050f0:	40020000 	.word	0x40020000
 80050f4:	40020400 	.word	0x40020400
 80050f8:	40020800 	.word	0x40020800
 80050fc:	40020c00 	.word	0x40020c00
 8005100:	40021000 	.word	0x40021000
 8005104:	40021400 	.word	0x40021400
 8005108:	40021800 	.word	0x40021800
 800510c:	40021c00 	.word	0x40021c00
 8005110:	40013c00 	.word	0x40013c00

08005114 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	887b      	ldrh	r3, [r7, #2]
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e001      	b.n	8005136 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005136:	7bfb      	ldrb	r3, [r7, #15]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	460b      	mov	r3, r1
 800514e:	807b      	strh	r3, [r7, #2]
 8005150:	4613      	mov	r3, r2
 8005152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005154:	787b      	ldrb	r3, [r7, #1]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005160:	e003      	b.n	800516a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	041a      	lsls	r2, r3, #16
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	619a      	str	r2, [r3, #24]
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	460b      	mov	r3, r1
 8005180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005188:	887a      	ldrh	r2, [r7, #2]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4013      	ands	r3, r2
 800518e:	041a      	lsls	r2, r3, #16
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	43d9      	mvns	r1, r3
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	400b      	ands	r3, r1
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	619a      	str	r2, [r3, #24]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051b6:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051b8:	695a      	ldr	r2, [r3, #20]
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d006      	beq.n	80051d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051c2:	4a05      	ldr	r2, [pc, #20]	@ (80051d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c4:	88fb      	ldrh	r3, [r7, #6]
 80051c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7fd f95e 	bl	800248c <HAL_GPIO_EXTI_Callback>
  }
}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40013c00 	.word	0x40013c00

080051dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e101      	b.n	80053f2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d106      	bne.n	800520e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fe f955 	bl	80034b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800521c:	d102      	bne.n	8005224 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f005 f900 	bl	800a42e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7c1a      	ldrb	r2, [r3, #16]
 8005236:	f88d 2000 	strb.w	r2, [sp]
 800523a:	3304      	adds	r3, #4
 800523c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800523e:	f004 ffdf 	bl	800a200 <USB_CoreInit>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0ce      	b.n	80053f2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2100      	movs	r1, #0
 800525a:	4618      	mov	r0, r3
 800525c:	f005 f8f8 	bl	800a450 <USB_SetCurrentMode>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e0bf      	b.n	80053f2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e04a      	b.n	800530e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3315      	adds	r3, #21
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	3314      	adds	r3, #20
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a0:	7bfa      	ldrb	r2, [r7, #15]
 80052a2:	7bfb      	ldrb	r3, [r7, #15]
 80052a4:	b298      	uxth	r0, r3
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	332e      	adds	r3, #46	@ 0x2e
 80052b4:	4602      	mov	r2, r0
 80052b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	3318      	adds	r3, #24
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	331c      	adds	r3, #28
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	3320      	adds	r3, #32
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3324      	adds	r3, #36	@ 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	3301      	adds	r3, #1
 800530c:	73fb      	strb	r3, [r7, #15]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	791b      	ldrb	r3, [r3, #4]
 8005312:	7bfa      	ldrb	r2, [r7, #15]
 8005314:	429a      	cmp	r2, r3
 8005316:	d3af      	bcc.n	8005278 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e044      	b.n	80053a8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005346:	7bfa      	ldrb	r2, [r7, #15]
 8005348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800535c:	2200      	movs	r2, #0
 800535e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005360:	7bfa      	ldrb	r2, [r7, #15]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	3301      	adds	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	791b      	ldrb	r3, [r3, #4]
 80053ac:	7bfa      	ldrb	r2, [r7, #15]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3b5      	bcc.n	800531e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	7c1a      	ldrb	r2, [r3, #16]
 80053ba:	f88d 2000 	strb.w	r2, [sp]
 80053be:	3304      	adds	r3, #4
 80053c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053c2:	f005 f891 	bl	800a4e8 <USB_DevInit>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e00c      	b.n	80053f2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f006 f8db 	bl	800b5a6 <USB_DevDisconnect>

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_PCD_Start+0x1c>
 8005412:	2302      	movs	r3, #2
 8005414:	e022      	b.n	800545c <HAL_PCD_Start+0x62>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800542e:	2b01      	cmp	r3, #1
 8005430:	d105      	bne.n	800543e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f004 ffe2 	bl	800a40c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4618      	mov	r0, r3
 800544e:	f006 f889 	bl	800b564 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005464:	b590      	push	{r4, r7, lr}
 8005466:	b08d      	sub	sp, #52	@ 0x34
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f006 f947 	bl	800b70e <USB_GetMode>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 848c 	bne.w	8005da0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f006 f8ab 	bl	800b5e8 <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 8482 	beq.w	8005d9e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f006 f898 	bl	800b5e8 <USB_ReadInterrupts>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d107      	bne.n	80054d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f002 0202 	and.w	r2, r2, #2
 80054d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f006 f886 	bl	800b5e8 <USB_ReadInterrupts>
 80054dc:	4603      	mov	r3, r0
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b10      	cmp	r3, #16
 80054e4:	d161      	bne.n	80055aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0210 	bic.w	r2, r2, #16
 80054f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	f003 020f 	and.w	r2, r3, #15
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	3304      	adds	r3, #4
 8005514:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800551c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005520:	d124      	bne.n	800556c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005528:	4013      	ands	r3, r2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d035      	beq.n	800559a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800553c:	b29b      	uxth	r3, r3
 800553e:	461a      	mov	r2, r3
 8005540:	6a38      	ldr	r0, [r7, #32]
 8005542:	f005 febd 	bl	800b2c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005552:	441a      	add	r2, r3
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	091b      	lsrs	r3, r3, #4
 8005560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005564:	441a      	add	r2, r3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	615a      	str	r2, [r3, #20]
 800556a:	e016      	b.n	800559a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005572:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005576:	d110      	bne.n	800559a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800557e:	2208      	movs	r2, #8
 8005580:	4619      	mov	r1, r3
 8005582:	6a38      	ldr	r0, [r7, #32]
 8005584:	f005 fe9c 	bl	800b2c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	091b      	lsrs	r3, r3, #4
 8005590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005594:	441a      	add	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0210 	orr.w	r2, r2, #16
 80055a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f006 f81a 	bl	800b5e8 <USB_ReadInterrupts>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055be:	f040 80a7 	bne.w	8005710 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f006 f81f 	bl	800b60e <USB_ReadDevAllOutEpInterrupt>
 80055d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80055d2:	e099      	b.n	8005708 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 808e 	beq.w	80056fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f006 f843 	bl	800b676 <USB_ReadDevOutEPInterrupt>
 80055f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00c      	beq.n	8005616 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	461a      	mov	r2, r3
 800560a:	2301      	movs	r3, #1
 800560c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800560e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fe8b 	bl	800632c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00c      	beq.n	800563a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	461a      	mov	r2, r3
 800562e:	2308      	movs	r3, #8
 8005630:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 ff61 	bl	80064fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005650:	461a      	mov	r2, r3
 8005652:	2310      	movs	r3, #16
 8005654:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d030      	beq.n	80056c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005668:	2b80      	cmp	r3, #128	@ 0x80
 800566a:	d109      	bne.n	8005680 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800567a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800567e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005682:	4613      	mov	r3, r2
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	4413      	add	r3, r2
 8005692:	3304      	adds	r3, #4
 8005694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	78db      	ldrb	r3, [r3, #3]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d108      	bne.n	80056b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2200      	movs	r2, #0
 80056a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f008 fd9e 	bl	800e1ec <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056bc:	461a      	mov	r2, r3
 80056be:	2302      	movs	r3, #2
 80056c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	461a      	mov	r2, r3
 80056da:	2320      	movs	r3, #32
 80056dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d009      	beq.n	80056fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	3301      	adds	r3, #1
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	f47f af62 	bne.w	80055d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f005 ff67 	bl	800b5e8 <USB_ReadInterrupts>
 800571a:	4603      	mov	r3, r0
 800571c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005724:	f040 80db 	bne.w	80058de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f005 ff88 	bl	800b642 <USB_ReadDevAllInEpInterrupt>
 8005732:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005738:	e0cd      	b.n	80058d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80c2 	beq.w	80058ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f005 ffae 	bl	800b6b2 <USB_ReadDevInEPInterrupt>
 8005756:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d057      	beq.n	8005812 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005776:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	43db      	mvns	r3, r3
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005782:	4013      	ands	r3, r2
 8005784:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	2301      	movs	r3, #1
 8005796:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	799b      	ldrb	r3, [r3, #6]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d132      	bne.n	8005806 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a4:	4613      	mov	r3, r2
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3320      	adds	r3, #32
 80057b0:	6819      	ldr	r1, [r3, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	331c      	adds	r3, #28
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4419      	add	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4403      	add	r3, r0
 80057d4:	3320      	adds	r3, #32
 80057d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d113      	bne.n	8005806 <HAL_PCD_IRQHandler+0x3a2>
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	4613      	mov	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4413      	add	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	440b      	add	r3, r1
 80057ec:	3324      	adds	r3, #36	@ 0x24
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d108      	bne.n	8005806 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057fe:	461a      	mov	r2, r3
 8005800:	2101      	movs	r1, #1
 8005802:	f005 ffb5 	bl	800b770 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	b2db      	uxtb	r3, r3
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f008 fc68 	bl	800e0e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	2308      	movs	r3, #8
 800582c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005844:	461a      	mov	r2, r3
 8005846:	2310      	movs	r3, #16
 8005848:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d008      	beq.n	8005866 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005860:	461a      	mov	r2, r3
 8005862:	2340      	movs	r3, #64	@ 0x40
 8005864:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d023      	beq.n	80058b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005872:	6a38      	ldr	r0, [r7, #32]
 8005874:	f004 ff9c 	bl	800a7b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	3310      	adds	r3, #16
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	4413      	add	r3, r2
 8005888:	3304      	adds	r3, #4
 800588a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	78db      	ldrb	r3, [r3, #3]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2200      	movs	r2, #0
 8005898:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f008 fcb5 	bl	800e210 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b2:	461a      	mov	r2, r3
 80058b4:	2302      	movs	r3, #2
 80058b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fca5 	bl	8006214 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	3301      	adds	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80058d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80058d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f47f af2e 	bne.w	800573a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f005 fe80 	bl	800b5e8 <USB_ReadInterrupts>
 80058e8:	4603      	mov	r3, r0
 80058ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f2:	d122      	bne.n	800593a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800590e:	2b01      	cmp	r3, #1
 8005910:	d108      	bne.n	8005924 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800591a:	2100      	movs	r1, #0
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fe8b 	bl	8006638 <HAL_PCDEx_LPM_Callback>
 8005922:	e002      	b.n	800592a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f008 fc53 	bl	800e1d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	695a      	ldr	r2, [r3, #20]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f005 fe52 	bl	800b5e8 <USB_ReadInterrupts>
 8005944:	4603      	mov	r3, r0
 8005946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800594e:	d112      	bne.n	8005976 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b01      	cmp	r3, #1
 800595e:	d102      	bne.n	8005966 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f008 fc0f 	bl	800e184 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005974:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f005 fe34 	bl	800b5e8 <USB_ReadInterrupts>
 8005980:	4603      	mov	r3, r0
 8005982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598a:	f040 80b7 	bne.w	8005afc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800599c:	f023 0301 	bic.w	r3, r3, #1
 80059a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2110      	movs	r1, #16
 80059a8:	4618      	mov	r0, r3
 80059aa:	f004 ff01 	bl	800a7b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ae:	2300      	movs	r3, #0
 80059b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b2:	e046      	b.n	8005a42 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059d8:	0151      	lsls	r1, r2, #5
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	440a      	add	r2, r1
 80059de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	461a      	mov	r2, r3
 80059f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a0c:	0151      	lsls	r1, r2, #5
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	440a      	add	r2, r1
 8005a12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a3e:	3301      	adds	r3, #1
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	791b      	ldrb	r3, [r3, #4]
 8005a46:	461a      	mov	r2, r3
 8005a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d3b2      	bcc.n	80059b4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a5c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005a60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7bdb      	ldrb	r3, [r3, #15]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d016      	beq.n	8005a98 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a7a:	f043 030b 	orr.w	r3, r3, #11
 8005a7e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a90:	f043 030b 	orr.w	r3, r3, #11
 8005a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a96:	e015      	b.n	8005ac4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aa6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005aaa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005aae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005abe:	f043 030b 	orr.w	r3, r3, #11
 8005ac2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ad6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f005 fe42 	bl	800b770 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695a      	ldr	r2, [r3, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f005 fd71 	bl	800b5e8 <USB_ReadInterrupts>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b10:	d123      	bne.n	8005b5a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f005 fe07 	bl	800b72a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f004 febe 	bl	800a8a2 <USB_GetDevSpeed>
 8005b26:	4603      	mov	r3, r0
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681c      	ldr	r4, [r3, #0]
 8005b32:	f001 f9f1 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8005b36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4620      	mov	r0, r4
 8005b40:	f004 fbc2 	bl	800a2c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f008 faf4 	bl	800e132 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005b58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f005 fd42 	bl	800b5e8 <USB_ReadInterrupts>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d10a      	bne.n	8005b84 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f008 fad1 	bl	800e116 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f002 0208 	and.w	r2, r2, #8
 8005b82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f005 fd2d 	bl	800b5e8 <USB_ReadInterrupts>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b94:	2b80      	cmp	r3, #128	@ 0x80
 8005b96:	d123      	bne.n	8005be0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba8:	e014      	b.n	8005bd4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d105      	bne.n	8005bce <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 faf2 	bl	80061b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d3e4      	bcc.n	8005baa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f005 fcff 	bl	800b5e8 <USB_ReadInterrupts>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bf4:	d13c      	bne.n	8005c70 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bfa:	e02b      	b.n	8005c54 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c0c:	6879      	ldr	r1, [r7, #4]
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c10:	4613      	mov	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	440b      	add	r3, r1
 8005c1a:	3318      	adds	r3, #24
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d115      	bne.n	8005c4e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	da12      	bge.n	8005c4e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	3317      	adds	r3, #23
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fab2 	bl	80061b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	3301      	adds	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	791b      	ldrb	r3, [r3, #4]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d3cd      	bcc.n	8005bfc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695a      	ldr	r2, [r3, #20]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 fcb7 	bl	800b5e8 <USB_ReadInterrupts>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c84:	d156      	bne.n	8005d34 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c86:	2301      	movs	r3, #1
 8005c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c8a:	e045      	b.n	8005d18 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c9c:	6879      	ldr	r1, [r7, #4]
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d12e      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cb4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da2b      	bge.n	8005d12 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	0c1a      	lsrs	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005cc4:	4053      	eors	r3, r2
 8005cc6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d121      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	440b      	add	r3, r1
 8005cdc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d10a      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d0e:	6053      	str	r3, [r2, #4]
            break;
 8005d10:	e008      	b.n	8005d24 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	3301      	adds	r3, #1
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	791b      	ldrb	r3, [r3, #4]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d3b3      	bcc.n	8005c8c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f005 fc55 	bl	800b5e8 <USB_ReadInterrupts>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d48:	d10a      	bne.n	8005d60 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f008 fa72 	bl	800e234 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f005 fc3f 	bl	800b5e8 <USB_ReadInterrupts>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d115      	bne.n	8005da0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f008 fa62 	bl	800e250 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	e000      	b.n	8005da0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005d9e:	bf00      	nop
    }
  }
}
 8005da0:	3734      	adds	r7, #52	@ 0x34
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}

08005da6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	460b      	mov	r3, r1
 8005db0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d101      	bne.n	8005dc0 <HAL_PCD_SetAddress+0x1a>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	e012      	b.n	8005de6 <HAL_PCD_SetAddress+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	78fa      	ldrb	r2, [r7, #3]
 8005dcc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f005 fb9e 	bl	800b518 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	4608      	mov	r0, r1
 8005df8:	4611      	mov	r1, r2
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	70fb      	strb	r3, [r7, #3]
 8005e00:	460b      	mov	r3, r1
 8005e02:	803b      	strh	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	da0f      	bge.n	8005e34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	f003 020f 	and.w	r2, r3, #15
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	3310      	adds	r3, #16
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	3304      	adds	r3, #4
 8005e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	705a      	strb	r2, [r3, #1]
 8005e32:	e00f      	b.n	8005e54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 020f 	and.w	r2, r3, #15
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	4413      	add	r3, r2
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005e60:	883b      	ldrh	r3, [r7, #0]
 8005e62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	78ba      	ldrb	r2, [r7, #2]
 8005e6e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d004      	beq.n	8005e82 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e82:	78bb      	ldrb	r3, [r7, #2]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d102      	bne.n	8005e8e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_PCD_EP_Open+0xae>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e00e      	b.n	8005eba <HAL_PCD_EP_Open+0xcc>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f004 fd1e 	bl	800a8ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005eb8:	7afb      	ldrb	r3, [r7, #11]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da0f      	bge.n	8005ef6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f003 020f 	and.w	r2, r3, #15
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	3310      	adds	r3, #16
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4413      	add	r3, r2
 8005eea:	3304      	adds	r3, #4
 8005eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	705a      	strb	r2, [r3, #1]
 8005ef4:	e00f      	b.n	8005f16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ef6:	78fb      	ldrb	r3, [r7, #3]
 8005ef8:	f003 020f 	and.w	r2, r3, #15
 8005efc:	4613      	mov	r3, r2
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_PCD_EP_Close+0x6e>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e00e      	b.n	8005f4e <HAL_PCD_EP_Close+0x8c>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68f9      	ldr	r1, [r7, #12]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f004 fd5c 	bl	800a9fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	460b      	mov	r3, r1
 8005f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f66:	7afb      	ldrb	r3, [r7, #11]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f98:	7afb      	ldrb	r3, [r7, #11]
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	799b      	ldrb	r3, [r3, #6]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d102      	bne.n	8005fb2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	799b      	ldrb	r3, [r3, #6]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6979      	ldr	r1, [r7, #20]
 8005fbe:	f004 fdf9 	bl	800abb4 <USB_EPStartXfer>

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3310      	adds	r3, #16
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2201      	movs	r2, #1
 800600a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	b2da      	uxtb	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	799b      	ldrb	r3, [r3, #6]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6818      	ldr	r0, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	799b      	ldrb	r3, [r3, #6]
 800602e:	461a      	mov	r2, r3
 8006030:	6979      	ldr	r1, [r7, #20]
 8006032:	f004 fdbf 	bl	800abb4 <USB_EPStartXfer>

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	7912      	ldrb	r2, [r2, #4]
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e04f      	b.n	80060fe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800605e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da0f      	bge.n	8006086 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006066:	78fb      	ldrb	r3, [r7, #3]
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	4413      	add	r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	3310      	adds	r3, #16
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4413      	add	r3, r2
 800607a:	3304      	adds	r3, #4
 800607c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2201      	movs	r2, #1
 8006082:	705a      	strb	r2, [r3, #1]
 8006084:	e00d      	b.n	80060a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006086:	78fa      	ldrb	r2, [r7, #3]
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4413      	add	r3, r2
 8006098:	3304      	adds	r3, #4
 800609a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_PCD_EP_SetStall+0x82>
 80060be:	2302      	movs	r3, #2
 80060c0:	e01d      	b.n	80060fe <HAL_PCD_EP_SetStall+0xbe>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f005 f94d 	bl	800b370 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	7999      	ldrb	r1, [r3, #6]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060ee:	461a      	mov	r2, r3
 80060f0:	f005 fb3e 	bl	800b770 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	7912      	ldrb	r2, [r2, #4]
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e042      	b.n	80061aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	da0f      	bge.n	800614c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800612c:	78fb      	ldrb	r3, [r7, #3]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	3310      	adds	r3, #16
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	4413      	add	r3, r2
 8006140:	3304      	adds	r3, #4
 8006142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2201      	movs	r2, #1
 8006148:	705a      	strb	r2, [r3, #1]
 800614a:	e00f      	b.n	800616c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	f003 020f 	and.w	r2, r3, #15
 8006152:	4613      	mov	r3, r2
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	3304      	adds	r3, #4
 8006164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006184:	2b01      	cmp	r3, #1
 8006186:	d101      	bne.n	800618c <HAL_PCD_EP_ClrStall+0x86>
 8006188:	2302      	movs	r3, #2
 800618a:	e00e      	b.n	80061aa <HAL_PCD_EP_ClrStall+0xa4>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68f9      	ldr	r1, [r7, #12]
 800619a:	4618      	mov	r0, r3
 800619c:	f005 f956 	bl	800b44c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	da0c      	bge.n	80061e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061c6:	78fb      	ldrb	r3, [r7, #3]
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	4613      	mov	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	3310      	adds	r3, #16
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	4413      	add	r3, r2
 80061da:	3304      	adds	r3, #4
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	e00c      	b.n	80061fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	4613      	mov	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	3304      	adds	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	4618      	mov	r0, r3
 8006202:	f004 ff75 	bl	800b0f0 <USB_EPStopXfer>
 8006206:	4603      	mov	r3, r0
 8006208:	72fb      	strb	r3, [r7, #11]

  return ret;
 800620a:	7afb      	ldrb	r3, [r7, #11]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	@ 0x28
 8006218:	af02      	add	r7, sp, #8
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	4613      	mov	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	3310      	adds	r3, #16
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	3304      	adds	r3, #4
 800623a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	429a      	cmp	r2, r3
 8006246:	d901      	bls.n	800624c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e06b      	b.n	8006324 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	429a      	cmp	r2, r3
 8006260:	d902      	bls.n	8006268 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	3303      	adds	r3, #3
 800626c:	089b      	lsrs	r3, r3, #2
 800626e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006270:	e02a      	b.n	80062c8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	429a      	cmp	r2, r3
 8006286:	d902      	bls.n	800628e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3303      	adds	r3, #3
 8006292:	089b      	lsrs	r3, r3, #2
 8006294:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68d9      	ldr	r1, [r3, #12]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4603      	mov	r3, r0
 80062aa:	6978      	ldr	r0, [r7, #20]
 80062ac:	f004 ffca 	bl	800b244 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	441a      	add	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	695a      	ldr	r2, [r3, #20]
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	441a      	add	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d809      	bhi.n	80062f2 <PCD_WriteEmptyTxFifo+0xde>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d203      	bcs.n	80062f2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1bf      	bne.n	8006272 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d811      	bhi.n	8006322 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	f003 030f 	and.w	r3, r3, #15
 8006304:	2201      	movs	r2, #1
 8006306:	fa02 f303 	lsl.w	r3, r2, r3
 800630a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	43db      	mvns	r3, r3
 8006318:	6939      	ldr	r1, [r7, #16]
 800631a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800631e:	4013      	ands	r3, r2
 8006320:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3720      	adds	r7, #32
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	333c      	adds	r3, #60	@ 0x3c
 8006344:	3304      	adds	r3, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	799b      	ldrb	r3, [r3, #6]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d17b      	bne.n	800645a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4a61      	ldr	r2, [pc, #388]	@ (80064f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006370:	4293      	cmp	r3, r2
 8006372:	f240 80b9 	bls.w	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80b3 	beq.w	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638e:	461a      	mov	r2, r3
 8006390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006394:	6093      	str	r3, [r2, #8]
 8006396:	e0a7      	b.n	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f003 0320 	and.w	r3, r3, #32
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ae:	461a      	mov	r2, r3
 80063b0:	2320      	movs	r3, #32
 80063b2:	6093      	str	r3, [r2, #8]
 80063b4:	e098      	b.n	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 8093 	bne.w	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4a4b      	ldr	r2, [pc, #300]	@ (80064f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d90f      	bls.n	80063ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00a      	beq.n	80063ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e0:	461a      	mov	r2, r3
 80063e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063e6:	6093      	str	r3, [r2, #8]
 80063e8:	e07e      	b.n	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	4413      	add	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	4413      	add	r3, r2
 80063fc:	3304      	adds	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	0159      	lsls	r1, r3, #5
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	440b      	add	r3, r1
 800640c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006416:	1ad2      	subs	r2, r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d114      	bne.n	800644c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d109      	bne.n	800643e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006434:	461a      	mov	r2, r3
 8006436:	2101      	movs	r1, #1
 8006438:	f005 f99a 	bl	800b770 <USB_EP0_OutStart>
 800643c:	e006      	b.n	800644c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	441a      	add	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	b2db      	uxtb	r3, r3
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f007 fe2a 	bl	800e0ac <HAL_PCD_DataOutStageCallback>
 8006458:	e046      	b.n	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	4a26      	ldr	r2, [pc, #152]	@ (80064f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d124      	bne.n	80064ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00a      	beq.n	8006482 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006478:	461a      	mov	r2, r3
 800647a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647e:	6093      	str	r3, [r2, #8]
 8006480:	e032      	b.n	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d008      	beq.n	800649e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006498:	461a      	mov	r2, r3
 800649a:	2320      	movs	r3, #32
 800649c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	4619      	mov	r1, r3
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f007 fe01 	bl	800e0ac <HAL_PCD_DataOutStageCallback>
 80064aa:	e01d      	b.n	80064e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d114      	bne.n	80064dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064d4:	461a      	mov	r2, r3
 80064d6:	2100      	movs	r1, #0
 80064d8:	f005 f94a 	bl	800b770 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f007 fde2 	bl	800e0ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3720      	adds	r7, #32
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	4f54300a 	.word	0x4f54300a
 80064f8:	4f54310a 	.word	0x4f54310a

080064fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	333c      	adds	r3, #60	@ 0x3c
 8006514:	3304      	adds	r3, #4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a15      	ldr	r2, [pc, #84]	@ (8006584 <PCD_EP_OutSetupPacket_int+0x88>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d90e      	bls.n	8006550 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006548:	461a      	mov	r2, r3
 800654a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800654e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f007 fd99 	bl	800e088 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a0a      	ldr	r2, [pc, #40]	@ (8006584 <PCD_EP_OutSetupPacket_int+0x88>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d90c      	bls.n	8006578 <PCD_EP_OutSetupPacket_int+0x7c>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	799b      	ldrb	r3, [r3, #6]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d108      	bne.n	8006578 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6818      	ldr	r0, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006570:	461a      	mov	r2, r3
 8006572:	2101      	movs	r1, #1
 8006574:	f005 f8fc 	bl	800b770 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	4f54300a 	.word	0x4f54300a

08006588 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
 8006594:	4613      	mov	r3, r2
 8006596:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065a6:	883b      	ldrh	r3, [r7, #0]
 80065a8:	0419      	lsls	r1, r3, #16
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80065b4:	e028      	b.n	8006608 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	4413      	add	r3, r2
 80065c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	73fb      	strb	r3, [r7, #15]
 80065c8:	e00d      	b.n	80065e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
 80065d0:	3340      	adds	r3, #64	@ 0x40
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	3301      	adds	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	7bfa      	ldrb	r2, [r7, #15]
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3ec      	bcc.n	80065ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065f0:	883b      	ldrh	r3, [r7, #0]
 80065f2:	0418      	lsls	r0, r3, #16
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6819      	ldr	r1, [r3, #0]
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4302      	orrs	r2, r0
 8006600:	3340      	adds	r3, #64	@ 0x40
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	887a      	ldrh	r2, [r7, #2]
 8006628:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e267      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d075      	beq.n	800675a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800666e:	4b88      	ldr	r3, [pc, #544]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	2b04      	cmp	r3, #4
 8006678:	d00c      	beq.n	8006694 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800667a:	4b85      	ldr	r3, [pc, #532]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006682:	2b08      	cmp	r3, #8
 8006684:	d112      	bne.n	80066ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006686:	4b82      	ldr	r3, [pc, #520]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800668e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006692:	d10b      	bne.n	80066ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006694:	4b7e      	ldr	r3, [pc, #504]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d05b      	beq.n	8006758 <HAL_RCC_OscConfig+0x108>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d157      	bne.n	8006758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e242      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b4:	d106      	bne.n	80066c4 <HAL_RCC_OscConfig+0x74>
 80066b6:	4b76      	ldr	r3, [pc, #472]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a75      	ldr	r2, [pc, #468]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e01d      	b.n	8006700 <HAL_RCC_OscConfig+0xb0>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x98>
 80066ce:	4b70      	ldr	r3, [pc, #448]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a6f      	ldr	r2, [pc, #444]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b6d      	ldr	r3, [pc, #436]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a6c      	ldr	r2, [pc, #432]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0xb0>
 80066e8:	4b69      	ldr	r3, [pc, #420]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a68      	ldr	r2, [pc, #416]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4b66      	ldr	r3, [pc, #408]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a65      	ldr	r2, [pc, #404]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80066fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006708:	f7fd f8a6 	bl	8003858 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006710:	f7fd f8a2 	bl	8003858 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	@ 0x64
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e207      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006722:	4b5b      	ldr	r3, [pc, #364]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0xc0>
 800672e:	e014      	b.n	800675a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006730:	f7fd f892 	bl	8003858 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006738:	f7fd f88e 	bl	8003858 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	@ 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1f3      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800674a:	4b51      	ldr	r3, [pc, #324]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0xe8>
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d063      	beq.n	800682e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006766:	4b4a      	ldr	r3, [pc, #296]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 030c 	and.w	r3, r3, #12
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006772:	4b47      	ldr	r3, [pc, #284]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800677a:	2b08      	cmp	r3, #8
 800677c:	d11c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800677e:	4b44      	ldr	r3, [pc, #272]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d116      	bne.n	80067b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800678a:	4b41      	ldr	r3, [pc, #260]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_RCC_OscConfig+0x152>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d001      	beq.n	80067a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e1c7      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a2:	4b3b      	ldr	r3, [pc, #236]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4937      	ldr	r1, [pc, #220]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067b6:	e03a      	b.n	800682e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d020      	beq.n	8006802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c0:	4b34      	ldr	r3, [pc, #208]	@ (8006894 <HAL_RCC_OscConfig+0x244>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c6:	f7fd f847 	bl	8003858 <HAL_GetTick>
 80067ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067cc:	e008      	b.n	80067e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ce:	f7fd f843 	bl	8003858 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e1a8      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067ec:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	4925      	ldr	r1, [pc, #148]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	600b      	str	r3, [r1, #0]
 8006800:	e015      	b.n	800682e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006802:	4b24      	ldr	r3, [pc, #144]	@ (8006894 <HAL_RCC_OscConfig+0x244>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006808:	f7fd f826 	bl	8003858 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006810:	f7fd f822 	bl	8003858 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e187      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006822:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f0      	bne.n	8006810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 0308 	and.w	r3, r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	d036      	beq.n	80068a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006842:	4b15      	ldr	r3, [pc, #84]	@ (8006898 <HAL_RCC_OscConfig+0x248>)
 8006844:	2201      	movs	r2, #1
 8006846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006848:	f7fd f806 	bl	8003858 <HAL_GetTick>
 800684c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006850:	f7fd f802 	bl	8003858 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e167      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006862:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <HAL_RCC_OscConfig+0x240>)
 8006864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0f0      	beq.n	8006850 <HAL_RCC_OscConfig+0x200>
 800686e:	e01b      	b.n	80068a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006870:	4b09      	ldr	r3, [pc, #36]	@ (8006898 <HAL_RCC_OscConfig+0x248>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006876:	f7fc ffef 	bl	8003858 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800687c:	e00e      	b.n	800689c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687e:	f7fc ffeb 	bl	8003858 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d907      	bls.n	800689c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e150      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
 8006890:	40023800 	.word	0x40023800
 8006894:	42470000 	.word	0x42470000
 8006898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800689c:	4b88      	ldr	r3, [pc, #544]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 800689e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1ea      	bne.n	800687e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8097 	beq.w	80069e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ba:	4b81      	ldr	r3, [pc, #516]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10f      	bne.n	80068e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c6:	2300      	movs	r3, #0
 80068c8:	60bb      	str	r3, [r7, #8]
 80068ca:	4b7d      	ldr	r3, [pc, #500]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80068cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ce:	4a7c      	ldr	r2, [pc, #496]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80068d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80068d6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068e2:	2301      	movs	r3, #1
 80068e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e6:	4b77      	ldr	r3, [pc, #476]	@ (8006ac4 <HAL_RCC_OscConfig+0x474>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d118      	bne.n	8006924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068f2:	4b74      	ldr	r3, [pc, #464]	@ (8006ac4 <HAL_RCC_OscConfig+0x474>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a73      	ldr	r2, [pc, #460]	@ (8006ac4 <HAL_RCC_OscConfig+0x474>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068fe:	f7fc ffab 	bl	8003858 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006906:	f7fc ffa7 	bl	8003858 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e10c      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006918:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac4 <HAL_RCC_OscConfig+0x474>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d106      	bne.n	800693a <HAL_RCC_OscConfig+0x2ea>
 800692c:	4b64      	ldr	r3, [pc, #400]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006930:	4a63      	ldr	r2, [pc, #396]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6713      	str	r3, [r2, #112]	@ 0x70
 8006938:	e01c      	b.n	8006974 <HAL_RCC_OscConfig+0x324>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2b05      	cmp	r3, #5
 8006940:	d10c      	bne.n	800695c <HAL_RCC_OscConfig+0x30c>
 8006942:	4b5f      	ldr	r3, [pc, #380]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006946:	4a5e      	ldr	r2, [pc, #376]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006948:	f043 0304 	orr.w	r3, r3, #4
 800694c:	6713      	str	r3, [r2, #112]	@ 0x70
 800694e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006952:	4a5b      	ldr	r2, [pc, #364]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	6713      	str	r3, [r2, #112]	@ 0x70
 800695a:	e00b      	b.n	8006974 <HAL_RCC_OscConfig+0x324>
 800695c:	4b58      	ldr	r3, [pc, #352]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 800695e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006960:	4a57      	ldr	r2, [pc, #348]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006962:	f023 0301 	bic.w	r3, r3, #1
 8006966:	6713      	str	r3, [r2, #112]	@ 0x70
 8006968:	4b55      	ldr	r3, [pc, #340]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696c:	4a54      	ldr	r2, [pc, #336]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 800696e:	f023 0304 	bic.w	r3, r3, #4
 8006972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d015      	beq.n	80069a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fc ff6c 	bl	8003858 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006982:	e00a      	b.n	800699a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006984:	f7fc ff68 	bl	8003858 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e0cb      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699a:	4b49      	ldr	r3, [pc, #292]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0ee      	beq.n	8006984 <HAL_RCC_OscConfig+0x334>
 80069a6:	e014      	b.n	80069d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069a8:	f7fc ff56 	bl	8003858 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ae:	e00a      	b.n	80069c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b0:	f7fc ff52 	bl	8003858 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e0b5      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1ee      	bne.n	80069b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d105      	bne.n	80069e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069d8:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80069da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069dc:	4a38      	ldr	r2, [pc, #224]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80069de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80a1 	beq.w	8006b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069ee:	4b34      	ldr	r3, [pc, #208]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 030c 	and.w	r3, r3, #12
 80069f6:	2b08      	cmp	r3, #8
 80069f8:	d05c      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d141      	bne.n	8006a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a02:	4b31      	ldr	r3, [pc, #196]	@ (8006ac8 <HAL_RCC_OscConfig+0x478>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a08:	f7fc ff26 	bl	8003858 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a10:	f7fc ff22 	bl	8003858 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e087      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a22:	4b27      	ldr	r3, [pc, #156]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f0      	bne.n	8006a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3c:	019b      	lsls	r3, r3, #6
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	3b01      	subs	r3, #1
 8006a48:	041b      	lsls	r3, r3, #16
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	061b      	lsls	r3, r3, #24
 8006a52:	491b      	ldr	r1, [pc, #108]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <HAL_RCC_OscConfig+0x478>)
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a5e:	f7fc fefb 	bl	8003858 <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a64:	e008      	b.n	8006a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a66:	f7fc fef7 	bl	8003858 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e05c      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a78:	4b11      	ldr	r3, [pc, #68]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f0      	beq.n	8006a66 <HAL_RCC_OscConfig+0x416>
 8006a84:	e054      	b.n	8006b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a86:	4b10      	ldr	r3, [pc, #64]	@ (8006ac8 <HAL_RCC_OscConfig+0x478>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a8c:	f7fc fee4 	bl	8003858 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a94:	f7fc fee0 	bl	8003858 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e045      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aa6:	4b06      	ldr	r3, [pc, #24]	@ (8006ac0 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1f0      	bne.n	8006a94 <HAL_RCC_OscConfig+0x444>
 8006ab2:	e03d      	b.n	8006b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d107      	bne.n	8006acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e038      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	40007000 	.word	0x40007000
 8006ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006acc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b3c <HAL_RCC_OscConfig+0x4ec>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d028      	beq.n	8006b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d121      	bne.n	8006b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d11a      	bne.n	8006b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d111      	bne.n	8006b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b12:	085b      	lsrs	r3, r3, #1
 8006b14:	3b01      	subs	r3, #1
 8006b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d107      	bne.n	8006b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800

08006b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0cc      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b54:	4b68      	ldr	r3, [pc, #416]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d90c      	bls.n	8006b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b65      	ldr	r3, [pc, #404]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6a:	4b63      	ldr	r3, [pc, #396]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d001      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e0b8      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d020      	beq.n	8006bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b94:	4b59      	ldr	r3, [pc, #356]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	4a58      	ldr	r2, [pc, #352]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bac:	4b53      	ldr	r3, [pc, #332]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	4a52      	ldr	r2, [pc, #328]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb8:	4b50      	ldr	r3, [pc, #320]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	494d      	ldr	r1, [pc, #308]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d044      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d107      	bne.n	8006bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bde:	4b47      	ldr	r3, [pc, #284]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d119      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e07f      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d003      	beq.n	8006bfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d107      	bne.n	8006c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e06f      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e067      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c1e:	4b37      	ldr	r3, [pc, #220]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f023 0203 	bic.w	r2, r3, #3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	4934      	ldr	r1, [pc, #208]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c30:	f7fc fe12 	bl	8003858 <HAL_GetTick>
 8006c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c36:	e00a      	b.n	8006c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c38:	f7fc fe0e 	bl	8003858 <HAL_GetTick>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1ad3      	subs	r3, r2, r3
 8006c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e04f      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 020c 	and.w	r2, r3, #12
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d1eb      	bne.n	8006c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c60:	4b25      	ldr	r3, [pc, #148]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d20c      	bcs.n	8006c88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c6e:	4b22      	ldr	r3, [pc, #136]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c76:	4b20      	ldr	r3, [pc, #128]	@ (8006cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0307 	and.w	r3, r3, #7
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d001      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e032      	b.n	8006cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c94:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	4916      	ldr	r1, [pc, #88]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d009      	beq.n	8006cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cb2:	4b12      	ldr	r3, [pc, #72]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	490e      	ldr	r1, [pc, #56]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cc6:	f000 f821 	bl	8006d0c <HAL_RCC_GetSysClockFreq>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	091b      	lsrs	r3, r3, #4
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	490a      	ldr	r1, [pc, #40]	@ (8006d00 <HAL_RCC_ClockConfig+0x1c0>)
 8006cd8:	5ccb      	ldrb	r3, [r1, r3]
 8006cda:	fa22 f303 	lsr.w	r3, r2, r3
 8006cde:	4a09      	ldr	r2, [pc, #36]	@ (8006d04 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ce2:	4b09      	ldr	r3, [pc, #36]	@ (8006d08 <HAL_RCC_ClockConfig+0x1c8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fc fd72 	bl	80037d0 <HAL_InitTick>

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	40023c00 	.word	0x40023c00
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	0800efc4 	.word	0x0800efc4
 8006d04:	2000000c 	.word	0x2000000c
 8006d08:	20000010 	.word	0x20000010

08006d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d10:	b094      	sub	sp, #80	@ 0x50
 8006d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d24:	4b79      	ldr	r3, [pc, #484]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 030c 	and.w	r3, r3, #12
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d00d      	beq.n	8006d4c <HAL_RCC_GetSysClockFreq+0x40>
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	f200 80e1 	bhi.w	8006ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_RCC_GetSysClockFreq+0x34>
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	d003      	beq.n	8006d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d3e:	e0db      	b.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d40:	4b73      	ldr	r3, [pc, #460]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d44:	e0db      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d46:	4b73      	ldr	r3, [pc, #460]	@ (8006f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006d4a:	e0d8      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d56:	4b6d      	ldr	r3, [pc, #436]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d063      	beq.n	8006e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d62:	4b6a      	ldr	r3, [pc, #424]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	2200      	movs	r2, #0
 8006d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d76:	2300      	movs	r3, #0
 8006d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d7e:	4622      	mov	r2, r4
 8006d80:	462b      	mov	r3, r5
 8006d82:	f04f 0000 	mov.w	r0, #0
 8006d86:	f04f 0100 	mov.w	r1, #0
 8006d8a:	0159      	lsls	r1, r3, #5
 8006d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d90:	0150      	lsls	r0, r2, #5
 8006d92:	4602      	mov	r2, r0
 8006d94:	460b      	mov	r3, r1
 8006d96:	4621      	mov	r1, r4
 8006d98:	1a51      	subs	r1, r2, r1
 8006d9a:	6139      	str	r1, [r7, #16]
 8006d9c:	4629      	mov	r1, r5
 8006d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006db0:	4659      	mov	r1, fp
 8006db2:	018b      	lsls	r3, r1, #6
 8006db4:	4651      	mov	r1, sl
 8006db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006dba:	4651      	mov	r1, sl
 8006dbc:	018a      	lsls	r2, r1, #6
 8006dbe:	4651      	mov	r1, sl
 8006dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dde:	4690      	mov	r8, r2
 8006de0:	4699      	mov	r9, r3
 8006de2:	4623      	mov	r3, r4
 8006de4:	eb18 0303 	adds.w	r3, r8, r3
 8006de8:	60bb      	str	r3, [r7, #8]
 8006dea:	462b      	mov	r3, r5
 8006dec:	eb49 0303 	adc.w	r3, r9, r3
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dfe:	4629      	mov	r1, r5
 8006e00:	024b      	lsls	r3, r1, #9
 8006e02:	4621      	mov	r1, r4
 8006e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006e08:	4621      	mov	r1, r4
 8006e0a:	024a      	lsls	r2, r1, #9
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e12:	2200      	movs	r2, #0
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e1c:	f7f9 fa28 	bl	8000270 <__aeabi_uldivmod>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	4613      	mov	r3, r2
 8006e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e28:	e058      	b.n	8006edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e2a:	4b38      	ldr	r3, [pc, #224]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	099b      	lsrs	r3, r3, #6
 8006e30:	2200      	movs	r2, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	4611      	mov	r1, r2
 8006e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e44:	4642      	mov	r2, r8
 8006e46:	464b      	mov	r3, r9
 8006e48:	f04f 0000 	mov.w	r0, #0
 8006e4c:	f04f 0100 	mov.w	r1, #0
 8006e50:	0159      	lsls	r1, r3, #5
 8006e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e56:	0150      	lsls	r0, r2, #5
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e62:	4649      	mov	r1, r9
 8006e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e68:	f04f 0200 	mov.w	r2, #0
 8006e6c:	f04f 0300 	mov.w	r3, #0
 8006e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8006e80:	eb63 050b 	sbc.w	r5, r3, fp
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	00eb      	lsls	r3, r5, #3
 8006e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e92:	00e2      	lsls	r2, r4, #3
 8006e94:	4614      	mov	r4, r2
 8006e96:	461d      	mov	r5, r3
 8006e98:	4643      	mov	r3, r8
 8006e9a:	18e3      	adds	r3, r4, r3
 8006e9c:	603b      	str	r3, [r7, #0]
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	eb45 0303 	adc.w	r3, r5, r3
 8006ea4:	607b      	str	r3, [r7, #4]
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	f04f 0300 	mov.w	r3, #0
 8006eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	028b      	lsls	r3, r1, #10
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	028a      	lsls	r2, r1, #10
 8006ec0:	4610      	mov	r0, r2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	61bb      	str	r3, [r7, #24]
 8006eca:	61fa      	str	r2, [r7, #28]
 8006ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed0:	f7f9 f9ce 	bl	8000270 <__aeabi_uldivmod>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4613      	mov	r3, r2
 8006eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006edc:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006eec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ef6:	e002      	b.n	8006efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ef8:	4b05      	ldr	r3, [pc, #20]	@ (8006f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8006efa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3750      	adds	r7, #80	@ 0x50
 8006f04:	46bd      	mov	sp, r7
 8006f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	00f42400 	.word	0x00f42400
 8006f14:	007a1200 	.word	0x007a1200

08006f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f1c:	4b03      	ldr	r3, [pc, #12]	@ (8006f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	2000000c 	.word	0x2000000c

08006f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f34:	f7ff fff0 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	0a9b      	lsrs	r3, r3, #10
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	4903      	ldr	r1, [pc, #12]	@ (8006f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f46:	5ccb      	ldrb	r3, [r1, r3]
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40023800 	.word	0x40023800
 8006f54:	0800efd4 	.word	0x0800efd4

08006f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f5c:	f7ff ffdc 	bl	8006f18 <HAL_RCC_GetHCLKFreq>
 8006f60:	4602      	mov	r2, r0
 8006f62:	4b05      	ldr	r3, [pc, #20]	@ (8006f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	0b5b      	lsrs	r3, r3, #13
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	4903      	ldr	r1, [pc, #12]	@ (8006f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f6e:	5ccb      	ldrb	r3, [r1, r3]
 8006f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	0800efd4 	.word	0x0800efd4

08006f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e07b      	b.n	800708a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d108      	bne.n	8006fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fa2:	d009      	beq.n	8006fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	61da      	str	r2, [r3, #28]
 8006faa:	e005      	b.n	8006fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb faa6 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	431a      	orrs	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703c:	ea42 0103 	orr.w	r1, r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	0c1b      	lsrs	r3, r3, #16
 8007056:	f003 0104 	and.w	r1, r3, #4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705e:	f003 0210 	and.w	r2, r3, #16
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b088      	sub	sp, #32
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	603b      	str	r3, [r7, #0]
 800709e:	4613      	mov	r3, r2
 80070a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a2:	f7fc fbd9 	bl	8003858 <HAL_GetTick>
 80070a6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070a8:	88fb      	ldrh	r3, [r7, #6]
 80070aa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d001      	beq.n	80070bc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
 80070ba:	e12a      	b.n	8007312 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <HAL_SPI_Transmit+0x36>
 80070c2:	88fb      	ldrh	r3, [r7, #6]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e122      	b.n	8007312 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_SPI_Transmit+0x48>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e11b      	b.n	8007312 <HAL_SPI_Transmit+0x280>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2203      	movs	r2, #3
 80070e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	88fa      	ldrh	r2, [r7, #6]
 8007100:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007128:	d10f      	bne.n	800714a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007138:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007148:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007154:	2b40      	cmp	r3, #64	@ 0x40
 8007156:	d007      	beq.n	8007168 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007166:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007170:	d152      	bne.n	8007218 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_Transmit+0xee>
 800717a:	8b7b      	ldrh	r3, [r7, #26]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d145      	bne.n	800720c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007190:	1c9a      	adds	r2, r3, #2
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071a4:	e032      	b.n	800720c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 0302 	and.w	r3, r3, #2
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d112      	bne.n	80071da <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071b8:	881a      	ldrh	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071c4:	1c9a      	adds	r2, r3, #2
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071d8:	e018      	b.n	800720c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071da:	f7fc fb3d 	bl	8003858 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d803      	bhi.n	80071f2 <HAL_SPI_Transmit+0x160>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071f0:	d102      	bne.n	80071f8 <HAL_SPI_Transmit+0x166>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e082      	b.n	8007312 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1c7      	bne.n	80071a6 <HAL_SPI_Transmit+0x114>
 8007216:	e053      	b.n	80072c0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <HAL_SPI_Transmit+0x194>
 8007220:	8b7b      	ldrh	r3, [r7, #26]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d147      	bne.n	80072b6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	330c      	adds	r3, #12
 8007230:	7812      	ldrb	r2, [r2, #0]
 8007232:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007242:	b29b      	uxth	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	b29a      	uxth	r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800724c:	e033      	b.n	80072b6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b02      	cmp	r3, #2
 800725a:	d113      	bne.n	8007284 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	330c      	adds	r3, #12
 8007266:	7812      	ldrb	r2, [r2, #0]
 8007268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726e:	1c5a      	adds	r2, r3, #1
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b01      	subs	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007282:	e018      	b.n	80072b6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007284:	f7fc fae8 	bl	8003858 <HAL_GetTick>
 8007288:	4602      	mov	r2, r0
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	1ad3      	subs	r3, r2, r3
 800728e:	683a      	ldr	r2, [r7, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d803      	bhi.n	800729c <HAL_SPI_Transmit+0x20a>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800729a:	d102      	bne.n	80072a2 <HAL_SPI_Transmit+0x210>
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e02d      	b.n	8007312 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1c6      	bne.n	800724e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fcf7 	bl	8007cb8 <SPI_EndRxTxTransaction>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2220      	movs	r2, #32
 80072d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	617b      	str	r3, [r7, #20]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	617b      	str	r3, [r7, #20]
 80072f2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007310:	2300      	movs	r3, #0
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3720      	adds	r7, #32
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b088      	sub	sp, #32
 800731e:	af02      	add	r7, sp, #8
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b01      	cmp	r3, #1
 8007334:	d001      	beq.n	800733a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007336:	2302      	movs	r3, #2
 8007338:	e104      	b.n	8007544 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <HAL_SPI_Receive+0x2c>
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e0fc      	b.n	8007544 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007352:	d112      	bne.n	800737a <HAL_SPI_Receive+0x60>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10e      	bne.n	800737a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2204      	movs	r2, #4
 8007360:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4613      	mov	r3, r2
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 f8eb 	bl	800754c <HAL_SPI_TransmitReceive>
 8007376:	4603      	mov	r3, r0
 8007378:	e0e4      	b.n	8007544 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800737a:	f7fc fa6d 	bl	8003858 <HAL_GetTick>
 800737e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <HAL_SPI_Receive+0x74>
 800738a:	2302      	movs	r3, #2
 800738c:	e0da      	b.n	8007544 <HAL_SPI_Receive+0x22a>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2204      	movs	r2, #4
 800739a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	68ba      	ldr	r2, [r7, #8]
 80073a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	88fa      	ldrh	r2, [r7, #6]
 80073ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	88fa      	ldrh	r2, [r7, #6]
 80073b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073dc:	d10f      	bne.n	80073fe <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007408:	2b40      	cmp	r3, #64	@ 0x40
 800740a:	d007      	beq.n	800741c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800741a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d170      	bne.n	8007506 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007424:	e035      	b.n	8007492 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b01      	cmp	r3, #1
 8007432:	d115      	bne.n	8007460 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f103 020c 	add.w	r2, r3, #12
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007440:	7812      	ldrb	r2, [r2, #0]
 8007442:	b2d2      	uxtb	r2, r2
 8007444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800745e:	e018      	b.n	8007492 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007460:	f7fc f9fa 	bl	8003858 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	429a      	cmp	r2, r3
 800746e:	d803      	bhi.n	8007478 <HAL_SPI_Receive+0x15e>
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007476:	d102      	bne.n	800747e <HAL_SPI_Receive+0x164>
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e058      	b.n	8007544 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1c4      	bne.n	8007426 <HAL_SPI_Receive+0x10c>
 800749c:	e038      	b.n	8007510 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d113      	bne.n	80074d4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	b292      	uxth	r2, r2
 80074b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	1c9a      	adds	r2, r3, #2
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074d2:	e018      	b.n	8007506 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d4:	f7fc f9c0 	bl	8003858 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d803      	bhi.n	80074ec <HAL_SPI_Receive+0x1d2>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ea:	d102      	bne.n	80074f2 <HAL_SPI_Receive+0x1d8>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d109      	bne.n	8007506 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e01e      	b.n	8007544 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1c6      	bne.n	800749e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	6839      	ldr	r1, [r7, #0]
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 fb69 	bl	8007bec <SPI_EndRxTransaction>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2220      	movs	r2, #32
 8007524:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007542:	2300      	movs	r3, #0
  }
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08a      	sub	sp, #40	@ 0x28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800755a:	2301      	movs	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755e:	f7fc f97b 	bl	8003858 <HAL_GetTick>
 8007562:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800756a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d00c      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x4a>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007582:	d106      	bne.n	8007592 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d102      	bne.n	8007592 <HAL_SPI_TransmitReceive+0x46>
 800758c:	7ffb      	ldrb	r3, [r7, #31]
 800758e:	2b04      	cmp	r3, #4
 8007590:	d001      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007592:	2302      	movs	r3, #2
 8007594:	e17f      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d005      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x5c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x5c>
 80075a2:	887b      	ldrh	r3, [r7, #2]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e174      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d101      	bne.n	80075ba <HAL_SPI_TransmitReceive+0x6e>
 80075b6:	2302      	movs	r3, #2
 80075b8:	e16d      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d003      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2205      	movs	r2, #5
 80075d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	887a      	ldrh	r2, [r7, #2]
 80075e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	887a      	ldrh	r2, [r7, #2]
 80075ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	887a      	ldrh	r2, [r7, #2]
 80075f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	887a      	ldrh	r2, [r7, #2]
 80075fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007616:	2b40      	cmp	r3, #64	@ 0x40
 8007618:	d007      	beq.n	800762a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007632:	d17e      	bne.n	8007732 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_SPI_TransmitReceive+0xf6>
 800763c:	8afb      	ldrh	r3, [r7, #22]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d16c      	bne.n	800771c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007646:	881a      	ldrh	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800765c:	b29b      	uxth	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	b29a      	uxth	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007666:	e059      	b.n	800771c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	2b02      	cmp	r3, #2
 8007674:	d11b      	bne.n	80076ae <HAL_SPI_TransmitReceive+0x162>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d016      	beq.n	80076ae <HAL_SPI_TransmitReceive+0x162>
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	2b01      	cmp	r3, #1
 8007684:	d113      	bne.n	80076ae <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	881a      	ldrh	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007696:	1c9a      	adds	r2, r3, #2
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d119      	bne.n	80076f0 <HAL_SPI_TransmitReceive+0x1a4>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d014      	beq.n	80076f0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	b292      	uxth	r2, r2
 80076d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d8:	1c9a      	adds	r2, r3, #2
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076ec:	2301      	movs	r3, #1
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076f0:	f7fc f8b2 	bl	8003858 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d80d      	bhi.n	800771c <HAL_SPI_TransmitReceive+0x1d0>
 8007700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007706:	d009      	beq.n	800771c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e0bc      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1a0      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x11c>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d19b      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x11c>
 8007730:	e082      	b.n	8007838 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <HAL_SPI_TransmitReceive+0x1f4>
 800773a:	8afb      	ldrh	r3, [r7, #22]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d171      	bne.n	8007824 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007766:	e05d      	b.n	8007824 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d11c      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x264>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d017      	beq.n	80077b0 <HAL_SPI_TransmitReceive+0x264>
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	2b01      	cmp	r3, #1
 8007784:	d114      	bne.n	80077b0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ac:	2300      	movs	r3, #0
 80077ae:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d119      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x2a6>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d014      	beq.n	80077f2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68da      	ldr	r2, [r3, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077ee:	2301      	movs	r3, #1
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077f2:	f7fc f831 	bl	8003858 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077fe:	429a      	cmp	r2, r3
 8007800:	d803      	bhi.n	800780a <HAL_SPI_TransmitReceive+0x2be>
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007808:	d102      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x2c4>
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d109      	bne.n	8007824 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e038      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d19c      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x21c>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007832:	b29b      	uxth	r3, r3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d197      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007838:	6a3a      	ldr	r2, [r7, #32]
 800783a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800783c:	68f8      	ldr	r0, [r7, #12]
 800783e:	f000 fa3b 	bl	8007cb8 <SPI_EndRxTxTransaction>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d008      	beq.n	800785a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e01d      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d10a      	bne.n	8007878 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	613b      	str	r3, [r7, #16]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007894:	2300      	movs	r3, #0
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	3728      	adds	r7, #40	@ 0x28
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	099b      	lsrs	r3, r3, #6
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10f      	bne.n	80078e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	099b      	lsrs	r3, r3, #6
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	4798      	blx	r3
    return;
 80078e2:	e0d7      	b.n	8007a94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	f003 0301 	and.w	r3, r3, #1
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <HAL_SPI_IRQHandler+0x66>
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	09db      	lsrs	r3, r3, #7
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
    return;
 8007904:	e0c6      	b.n	8007a94 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	095b      	lsrs	r3, r3, #5
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10c      	bne.n	800792c <HAL_SPI_IRQHandler+0x8c>
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	099b      	lsrs	r3, r3, #6
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	0a1b      	lsrs	r3, r3, #8
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 80b4 	beq.w	8007a94 <HAL_SPI_IRQHandler+0x1f4>
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	f000 80ad 	beq.w	8007a94 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	099b      	lsrs	r3, r3, #6
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d023      	beq.n	800798e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b03      	cmp	r3, #3
 8007950:	d011      	beq.n	8007976 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007956:	f043 0204 	orr.w	r2, r3, #4
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	617b      	str	r3, [r7, #20]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	e00b      	b.n	800798e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007976:	2300      	movs	r3, #0
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	613b      	str	r3, [r7, #16]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	693b      	ldr	r3, [r7, #16]
        return;
 800798c:	e082      	b.n	8007a94 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b00      	cmp	r3, #0
 8007998:	d014      	beq.n	80079c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800799e:	f043 0201 	orr.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079a6:	2300      	movs	r3, #0
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00c      	beq.n	80079ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d4:	f043 0208 	orr.w	r2, r3, #8
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079dc:	2300      	movs	r3, #0
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	60bb      	str	r3, [r7, #8]
 80079e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04f      	beq.n	8007a92 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a00:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <HAL_SPI_IRQHandler+0x17e>
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d034      	beq.n	8007a88 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0203 	bic.w	r2, r2, #3
 8007a2c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d011      	beq.n	8007a5a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a3a:	4a18      	ldr	r2, [pc, #96]	@ (8007a9c <HAL_SPI_IRQHandler+0x1fc>)
 8007a3c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fc ff3e 	bl	80048c4 <HAL_DMA_Abort_IT>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d016      	beq.n	8007a90 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a66:	4a0d      	ldr	r2, [pc, #52]	@ (8007a9c <HAL_SPI_IRQHandler+0x1fc>)
 8007a68:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fc ff28 	bl	80048c4 <HAL_DMA_Abort_IT>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007a86:	e003      	b.n	8007a90 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f809 	bl	8007aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a8e:	e000      	b.n	8007a92 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007a90:	bf00      	nop
    return;
 8007a92:	bf00      	nop
  }
}
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08007ab5 	.word	0x08007ab5

08007aa0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f7ff ffe6 	bl	8007aa0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007aec:	f7fb feb4 	bl	8003858 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af4:	1a9b      	subs	r3, r3, r2
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4413      	add	r3, r2
 8007afa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007afc:	f7fb feac 	bl	8003858 <HAL_GetTick>
 8007b00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b02:	4b39      	ldr	r3, [pc, #228]	@ (8007be8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	015b      	lsls	r3, r3, #5
 8007b08:	0d1b      	lsrs	r3, r3, #20
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
 8007b10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b12:	e055      	b.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b1a:	d051      	beq.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b1c:	f7fb fe9c 	bl	8003858 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	69fa      	ldr	r2, [r7, #28]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d902      	bls.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d13d      	bne.n	8007bae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007b40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b4a:	d111      	bne.n	8007b70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b54:	d004      	beq.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b5e:	d107      	bne.n	8007b70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b78:	d10f      	bne.n	8007b9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e018      	b.n	8007be0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	e002      	b.n	8007bc0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d19a      	bne.n	8007b14 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000000c 	.word	0x2000000c

08007bec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af02      	add	r7, sp, #8
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c00:	d111      	bne.n	8007c26 <SPI_EndRxTransaction+0x3a>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c0a:	d004      	beq.n	8007c16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c14:	d107      	bne.n	8007c26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c2e:	d12a      	bne.n	8007c86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c38:	d012      	beq.n	8007c60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2180      	movs	r1, #128	@ 0x80
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7ff ff49 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02d      	beq.n	8007cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c54:	f043 0220 	orr.w	r2, r3, #32
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e026      	b.n	8007cae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2200      	movs	r2, #0
 8007c68:	2101      	movs	r1, #1
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f7ff ff36 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d01a      	beq.n	8007cac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7a:	f043 0220 	orr.w	r2, r3, #32
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e013      	b.n	8007cae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2101      	movs	r1, #1
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff ff23 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca0:	f043 0220 	orr.w	r2, r3, #32
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e000      	b.n	8007cae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	2102      	movs	r1, #2
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff ff04 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d007      	beq.n	8007cea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f043 0220 	orr.w	r2, r3, #32
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e032      	b.n	8007d50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007cea:	4b1b      	ldr	r3, [pc, #108]	@ (8007d58 <SPI_EndRxTxTransaction+0xa0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a1b      	ldr	r2, [pc, #108]	@ (8007d5c <SPI_EndRxTxTransaction+0xa4>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	0d5b      	lsrs	r3, r3, #21
 8007cf6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cfa:	fb02 f303 	mul.w	r3, r2, r3
 8007cfe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d08:	d112      	bne.n	8007d30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2200      	movs	r2, #0
 8007d12:	2180      	movs	r1, #128	@ 0x80
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff fee1 	bl	8007adc <SPI_WaitFlagStateUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d016      	beq.n	8007d4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d24:	f043 0220 	orr.w	r2, r3, #32
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e00f      	b.n	8007d50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d46:	2b80      	cmp	r3, #128	@ 0x80
 8007d48:	d0f2      	beq.n	8007d30 <SPI_EndRxTxTransaction+0x78>
 8007d4a:	e000      	b.n	8007d4e <SPI_EndRxTxTransaction+0x96>
        break;
 8007d4c:	bf00      	nop
  }

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	2000000c 	.word	0x2000000c
 8007d5c:	165e9f81 	.word	0x165e9f81

08007d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e041      	b.n	8007df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d106      	bne.n	8007d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fa fe7c 	bl	8002a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f000 fbde 	bl	8008560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d001      	beq.n	8007e18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e046      	b.n	8007ea6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a23      	ldr	r2, [pc, #140]	@ (8007eb4 <HAL_TIM_Base_Start+0xb4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d022      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e32:	d01d      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a1f      	ldr	r2, [pc, #124]	@ (8007eb8 <HAL_TIM_Base_Start+0xb8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d018      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a1e      	ldr	r2, [pc, #120]	@ (8007ebc <HAL_TIM_Base_Start+0xbc>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d013      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ec0 <HAL_TIM_Base_Start+0xc0>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00e      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec4 <HAL_TIM_Base_Start+0xc4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d009      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a19      	ldr	r2, [pc, #100]	@ (8007ec8 <HAL_TIM_Base_Start+0xc8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d004      	beq.n	8007e70 <HAL_TIM_Base_Start+0x70>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a18      	ldr	r2, [pc, #96]	@ (8007ecc <HAL_TIM_Base_Start+0xcc>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d111      	bne.n	8007e94 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	d010      	beq.n	8007ea4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0201 	orr.w	r2, r2, #1
 8007e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e92:	e007      	b.n	8007ea4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40000400 	.word	0x40000400
 8007ebc:	40000800 	.word	0x40000800
 8007ec0:	40000c00 	.word	0x40000c00
 8007ec4:	40010400 	.word	0x40010400
 8007ec8:	40014000 	.word	0x40014000
 8007ecc:	40001800 	.word	0x40001800

08007ed0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e041      	b.n	8007f66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d106      	bne.n	8007efc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f839 	bl	8007f6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f000 fb26 	bl	8008560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d109      	bne.n	8007fa8 <HAL_TIM_PWM_Start+0x24>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	e022      	b.n	8007fee <HAL_TIM_PWM_Start+0x6a>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	d109      	bne.n	8007fc2 <HAL_TIM_PWM_Start+0x3e>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	bf14      	ite	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	e015      	b.n	8007fee <HAL_TIM_PWM_Start+0x6a>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d109      	bne.n	8007fdc <HAL_TIM_PWM_Start+0x58>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	bf14      	ite	ne
 8007fd4:	2301      	movne	r3, #1
 8007fd6:	2300      	moveq	r3, #0
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	e008      	b.n	8007fee <HAL_TIM_PWM_Start+0x6a>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e07c      	b.n	80080f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d104      	bne.n	8008006 <HAL_TIM_PWM_Start+0x82>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008004:	e013      	b.n	800802e <HAL_TIM_PWM_Start+0xaa>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b04      	cmp	r3, #4
 800800a:	d104      	bne.n	8008016 <HAL_TIM_PWM_Start+0x92>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008014:	e00b      	b.n	800802e <HAL_TIM_PWM_Start+0xaa>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b08      	cmp	r3, #8
 800801a:	d104      	bne.n	8008026 <HAL_TIM_PWM_Start+0xa2>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008024:	e003      	b.n	800802e <HAL_TIM_PWM_Start+0xaa>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2201      	movs	r2, #1
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fe13 	bl	8008c62 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <HAL_TIM_PWM_Start+0x174>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_TIM_PWM_Start+0xcc>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2c      	ldr	r2, [pc, #176]	@ (80080fc <HAL_TIM_PWM_Start+0x178>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d101      	bne.n	8008054 <HAL_TIM_PWM_Start+0xd0>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <HAL_TIM_PWM_Start+0xd2>
 8008054:	2300      	movs	r3, #0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a22      	ldr	r2, [pc, #136]	@ (80080f8 <HAL_TIM_PWM_Start+0x174>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d022      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d01d      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1f      	ldr	r2, [pc, #124]	@ (8008100 <HAL_TIM_PWM_Start+0x17c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d018      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a1d      	ldr	r2, [pc, #116]	@ (8008104 <HAL_TIM_PWM_Start+0x180>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d013      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a1c      	ldr	r2, [pc, #112]	@ (8008108 <HAL_TIM_PWM_Start+0x184>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00e      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a16      	ldr	r2, [pc, #88]	@ (80080fc <HAL_TIM_PWM_Start+0x178>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d009      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a18      	ldr	r2, [pc, #96]	@ (800810c <HAL_TIM_PWM_Start+0x188>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <HAL_TIM_PWM_Start+0x136>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a16      	ldr	r2, [pc, #88]	@ (8008110 <HAL_TIM_PWM_Start+0x18c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d111      	bne.n	80080de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 0307 	and.w	r3, r3, #7
 80080c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b06      	cmp	r3, #6
 80080ca:	d010      	beq.n	80080ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f042 0201 	orr.w	r2, r2, #1
 80080da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080dc:	e007      	b.n	80080ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f042 0201 	orr.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	40010000 	.word	0x40010000
 80080fc:	40010400 	.word	0x40010400
 8008100:	40000400 	.word	0x40000400
 8008104:	40000800 	.word	0x40000800
 8008108:	40000c00 	.word	0x40000c00
 800810c:	40014000 	.word	0x40014000
 8008110:	40001800 	.word	0x40001800

08008114 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d101      	bne.n	8008128 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e041      	b.n	80081ac <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b00      	cmp	r3, #0
 8008132:	d106      	bne.n	8008142 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f839 	bl	80081b4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2202      	movs	r2, #2
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	3304      	adds	r3, #4
 8008152:	4619      	mov	r1, r3
 8008154:	4610      	mov	r0, r2
 8008156:	f000 fa03 	bl	8008560 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0208 	bic.w	r2, r2, #8
 8008168:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6819      	ldr	r1, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e0ae      	b.n	8008344 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b0c      	cmp	r3, #12
 80081f2:	f200 809f 	bhi.w	8008334 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081f6:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fc:	08008231 	.word	0x08008231
 8008200:	08008335 	.word	0x08008335
 8008204:	08008335 	.word	0x08008335
 8008208:	08008335 	.word	0x08008335
 800820c:	08008271 	.word	0x08008271
 8008210:	08008335 	.word	0x08008335
 8008214:	08008335 	.word	0x08008335
 8008218:	08008335 	.word	0x08008335
 800821c:	080082b3 	.word	0x080082b3
 8008220:	08008335 	.word	0x08008335
 8008224:	08008335 	.word	0x08008335
 8008228:	08008335 	.word	0x08008335
 800822c:	080082f3 	.word	0x080082f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68b9      	ldr	r1, [r7, #8]
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fa38 	bl	80086ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0208 	orr.w	r2, r2, #8
 800824a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	699a      	ldr	r2, [r3, #24]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0204 	bic.w	r2, r2, #4
 800825a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6999      	ldr	r1, [r3, #24]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	430a      	orrs	r2, r1
 800826c:	619a      	str	r2, [r3, #24]
      break;
 800826e:	e064      	b.n	800833a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68b9      	ldr	r1, [r7, #8]
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fa88 	bl	800878c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	699a      	ldr	r2, [r3, #24]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800828a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800829a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6999      	ldr	r1, [r3, #24]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	021a      	lsls	r2, r3, #8
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	619a      	str	r2, [r3, #24]
      break;
 80082b0:	e043      	b.n	800833a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68b9      	ldr	r1, [r7, #8]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fadd 	bl	8008878 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0208 	orr.w	r2, r2, #8
 80082cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0204 	bic.w	r2, r2, #4
 80082dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69d9      	ldr	r1, [r3, #28]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	61da      	str	r2, [r3, #28]
      break;
 80082f0:	e023      	b.n	800833a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68b9      	ldr	r1, [r7, #8]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fb31 	bl	8008960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69da      	ldr	r2, [r3, #28]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800830c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800831c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	69d9      	ldr	r1, [r3, #28]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	021a      	lsls	r2, r3, #8
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	61da      	str	r2, [r3, #28]
      break;
 8008332:	e002      	b.n	800833a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	75fb      	strb	r3, [r7, #23]
      break;
 8008338:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008342:	7dfb      	ldrb	r3, [r7, #23]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_TIM_ConfigClockSource+0x1c>
 8008364:	2302      	movs	r3, #2
 8008366:	e0b4      	b.n	80084d2 <HAL_TIM_ConfigClockSource+0x186>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800838e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a0:	d03e      	beq.n	8008420 <HAL_TIM_ConfigClockSource+0xd4>
 80083a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083a6:	f200 8087 	bhi.w	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ae:	f000 8086 	beq.w	80084be <HAL_TIM_ConfigClockSource+0x172>
 80083b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b6:	d87f      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083b8:	2b70      	cmp	r3, #112	@ 0x70
 80083ba:	d01a      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0xa6>
 80083bc:	2b70      	cmp	r3, #112	@ 0x70
 80083be:	d87b      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083c0:	2b60      	cmp	r3, #96	@ 0x60
 80083c2:	d050      	beq.n	8008466 <HAL_TIM_ConfigClockSource+0x11a>
 80083c4:	2b60      	cmp	r3, #96	@ 0x60
 80083c6:	d877      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083c8:	2b50      	cmp	r3, #80	@ 0x50
 80083ca:	d03c      	beq.n	8008446 <HAL_TIM_ConfigClockSource+0xfa>
 80083cc:	2b50      	cmp	r3, #80	@ 0x50
 80083ce:	d873      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083d0:	2b40      	cmp	r3, #64	@ 0x40
 80083d2:	d058      	beq.n	8008486 <HAL_TIM_ConfigClockSource+0x13a>
 80083d4:	2b40      	cmp	r3, #64	@ 0x40
 80083d6:	d86f      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083d8:	2b30      	cmp	r3, #48	@ 0x30
 80083da:	d064      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x15a>
 80083dc:	2b30      	cmp	r3, #48	@ 0x30
 80083de:	d86b      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d060      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x15a>
 80083e4:	2b20      	cmp	r3, #32
 80083e6:	d867      	bhi.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d05c      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x15a>
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d05a      	beq.n	80084a6 <HAL_TIM_ConfigClockSource+0x15a>
 80083f0:	e062      	b.n	80084b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008402:	f000 fc0e 	bl	8008c22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	609a      	str	r2, [r3, #8]
      break;
 800841e:	e04f      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008430:	f000 fbf7 	bl	8008c22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008442:	609a      	str	r2, [r3, #8]
      break;
 8008444:	e03c      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008452:	461a      	mov	r2, r3
 8008454:	f000 fb6b 	bl	8008b2e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2150      	movs	r1, #80	@ 0x50
 800845e:	4618      	mov	r0, r3
 8008460:	f000 fbc4 	bl	8008bec <TIM_ITRx_SetConfig>
      break;
 8008464:	e02c      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008472:	461a      	mov	r2, r3
 8008474:	f000 fb8a 	bl	8008b8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2160      	movs	r1, #96	@ 0x60
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fbb4 	bl	8008bec <TIM_ITRx_SetConfig>
      break;
 8008484:	e01c      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008492:	461a      	mov	r2, r3
 8008494:	f000 fb4b 	bl	8008b2e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2140      	movs	r1, #64	@ 0x40
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 fba4 	bl	8008bec <TIM_ITRx_SetConfig>
      break;
 80084a4:	e00c      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f000 fb9b 	bl	8008bec <TIM_ITRx_SetConfig>
      break;
 80084b6:	e003      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	73fb      	strb	r3, [r7, #15]
      break;
 80084bc:	e000      	b.n	80084c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e031      	b.n	8008556 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008502:	6839      	ldr	r1, [r7, #0]
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fa81 	bl	8008a0c <TIM_SlaveTimer_SetConfig>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d009      	beq.n	8008524 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e018      	b.n	8008556 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68da      	ldr	r2, [r3, #12]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008532:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008542:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3708      	adds	r7, #8
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a43      	ldr	r2, [pc, #268]	@ (8008680 <TIM_Base_SetConfig+0x120>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d013      	beq.n	80085a0 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800857e:	d00f      	beq.n	80085a0 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a40      	ldr	r2, [pc, #256]	@ (8008684 <TIM_Base_SetConfig+0x124>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00b      	beq.n	80085a0 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a3f      	ldr	r2, [pc, #252]	@ (8008688 <TIM_Base_SetConfig+0x128>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a3e      	ldr	r2, [pc, #248]	@ (800868c <TIM_Base_SetConfig+0x12c>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a3d      	ldr	r2, [pc, #244]	@ (8008690 <TIM_Base_SetConfig+0x130>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d108      	bne.n	80085b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a32      	ldr	r2, [pc, #200]	@ (8008680 <TIM_Base_SetConfig+0x120>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d02b      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c0:	d027      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a2f      	ldr	r2, [pc, #188]	@ (8008684 <TIM_Base_SetConfig+0x124>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d023      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a2e      	ldr	r2, [pc, #184]	@ (8008688 <TIM_Base_SetConfig+0x128>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d01f      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a2d      	ldr	r2, [pc, #180]	@ (800868c <TIM_Base_SetConfig+0x12c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01b      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008690 <TIM_Base_SetConfig+0x130>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d017      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2b      	ldr	r2, [pc, #172]	@ (8008694 <TIM_Base_SetConfig+0x134>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <TIM_Base_SetConfig+0x138>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00f      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a29      	ldr	r2, [pc, #164]	@ (800869c <TIM_Base_SetConfig+0x13c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00b      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a28      	ldr	r2, [pc, #160]	@ (80086a0 <TIM_Base_SetConfig+0x140>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d007      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a27      	ldr	r2, [pc, #156]	@ (80086a4 <TIM_Base_SetConfig+0x144>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d003      	beq.n	8008612 <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a26      	ldr	r2, [pc, #152]	@ (80086a8 <TIM_Base_SetConfig+0x148>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d108      	bne.n	8008624 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a0e      	ldr	r2, [pc, #56]	@ (8008680 <TIM_Base_SetConfig+0x120>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d003      	beq.n	8008652 <TIM_Base_SetConfig+0xf2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a10      	ldr	r2, [pc, #64]	@ (8008690 <TIM_Base_SetConfig+0x130>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d103      	bne.n	800865a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f043 0204 	orr.w	r2, r3, #4
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	601a      	str	r2, [r3, #0]
}
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	40010000 	.word	0x40010000
 8008684:	40000400 	.word	0x40000400
 8008688:	40000800 	.word	0x40000800
 800868c:	40000c00 	.word	0x40000c00
 8008690:	40010400 	.word	0x40010400
 8008694:	40014000 	.word	0x40014000
 8008698:	40014400 	.word	0x40014400
 800869c:	40014800 	.word	0x40014800
 80086a0:	40001800 	.word	0x40001800
 80086a4:	40001c00 	.word	0x40001c00
 80086a8:	40002000 	.word	0x40002000

080086ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f023 0201 	bic.w	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f023 0303 	bic.w	r3, r3, #3
 80086e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f023 0302 	bic.w	r3, r3, #2
 80086f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a20      	ldr	r2, [pc, #128]	@ (8008784 <TIM_OC1_SetConfig+0xd8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_OC1_SetConfig+0x64>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a1f      	ldr	r2, [pc, #124]	@ (8008788 <TIM_OC1_SetConfig+0xdc>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10c      	bne.n	800872a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0308 	bic.w	r3, r3, #8
 8008716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f023 0304 	bic.w	r3, r3, #4
 8008728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a15      	ldr	r2, [pc, #84]	@ (8008784 <TIM_OC1_SetConfig+0xd8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d003      	beq.n	800873a <TIM_OC1_SetConfig+0x8e>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a14      	ldr	r2, [pc, #80]	@ (8008788 <TIM_OC1_SetConfig+0xdc>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d111      	bne.n	800875e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	621a      	str	r2, [r3, #32]
}
 8008778:	bf00      	nop
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	40010000 	.word	0x40010000
 8008788:	40010400 	.word	0x40010400

0800878c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f023 0210 	bic.w	r2, r3, #16
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f023 0320 	bic.w	r3, r3, #32
 80087d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	011b      	lsls	r3, r3, #4
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a22      	ldr	r2, [pc, #136]	@ (8008870 <TIM_OC2_SetConfig+0xe4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_OC2_SetConfig+0x68>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a21      	ldr	r2, [pc, #132]	@ (8008874 <TIM_OC2_SetConfig+0xe8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d10d      	bne.n	8008810 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	011b      	lsls	r3, r3, #4
 8008802:	697a      	ldr	r2, [r7, #20]
 8008804:	4313      	orrs	r3, r2
 8008806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800880e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4a17      	ldr	r2, [pc, #92]	@ (8008870 <TIM_OC2_SetConfig+0xe4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d003      	beq.n	8008820 <TIM_OC2_SetConfig+0x94>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a16      	ldr	r2, [pc, #88]	@ (8008874 <TIM_OC2_SetConfig+0xe8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d113      	bne.n	8008848 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008826:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800882e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	4313      	orrs	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	4313      	orrs	r3, r2
 8008846:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	621a      	str	r2, [r3, #32]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	40010000 	.word	0x40010000
 8008874:	40010400 	.word	0x40010400

08008878 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008878:	b480      	push	{r7}
 800887a:	b087      	sub	sp, #28
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f023 0303 	bic.w	r3, r3, #3
 80088ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	021b      	lsls	r3, r3, #8
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a21      	ldr	r2, [pc, #132]	@ (8008958 <TIM_OC3_SetConfig+0xe0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d003      	beq.n	80088de <TIM_OC3_SetConfig+0x66>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a20      	ldr	r2, [pc, #128]	@ (800895c <TIM_OC3_SetConfig+0xe4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d10d      	bne.n	80088fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80088f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a16      	ldr	r2, [pc, #88]	@ (8008958 <TIM_OC3_SetConfig+0xe0>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d003      	beq.n	800890a <TIM_OC3_SetConfig+0x92>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a15      	ldr	r2, [pc, #84]	@ (800895c <TIM_OC3_SetConfig+0xe4>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d113      	bne.n	8008932 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	011b      	lsls	r3, r3, #4
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	4313      	orrs	r3, r2
 8008924:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	011b      	lsls	r3, r3, #4
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4313      	orrs	r3, r2
 8008930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	621a      	str	r2, [r3, #32]
}
 800894c:	bf00      	nop
 800894e:	371c      	adds	r7, #28
 8008950:	46bd      	mov	sp, r7
 8008952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008956:	4770      	bx	lr
 8008958:	40010000 	.word	0x40010000
 800895c:	40010400 	.word	0x40010400

08008960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008960:	b480      	push	{r7}
 8008962:	b087      	sub	sp, #28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800898e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	031b      	lsls	r3, r3, #12
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a12      	ldr	r2, [pc, #72]	@ (8008a04 <TIM_OC4_SetConfig+0xa4>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d003      	beq.n	80089c8 <TIM_OC4_SetConfig+0x68>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a11      	ldr	r2, [pc, #68]	@ (8008a08 <TIM_OC4_SetConfig+0xa8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d109      	bne.n	80089dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	019b      	lsls	r3, r3, #6
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4313      	orrs	r3, r2
 80089da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685a      	ldr	r2, [r3, #4]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	621a      	str	r2, [r3, #32]
}
 80089f6:	bf00      	nop
 80089f8:	371c      	adds	r7, #28
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	40010000 	.word	0x40010000
 8008a08:	40010400 	.word	0x40010400

08008a0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a28:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	f023 0307 	bic.w	r3, r3, #7
 8008a3a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	2b70      	cmp	r3, #112	@ 0x70
 8008a54:	d01a      	beq.n	8008a8c <TIM_SlaveTimer_SetConfig+0x80>
 8008a56:	2b70      	cmp	r3, #112	@ 0x70
 8008a58:	d860      	bhi.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
 8008a5a:	2b60      	cmp	r3, #96	@ 0x60
 8008a5c:	d054      	beq.n	8008b08 <TIM_SlaveTimer_SetConfig+0xfc>
 8008a5e:	2b60      	cmp	r3, #96	@ 0x60
 8008a60:	d85c      	bhi.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
 8008a62:	2b50      	cmp	r3, #80	@ 0x50
 8008a64:	d046      	beq.n	8008af4 <TIM_SlaveTimer_SetConfig+0xe8>
 8008a66:	2b50      	cmp	r3, #80	@ 0x50
 8008a68:	d858      	bhi.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
 8008a6a:	2b40      	cmp	r3, #64	@ 0x40
 8008a6c:	d019      	beq.n	8008aa2 <TIM_SlaveTimer_SetConfig+0x96>
 8008a6e:	2b40      	cmp	r3, #64	@ 0x40
 8008a70:	d854      	bhi.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
 8008a72:	2b30      	cmp	r3, #48	@ 0x30
 8008a74:	d055      	beq.n	8008b22 <TIM_SlaveTimer_SetConfig+0x116>
 8008a76:	2b30      	cmp	r3, #48	@ 0x30
 8008a78:	d850      	bhi.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
 8008a7a:	2b20      	cmp	r3, #32
 8008a7c:	d051      	beq.n	8008b22 <TIM_SlaveTimer_SetConfig+0x116>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d84c      	bhi.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d04d      	beq.n	8008b22 <TIM_SlaveTimer_SetConfig+0x116>
 8008a86:	2b10      	cmp	r3, #16
 8008a88:	d04b      	beq.n	8008b22 <TIM_SlaveTimer_SetConfig+0x116>
 8008a8a:	e047      	b.n	8008b1c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008a9c:	f000 f8c1 	bl	8008c22 <TIM_ETR_SetConfig>
      break;
 8008aa0:	e040      	b.n	8008b24 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d101      	bne.n	8008aae <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e03b      	b.n	8008b26 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6a1a      	ldr	r2, [r3, #32]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f022 0201 	bic.w	r2, r2, #1
 8008ac4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008ad4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	691b      	ldr	r3, [r3, #16]
 8008ada:	011b      	lsls	r3, r3, #4
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	621a      	str	r2, [r3, #32]
      break;
 8008af2:	e017      	b.n	8008b24 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b00:	461a      	mov	r2, r3
 8008b02:	f000 f814 	bl	8008b2e <TIM_TI1_ConfigInputStage>
      break;
 8008b06:	e00d      	b.n	8008b24 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b14:	461a      	mov	r2, r3
 8008b16:	f000 f839 	bl	8008b8c <TIM_TI2_ConfigInputStage>
      break;
 8008b1a:	e003      	b.n	8008b24 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b20:	e000      	b.n	8008b24 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008b22:	bf00      	nop
  }

  return status;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b087      	sub	sp, #28
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	f023 0201 	bic.w	r2, r3, #1
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f023 030a 	bic.w	r3, r3, #10
 8008b6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	621a      	str	r2, [r3, #32]
}
 8008b80:	bf00      	nop
 8008b82:	371c      	adds	r7, #28
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f023 0210 	bic.w	r2, r3, #16
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	031b      	lsls	r3, r3, #12
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	011b      	lsls	r3, r3, #4
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f043 0307 	orr.w	r3, r3, #7
 8008c0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
}
 8008c16:	bf00      	nop
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b087      	sub	sp, #28
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
 8008c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	021a      	lsls	r2, r3, #8
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	431a      	orrs	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	609a      	str	r2, [r3, #8]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b087      	sub	sp, #28
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f003 031f 	and.w	r3, r3, #31
 8008c74:	2201      	movs	r2, #1
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1a      	ldr	r2, [r3, #32]
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	43db      	mvns	r3, r3
 8008c84:	401a      	ands	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6a1a      	ldr	r2, [r3, #32]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f003 031f 	and.w	r3, r3, #31
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	621a      	str	r2, [r3, #32]
}
 8008ca0:	bf00      	nop
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d101      	bne.n	8008cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e05a      	b.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a21      	ldr	r2, [pc, #132]	@ (8008d88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d022      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d10:	d01d      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1d      	ldr	r2, [pc, #116]	@ (8008d8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d018      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1b      	ldr	r2, [pc, #108]	@ (8008d90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d013      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8008d94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00e      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a18      	ldr	r2, [pc, #96]	@ (8008d98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d009      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a17      	ldr	r2, [pc, #92]	@ (8008d9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d004      	beq.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a15      	ldr	r2, [pc, #84]	@ (8008da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d10c      	bne.n	8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	40010000 	.word	0x40010000
 8008d8c:	40000400 	.word	0x40000400
 8008d90:	40000800 	.word	0x40000800
 8008d94:	40000c00 	.word	0x40000c00
 8008d98:	40010400 	.word	0x40010400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40001800 	.word	0x40001800

08008da4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	e042      	b.n	8008e3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d106      	bne.n	8008dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f7fa f9ec 	bl	80031a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2224      	movs	r2, #36	@ 0x24
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008de6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 ff95 	bl	8009d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691a      	ldr	r2, [r3, #16]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695a      	ldr	r2, [r3, #20]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3708      	adds	r7, #8
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08c      	sub	sp, #48	@ 0x30
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b20      	cmp	r3, #32
 8008e5c:	d162      	bne.n	8008f24 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <HAL_UART_Transmit_DMA+0x26>
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e05b      	b.n	8008f26 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	88fa      	ldrh	r2, [r7, #6]
 8008e78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	88fa      	ldrh	r2, [r7, #6]
 8008e7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2200      	movs	r2, #0
 8008e84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2221      	movs	r2, #33	@ 0x21
 8008e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	4a27      	ldr	r2, [pc, #156]	@ (8008f30 <HAL_UART_Transmit_DMA+0xec>)
 8008e94:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	4a26      	ldr	r2, [pc, #152]	@ (8008f34 <HAL_UART_Transmit_DMA+0xf0>)
 8008e9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	4a25      	ldr	r2, [pc, #148]	@ (8008f38 <HAL_UART_Transmit_DMA+0xf4>)
 8008ea4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	2200      	movs	r2, #0
 8008eac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eba:	6819      	ldr	r1, [r3, #0]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	88fb      	ldrh	r3, [r7, #6]
 8008ec6:	f7fb fc35 	bl	8004734 <HAL_DMA_Start_IT>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d008      	beq.n	8008ee2 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2210      	movs	r2, #16
 8008ed4:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2220      	movs	r2, #32
 8008eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e021      	b.n	8008f26 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008eea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	3314      	adds	r3, #20
 8008ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	617b      	str	r3, [r7, #20]
   return(result);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3314      	adds	r3, #20
 8008f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f10:	6a39      	ldr	r1, [r7, #32]
 8008f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f14:	e841 2300 	strex	r3, r2, [r1]
 8008f18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e5      	bne.n	8008eec <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	e000      	b.n	8008f26 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3730      	adds	r7, #48	@ 0x30
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	08009595 	.word	0x08009595
 8008f34:	0800962f 	.word	0x0800962f
 8008f38:	080097b3 	.word	0x080097b3

08008f3c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b08c      	sub	sp, #48	@ 0x30
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	2b20      	cmp	r3, #32
 8008f54:	d146      	bne.n	8008fe4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d002      	beq.n	8008f62 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008f5c:	88fb      	ldrh	r3, [r7, #6]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e03f      	b.n	8008fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	461a      	mov	r2, r3
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fc65 	bl	8009848 <UART_Start_Receive_DMA>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d125      	bne.n	8008fd8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	613b      	str	r3, [r7, #16]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	613b      	str	r3, [r7, #16]
 8008fa0:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	330c      	adds	r3, #12
 8008fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	e853 3f00 	ldrex	r3, [r3]
 8008fb0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f043 0310 	orr.w	r3, r3, #16
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	330c      	adds	r3, #12
 8008fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	6a39      	ldr	r1, [r7, #32]
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fca:	e841 2300 	strex	r3, r2, [r1]
 8008fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1e5      	bne.n	8008fa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8008fd6:	e002      	b.n	8008fde <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8008fde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008fe2:	e000      	b.n	8008fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8008fe4:	2302      	movs	r3, #2
  }
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3730      	adds	r7, #48	@ 0x30
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009016:	2300      	movs	r3, #0
 8009018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800901c:	2300      	movs	r3, #0
 800901e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009026:	f003 030f 	and.w	r3, r3, #15
 800902a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800902e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10f      	bne.n	8009056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <HAL_UART_IRQHandler+0x66>
 8009042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fda4 	bl	8009b9c <UART_Receive_IT>
      return;
 8009054:	e273      	b.n	800953e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 80de 	beq.w	800921c <HAL_UART_IRQHandler+0x22c>
 8009060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d106      	bne.n	800907a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800906c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009070:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 80d1 	beq.w	800921c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800907a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800907e:	f003 0301 	and.w	r3, r3, #1
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <HAL_UART_IRQHandler+0xae>
 8009086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800908a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800908e:	2b00      	cmp	r3, #0
 8009090:	d005      	beq.n	800909e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009096:	f043 0201 	orr.w	r2, r3, #1
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800909e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a2:	f003 0304 	and.w	r3, r3, #4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00b      	beq.n	80090c2 <HAL_UART_IRQHandler+0xd2>
 80090aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d005      	beq.n	80090c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ba:	f043 0202 	orr.w	r2, r3, #2
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <HAL_UART_IRQHandler+0xf6>
 80090ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090de:	f043 0204 	orr.w	r2, r3, #4
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d011      	beq.n	8009116 <HAL_UART_IRQHandler+0x126>
 80090f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009102:	f003 0301 	and.w	r3, r3, #1
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800910e:	f043 0208 	orr.w	r2, r3, #8
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 820a 	beq.w	8009534 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009124:	f003 0320 	and.w	r3, r3, #32
 8009128:	2b00      	cmp	r3, #0
 800912a:	d008      	beq.n	800913e <HAL_UART_IRQHandler+0x14e>
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fd2f 	bl	8009b9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009148:	2b40      	cmp	r3, #64	@ 0x40
 800914a:	bf0c      	ite	eq
 800914c:	2301      	moveq	r3, #1
 800914e:	2300      	movne	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <HAL_UART_IRQHandler+0x17a>
 8009162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d04f      	beq.n	800920a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fc3a 	bl	80099e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917a:	2b40      	cmp	r3, #64	@ 0x40
 800917c:	d141      	bne.n	8009202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3314      	adds	r3, #20
 8009184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800919c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	3314      	adds	r3, #20
 80091a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80091aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80091ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80091b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80091c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1d9      	bne.n	800917e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d013      	beq.n	80091fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d6:	4a8a      	ldr	r2, [pc, #552]	@ (8009400 <HAL_UART_IRQHandler+0x410>)
 80091d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091de:	4618      	mov	r0, r3
 80091e0:	f7fb fb70 	bl	80048c4 <HAL_DMA_Abort_IT>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d016      	beq.n	8009218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f8:	e00e      	b.n	8009218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9c0 	bl	8009580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009200:	e00a      	b.n	8009218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f9bc 	bl	8009580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009208:	e006      	b.n	8009218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f9b8 	bl	8009580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009216:	e18d      	b.n	8009534 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	bf00      	nop
    return;
 800921a:	e18b      	b.n	8009534 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	2b01      	cmp	r3, #1
 8009222:	f040 8167 	bne.w	80094f4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922a:	f003 0310 	and.w	r3, r3, #16
 800922e:	2b00      	cmp	r3, #0
 8009230:	f000 8160 	beq.w	80094f4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	f000 8159 	beq.w	80094f4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009242:	2300      	movs	r3, #0
 8009244:	60bb      	str	r3, [r7, #8]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60bb      	str	r3, [r7, #8]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	695b      	ldr	r3, [r3, #20]
 800925e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009262:	2b40      	cmp	r3, #64	@ 0x40
 8009264:	f040 80ce 	bne.w	8009404 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80a9 	beq.w	80093d0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009286:	429a      	cmp	r2, r3
 8009288:	f080 80a2 	bcs.w	80093d0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009292:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800929e:	f000 8088 	beq.w	80093b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	330c      	adds	r3, #12
 80092a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80092b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	330c      	adds	r3, #12
 80092ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80092ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80092da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80092e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1d9      	bne.n	80092a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3314      	adds	r3, #20
 80092f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80092fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009300:	f023 0301 	bic.w	r3, r3, #1
 8009304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3314      	adds	r3, #20
 800930e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009312:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009316:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800931a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e1      	bne.n	80092ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3314      	adds	r3, #20
 8009330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009334:	e853 3f00 	ldrex	r3, [r3]
 8009338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800933a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800933c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3314      	adds	r3, #20
 800934a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800934e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800935c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e3      	bne.n	800932a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2220      	movs	r2, #32
 8009366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	330c      	adds	r3, #12
 8009376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	330c      	adds	r3, #12
 8009390:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009394:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009396:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800939a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800939c:	e841 2300 	strex	r3, r2, [r1]
 80093a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1e3      	bne.n	8009370 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7fb fa19 	bl	80047e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2202      	movs	r2, #2
 80093b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7f9 fd73 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80093ce:	e0b3      	b.n	8009538 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80093d8:	429a      	cmp	r2, r3
 80093da:	f040 80ad 	bne.w	8009538 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093e8:	f040 80a6 	bne.w	8009538 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093f6:	4619      	mov	r1, r3
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7f9 fd5b 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
      return;
 80093fe:	e09b      	b.n	8009538 <HAL_UART_IRQHandler+0x548>
 8009400:	08009aab 	.word	0x08009aab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800940c:	b29b      	uxth	r3, r3
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 808e 	beq.w	800953c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 8089 	beq.w	800953c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800943a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800944e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800945c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e3      	bne.n	800942a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3314      	adds	r3, #20
 8009468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	623b      	str	r3, [r7, #32]
   return(result);
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	f023 0301 	bic.w	r3, r3, #1
 8009478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3314      	adds	r3, #20
 8009482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009486:	633a      	str	r2, [r7, #48]	@ 0x30
 8009488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800948c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e3      	bne.n	8009462 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	330c      	adds	r3, #12
 80094ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 0310 	bic.w	r3, r3, #16
 80094be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80094cc:	61fa      	str	r2, [r7, #28]
 80094ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d0:	69b9      	ldr	r1, [r7, #24]
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	e841 2300 	strex	r3, r2, [r1]
 80094d8:	617b      	str	r3, [r7, #20]
   return(result);
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1e3      	bne.n	80094a8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f9 fce1 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094f2:	e023      	b.n	800953c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d009      	beq.n	8009514 <HAL_UART_IRQHandler+0x524>
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fadd 	bl	8009acc <UART_Transmit_IT>
    return;
 8009512:	e014      	b.n	800953e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00e      	beq.n	800953e <HAL_UART_IRQHandler+0x54e>
 8009520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	d008      	beq.n	800953e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fb1d 	bl	8009b6c <UART_EndTransmit_IT>
    return;
 8009532:	e004      	b.n	800953e <HAL_UART_IRQHandler+0x54e>
    return;
 8009534:	bf00      	nop
 8009536:	e002      	b.n	800953e <HAL_UART_IRQHandler+0x54e>
      return;
 8009538:	bf00      	nop
 800953a:	e000      	b.n	800953e <HAL_UART_IRQHandler+0x54e>
      return;
 800953c:	bf00      	nop
  }
}
 800953e:	37e8      	adds	r7, #232	@ 0xe8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b090      	sub	sp, #64	@ 0x40
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d137      	bne.n	8009620 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80095b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b2:	2200      	movs	r2, #0
 80095b4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80095b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3314      	adds	r3, #20
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	623b      	str	r3, [r7, #32]
   return(result);
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80095ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3314      	adds	r3, #20
 80095d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80095d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095de:	e841 2300 	strex	r3, r2, [r1]
 80095e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e5      	bne.n	80095b6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	330c      	adds	r3, #12
 80095f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009600:	637b      	str	r3, [r7, #52]	@ 0x34
 8009602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	330c      	adds	r3, #12
 8009608:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800960a:	61fa      	str	r2, [r7, #28]
 800960c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	69b9      	ldr	r1, [r7, #24]
 8009610:	69fa      	ldr	r2, [r7, #28]
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	617b      	str	r3, [r7, #20]
   return(result);
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800961e:	e002      	b.n	8009626 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009620:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009622:	f7f9 fd08 	bl	8003036 <HAL_UART_TxCpltCallback>
}
 8009626:	bf00      	nop
 8009628:	3740      	adds	r7, #64	@ 0x40
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff ff81 	bl	8009544 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b09c      	sub	sp, #112	@ 0x70
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009656:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009662:	2b00      	cmp	r3, #0
 8009664:	d172      	bne.n	800974c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009668:	2200      	movs	r2, #0
 800966a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800966c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800967c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800967e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009682:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800968c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800968e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009692:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800969a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3314      	adds	r3, #20
 80096a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80096b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3314      	adds	r3, #20
 80096be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80096c0:	647a      	str	r2, [r7, #68]	@ 0x44
 80096c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e5      	bne.n	80096a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3314      	adds	r3, #20
 80096da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	623b      	str	r3, [r7, #32]
   return(result);
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80096ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3314      	adds	r3, #20
 80096f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80096f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80096f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e5      	bne.n	80096d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800970a:	2220      	movs	r2, #32
 800970c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009714:	2b01      	cmp	r3, #1
 8009716:	d119      	bne.n	800974c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	330c      	adds	r3, #12
 800971e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	60fb      	str	r3, [r7, #12]
   return(result);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f023 0310 	bic.w	r3, r3, #16
 800972e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	330c      	adds	r3, #12
 8009736:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009738:	61fa      	str	r2, [r7, #28]
 800973a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	69b9      	ldr	r1, [r7, #24]
 800973e:	69fa      	ldr	r2, [r7, #28]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	617b      	str	r3, [r7, #20]
   return(result);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e5      	bne.n	8009718 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800974e:	2200      	movs	r2, #0
 8009750:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009752:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009756:	2b01      	cmp	r3, #1
 8009758:	d106      	bne.n	8009768 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800975a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800975c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800975e:	4619      	mov	r1, r3
 8009760:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009762:	f7f9 fba7 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009766:	e002      	b.n	800976e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009768:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800976a:	f7ff fef5 	bl	8009558 <HAL_UART_RxCpltCallback>
}
 800976e:	bf00      	nop
 8009770:	3770      	adds	r7, #112	@ 0x70
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b084      	sub	sp, #16
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009782:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978e:	2b01      	cmp	r3, #1
 8009790:	d108      	bne.n	80097a4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009796:	085b      	lsrs	r3, r3, #1
 8009798:	b29b      	uxth	r3, r3
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7f9 fb89 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80097a2:	e002      	b.n	80097aa <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f7ff fee1 	bl	800956c <HAL_UART_RxHalfCpltCallback>
}
 80097aa:	bf00      	nop
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097ce:	2b80      	cmp	r3, #128	@ 0x80
 80097d0:	bf0c      	ite	eq
 80097d2:	2301      	moveq	r3, #1
 80097d4:	2300      	movne	r3, #0
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b21      	cmp	r3, #33	@ 0x21
 80097e4:	d108      	bne.n	80097f8 <UART_DMAError+0x46>
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d005      	beq.n	80097f8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	2200      	movs	r2, #0
 80097f0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80097f2:	68b8      	ldr	r0, [r7, #8]
 80097f4:	f000 f8ce 	bl	8009994 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009802:	2b40      	cmp	r3, #64	@ 0x40
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b22      	cmp	r3, #34	@ 0x22
 8009818:	d108      	bne.n	800982c <UART_DMAError+0x7a>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009826:	68b8      	ldr	r0, [r7, #8]
 8009828:	f000 f8dc 	bl	80099e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009830:	f043 0210 	orr.w	r2, r3, #16
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009838:	68b8      	ldr	r0, [r7, #8]
 800983a:	f7ff fea1 	bl	8009580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800983e:	bf00      	nop
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b098      	sub	sp, #96	@ 0x60
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009856:	68ba      	ldr	r2, [r7, #8]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	88fa      	ldrh	r2, [r7, #6]
 8009860:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2222      	movs	r2, #34	@ 0x22
 800986c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009874:	4a44      	ldr	r2, [pc, #272]	@ (8009988 <UART_Start_Receive_DMA+0x140>)
 8009876:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987c:	4a43      	ldr	r2, [pc, #268]	@ (800998c <UART_Start_Receive_DMA+0x144>)
 800987e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009884:	4a42      	ldr	r2, [pc, #264]	@ (8009990 <UART_Start_Receive_DMA+0x148>)
 8009886:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988c:	2200      	movs	r2, #0
 800988e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009890:	f107 0308 	add.w	r3, r7, #8
 8009894:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	3304      	adds	r3, #4
 80098a0:	4619      	mov	r1, r3
 80098a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	f7fa ff44 	bl	8004734 <HAL_DMA_Start_IT>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2210      	movs	r2, #16
 80098b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e05d      	b.n	8009980 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	613b      	str	r3, [r7, #16]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	613b      	str	r3, [r7, #16]
 80098d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d019      	beq.n	8009916 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	330c      	adds	r3, #12
 80098e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098ec:	e853 3f00 	ldrex	r3, [r3]
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80098f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	330c      	adds	r3, #12
 8009900:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009902:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009904:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009906:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800990a:	e841 2300 	strex	r3, r2, [r1]
 800990e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e5      	bne.n	80098e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3314      	adds	r3, #20
 800991c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009920:	e853 3f00 	ldrex	r3, [r3]
 8009924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	f043 0301 	orr.w	r3, r3, #1
 800992c:	657b      	str	r3, [r7, #84]	@ 0x54
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3314      	adds	r3, #20
 8009934:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009936:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800993c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e5      	bne.n	8009916 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	3314      	adds	r3, #20
 8009950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	617b      	str	r3, [r7, #20]
   return(result);
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009960:	653b      	str	r3, [r7, #80]	@ 0x50
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3314      	adds	r3, #20
 8009968:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800996a:	627a      	str	r2, [r7, #36]	@ 0x24
 800996c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6a39      	ldr	r1, [r7, #32]
 8009970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	61fb      	str	r3, [r7, #28]
   return(result);
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e5      	bne.n	800994a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3760      	adds	r7, #96	@ 0x60
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	0800964b 	.word	0x0800964b
 800998c:	08009777 	.word	0x08009777
 8009990:	080097b3 	.word	0x080097b3

08009994 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009994:	b480      	push	{r7}
 8009996:	b089      	sub	sp, #36	@ 0x24
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	330c      	adds	r3, #12
 80099a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80099b2:	61fb      	str	r3, [r7, #28]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	330c      	adds	r3, #12
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	61ba      	str	r2, [r7, #24]
 80099be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c0:	6979      	ldr	r1, [r7, #20]
 80099c2:	69ba      	ldr	r2, [r7, #24]
 80099c4:	e841 2300 	strex	r3, r2, [r1]
 80099c8:	613b      	str	r3, [r7, #16]
   return(result);
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1e5      	bne.n	800999c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80099d8:	bf00      	nop
 80099da:	3724      	adds	r7, #36	@ 0x24
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b095      	sub	sp, #84	@ 0x54
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e5      	bne.n	80099ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3314      	adds	r3, #20
 8009a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	f023 0301 	bic.w	r3, r3, #1
 8009a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3314      	adds	r3, #20
 8009a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e5      	bne.n	8009a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d119      	bne.n	8009a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	330c      	adds	r3, #12
 8009a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f023 0310 	bic.w	r3, r3, #16
 8009a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a7c:	61ba      	str	r2, [r7, #24]
 8009a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e5      	bne.n	8009a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a9e:	bf00      	nop
 8009aa0:	3754      	adds	r7, #84	@ 0x54
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2200      	movs	r2, #0
 8009abc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fd5e 	bl	8009580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ac4:	bf00      	nop
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	2b21      	cmp	r3, #33	@ 0x21
 8009ade:	d13e      	bne.n	8009b5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ae8:	d114      	bne.n	8009b14 <UART_Transmit_IT+0x48>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d110      	bne.n	8009b14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	1c9a      	adds	r2, r3, #2
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	621a      	str	r2, [r3, #32]
 8009b12:	e008      	b.n	8009b26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a1b      	ldr	r3, [r3, #32]
 8009b18:	1c59      	adds	r1, r3, #1
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	6211      	str	r1, [r2, #32]
 8009b1e:	781a      	ldrb	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	4619      	mov	r1, r3
 8009b34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d10f      	bne.n	8009b5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68da      	ldr	r2, [r3, #12]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e000      	b.n	8009b60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009b5e:	2302      	movs	r3, #2
  }
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68da      	ldr	r2, [r3, #12]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7f9 fa52 	bl	8003036 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08c      	sub	sp, #48	@ 0x30
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b22      	cmp	r3, #34	@ 0x22
 8009bb6:	f040 80aa 	bne.w	8009d0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bc2:	d115      	bne.n	8009bf0 <UART_Receive_IT+0x54>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d111      	bne.n	8009bf0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be8:	1c9a      	adds	r2, r3, #2
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	629a      	str	r2, [r3, #40]	@ 0x28
 8009bee:	e024      	b.n	8009c3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bfe:	d007      	beq.n	8009c10 <UART_Receive_IT+0x74>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d10a      	bne.n	8009c1e <UART_Receive_IT+0x82>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d106      	bne.n	8009c1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c1a:	701a      	strb	r2, [r3, #0]
 8009c1c:	e008      	b.n	8009c30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	3b01      	subs	r3, #1
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	4619      	mov	r1, r3
 8009c48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d15d      	bne.n	8009d0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0220 	bic.w	r2, r2, #32
 8009c5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009c6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	695a      	ldr	r2, [r3, #20]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f022 0201 	bic.w	r2, r2, #1
 8009c7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d135      	bne.n	8009d00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	330c      	adds	r3, #12
 8009ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	e853 3f00 	ldrex	r3, [r3]
 8009ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f023 0310 	bic.w	r3, r3, #16
 8009cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	330c      	adds	r3, #12
 8009cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cba:	623a      	str	r2, [r7, #32]
 8009cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	69f9      	ldr	r1, [r7, #28]
 8009cc0:	6a3a      	ldr	r2, [r7, #32]
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e5      	bne.n	8009c9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b10      	cmp	r3, #16
 8009cda:	d10a      	bne.n	8009cf2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	60fb      	str	r3, [r7, #12]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7f9 f8db 	bl	8002eb4 <HAL_UARTEx_RxEventCallback>
 8009cfe:	e002      	b.n	8009d06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f7ff fc29 	bl	8009558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	e002      	b.n	8009d10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e000      	b.n	8009d10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009d0e:	2302      	movs	r3, #2
  }
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3730      	adds	r7, #48	@ 0x30
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d1c:	b0c0      	sub	sp, #256	@ 0x100
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d34:	68d9      	ldr	r1, [r3, #12]
 8009d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	ea40 0301 	orr.w	r3, r0, r1
 8009d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	431a      	orrs	r2, r3
 8009d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009d70:	f021 010c 	bic.w	r1, r1, #12
 8009d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d92:	6999      	ldr	r1, [r3, #24]
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	ea40 0301 	orr.w	r3, r0, r1
 8009d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	4b8f      	ldr	r3, [pc, #572]	@ (8009fe4 <UART_SetConfig+0x2cc>)
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d005      	beq.n	8009db8 <UART_SetConfig+0xa0>
 8009dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	4b8d      	ldr	r3, [pc, #564]	@ (8009fe8 <UART_SetConfig+0x2d0>)
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d104      	bne.n	8009dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009db8:	f7fd f8ce 	bl	8006f58 <HAL_RCC_GetPCLK2Freq>
 8009dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009dc0:	e003      	b.n	8009dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dc2:	f7fd f8b5 	bl	8006f30 <HAL_RCC_GetPCLK1Freq>
 8009dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dce:	69db      	ldr	r3, [r3, #28]
 8009dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009dd4:	f040 810c 	bne.w	8009ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009de2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009dea:	4622      	mov	r2, r4
 8009dec:	462b      	mov	r3, r5
 8009dee:	1891      	adds	r1, r2, r2
 8009df0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009df2:	415b      	adcs	r3, r3
 8009df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	eb12 0801 	adds.w	r8, r2, r1
 8009e00:	4629      	mov	r1, r5
 8009e02:	eb43 0901 	adc.w	r9, r3, r1
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e1a:	4690      	mov	r8, r2
 8009e1c:	4699      	mov	r9, r3
 8009e1e:	4623      	mov	r3, r4
 8009e20:	eb18 0303 	adds.w	r3, r8, r3
 8009e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009e28:	462b      	mov	r3, r5
 8009e2a:	eb49 0303 	adc.w	r3, r9, r3
 8009e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009e46:	460b      	mov	r3, r1
 8009e48:	18db      	adds	r3, r3, r3
 8009e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	eb42 0303 	adc.w	r3, r2, r3
 8009e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009e5c:	f7f6 fa08 	bl	8000270 <__aeabi_uldivmod>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4b61      	ldr	r3, [pc, #388]	@ (8009fec <UART_SetConfig+0x2d4>)
 8009e66:	fba3 2302 	umull	r2, r3, r3, r2
 8009e6a:	095b      	lsrs	r3, r3, #5
 8009e6c:	011c      	lsls	r4, r3, #4
 8009e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009e80:	4642      	mov	r2, r8
 8009e82:	464b      	mov	r3, r9
 8009e84:	1891      	adds	r1, r2, r2
 8009e86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009e88:	415b      	adcs	r3, r3
 8009e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009e90:	4641      	mov	r1, r8
 8009e92:	eb12 0a01 	adds.w	sl, r2, r1
 8009e96:	4649      	mov	r1, r9
 8009e98:	eb43 0b01 	adc.w	fp, r3, r1
 8009e9c:	f04f 0200 	mov.w	r2, #0
 8009ea0:	f04f 0300 	mov.w	r3, #0
 8009ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009eb0:	4692      	mov	sl, r2
 8009eb2:	469b      	mov	fp, r3
 8009eb4:	4643      	mov	r3, r8
 8009eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8009eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ebe:	464b      	mov	r3, r9
 8009ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8009ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009edc:	460b      	mov	r3, r1
 8009ede:	18db      	adds	r3, r3, r3
 8009ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	eb42 0303 	adc.w	r3, r2, r3
 8009ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009ef2:	f7f6 f9bd 	bl	8000270 <__aeabi_uldivmod>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4611      	mov	r1, r2
 8009efc:	4b3b      	ldr	r3, [pc, #236]	@ (8009fec <UART_SetConfig+0x2d4>)
 8009efe:	fba3 2301 	umull	r2, r3, r3, r1
 8009f02:	095b      	lsrs	r3, r3, #5
 8009f04:	2264      	movs	r2, #100	@ 0x64
 8009f06:	fb02 f303 	mul.w	r3, r2, r3
 8009f0a:	1acb      	subs	r3, r1, r3
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009f12:	4b36      	ldr	r3, [pc, #216]	@ (8009fec <UART_SetConfig+0x2d4>)
 8009f14:	fba3 2302 	umull	r2, r3, r3, r2
 8009f18:	095b      	lsrs	r3, r3, #5
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009f20:	441c      	add	r4, r3
 8009f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009f34:	4642      	mov	r2, r8
 8009f36:	464b      	mov	r3, r9
 8009f38:	1891      	adds	r1, r2, r2
 8009f3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009f3c:	415b      	adcs	r3, r3
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009f44:	4641      	mov	r1, r8
 8009f46:	1851      	adds	r1, r2, r1
 8009f48:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	414b      	adcs	r3, r1
 8009f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009f5c:	4659      	mov	r1, fp
 8009f5e:	00cb      	lsls	r3, r1, #3
 8009f60:	4651      	mov	r1, sl
 8009f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f66:	4651      	mov	r1, sl
 8009f68:	00ca      	lsls	r2, r1, #3
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4642      	mov	r2, r8
 8009f72:	189b      	adds	r3, r3, r2
 8009f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f78:	464b      	mov	r3, r9
 8009f7a:	460a      	mov	r2, r1
 8009f7c:	eb42 0303 	adc.w	r3, r2, r3
 8009f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f98:	460b      	mov	r3, r1
 8009f9a:	18db      	adds	r3, r3, r3
 8009f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	eb42 0303 	adc.w	r3, r2, r3
 8009fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009fae:	f7f6 f95f 	bl	8000270 <__aeabi_uldivmod>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009fec <UART_SetConfig+0x2d4>)
 8009fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fbc:	095b      	lsrs	r3, r3, #5
 8009fbe:	2164      	movs	r1, #100	@ 0x64
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	3332      	adds	r3, #50	@ 0x32
 8009fca:	4a08      	ldr	r2, [pc, #32]	@ (8009fec <UART_SetConfig+0x2d4>)
 8009fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd0:	095b      	lsrs	r3, r3, #5
 8009fd2:	f003 0207 	and.w	r2, r3, #7
 8009fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4422      	add	r2, r4
 8009fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009fe0:	e106      	b.n	800a1f0 <UART_SetConfig+0x4d8>
 8009fe2:	bf00      	nop
 8009fe4:	40011000 	.word	0x40011000
 8009fe8:	40011400 	.word	0x40011400
 8009fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a002:	4642      	mov	r2, r8
 800a004:	464b      	mov	r3, r9
 800a006:	1891      	adds	r1, r2, r2
 800a008:	6239      	str	r1, [r7, #32]
 800a00a:	415b      	adcs	r3, r3
 800a00c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a00e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a012:	4641      	mov	r1, r8
 800a014:	1854      	adds	r4, r2, r1
 800a016:	4649      	mov	r1, r9
 800a018:	eb43 0501 	adc.w	r5, r3, r1
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	00eb      	lsls	r3, r5, #3
 800a026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a02a:	00e2      	lsls	r2, r4, #3
 800a02c:	4614      	mov	r4, r2
 800a02e:	461d      	mov	r5, r3
 800a030:	4643      	mov	r3, r8
 800a032:	18e3      	adds	r3, r4, r3
 800a034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a038:	464b      	mov	r3, r9
 800a03a:	eb45 0303 	adc.w	r3, r5, r3
 800a03e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a04e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a052:	f04f 0200 	mov.w	r2, #0
 800a056:	f04f 0300 	mov.w	r3, #0
 800a05a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a05e:	4629      	mov	r1, r5
 800a060:	008b      	lsls	r3, r1, #2
 800a062:	4621      	mov	r1, r4
 800a064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a068:	4621      	mov	r1, r4
 800a06a:	008a      	lsls	r2, r1, #2
 800a06c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a070:	f7f6 f8fe 	bl	8000270 <__aeabi_uldivmod>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4b60      	ldr	r3, [pc, #384]	@ (800a1fc <UART_SetConfig+0x4e4>)
 800a07a:	fba3 2302 	umull	r2, r3, r3, r2
 800a07e:	095b      	lsrs	r3, r3, #5
 800a080:	011c      	lsls	r4, r3, #4
 800a082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a086:	2200      	movs	r2, #0
 800a088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a08c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a094:	4642      	mov	r2, r8
 800a096:	464b      	mov	r3, r9
 800a098:	1891      	adds	r1, r2, r2
 800a09a:	61b9      	str	r1, [r7, #24]
 800a09c:	415b      	adcs	r3, r3
 800a09e:	61fb      	str	r3, [r7, #28]
 800a0a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0a4:	4641      	mov	r1, r8
 800a0a6:	1851      	adds	r1, r2, r1
 800a0a8:	6139      	str	r1, [r7, #16]
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	414b      	adcs	r3, r1
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	f04f 0200 	mov.w	r2, #0
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0bc:	4659      	mov	r1, fp
 800a0be:	00cb      	lsls	r3, r1, #3
 800a0c0:	4651      	mov	r1, sl
 800a0c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0c6:	4651      	mov	r1, sl
 800a0c8:	00ca      	lsls	r2, r1, #3
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	189b      	adds	r3, r3, r2
 800a0d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a0d8:	464b      	mov	r3, r9
 800a0da:	460a      	mov	r2, r1
 800a0dc:	eb42 0303 	adc.w	r3, r2, r3
 800a0e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a0ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a0f0:	f04f 0200 	mov.w	r2, #0
 800a0f4:	f04f 0300 	mov.w	r3, #0
 800a0f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a0fc:	4649      	mov	r1, r9
 800a0fe:	008b      	lsls	r3, r1, #2
 800a100:	4641      	mov	r1, r8
 800a102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a106:	4641      	mov	r1, r8
 800a108:	008a      	lsls	r2, r1, #2
 800a10a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a10e:	f7f6 f8af 	bl	8000270 <__aeabi_uldivmod>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4611      	mov	r1, r2
 800a118:	4b38      	ldr	r3, [pc, #224]	@ (800a1fc <UART_SetConfig+0x4e4>)
 800a11a:	fba3 2301 	umull	r2, r3, r3, r1
 800a11e:	095b      	lsrs	r3, r3, #5
 800a120:	2264      	movs	r2, #100	@ 0x64
 800a122:	fb02 f303 	mul.w	r3, r2, r3
 800a126:	1acb      	subs	r3, r1, r3
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	3332      	adds	r3, #50	@ 0x32
 800a12c:	4a33      	ldr	r2, [pc, #204]	@ (800a1fc <UART_SetConfig+0x4e4>)
 800a12e:	fba2 2303 	umull	r2, r3, r2, r3
 800a132:	095b      	lsrs	r3, r3, #5
 800a134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a138:	441c      	add	r4, r3
 800a13a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a13e:	2200      	movs	r2, #0
 800a140:	673b      	str	r3, [r7, #112]	@ 0x70
 800a142:	677a      	str	r2, [r7, #116]	@ 0x74
 800a144:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a148:	4642      	mov	r2, r8
 800a14a:	464b      	mov	r3, r9
 800a14c:	1891      	adds	r1, r2, r2
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	415b      	adcs	r3, r3
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a158:	4641      	mov	r1, r8
 800a15a:	1851      	adds	r1, r2, r1
 800a15c:	6039      	str	r1, [r7, #0]
 800a15e:	4649      	mov	r1, r9
 800a160:	414b      	adcs	r3, r1
 800a162:	607b      	str	r3, [r7, #4]
 800a164:	f04f 0200 	mov.w	r2, #0
 800a168:	f04f 0300 	mov.w	r3, #0
 800a16c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a170:	4659      	mov	r1, fp
 800a172:	00cb      	lsls	r3, r1, #3
 800a174:	4651      	mov	r1, sl
 800a176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a17a:	4651      	mov	r1, sl
 800a17c:	00ca      	lsls	r2, r1, #3
 800a17e:	4610      	mov	r0, r2
 800a180:	4619      	mov	r1, r3
 800a182:	4603      	mov	r3, r0
 800a184:	4642      	mov	r2, r8
 800a186:	189b      	adds	r3, r3, r2
 800a188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a18a:	464b      	mov	r3, r9
 800a18c:	460a      	mov	r2, r1
 800a18e:	eb42 0303 	adc.w	r3, r2, r3
 800a192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a19e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	f04f 0300 	mov.w	r3, #0
 800a1a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	008b      	lsls	r3, r1, #2
 800a1b0:	4641      	mov	r1, r8
 800a1b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	008a      	lsls	r2, r1, #2
 800a1ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a1be:	f7f6 f857 	bl	8000270 <__aeabi_uldivmod>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a1fc <UART_SetConfig+0x4e4>)
 800a1c8:	fba3 1302 	umull	r1, r3, r3, r2
 800a1cc:	095b      	lsrs	r3, r3, #5
 800a1ce:	2164      	movs	r1, #100	@ 0x64
 800a1d0:	fb01 f303 	mul.w	r3, r1, r3
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	011b      	lsls	r3, r3, #4
 800a1d8:	3332      	adds	r3, #50	@ 0x32
 800a1da:	4a08      	ldr	r2, [pc, #32]	@ (800a1fc <UART_SetConfig+0x4e4>)
 800a1dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e0:	095b      	lsrs	r3, r3, #5
 800a1e2:	f003 020f 	and.w	r2, r3, #15
 800a1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4422      	add	r2, r4
 800a1ee:	609a      	str	r2, [r3, #8]
}
 800a1f0:	bf00      	nop
 800a1f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1fc:	51eb851f 	.word	0x51eb851f

0800a200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a200:	b084      	sub	sp, #16
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	f107 001c 	add.w	r0, r7, #28
 800a20e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a212:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a216:	2b01      	cmp	r3, #1
 800a218:	d123      	bne.n	800a262 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a22e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a246:	2b01      	cmp	r3, #1
 800a248:	d105      	bne.n	800a256 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f001 fae8 	bl	800b82c <USB_CoreReset>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]
 800a260:	e01b      	b.n	800a29a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	68db      	ldr	r3, [r3, #12]
 800a266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f001 fadc 	bl	800b82c <USB_CoreReset>
 800a274:	4603      	mov	r3, r0
 800a276:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a278:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d106      	bne.n	800a28e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a284:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a28c:	e005      	b.n	800a29a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a292:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a29a:	7fbb      	ldrb	r3, [r7, #30]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d10b      	bne.n	800a2b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	f043 0206 	orr.w	r2, r3, #6
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f043 0220 	orr.w	r2, r3, #32
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2c4:	b004      	add	sp, #16
 800a2c6:	4770      	bx	lr

0800a2c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a2d6:	79fb      	ldrb	r3, [r7, #7]
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d165      	bne.n	800a3a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4a41      	ldr	r2, [pc, #260]	@ (800a3e4 <USB_SetTurnaroundTime+0x11c>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d906      	bls.n	800a2f2 <USB_SetTurnaroundTime+0x2a>
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	4a40      	ldr	r2, [pc, #256]	@ (800a3e8 <USB_SetTurnaroundTime+0x120>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d202      	bcs.n	800a2f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a2ec:	230f      	movs	r3, #15
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	e062      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	4a3c      	ldr	r2, [pc, #240]	@ (800a3e8 <USB_SetTurnaroundTime+0x120>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d306      	bcc.n	800a308 <USB_SetTurnaroundTime+0x40>
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4a3b      	ldr	r2, [pc, #236]	@ (800a3ec <USB_SetTurnaroundTime+0x124>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d202      	bcs.n	800a308 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a302:	230e      	movs	r3, #14
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e057      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	4a38      	ldr	r2, [pc, #224]	@ (800a3ec <USB_SetTurnaroundTime+0x124>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d306      	bcc.n	800a31e <USB_SetTurnaroundTime+0x56>
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	4a37      	ldr	r2, [pc, #220]	@ (800a3f0 <USB_SetTurnaroundTime+0x128>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d202      	bcs.n	800a31e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a318:	230d      	movs	r3, #13
 800a31a:	617b      	str	r3, [r7, #20]
 800a31c:	e04c      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	4a33      	ldr	r2, [pc, #204]	@ (800a3f0 <USB_SetTurnaroundTime+0x128>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d306      	bcc.n	800a334 <USB_SetTurnaroundTime+0x6c>
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	4a32      	ldr	r2, [pc, #200]	@ (800a3f4 <USB_SetTurnaroundTime+0x12c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d802      	bhi.n	800a334 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a32e:	230c      	movs	r3, #12
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	e041      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	4a2f      	ldr	r2, [pc, #188]	@ (800a3f4 <USB_SetTurnaroundTime+0x12c>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d906      	bls.n	800a34a <USB_SetTurnaroundTime+0x82>
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	4a2e      	ldr	r2, [pc, #184]	@ (800a3f8 <USB_SetTurnaroundTime+0x130>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d802      	bhi.n	800a34a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a344:	230b      	movs	r3, #11
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	e036      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	4a2a      	ldr	r2, [pc, #168]	@ (800a3f8 <USB_SetTurnaroundTime+0x130>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d906      	bls.n	800a360 <USB_SetTurnaroundTime+0x98>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	4a29      	ldr	r2, [pc, #164]	@ (800a3fc <USB_SetTurnaroundTime+0x134>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d802      	bhi.n	800a360 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a35a:	230a      	movs	r3, #10
 800a35c:	617b      	str	r3, [r7, #20]
 800a35e:	e02b      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	4a26      	ldr	r2, [pc, #152]	@ (800a3fc <USB_SetTurnaroundTime+0x134>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d906      	bls.n	800a376 <USB_SetTurnaroundTime+0xae>
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	4a25      	ldr	r2, [pc, #148]	@ (800a400 <USB_SetTurnaroundTime+0x138>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d202      	bcs.n	800a376 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a370:	2309      	movs	r3, #9
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e020      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	4a21      	ldr	r2, [pc, #132]	@ (800a400 <USB_SetTurnaroundTime+0x138>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d306      	bcc.n	800a38c <USB_SetTurnaroundTime+0xc4>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	4a20      	ldr	r2, [pc, #128]	@ (800a404 <USB_SetTurnaroundTime+0x13c>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d802      	bhi.n	800a38c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a386:	2308      	movs	r3, #8
 800a388:	617b      	str	r3, [r7, #20]
 800a38a:	e015      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	4a1d      	ldr	r2, [pc, #116]	@ (800a404 <USB_SetTurnaroundTime+0x13c>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d906      	bls.n	800a3a2 <USB_SetTurnaroundTime+0xda>
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	4a1c      	ldr	r2, [pc, #112]	@ (800a408 <USB_SetTurnaroundTime+0x140>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d202      	bcs.n	800a3a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a39c:	2307      	movs	r3, #7
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	e00a      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a3a2:	2306      	movs	r3, #6
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e007      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d102      	bne.n	800a3b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a3ae:	2309      	movs	r3, #9
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	e001      	b.n	800a3b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a3b4:	2309      	movs	r3, #9
 800a3b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	029b      	lsls	r3, r3, #10
 800a3cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	00d8acbf 	.word	0x00d8acbf
 800a3e8:	00e4e1c0 	.word	0x00e4e1c0
 800a3ec:	00f42400 	.word	0x00f42400
 800a3f0:	01067380 	.word	0x01067380
 800a3f4:	011a499f 	.word	0x011a499f
 800a3f8:	01312cff 	.word	0x01312cff
 800a3fc:	014ca43f 	.word	0x014ca43f
 800a400:	016e3600 	.word	0x016e3600
 800a404:	01a6ab1f 	.word	0x01a6ab1f
 800a408:	01e84800 	.word	0x01e84800

0800a40c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	f043 0201 	orr.w	r2, r3, #1
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f023 0201 	bic.w	r2, r3, #1
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	460b      	mov	r3, r1
 800a45a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d115      	bne.n	800a49e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a47e:	200a      	movs	r0, #10
 800a480:	f7f9 f9f6 	bl	8003870 <HAL_Delay>
      ms += 10U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	330a      	adds	r3, #10
 800a488:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 f93f 	bl	800b70e <USB_GetMode>
 800a490:	4603      	mov	r3, r0
 800a492:	2b01      	cmp	r3, #1
 800a494:	d01e      	beq.n	800a4d4 <USB_SetCurrentMode+0x84>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2bc7      	cmp	r3, #199	@ 0xc7
 800a49a:	d9f0      	bls.n	800a47e <USB_SetCurrentMode+0x2e>
 800a49c:	e01a      	b.n	800a4d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a49e:	78fb      	ldrb	r3, [r7, #3]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d115      	bne.n	800a4d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a4b0:	200a      	movs	r0, #10
 800a4b2:	f7f9 f9dd 	bl	8003870 <HAL_Delay>
      ms += 10U;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	330a      	adds	r3, #10
 800a4ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f001 f926 	bl	800b70e <USB_GetMode>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <USB_SetCurrentMode+0x84>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2bc7      	cmp	r3, #199	@ 0xc7
 800a4cc:	d9f0      	bls.n	800a4b0 <USB_SetCurrentMode+0x60>
 800a4ce:	e001      	b.n	800a4d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e005      	b.n	800a4e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a4d8:	d101      	bne.n	800a4de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e000      	b.n	800a4e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b086      	sub	sp, #24
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a4f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a502:	2300      	movs	r3, #0
 800a504:	613b      	str	r3, [r7, #16]
 800a506:	e009      	b.n	800a51c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	3340      	adds	r3, #64	@ 0x40
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	4413      	add	r3, r2
 800a512:	2200      	movs	r2, #0
 800a514:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	3301      	adds	r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	2b0e      	cmp	r3, #14
 800a520:	d9f2      	bls.n	800a508 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a522:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a526:	2b00      	cmp	r3, #0
 800a528:	d11c      	bne.n	800a564 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a538:	f043 0302 	orr.w	r3, r3, #2
 800a53c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a542:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	639a      	str	r2, [r3, #56]	@ 0x38
 800a562:	e00b      	b.n	800a57c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a568:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a574:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a582:	461a      	mov	r2, r3
 800a584:	2300      	movs	r3, #0
 800a586:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a588:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d10d      	bne.n	800a5ac <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a590:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a598:	2100      	movs	r1, #0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f968 	bl	800a870 <USB_SetDevSpeed>
 800a5a0:	e008      	b.n	800a5b4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f963 	bl	800a870 <USB_SetDevSpeed>
 800a5aa:	e003      	b.n	800a5b4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a5ac:	2103      	movs	r1, #3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f95e 	bl	800a870 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a5b4:	2110      	movs	r1, #16
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f8fa 	bl	800a7b0 <USB_FlushTxFifo>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f924 	bl	800a814 <USB_FlushRxFifo>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5dc:	461a      	mov	r2, r3
 800a5de:	2300      	movs	r3, #0
 800a5e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e043      	b.n	800a688 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a616:	d118      	bne.n	800a64a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10a      	bne.n	800a634 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a62a:	461a      	mov	r2, r3
 800a62c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a630:	6013      	str	r3, [r2, #0]
 800a632:	e013      	b.n	800a65c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a640:	461a      	mov	r2, r3
 800a642:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	e008      	b.n	800a65c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	015a      	lsls	r2, r3, #5
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4413      	add	r3, r2
 800a652:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a656:	461a      	mov	r2, r3
 800a658:	2300      	movs	r3, #0
 800a65a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	015a      	lsls	r2, r3, #5
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4413      	add	r3, r2
 800a664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a668:	461a      	mov	r2, r3
 800a66a:	2300      	movs	r3, #0
 800a66c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	015a      	lsls	r2, r3, #5
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a67a:	461a      	mov	r2, r3
 800a67c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a680:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	3301      	adds	r3, #1
 800a686:	613b      	str	r3, [r7, #16]
 800a688:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a68c:	461a      	mov	r2, r3
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	4293      	cmp	r3, r2
 800a692:	d3b5      	bcc.n	800a600 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a694:	2300      	movs	r3, #0
 800a696:	613b      	str	r3, [r7, #16]
 800a698:	e043      	b.n	800a722 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6b0:	d118      	bne.n	800a6e4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10a      	bne.n	800a6ce <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	015a      	lsls	r2, r3, #5
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4413      	add	r3, r2
 800a6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a6ca:	6013      	str	r3, [r2, #0]
 800a6cc:	e013      	b.n	800a6f6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6da:	461a      	mov	r2, r3
 800a6dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a6e0:	6013      	str	r3, [r2, #0]
 800a6e2:	e008      	b.n	800a6f6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	015a      	lsls	r2, r3, #5
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a702:	461a      	mov	r2, r3
 800a704:	2300      	movs	r3, #0
 800a706:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a714:	461a      	mov	r2, r3
 800a716:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a71a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	3301      	adds	r3, #1
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a726:	461a      	mov	r2, r3
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d3b5      	bcc.n	800a69a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a73c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a740:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a74e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a750:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a754:	2b00      	cmp	r3, #0
 800a756:	d105      	bne.n	800a764 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	f043 0210 	orr.w	r2, r3, #16
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	699a      	ldr	r2, [r3, #24]
 800a768:	4b10      	ldr	r3, [pc, #64]	@ (800a7ac <USB_DevInit+0x2c4>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a770:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	f043 0208 	orr.w	r2, r3, #8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a784:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d107      	bne.n	800a79c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a794:	f043 0304 	orr.w	r3, r3, #4
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a79c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7a8:	b004      	add	sp, #16
 800a7aa:	4770      	bx	lr
 800a7ac:	803c3800 	.word	0x803c3800

0800a7b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7ca:	d901      	bls.n	800a7d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e01b      	b.n	800a808 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	daf2      	bge.n	800a7be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	019b      	lsls	r3, r3, #6
 800a7e0:	f043 0220 	orr.w	r2, r3, #32
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a7f4:	d901      	bls.n	800a7fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	e006      	b.n	800a808 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b20      	cmp	r3, #32
 800a804:	d0f0      	beq.n	800a7e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3714      	adds	r7, #20
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	3301      	adds	r3, #1
 800a824:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a82c:	d901      	bls.n	800a832 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a82e:	2303      	movs	r3, #3
 800a830:	e018      	b.n	800a864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	daf2      	bge.n	800a820 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2210      	movs	r2, #16
 800a842:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	3301      	adds	r3, #1
 800a848:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a850:	d901      	bls.n	800a856 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	e006      	b.n	800a864 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	f003 0310 	and.w	r3, r3, #16
 800a85e:	2b10      	cmp	r3, #16
 800a860:	d0f0      	beq.n	800a844 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	68f9      	ldr	r1, [r7, #12]
 800a88c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a890:	4313      	orrs	r3, r2
 800a892:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	b087      	sub	sp, #28
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f003 0306 	and.w	r3, r3, #6
 800a8ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d102      	bne.n	800a8c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	75fb      	strb	r3, [r7, #23]
 800a8c6:	e00a      	b.n	800a8de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b02      	cmp	r3, #2
 800a8cc:	d002      	beq.n	800a8d4 <USB_GetDevSpeed+0x32>
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b06      	cmp	r3, #6
 800a8d2:	d102      	bne.n	800a8da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	75fb      	strb	r3, [r7, #23]
 800a8d8:	e001      	b.n	800a8de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a8da:	230f      	movs	r3, #15
 800a8dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	371c      	adds	r7, #28
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d13a      	bne.n	800a97e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a90e:	69da      	ldr	r2, [r3, #28]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	f003 030f 	and.w	r3, r3, #15
 800a918:	2101      	movs	r1, #1
 800a91a:	fa01 f303 	lsl.w	r3, r1, r3
 800a91e:	b29b      	uxth	r3, r3
 800a920:	68f9      	ldr	r1, [r7, #12]
 800a922:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a926:	4313      	orrs	r3, r2
 800a928:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	015a      	lsls	r2, r3, #5
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4413      	add	r3, r2
 800a932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d155      	bne.n	800a9ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	791b      	ldrb	r3, [r3, #4]
 800a95a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a95c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	059b      	lsls	r3, r3, #22
 800a962:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a964:	4313      	orrs	r3, r2
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	0151      	lsls	r1, r2, #5
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	440a      	add	r2, r1
 800a96e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	e036      	b.n	800a9ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a984:	69da      	ldr	r2, [r3, #28]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	f003 030f 	and.w	r3, r3, #15
 800a98e:	2101      	movs	r1, #1
 800a990:	fa01 f303 	lsl.w	r3, r1, r3
 800a994:	041b      	lsls	r3, r3, #16
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a99c:	4313      	orrs	r3, r2
 800a99e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d11a      	bne.n	800a9ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	791b      	ldrb	r3, [r3, #4]
 800a9d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a9d2:	430b      	orrs	r3, r1
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	0151      	lsls	r1, r2, #5
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	440a      	add	r2, r1
 800a9de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
	...

0800a9fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	785b      	ldrb	r3, [r3, #1]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d161      	bne.n	800aadc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa2e:	d11f      	bne.n	800aa70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	0151      	lsls	r1, r2, #5
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	440a      	add	r2, r1
 800aa46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa4a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aa4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	015a      	lsls	r2, r3, #5
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	4413      	add	r3, r2
 800aa58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	0151      	lsls	r1, r2, #5
 800aa62:	68fa      	ldr	r2, [r7, #12]
 800aa64:	440a      	add	r2, r1
 800aa66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	2101      	movs	r1, #1
 800aa82:	fa01 f303 	lsl.w	r3, r1, r3
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa90:	4013      	ands	r3, r2
 800aa92:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa9a:	69da      	ldr	r2, [r3, #28]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	f003 030f 	and.w	r3, r3, #15
 800aaa4:	2101      	movs	r1, #1
 800aaa6:	fa01 f303 	lsl.w	r3, r1, r3
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	43db      	mvns	r3, r3
 800aaae:	68f9      	ldr	r1, [r7, #12]
 800aab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aab4:	4013      	ands	r3, r2
 800aab6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	0159      	lsls	r1, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	440b      	add	r3, r1
 800aace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad2:	4619      	mov	r1, r3
 800aad4:	4b35      	ldr	r3, [pc, #212]	@ (800abac <USB_DeactivateEndpoint+0x1b0>)
 800aad6:	4013      	ands	r3, r2
 800aad8:	600b      	str	r3, [r1, #0]
 800aada:	e060      	b.n	800ab9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aaee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aaf2:	d11f      	bne.n	800ab34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	0151      	lsls	r1, r2, #5
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	440a      	add	r2, r1
 800ab0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f003 030f 	and.w	r3, r3, #15
 800ab44:	2101      	movs	r1, #1
 800ab46:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	43db      	mvns	r3, r3
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab54:	4013      	ands	r3, r2
 800ab56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab5e:	69da      	ldr	r2, [r3, #28]
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	2101      	movs	r1, #1
 800ab6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6e:	041b      	lsls	r3, r3, #16
 800ab70:	43db      	mvns	r3, r3
 800ab72:	68f9      	ldr	r1, [r7, #12]
 800ab74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab78:	4013      	ands	r3, r2
 800ab7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	0159      	lsls	r1, r3, #5
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	440b      	add	r3, r1
 800ab92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab96:	4619      	mov	r1, r3
 800ab98:	4b05      	ldr	r3, [pc, #20]	@ (800abb0 <USB_DeactivateEndpoint+0x1b4>)
 800ab9a:	4013      	ands	r3, r2
 800ab9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	ec337800 	.word	0xec337800
 800abb0:	eff37800 	.word	0xeff37800

0800abb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b08a      	sub	sp, #40	@ 0x28
 800abb8:	af02      	add	r7, sp, #8
 800abba:	60f8      	str	r0, [r7, #12]
 800abbc:	60b9      	str	r1, [r7, #8]
 800abbe:	4613      	mov	r3, r2
 800abc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	f040 817f 	bne.w	800aed4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d132      	bne.n	800ac44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	015a      	lsls	r2, r3, #5
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	4413      	add	r3, r2
 800abe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	0151      	lsls	r1, r2, #5
 800abf0:	69fa      	ldr	r2, [r7, #28]
 800abf2:	440a      	add	r2, r1
 800abf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800abfc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	015a      	lsls	r2, r3, #5
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	69ba      	ldr	r2, [r7, #24]
 800ac12:	0151      	lsls	r1, r2, #5
 800ac14:	69fa      	ldr	r2, [r7, #28]
 800ac16:	440a      	add	r2, r1
 800ac18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac2e:	691b      	ldr	r3, [r3, #16]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	69fa      	ldr	r2, [r7, #28]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac3c:	0cdb      	lsrs	r3, r3, #19
 800ac3e:	04db      	lsls	r3, r3, #19
 800ac40:	6113      	str	r3, [r2, #16]
 800ac42:	e097      	b.n	800ad74 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	0151      	lsls	r1, r2, #5
 800ac56:	69fa      	ldr	r2, [r7, #28]
 800ac58:	440a      	add	r2, r1
 800ac5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac5e:	0cdb      	lsrs	r3, r3, #19
 800ac60:	04db      	lsls	r3, r3, #19
 800ac62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	015a      	lsls	r2, r3, #5
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	0151      	lsls	r1, r2, #5
 800ac76:	69fa      	ldr	r2, [r7, #28]
 800ac78:	440a      	add	r2, r1
 800ac7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ac82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ac86:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d11a      	bne.n	800acc4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	691a      	ldr	r2, [r3, #16]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d903      	bls.n	800aca2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	689a      	ldr	r2, [r3, #8]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	015a      	lsls	r2, r3, #5
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4413      	add	r3, r2
 800acaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	0151      	lsls	r1, r2, #5
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	440a      	add	r2, r1
 800acb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800acc0:	6113      	str	r3, [r2, #16]
 800acc2:	e044      	b.n	800ad4e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	691a      	ldr	r2, [r3, #16]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	4413      	add	r3, r2
 800acce:	1e5a      	subs	r2, r3, #1
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	015a      	lsls	r2, r3, #5
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	4413      	add	r3, r2
 800ace2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace6:	691a      	ldr	r2, [r3, #16]
 800ace8:	8afb      	ldrh	r3, [r7, #22]
 800acea:	04d9      	lsls	r1, r3, #19
 800acec:	4ba4      	ldr	r3, [pc, #656]	@ (800af80 <USB_EPStartXfer+0x3cc>)
 800acee:	400b      	ands	r3, r1
 800acf0:	69b9      	ldr	r1, [r7, #24]
 800acf2:	0148      	lsls	r0, r1, #5
 800acf4:	69f9      	ldr	r1, [r7, #28]
 800acf6:	4401      	add	r1, r0
 800acf8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800acfc:	4313      	orrs	r3, r2
 800acfe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	791b      	ldrb	r3, [r3, #4]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d122      	bne.n	800ad4e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad14:	691b      	ldr	r3, [r3, #16]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	69fa      	ldr	r2, [r7, #28]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad22:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ad26:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad34:	691a      	ldr	r2, [r3, #16]
 800ad36:	8afb      	ldrh	r3, [r7, #22]
 800ad38:	075b      	lsls	r3, r3, #29
 800ad3a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ad3e:	69b9      	ldr	r1, [r7, #24]
 800ad40:	0148      	lsls	r0, r1, #5
 800ad42:	69f9      	ldr	r1, [r7, #28]
 800ad44:	4401      	add	r1, r0
 800ad46:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5a:	691a      	ldr	r2, [r3, #16]
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad64:	69b9      	ldr	r1, [r7, #24]
 800ad66:	0148      	lsls	r0, r1, #5
 800ad68:	69f9      	ldr	r1, [r7, #28]
 800ad6a:	4401      	add	r1, r0
 800ad6c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ad70:	4313      	orrs	r3, r2
 800ad72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d14b      	bne.n	800ae12 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	69db      	ldr	r3, [r3, #28]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d009      	beq.n	800ad96 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad8e:	461a      	mov	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	791b      	ldrb	r3, [r3, #4]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d128      	bne.n	800adf0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d110      	bne.n	800add0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	015a      	lsls	r2, r3, #5
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	0151      	lsls	r1, r2, #5
 800adc0:	69fa      	ldr	r2, [r7, #28]
 800adc2:	440a      	add	r2, r1
 800adc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800adcc:	6013      	str	r3, [r2, #0]
 800adce:	e00f      	b.n	800adf0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69ba      	ldr	r2, [r7, #24]
 800ade0:	0151      	lsls	r1, r2, #5
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	440a      	add	r2, r1
 800ade6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adee:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	69ba      	ldr	r2, [r7, #24]
 800ae00:	0151      	lsls	r1, r2, #5
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	440a      	add	r2, r1
 800ae06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae0a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae0e:	6013      	str	r3, [r2, #0]
 800ae10:	e166      	b.n	800b0e0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	69ba      	ldr	r2, [r7, #24]
 800ae22:	0151      	lsls	r1, r2, #5
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	440a      	add	r2, r1
 800ae28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ae30:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	791b      	ldrb	r3, [r3, #4]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d015      	beq.n	800ae66 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 814e 	beq.w	800b0e0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	f003 030f 	and.w	r3, r3, #15
 800ae54:	2101      	movs	r1, #1
 800ae56:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5a:	69f9      	ldr	r1, [r7, #28]
 800ae5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae60:	4313      	orrs	r3, r2
 800ae62:	634b      	str	r3, [r1, #52]	@ 0x34
 800ae64:	e13c      	b.n	800b0e0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d110      	bne.n	800ae98 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	69ba      	ldr	r2, [r7, #24]
 800ae86:	0151      	lsls	r1, r2, #5
 800ae88:	69fa      	ldr	r2, [r7, #28]
 800ae8a:	440a      	add	r2, r1
 800ae8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	e00f      	b.n	800aeb8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	015a      	lsls	r2, r3, #5
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	4413      	add	r3, r2
 800aea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	0151      	lsls	r1, r2, #5
 800aeaa:	69fa      	ldr	r2, [r7, #28]
 800aeac:	440a      	add	r2, r1
 800aeae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aeb6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	68d9      	ldr	r1, [r3, #12]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	781a      	ldrb	r2, [r3, #0]
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	691b      	ldr	r3, [r3, #16]
 800aec4:	b298      	uxth	r0, r3
 800aec6:	79fb      	ldrb	r3, [r7, #7]
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	4603      	mov	r3, r0
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f000 f9b9 	bl	800b244 <USB_WritePacket>
 800aed2:	e105      	b.n	800b0e0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	015a      	lsls	r2, r3, #5
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	4413      	add	r3, r2
 800aedc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee0:	691b      	ldr	r3, [r3, #16]
 800aee2:	69ba      	ldr	r2, [r7, #24]
 800aee4:	0151      	lsls	r1, r2, #5
 800aee6:	69fa      	ldr	r2, [r7, #28]
 800aee8:	440a      	add	r2, r1
 800aeea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeee:	0cdb      	lsrs	r3, r3, #19
 800aef0:	04db      	lsls	r3, r3, #19
 800aef2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aef4:	69bb      	ldr	r3, [r7, #24]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	0151      	lsls	r1, r2, #5
 800af06:	69fa      	ldr	r2, [r7, #28]
 800af08:	440a      	add	r2, r1
 800af0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800af16:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d132      	bne.n	800af84 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	691b      	ldr	r3, [r3, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	689a      	ldr	r2, [r3, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af42:	691a      	ldr	r2, [r3, #16]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af4c:	69b9      	ldr	r1, [r7, #24]
 800af4e:	0148      	lsls	r0, r1, #5
 800af50:	69f9      	ldr	r1, [r7, #28]
 800af52:	4401      	add	r1, r0
 800af54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800af58:	4313      	orrs	r3, r2
 800af5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	015a      	lsls	r2, r3, #5
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	4413      	add	r3, r2
 800af64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	69ba      	ldr	r2, [r7, #24]
 800af6c:	0151      	lsls	r1, r2, #5
 800af6e:	69fa      	ldr	r2, [r7, #28]
 800af70:	440a      	add	r2, r1
 800af72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af7a:	6113      	str	r3, [r2, #16]
 800af7c:	e062      	b.n	800b044 <USB_EPStartXfer+0x490>
 800af7e:	bf00      	nop
 800af80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d123      	bne.n	800afd4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	015a      	lsls	r2, r3, #5
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	4413      	add	r3, r2
 800af94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af98:	691a      	ldr	r2, [r3, #16]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afa2:	69b9      	ldr	r1, [r7, #24]
 800afa4:	0148      	lsls	r0, r1, #5
 800afa6:	69f9      	ldr	r1, [r7, #28]
 800afa8:	4401      	add	r1, r0
 800afaa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800afae:	4313      	orrs	r3, r2
 800afb0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	69fa      	ldr	r2, [r7, #28]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afd0:	6113      	str	r3, [r2, #16]
 800afd2:	e037      	b.n	800b044 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	691a      	ldr	r2, [r3, #16]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	4413      	add	r3, r2
 800afde:	1e5a      	subs	r2, r3, #1
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afe8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	8afa      	ldrh	r2, [r7, #22]
 800aff0:	fb03 f202 	mul.w	r2, r3, r2
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b004:	691a      	ldr	r2, [r3, #16]
 800b006:	8afb      	ldrh	r3, [r7, #22]
 800b008:	04d9      	lsls	r1, r3, #19
 800b00a:	4b38      	ldr	r3, [pc, #224]	@ (800b0ec <USB_EPStartXfer+0x538>)
 800b00c:	400b      	ands	r3, r1
 800b00e:	69b9      	ldr	r1, [r7, #24]
 800b010:	0148      	lsls	r0, r1, #5
 800b012:	69f9      	ldr	r1, [r7, #28]
 800b014:	4401      	add	r1, r0
 800b016:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b01a:	4313      	orrs	r3, r2
 800b01c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	015a      	lsls	r2, r3, #5
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	4413      	add	r3, r2
 800b026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b02a:	691a      	ldr	r2, [r3, #16]
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	6a1b      	ldr	r3, [r3, #32]
 800b030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b034:	69b9      	ldr	r1, [r7, #24]
 800b036:	0148      	lsls	r0, r1, #5
 800b038:	69f9      	ldr	r1, [r7, #28]
 800b03a:	4401      	add	r1, r0
 800b03c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b040:	4313      	orrs	r3, r2
 800b042:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b044:	79fb      	ldrb	r3, [r7, #7]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d10d      	bne.n	800b066 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d009      	beq.n	800b066 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	68d9      	ldr	r1, [r3, #12]
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	015a      	lsls	r2, r3, #5
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	4413      	add	r3, r2
 800b05e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b062:	460a      	mov	r2, r1
 800b064:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	791b      	ldrb	r3, [r3, #4]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d128      	bne.n	800b0c0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d110      	bne.n	800b0a0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	015a      	lsls	r2, r3, #5
 800b082:	69fb      	ldr	r3, [r7, #28]
 800b084:	4413      	add	r3, r2
 800b086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	0151      	lsls	r1, r2, #5
 800b090:	69fa      	ldr	r2, [r7, #28]
 800b092:	440a      	add	r2, r1
 800b094:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b098:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	e00f      	b.n	800b0c0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	015a      	lsls	r2, r3, #5
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	4413      	add	r3, r2
 800b0a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	69fa      	ldr	r2, [r7, #28]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	69ba      	ldr	r2, [r7, #24]
 800b0d0:	0151      	lsls	r1, r2, #5
 800b0d2:	69fa      	ldr	r2, [r7, #28]
 800b0d4:	440a      	add	r2, r1
 800b0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b0de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3720      	adds	r7, #32
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	1ff80000 	.word	0x1ff80000

0800b0f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0fe:	2300      	movs	r3, #0
 800b100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	785b      	ldrb	r3, [r3, #1]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d14a      	bne.n	800b1a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b126:	f040 8086 	bne.w	800b236 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	015a      	lsls	r2, r3, #5
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	4413      	add	r3, r2
 800b134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	7812      	ldrb	r2, [r2, #0]
 800b13e:	0151      	lsls	r1, r2, #5
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	440a      	add	r2, r1
 800b144:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b148:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b14c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	7812      	ldrb	r2, [r2, #0]
 800b162:	0151      	lsls	r1, r2, #5
 800b164:	693a      	ldr	r2, [r7, #16]
 800b166:	440a      	add	r2, r1
 800b168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b16c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b170:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3301      	adds	r3, #1
 800b176:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b17e:	4293      	cmp	r3, r2
 800b180:	d902      	bls.n	800b188 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	75fb      	strb	r3, [r7, #23]
          break;
 800b186:	e056      	b.n	800b236 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b19c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1a0:	d0e7      	beq.n	800b172 <USB_EPStopXfer+0x82>
 800b1a2:	e048      	b.n	800b236 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1bc:	d13b      	bne.n	800b236 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	7812      	ldrb	r2, [r2, #0]
 800b1d2:	0151      	lsls	r1, r2, #5
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	440a      	add	r2, r1
 800b1d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	015a      	lsls	r2, r3, #5
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	7812      	ldrb	r2, [r2, #0]
 800b1f6:	0151      	lsls	r1, r2, #5
 800b1f8:	693a      	ldr	r2, [r7, #16]
 800b1fa:	440a      	add	r2, r1
 800b1fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b200:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b204:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	3301      	adds	r3, #1
 800b20a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b212:	4293      	cmp	r3, r2
 800b214:	d902      	bls.n	800b21c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	75fb      	strb	r3, [r7, #23]
          break;
 800b21a:	e00c      	b.n	800b236 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b234:	d0e7      	beq.n	800b206 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
}
 800b238:	4618      	mov	r0, r3
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b244:	b480      	push	{r7}
 800b246:	b089      	sub	sp, #36	@ 0x24
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	4611      	mov	r1, r2
 800b250:	461a      	mov	r2, r3
 800b252:	460b      	mov	r3, r1
 800b254:	71fb      	strb	r3, [r7, #7]
 800b256:	4613      	mov	r3, r2
 800b258:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b262:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b266:	2b00      	cmp	r3, #0
 800b268:	d123      	bne.n	800b2b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b26a:	88bb      	ldrh	r3, [r7, #4]
 800b26c:	3303      	adds	r3, #3
 800b26e:	089b      	lsrs	r3, r3, #2
 800b270:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b272:	2300      	movs	r3, #0
 800b274:	61bb      	str	r3, [r7, #24]
 800b276:	e018      	b.n	800b2aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b278:	79fb      	ldrb	r3, [r7, #7]
 800b27a:	031a      	lsls	r2, r3, #12
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b284:	461a      	mov	r2, r3
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	3301      	adds	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	61bb      	str	r3, [r7, #24]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d3e2      	bcc.n	800b278 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3724      	adds	r7, #36	@ 0x24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b08b      	sub	sp, #44	@ 0x2c
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b2d6:	88fb      	ldrh	r3, [r7, #6]
 800b2d8:	089b      	lsrs	r3, r3, #2
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2de:	88fb      	ldrh	r3, [r7, #6]
 800b2e0:	f003 0303 	and.w	r3, r3, #3
 800b2e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	623b      	str	r3, [r7, #32]
 800b2ea:	e014      	b.n	800b316 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b300:	3301      	adds	r3, #1
 800b302:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	3301      	adds	r3, #1
 800b308:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b30c:	3301      	adds	r3, #1
 800b30e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b310:	6a3b      	ldr	r3, [r7, #32]
 800b312:	3301      	adds	r3, #1
 800b314:	623b      	str	r3, [r7, #32]
 800b316:	6a3a      	ldr	r2, [r7, #32]
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d3e6      	bcc.n	800b2ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b31e:	8bfb      	ldrh	r3, [r7, #30]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d01e      	beq.n	800b362 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b324:	2300      	movs	r3, #0
 800b326:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b32e:	461a      	mov	r2, r3
 800b330:	f107 0310 	add.w	r3, r7, #16
 800b334:	6812      	ldr	r2, [r2, #0]
 800b336:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	00db      	lsls	r3, r3, #3
 800b340:	fa22 f303 	lsr.w	r3, r2, r3
 800b344:	b2da      	uxtb	r2, r3
 800b346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b348:	701a      	strb	r2, [r3, #0]
      i++;
 800b34a:	6a3b      	ldr	r3, [r7, #32]
 800b34c:	3301      	adds	r3, #1
 800b34e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b352:	3301      	adds	r3, #1
 800b354:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b356:	8bfb      	ldrh	r3, [r7, #30]
 800b358:	3b01      	subs	r3, #1
 800b35a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b35c:	8bfb      	ldrh	r3, [r7, #30]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1ea      	bne.n	800b338 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b364:	4618      	mov	r0, r3
 800b366:	372c      	adds	r7, #44	@ 0x2c
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	785b      	ldrb	r3, [r3, #1]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d12c      	bne.n	800b3e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	db12      	blt.n	800b3c4 <USB_EPSetStall+0x54>
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00f      	beq.n	800b3c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	015a      	lsls	r2, r3, #5
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68ba      	ldr	r2, [r7, #8]
 800b3b4:	0151      	lsls	r1, r2, #5
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	440a      	add	r2, r1
 800b3ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b3c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	015a      	lsls	r2, r3, #5
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	0151      	lsls	r1, r2, #5
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	440a      	add	r2, r1
 800b3da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	e02b      	b.n	800b43e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	db12      	blt.n	800b41e <USB_EPSetStall+0xae>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00f      	beq.n	800b41e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	0151      	lsls	r1, r2, #5
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	440a      	add	r2, r1
 800b414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b418:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b41c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	015a      	lsls	r2, r3, #5
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	4413      	add	r3, r2
 800b426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68ba      	ldr	r2, [r7, #8]
 800b42e:	0151      	lsls	r1, r2, #5
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	440a      	add	r2, r1
 800b434:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b43c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3714      	adds	r7, #20
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d128      	bne.n	800b4ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	0151      	lsls	r1, r2, #5
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	440a      	add	r2, r1
 800b47e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b482:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b486:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	791b      	ldrb	r3, [r3, #4]
 800b48c:	2b03      	cmp	r3, #3
 800b48e:	d003      	beq.n	800b498 <USB_EPClearStall+0x4c>
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	791b      	ldrb	r3, [r3, #4]
 800b494:	2b02      	cmp	r3, #2
 800b496:	d138      	bne.n	800b50a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	015a      	lsls	r2, r3, #5
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	4413      	add	r3, r2
 800b4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	0151      	lsls	r1, r2, #5
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	440a      	add	r2, r1
 800b4ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	e027      	b.n	800b50a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68ba      	ldr	r2, [r7, #8]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b4d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	791b      	ldrb	r3, [r3, #4]
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d003      	beq.n	800b4ea <USB_EPClearStall+0x9e>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	791b      	ldrb	r3, [r3, #4]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d10f      	bne.n	800b50a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68ba      	ldr	r2, [r7, #8]
 800b4fa:	0151      	lsls	r1, r2, #5
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	440a      	add	r2, r1
 800b500:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b508:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	460b      	mov	r3, r1
 800b522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b536:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b53a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	78fb      	ldrb	r3, [r7, #3]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b54c:	68f9      	ldr	r1, [r7, #12]
 800b54e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b552:	4313      	orrs	r3, r2
 800b554:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b592:	f023 0302 	bic.w	r3, r3, #2
 800b596:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b085      	sub	sp, #20
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b5c0:	f023 0303 	bic.w	r3, r3, #3
 800b5c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b5d4:	f043 0302 	orr.w	r3, r3, #2
 800b5d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	699b      	ldr	r3, [r3, #24]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b600:	68fb      	ldr	r3, [r7, #12]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr

0800b60e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b60e:	b480      	push	{r7}
 800b610:	b085      	sub	sp, #20
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b62a:	69db      	ldr	r3, [r3, #28]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	4013      	ands	r3, r2
 800b630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	0c1b      	lsrs	r3, r3, #16
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b642:	b480      	push	{r7}
 800b644:	b085      	sub	sp, #20
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b654:	699b      	ldr	r3, [r3, #24]
 800b656:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	4013      	ands	r3, r2
 800b664:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	b29b      	uxth	r3, r3
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b676:	b480      	push	{r7}
 800b678:	b085      	sub	sp, #20
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b686:	78fb      	ldrb	r3, [r7, #3]
 800b688:	015a      	lsls	r2, r3, #5
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	4413      	add	r3, r2
 800b68e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b692:	689b      	ldr	r3, [r3, #8]
 800b694:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr

0800b6b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6b2:	b480      	push	{r7}
 800b6b4:	b087      	sub	sp, #28
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6d6:	78fb      	ldrb	r3, [r7, #3]
 800b6d8:	f003 030f 	and.w	r3, r3, #15
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e2:	01db      	lsls	r3, r3, #7
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6ec:	78fb      	ldrb	r3, [r7, #3]
 800b6ee:	015a      	lsls	r2, r3, #5
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b700:	68bb      	ldr	r3, [r7, #8]
}
 800b702:	4618      	mov	r0, r3
 800b704:	371c      	adds	r7, #28
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b70e:	b480      	push	{r7}
 800b710:	b083      	sub	sp, #12
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	f003 0301 	and.w	r3, r3, #1
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b72a:	b480      	push	{r7}
 800b72c:	b085      	sub	sp, #20
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b744:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b748:	f023 0307 	bic.w	r3, r3, #7
 800b74c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b75c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	460b      	mov	r3, r1
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	333c      	adds	r3, #60	@ 0x3c
 800b786:	3304      	adds	r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	4a26      	ldr	r2, [pc, #152]	@ (800b828 <USB_EP0_OutStart+0xb8>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d90a      	bls.n	800b7aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7a4:	d101      	bne.n	800b7aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e037      	b.n	800b81a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7d8:	f043 0318 	orr.w	r3, r3, #24
 800b7dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b7f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b7f2:	7afb      	ldrb	r3, [r7, #11]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d10f      	bne.n	800b818 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7fe:	461a      	mov	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	697a      	ldr	r2, [r7, #20]
 800b80e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b812:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b816:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	371c      	adds	r7, #28
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	4f54300a 	.word	0x4f54300a

0800b82c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b844:	d901      	bls.n	800b84a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e022      	b.n	800b890 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	daf2      	bge.n	800b838 <USB_CoreReset+0xc>

  count = 10U;
 800b852:	230a      	movs	r3, #10
 800b854:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b856:	e002      	b.n	800b85e <USB_CoreReset+0x32>
  {
    count--;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1f9      	bne.n	800b858 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	f043 0201 	orr.w	r2, r3, #1
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	3301      	adds	r3, #1
 800b874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b87c:	d901      	bls.n	800b882 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e006      	b.n	800b890 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d0f0      	beq.n	800b870 <USB_CoreReset+0x44>

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 800b8a0:	f000 fb08 	bl	800beb4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	4917      	ldr	r1, [pc, #92]	@ (800b904 <MX_USB_DEVICE_Init+0x68>)
 800b8a8:	4817      	ldr	r0, [pc, #92]	@ (800b908 <MX_USB_DEVICE_Init+0x6c>)
 800b8aa:	f001 fa21 	bl	800ccf0 <USBD_Init>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d001      	beq.n	800b8b8 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800b8b4:	f7f6 fdfa 	bl	80024ac <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 800b8b8:	4914      	ldr	r1, [pc, #80]	@ (800b90c <MX_USB_DEVICE_Init+0x70>)
 800b8ba:	4813      	ldr	r0, [pc, #76]	@ (800b908 <MX_USB_DEVICE_Init+0x6c>)
 800b8bc:	f001 fa44 	bl	800cd48 <USBD_RegisterClass>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800b8c6:	f7f6 fdf1 	bl	80024ac <Error_Handler>
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDevice, &USBD_CustomHID_fops) != USBD_OK)
 800b8ca:	4911      	ldr	r1, [pc, #68]	@ (800b910 <MX_USB_DEVICE_Init+0x74>)
 800b8cc:	480e      	ldr	r0, [pc, #56]	@ (800b908 <MX_USB_DEVICE_Init+0x6c>)
 800b8ce:	f000 fead 	bl	800c62c <USBD_CUSTOM_HID_RegisterInterface>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b8d8:	f7f6 fde8 	bl	80024ac <Error_Handler>
  }
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  if (USBD_CUSTOM_HID2_RegisterInterface(&hUsbDevice, &USBD_CustomHID2_fops) != USBD_OK)
 800b8dc:	490d      	ldr	r1, [pc, #52]	@ (800b914 <MX_USB_DEVICE_Init+0x78>)
 800b8de:	480a      	ldr	r0, [pc, #40]	@ (800b908 <MX_USB_DEVICE_Init+0x6c>)
 800b8e0:	f001 f9b8 	bl	800cc54 <USBD_CUSTOM_HID2_RegisterInterface>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 800b8ea:	f7f6 fddf 	bl	80024ac <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 800b8ee:	4806      	ldr	r0, [pc, #24]	@ (800b908 <MX_USB_DEVICE_Init+0x6c>)
 800b8f0:	f001 fa68 	bl	800cdc4 <USBD_Start>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <MX_USB_DEVICE_Init+0x62>
  {
    Error_Handler();
 800b8fa:	f7f6 fdd7 	bl	80024ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8fe:	bf00      	nop
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20000018 	.word	0x20000018
 800b908:	20000ce8 	.word	0x20000ce8
 800b90c:	200000e8 	.word	0x200000e8
 800b910:	200000d8 	.word	0x200000d8
 800b914:	20000098 	.word	0x20000098

0800b918 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	4603      	mov	r3, r0
 800b920:	6039      	str	r1, [r7, #0]
 800b922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	2212      	movs	r2, #18
 800b928:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 800b92a:	4b03      	ldr	r3, [pc, #12]	@ (800b938 <USBD_DeviceDescriptor+0x20>)
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	20000038 	.word	0x20000038

0800b93c <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	4603      	mov	r3, r0
 800b944:	6039      	str	r1, [r7, #0]
 800b946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	2204      	movs	r2, #4
 800b94c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b94e:	4b03      	ldr	r3, [pc, #12]	@ (800b95c <USBD_LangIDStrDescriptor+0x20>)
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	2000004c 	.word	0x2000004c

0800b960 <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	4603      	mov	r3, r0
 800b968:	6039      	str	r1, [r7, #0]
 800b96a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d105      	bne.n	800b97e <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4907      	ldr	r1, [pc, #28]	@ (800b994 <USBD_ProductStrDescriptor+0x34>)
 800b976:	4808      	ldr	r0, [pc, #32]	@ (800b998 <USBD_ProductStrDescriptor+0x38>)
 800b978:	f002 fa7f 	bl	800de7a <USBD_GetString>
 800b97c:	e004      	b.n	800b988 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	4904      	ldr	r1, [pc, #16]	@ (800b994 <USBD_ProductStrDescriptor+0x34>)
 800b982:	4805      	ldr	r0, [pc, #20]	@ (800b998 <USBD_ProductStrDescriptor+0x38>)
 800b984:	f002 fa79 	bl	800de7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b988:	4b02      	ldr	r3, [pc, #8]	@ (800b994 <USBD_ProductStrDescriptor+0x34>)
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20001004 	.word	0x20001004
 800b998:	0800ef4c 	.word	0x0800ef4c

0800b99c <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	6039      	str	r1, [r7, #0]
 800b9a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	4904      	ldr	r1, [pc, #16]	@ (800b9bc <USBD_ManufacturerStrDescriptor+0x20>)
 800b9ac:	4804      	ldr	r0, [pc, #16]	@ (800b9c0 <USBD_ManufacturerStrDescriptor+0x24>)
 800b9ae:	f002 fa64 	bl	800de7a <USBD_GetString>
  return USBD_StrDesc;
 800b9b2:	4b02      	ldr	r3, [pc, #8]	@ (800b9bc <USBD_ManufacturerStrDescriptor+0x20>)
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20001004 	.word	0x20001004
 800b9c0:	0800ef64 	.word	0x0800ef64

0800b9c4 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	6039      	str	r1, [r7, #0]
 800b9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	221a      	movs	r2, #26
 800b9d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9d6:	f000 f843 	bl	800ba60 <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b9da:	4b02      	ldr	r3, [pc, #8]	@ (800b9e4 <USBD_SerialStrDescriptor+0x20>)
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20000050 	.word	0x20000050

0800b9e8 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d105      	bne.n	800ba06 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	4907      	ldr	r1, [pc, #28]	@ (800ba1c <USBD_ConfigStrDescriptor+0x34>)
 800b9fe:	4808      	ldr	r0, [pc, #32]	@ (800ba20 <USBD_ConfigStrDescriptor+0x38>)
 800ba00:	f002 fa3b 	bl	800de7a <USBD_GetString>
 800ba04:	e004      	b.n	800ba10 <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	4904      	ldr	r1, [pc, #16]	@ (800ba1c <USBD_ConfigStrDescriptor+0x34>)
 800ba0a:	4805      	ldr	r0, [pc, #20]	@ (800ba20 <USBD_ConfigStrDescriptor+0x38>)
 800ba0c:	f002 fa35 	bl	800de7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba10:	4b02      	ldr	r3, [pc, #8]	@ (800ba1c <USBD_ConfigStrDescriptor+0x34>)
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20001004 	.word	0x20001004
 800ba20:	0800ef78 	.word	0x0800ef78

0800ba24 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	6039      	str	r1, [r7, #0]
 800ba2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba30:	79fb      	ldrb	r3, [r7, #7]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d105      	bne.n	800ba42 <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	4907      	ldr	r1, [pc, #28]	@ (800ba58 <USBD_InterfaceStrDescriptor+0x34>)
 800ba3a:	4808      	ldr	r0, [pc, #32]	@ (800ba5c <USBD_InterfaceStrDescriptor+0x38>)
 800ba3c:	f002 fa1d 	bl	800de7a <USBD_GetString>
 800ba40:	e004      	b.n	800ba4c <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	4904      	ldr	r1, [pc, #16]	@ (800ba58 <USBD_InterfaceStrDescriptor+0x34>)
 800ba46:	4805      	ldr	r0, [pc, #20]	@ (800ba5c <USBD_InterfaceStrDescriptor+0x38>)
 800ba48:	f002 fa17 	bl	800de7a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba4c:	4b02      	ldr	r3, [pc, #8]	@ (800ba58 <USBD_InterfaceStrDescriptor+0x34>)
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20001004 	.word	0x20001004
 800ba5c:	0800ef88 	.word	0x0800ef88

0800ba60 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba66:	4b0f      	ldr	r3, [pc, #60]	@ (800baa4 <Get_SerialNum+0x44>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba6c:	4b0e      	ldr	r3, [pc, #56]	@ (800baa8 <Get_SerialNum+0x48>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba72:	4b0e      	ldr	r3, [pc, #56]	@ (800baac <Get_SerialNum+0x4c>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d009      	beq.n	800ba9a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ba86:	2208      	movs	r2, #8
 800ba88:	4909      	ldr	r1, [pc, #36]	@ (800bab0 <Get_SerialNum+0x50>)
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 f814 	bl	800bab8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba90:	2204      	movs	r2, #4
 800ba92:	4908      	ldr	r1, [pc, #32]	@ (800bab4 <Get_SerialNum+0x54>)
 800ba94:	68b8      	ldr	r0, [r7, #8]
 800ba96:	f000 f80f 	bl	800bab8 <IntToUnicode>
  }
}
 800ba9a:	bf00      	nop
 800ba9c:	3710      	adds	r7, #16
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	1fff7a10 	.word	0x1fff7a10
 800baa8:	1fff7a14 	.word	0x1fff7a14
 800baac:	1fff7a18 	.word	0x1fff7a18
 800bab0:	20000052 	.word	0x20000052
 800bab4:	20000062 	.word	0x20000062

0800bab8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	60f8      	str	r0, [r7, #12]
 800bac0:	60b9      	str	r1, [r7, #8]
 800bac2:	4613      	mov	r3, r2
 800bac4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800baca:	2300      	movs	r3, #0
 800bacc:	75fb      	strb	r3, [r7, #23]
 800bace:	e027      	b.n	800bb20 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	0f1b      	lsrs	r3, r3, #28
 800bad4:	2b09      	cmp	r3, #9
 800bad6:	d80b      	bhi.n	800baf0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	0f1b      	lsrs	r3, r3, #28
 800badc:	b2da      	uxtb	r2, r3
 800bade:	7dfb      	ldrb	r3, [r7, #23]
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	4619      	mov	r1, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	440b      	add	r3, r1
 800bae8:	3230      	adds	r2, #48	@ 0x30
 800baea:	b2d2      	uxtb	r2, r2
 800baec:	701a      	strb	r2, [r3, #0]
 800baee:	e00a      	b.n	800bb06 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	0f1b      	lsrs	r3, r3, #28
 800baf4:	b2da      	uxtb	r2, r3
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4619      	mov	r1, r3
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	440b      	add	r3, r1
 800bb00:	3237      	adds	r2, #55	@ 0x37
 800bb02:	b2d2      	uxtb	r2, r2
 800bb04:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	011b      	lsls	r3, r3, #4
 800bb0a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	3301      	adds	r3, #1
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	4413      	add	r3, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb1a:	7dfb      	ldrb	r3, [r7, #23]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	75fb      	strb	r3, [r7, #23]
 800bb20:	7dfa      	ldrb	r2, [r7, #23]
 800bb22:	79fb      	ldrb	r3, [r7, #7]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d3d3      	bcc.n	800bad0 <IntToUnicode+0x18>
  }
}
 800bb28:	bf00      	nop
 800bb2a:	bf00      	nop
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <CUSTOM_HID2_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID2_Init(void)
{
 800bb36:	b480      	push	{r7}
 800bb38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb3a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <CUSTOM_HID2_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID2_DeInit(void)
{
 800bb46:	b480      	push	{r7}
 800bb48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bb4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <CUSTOM_HID2_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID2_OutEvent(uint8_t event_idx, uint8_t state)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b083      	sub	sp, #12
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	460a      	mov	r2, r1
 800bb60:	71fb      	strb	r3, [r7, #7]
 800bb62:	4613      	mov	r3, r2
 800bb64:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800bb66:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	370c      	adds	r7, #12
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr

0800bb74 <CUSTOM_HID_Init>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init(void)
{
 800bb74:	b480      	push	{r7}
 800bb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <CUSTOM_HID_DeInit>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit(void)
{
 800bb84:	b480      	push	{r7}
 800bb86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800bb88:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <CUSTOM_HID_OutEvent>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent(uint8_t event_idx, uint8_t state)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	460a      	mov	r2, r1
 800bb9e:	71fb      	strb	r3, [r7, #7]
 800bba0:	4613      	mov	r3, r2
 800bba2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  //memcpy(buffer, state, 0x40);
  //USBD_CUSTOM_HID_SendReport(&hUsbDevice, (uint8_t *)buffer, 0x40);
  return (USBD_OK);
 800bba4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
	...

0800bbb4 <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.Init(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
 800bbc0:	4b08      	ldr	r3, [pc, #32]	@ (800bbe4 <USBD_COMPOSITE_Init+0x30>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	78fa      	ldrb	r2, [r7, #3]
 800bbc6:	4611      	mov	r1, r2
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  USBD_HID_CUSTOM2.Init(pdev, cfgidx);
 800bbcc:	4b06      	ldr	r3, [pc, #24]	@ (800bbe8 <USBD_COMPOSITE_Init+0x34>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	78fa      	ldrb	r2, [r7, #3]
 800bbd2:	4611      	mov	r1, r2
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000134 	.word	0x20000134
 800bbe8:	20000210 	.word	0x20000210

0800bbec <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
  USBD_HID_KEYBOARD.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
 800bbf8:	4b08      	ldr	r3, [pc, #32]	@ (800bc1c <USBD_COMPOSITE_DeInit+0x30>)
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	4611      	mov	r1, r2
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  USBD_HID_CUSTOM2.DeInit(pdev, cfgidx);
 800bc04:	4b06      	ldr	r3, [pc, #24]	@ (800bc20 <USBD_COMPOSITE_DeInit+0x34>)
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	78fa      	ldrb	r2, [r7, #3]
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20000134 	.word	0x20000134
 800bc20:	20000210 	.word	0x20000210

0800bc24 <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  {
    return USBD_HID_KEYBOARD.Setup(pdev, req);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID_ITF_NBR)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	889b      	ldrh	r3, [r3, #4]
 800bc32:	b2da      	uxtb	r2, r3
 800bc34:	4b0e      	ldr	r3, [pc, #56]	@ (800bc70 <USBD_COMPOSITE_Setup+0x4c>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d106      	bne.n	800bc4a <USBD_COMPOSITE_Setup+0x26>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
 800bc3c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc74 <USBD_COMPOSITE_Setup+0x50>)
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	6839      	ldr	r1, [r7, #0]
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
 800bc46:	4603      	mov	r3, r0
 800bc48:	e00e      	b.n	800bc68 <USBD_COMPOSITE_Setup+0x44>
  }
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  if (LOBYTE(req->wIndex) == CUSTOM_HID2_ITF_NBR)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	889b      	ldrh	r3, [r3, #4]
 800bc4e:	b2da      	uxtb	r2, r3
 800bc50:	4b09      	ldr	r3, [pc, #36]	@ (800bc78 <USBD_COMPOSITE_Setup+0x54>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d106      	bne.n	800bc66 <USBD_COMPOSITE_Setup+0x42>
  {
    return USBD_HID_CUSTOM2.Setup(pdev, req);
 800bc58:	4b08      	ldr	r3, [pc, #32]	@ (800bc7c <USBD_COMPOSITE_Setup+0x58>)
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	4798      	blx	r3
 800bc62:	4603      	mov	r3, r0
 800bc64:	e000      	b.n	800bc68 <USBD_COMPOSITE_Setup+0x44>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 800bc66:	2303      	movs	r3, #3
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	200012dc 	.word	0x200012dc
 800bc74:	20000134 	.word	0x20000134
 800bc78:	2000020c 	.word	0x2000020c
 800bc7c:	20000210 	.word	0x20000210

0800bc80 <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  {
    return USBD_HID_KEYBOARD.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == (CUSTOM_HID_IN_EP & 0x7F))
 800bc8c:	78fa      	ldrb	r2, [r7, #3]
 800bc8e:	4b11      	ldr	r3, [pc, #68]	@ (800bcd4 <USBD_COMPOSITE_DataIn+0x54>)
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d107      	bne.n	800bcaa <USBD_COMPOSITE_DataIn+0x2a>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
 800bc9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd8 <USBD_COMPOSITE_DataIn+0x58>)
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	78fa      	ldrb	r2, [r7, #3]
 800bca0:	4611      	mov	r1, r2
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	e00f      	b.n	800bcca <USBD_COMPOSITE_DataIn+0x4a>
  }
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  if (epnum == (CUSTOM_HID2_IN_EP & 0x7F))
 800bcaa:	78fa      	ldrb	r2, [r7, #3]
 800bcac:	4b0b      	ldr	r3, [pc, #44]	@ (800bcdc <USBD_COMPOSITE_DataIn+0x5c>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d107      	bne.n	800bcc8 <USBD_COMPOSITE_DataIn+0x48>
  {
    return USBD_HID_CUSTOM2.DataIn(pdev, epnum);
 800bcb8:	4b09      	ldr	r3, [pc, #36]	@ (800bce0 <USBD_COMPOSITE_DataIn+0x60>)
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	78fa      	ldrb	r2, [r7, #3]
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	4798      	blx	r3
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	e000      	b.n	800bcca <USBD_COMPOSITE_DataIn+0x4a>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800bcc8:	2303      	movs	r3, #3
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3708      	adds	r7, #8
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20000132 	.word	0x20000132
 800bcd8:	20000134 	.word	0x20000134
 800bcdc:	2000020a 	.word	0x2000020a
 800bce0:	20000210 	.word	0x20000210

0800bce4 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
 800bcec:	4b06      	ldr	r3, [pc, #24]	@ (800bd08 <USBD_COMPOSITE_EP0_RxReady+0x24>)
 800bcee:	691b      	ldr	r3, [r3, #16]
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	4798      	blx	r3
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  USBD_HID_CUSTOM2.EP0_RxReady(pdev);
 800bcf4:	4b05      	ldr	r3, [pc, #20]	@ (800bd0c <USBD_COMPOSITE_EP0_RxReady+0x28>)
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3708      	adds	r7, #8
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20000134 	.word	0x20000134
 800bd0c:	20000210 	.word	0x20000210

0800bd10 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bd48:	2300      	movs	r3, #0
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b083      	sub	sp, #12
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	460b      	mov	r3, r1
 800bd7a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_HID_MOUSE == 1)
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  if (epnum == CUSTOM_HID_OUT_EP)
 800bd7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdbc <USBD_COMPOSITE_DataOut+0x4c>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	78fa      	ldrb	r2, [r7, #3]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d107      	bne.n	800bd96 <USBD_COMPOSITE_DataOut+0x26>
  {
    return USBD_HID_CUSTOM.DataOut(pdev, epnum);
 800bd86:	4b0e      	ldr	r3, [pc, #56]	@ (800bdc0 <USBD_COMPOSITE_DataOut+0x50>)
 800bd88:	699b      	ldr	r3, [r3, #24]
 800bd8a:	78fa      	ldrb	r2, [r7, #3]
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	4798      	blx	r3
 800bd92:	4603      	mov	r3, r0
 800bd94:	e00d      	b.n	800bdb2 <USBD_COMPOSITE_DataOut+0x42>
  }
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
  if (epnum == CUSTOM_HID2_OUT_EP)
 800bd96:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <USBD_COMPOSITE_DataOut+0x54>)
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	78fa      	ldrb	r2, [r7, #3]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d107      	bne.n	800bdb0 <USBD_COMPOSITE_DataOut+0x40>
  {
    return USBD_HID_CUSTOM2.DataOut(pdev, epnum);
 800bda0:	4b09      	ldr	r3, [pc, #36]	@ (800bdc8 <USBD_COMPOSITE_DataOut+0x58>)
 800bda2:	699b      	ldr	r3, [r3, #24]
 800bda4:	78fa      	ldrb	r2, [r7, #3]
 800bda6:	4611      	mov	r1, r2
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	4798      	blx	r3
 800bdac:	4603      	mov	r3, r0
 800bdae:	e000      	b.n	800bdb2 <USBD_COMPOSITE_DataOut+0x42>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800bdb0:	2303      	movs	r3, #3
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20000133 	.word	0x20000133
 800bdc0:	20000134 	.word	0x20000134
 800bdc4:	2000020b 	.word	0x2000020b
 800bdc8:	20000210 	.word	0x20000210

0800bdcc <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2249      	movs	r2, #73	@ 0x49
 800bdd8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800bdda:	4b03      	ldr	r3, [pc, #12]	@ (800bde8 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	20001250 	.word	0x20001250

0800bdec <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2249      	movs	r2, #73	@ 0x49
 800bdf8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 800bdfa:	4b03      	ldr	r3, [pc, #12]	@ (800be08 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	20001204 	.word	0x20001204

0800be0c <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2249      	movs	r2, #73	@ 0x49
 800be18:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 800be1a:	4b03      	ldr	r3, [pc, #12]	@ (800be28 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	370c      	adds	r7, #12
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr
 800be28:	20001250 	.word	0x20001250

0800be2c <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	220a      	movs	r2, #10
 800be38:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 800be3a:	4b03      	ldr	r3, [pc, #12]	@ (800be48 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	370c      	adds	r7, #12
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	20000128 	.word	0x20000128

0800be4c <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	60f8      	str	r0, [r7, #12]
 800be54:	460b      	mov	r3, r1
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 800be5a:	4b10      	ldr	r3, [pc, #64]	@ (800be9c <USBD_COMPOSITE_GetUsrStringDesc+0x50>)
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	7afa      	ldrb	r2, [r7, #11]
 800be60:	429a      	cmp	r2, r3
 800be62:	d815      	bhi.n	800be90 <USBD_COMPOSITE_GetUsrStringDesc+0x44>
    {
      USBD_GetString((uint8_t *)HID_KEYBOARD_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    if (index == CUSTOM_HID_STR_DESC_IDX)
 800be64:	4b0e      	ldr	r3, [pc, #56]	@ (800bea0 <USBD_COMPOSITE_GetUsrStringDesc+0x54>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	7afa      	ldrb	r2, [r7, #11]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d104      	bne.n	800be78 <USBD_COMPOSITE_GetUsrStringDesc+0x2c>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	490c      	ldr	r1, [pc, #48]	@ (800bea4 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 800be72:	480d      	ldr	r0, [pc, #52]	@ (800bea8 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>)
 800be74:	f002 f801 	bl	800de7a <USBD_GetString>
    }
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
    if (index == CUSTOM_HID2_STR_DESC_IDX)
 800be78:	4b0c      	ldr	r3, [pc, #48]	@ (800beac <USBD_COMPOSITE_GetUsrStringDesc+0x60>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	7afa      	ldrb	r2, [r7, #11]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d104      	bne.n	800be8c <USBD_COMPOSITE_GetUsrStringDesc+0x40>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID2_STR_DESC, USBD_StrDesc, length);
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	4907      	ldr	r1, [pc, #28]	@ (800bea4 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 800be86:	480a      	ldr	r0, [pc, #40]	@ (800beb0 <USBD_COMPOSITE_GetUsrStringDesc+0x64>)
 800be88:	f001 fff7 	bl	800de7a <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 800be8c:	4b05      	ldr	r3, [pc, #20]	@ (800bea4 <USBD_COMPOSITE_GetUsrStringDesc+0x58>)
 800be8e:	e000      	b.n	800be92 <USBD_COMPOSITE_GetUsrStringDesc+0x46>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 800be90:	2300      	movs	r3, #0
  }
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000124 	.word	0x20000124
 800bea0:	200012dd 	.word	0x200012dd
 800bea4:	2000129c 	.word	0x2000129c
 800bea8:	0800ef9c 	.word	0x0800ef9c
 800beac:	2000020d 	.word	0x2000020d
 800beb0:	0800efb0 	.word	0x0800efb0

0800beb4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b086      	sub	sp, #24
 800beb8:	af02      	add	r7, sp, #8
  uint16_t len = 0;
 800beba:	2300      	movs	r3, #0
 800bebc:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 800bec2:	2381      	movs	r3, #129	@ 0x81
 800bec4:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 800bec6:	2301      	movs	r3, #1
 800bec8:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800beca:	2300      	movs	r3, #0
 800becc:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_HID_CUSTOM == 1)
  ptr = USBD_HID_CUSTOM.GetFSConfigDescriptor(&len);
 800bece:	4b6b      	ldr	r3, [pc, #428]	@ (800c07c <USBD_COMPOSITE_Mount_Class+0x1c8>)
 800bed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed2:	1d3a      	adds	r2, r7, #4
 800bed4:	4610      	mov	r0, r2
 800bed6:	4798      	blx	r3
 800bed8:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800beda:	4b69      	ldr	r3, [pc, #420]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	7ab8      	ldrb	r0, [r7, #10]
 800bee0:	7afa      	ldrb	r2, [r7, #11]
 800bee2:	7a79      	ldrb	r1, [r7, #9]
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	4603      	mov	r3, r0
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f000 fbb5 	bl	800c658 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	3309      	adds	r3, #9
 800bef2:	88ba      	ldrh	r2, [r7, #4]
 800bef4:	3a09      	subs	r2, #9
 800bef6:	4619      	mov	r1, r3
 800bef8:	4862      	ldr	r0, [pc, #392]	@ (800c084 <USBD_COMPOSITE_Mount_Class+0x1d0>)
 800befa:	f002 fbbf 	bl	800e67c <memcpy>

  ptr = USBD_HID_CUSTOM.GetHSConfigDescriptor(&len);
 800befe:	4b5f      	ldr	r3, [pc, #380]	@ (800c07c <USBD_COMPOSITE_Mount_Class+0x1c8>)
 800bf00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf02:	1d3a      	adds	r2, r7, #4
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800bf0a:	4b5d      	ldr	r3, [pc, #372]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	7ab8      	ldrb	r0, [r7, #10]
 800bf10:	7afa      	ldrb	r2, [r7, #11]
 800bf12:	7a79      	ldrb	r1, [r7, #9]
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4603      	mov	r3, r0
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 fb9d 	bl	800c658 <USBD_Update_HID_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM_DESC, ptr + 0x09, len - 0x09);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	3309      	adds	r3, #9
 800bf22:	88ba      	ldrh	r2, [r7, #4]
 800bf24:	3a09      	subs	r2, #9
 800bf26:	4619      	mov	r1, r3
 800bf28:	4857      	ldr	r0, [pc, #348]	@ (800c088 <USBD_COMPOSITE_Mount_Class+0x1d4>)
 800bf2a:	f002 fba7 	bl	800e67c <memcpy>

  in_ep_track += 1;
 800bf2e:	7afb      	ldrb	r3, [r7, #11]
 800bf30:	3301      	adds	r3, #1
 800bf32:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800bf34:	7abb      	ldrb	r3, [r7, #10]
 800bf36:	3301      	adds	r3, #1
 800bf38:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800bf3a:	7a7b      	ldrb	r3, [r7, #9]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800bf40:	4b4f      	ldr	r3, [pc, #316]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	3301      	adds	r3, #1
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	4b4d      	ldr	r3, [pc, #308]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bf4a:	701a      	strb	r2, [r3, #0]
#endif

#if (USBD_USE_HID_CUSTOM2 == 1)
  ptr = USBD_HID_CUSTOM2.GetFSConfigDescriptor(&len);
 800bf4c:	4b4f      	ldr	r3, [pc, #316]	@ (800c08c <USBD_COMPOSITE_Mount_Class+0x1d8>)
 800bf4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf50:	1d3a      	adds	r2, r7, #4
 800bf52:	4610      	mov	r0, r2
 800bf54:	4798      	blx	r3
 800bf56:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID2_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800bf58:	4b49      	ldr	r3, [pc, #292]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	7ab8      	ldrb	r0, [r7, #10]
 800bf5e:	7afa      	ldrb	r2, [r7, #11]
 800bf60:	7a79      	ldrb	r1, [r7, #9]
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	4603      	mov	r3, r0
 800bf66:	68f8      	ldr	r0, [r7, #12]
 800bf68:	f000 fe8a 	bl	800cc80 <USBD_Update_HID2_Custom_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_HID_CUSTOM2_DESC, ptr + 0x09, len - 0x09);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3309      	adds	r3, #9
 800bf70:	88ba      	ldrh	r2, [r7, #4]
 800bf72:	3a09      	subs	r2, #9
 800bf74:	4619      	mov	r1, r3
 800bf76:	4846      	ldr	r0, [pc, #280]	@ (800c090 <USBD_COMPOSITE_Mount_Class+0x1dc>)
 800bf78:	f002 fb80 	bl	800e67c <memcpy>

  ptr = USBD_HID_CUSTOM2.GetHSConfigDescriptor(&len);
 800bf7c:	4b43      	ldr	r3, [pc, #268]	@ (800c08c <USBD_COMPOSITE_Mount_Class+0x1d8>)
 800bf7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf80:	1d3a      	adds	r2, r7, #4
 800bf82:	4610      	mov	r0, r2
 800bf84:	4798      	blx	r3
 800bf86:	60f8      	str	r0, [r7, #12]
  USBD_Update_HID2_Custom_DESC(ptr, interface_no_track, in_ep_track, out_ep_track, USBD_Track_String_Index);
 800bf88:	4b3d      	ldr	r3, [pc, #244]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	7ab8      	ldrb	r0, [r7, #10]
 800bf8e:	7afa      	ldrb	r2, [r7, #11]
 800bf90:	7a79      	ldrb	r1, [r7, #9]
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	4603      	mov	r3, r0
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 fe72 	bl	800cc80 <USBD_Update_HID2_Custom_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_HID_CUSTOM2_DESC, ptr + 0x09, len - 0x09);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3309      	adds	r3, #9
 800bfa0:	88ba      	ldrh	r2, [r7, #4]
 800bfa2:	3a09      	subs	r2, #9
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	483b      	ldr	r0, [pc, #236]	@ (800c094 <USBD_COMPOSITE_Mount_Class+0x1e0>)
 800bfa8:	f002 fb68 	bl	800e67c <memcpy>

  in_ep_track += 1;
 800bfac:	7afb      	ldrb	r3, [r7, #11]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1;
 800bfb2:	7abb      	ldrb	r3, [r7, #10]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 1;
 800bfb8:	7a7b      	ldrb	r3, [r7, #9]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 800bfbe:	4b30      	ldr	r3, [pc, #192]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	4b2e      	ldr	r3, [pc, #184]	@ (800c080 <USBD_COMPOSITE_Mount_Class+0x1cc>)
 800bfc8:	701a      	strb	r2, [r3, #0]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800bfca:	2349      	movs	r3, #73	@ 0x49
 800bfcc:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800bfce:	4b32      	ldr	r3, [pc, #200]	@ (800c098 <USBD_COMPOSITE_Mount_Class+0x1e4>)
 800bfd0:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2209      	movs	r2, #9
 800bfd6:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	2202      	movs	r2, #2
 800bfde:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	3302      	adds	r3, #2
 800bfe4:	88fa      	ldrh	r2, [r7, #6]
 800bfe6:	b2d2      	uxtb	r2, r2
 800bfe8:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800bfea:	88fb      	ldrh	r3, [r7, #6]
 800bfec:	0a1b      	lsrs	r3, r3, #8
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	3303      	adds	r3, #3
 800bff4:	b2d2      	uxtb	r2, r2
 800bff6:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	3304      	adds	r3, #4
 800bffc:	7a7a      	ldrb	r2, [r7, #9]
 800bffe:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	3305      	adds	r3, #5
 800c004:	2201      	movs	r2, #1
 800c006:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3306      	adds	r3, #6
 800c00c:	2200      	movs	r2, #0
 800c00e:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	3307      	adds	r3, #7
 800c014:	22c0      	movs	r2, #192	@ 0xc0
 800c016:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	3308      	adds	r3, #8
 800c01c:	2232      	movs	r2, #50	@ 0x32
 800c01e:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800c020:	4b1e      	ldr	r3, [pc, #120]	@ (800c09c <USBD_COMPOSITE_Mount_Class+0x1e8>)
 800c022:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2209      	movs	r2, #9
 800c028:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	3301      	adds	r3, #1
 800c02e:	2202      	movs	r2, #2
 800c030:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	3302      	adds	r3, #2
 800c036:	88fa      	ldrh	r2, [r7, #6]
 800c038:	b2d2      	uxtb	r2, r2
 800c03a:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800c03c:	88fb      	ldrh	r3, [r7, #6]
 800c03e:	0a1b      	lsrs	r3, r3, #8
 800c040:	b29a      	uxth	r2, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	3303      	adds	r3, #3
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	3304      	adds	r3, #4
 800c04e:	7a7a      	ldrb	r2, [r7, #9]
 800c050:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	3305      	adds	r3, #5
 800c056:	2201      	movs	r2, #1
 800c058:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	3306      	adds	r3, #6
 800c05e:	2200      	movs	r2, #0
 800c060:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3307      	adds	r3, #7
 800c066:	22c0      	movs	r2, #192	@ 0xc0
 800c068:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3308      	adds	r3, #8
 800c06e:	2232      	movs	r2, #50	@ 0x32
 800c070:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 800c072:	bf00      	nop
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	20000134 	.word	0x20000134
 800c080:	20000124 	.word	0x20000124
 800c084:	2000120d 	.word	0x2000120d
 800c088:	20001259 	.word	0x20001259
 800c08c:	20000210 	.word	0x20000210
 800c090:	2000122d 	.word	0x2000122d
 800c094:	20001279 	.word	0x20001279
 800c098:	20001250 	.word	0x20001250
 800c09c:	20001204 	.word	0x20001204

0800c0a0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID_Instance;
 800c0ac:	4b43      	ldr	r3, [pc, #268]	@ (800c1bc <USBD_CUSTOM_HID_Init+0x11c>)
 800c0ae:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d105      	bne.n	800c0c2 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData_HID_Custom = NULL;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
    return (uint8_t)USBD_EMEM;
 800c0be:	2302      	movs	r3, #2
 800c0c0:	e078      	b.n	800c1b4 <USBD_CUSTOM_HID_Init+0x114>
  }

  pdev->pClassData_HID_Custom = (void *)hhid;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	7c1b      	ldrb	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d11b      	bne.n	800c10a <USBD_CUSTOM_HID_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800c0d2:	4b3b      	ldr	r3, [pc, #236]	@ (800c1c0 <USBD_CUSTOM_HID_Init+0x120>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	f003 020f 	and.w	r2, r3, #15
 800c0da:	6879      	ldr	r1, [r7, #4]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	440b      	add	r3, r1
 800c0e6:	3326      	adds	r3, #38	@ 0x26
 800c0e8:	2205      	movs	r2, #5
 800c0ea:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800c0ec:	4b35      	ldr	r3, [pc, #212]	@ (800c1c4 <USBD_CUSTOM_HID_Init+0x124>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	f003 020f 	and.w	r2, r3, #15
 800c0f4:	6879      	ldr	r1, [r7, #4]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	009b      	lsls	r3, r3, #2
 800c0fe:	440b      	add	r3, r1
 800c100:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c104:	2205      	movs	r2, #5
 800c106:	801a      	strh	r2, [r3, #0]
 800c108:	e01a      	b.n	800c140 <USBD_CUSTOM_HID_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800c10a:	4b2d      	ldr	r3, [pc, #180]	@ (800c1c0 <USBD_CUSTOM_HID_Init+0x120>)
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	f003 020f 	and.w	r2, r3, #15
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	4613      	mov	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	440b      	add	r3, r1
 800c11e:	3326      	adds	r3, #38	@ 0x26
 800c120:	2205      	movs	r2, #5
 800c122:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800c124:	4b27      	ldr	r3, [pc, #156]	@ (800c1c4 <USBD_CUSTOM_HID_Init+0x124>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f003 020f 	and.w	r2, r3, #15
 800c12c:	6879      	ldr	r1, [r7, #4]
 800c12e:	4613      	mov	r3, r2
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4413      	add	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	440b      	add	r3, r1
 800c138:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c13c:	2205      	movs	r2, #5
 800c13e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_IN_EP, USBD_EP_TYPE_INTR,
 800c140:	4b1f      	ldr	r3, [pc, #124]	@ (800c1c0 <USBD_CUSTOM_HID_Init+0x120>)
 800c142:	7819      	ldrb	r1, [r3, #0]
 800c144:	2340      	movs	r3, #64	@ 0x40
 800c146:	2203      	movs	r2, #3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f002 f8f0 	bl	800e32e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 1U;
 800c14e:	4b1c      	ldr	r3, [pc, #112]	@ (800c1c0 <USBD_CUSTOM_HID_Init+0x120>)
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	f003 020f 	and.w	r2, r3, #15
 800c156:	6879      	ldr	r1, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	4413      	add	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	440b      	add	r3, r1
 800c162:	3324      	adds	r3, #36	@ 0x24
 800c164:	2201      	movs	r2, #1
 800c166:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_OUT_EP, USBD_EP_TYPE_INTR,
 800c168:	4b16      	ldr	r3, [pc, #88]	@ (800c1c4 <USBD_CUSTOM_HID_Init+0x124>)
 800c16a:	7819      	ldrb	r1, [r3, #0]
 800c16c:	2340      	movs	r3, #64	@ 0x40
 800c16e:	2203      	movs	r2, #3
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f002 f8dc 	bl	800e32e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 1U;
 800c176:	4b13      	ldr	r3, [pc, #76]	@ (800c1c4 <USBD_CUSTOM_HID_Init+0x124>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	f003 020f 	and.w	r2, r3, #15
 800c17e:	6879      	ldr	r1, [r7, #4]
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	440b      	add	r3, r1
 800c18a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c18e:	2201      	movs	r2, #1
 800c190:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->Init();
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_OUT_EP, hhid->Report_buf,
 800c1a4:	4b07      	ldr	r3, [pc, #28]	@ (800c1c4 <USBD_CUSTOM_HID_Init+0x124>)
 800c1a6:	7819      	ldrb	r1, [r3, #0]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	2340      	movs	r3, #64	@ 0x40
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f002 f9ad 	bl	800e50c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	200012e0 	.word	0x200012e0
 800c1c0:	20000132 	.word	0x20000132
 800c1c4:	20000133 	.word	0x20000133

0800c1c8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	460b      	mov	r3, r1
 800c1d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_IN_EP);
 800c1d4:	4b2a      	ldr	r3, [pc, #168]	@ (800c280 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f002 f8cd 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].is_used = 0U;
 800c1e0:	4b27      	ldr	r3, [pc, #156]	@ (800c280 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	f003 020f 	and.w	r2, r3, #15
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3324      	adds	r3, #36	@ 0x24
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID_IN_EP & 0xFU].bInterval = 0U;
 800c1fa:	4b21      	ldr	r3, [pc, #132]	@ (800c280 <USBD_CUSTOM_HID_DeInit+0xb8>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	f003 020f 	and.w	r2, r3, #15
 800c202:	6879      	ldr	r1, [r7, #4]
 800c204:	4613      	mov	r3, r2
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	4413      	add	r3, r2
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	440b      	add	r3, r1
 800c20e:	3326      	adds	r3, #38	@ 0x26
 800c210:	2200      	movs	r2, #0
 800c212:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_OUT_EP);
 800c214:	4b1b      	ldr	r3, [pc, #108]	@ (800c284 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4619      	mov	r1, r3
 800c21a:	6878      	ldr	r0, [r7, #4]
 800c21c:	f002 f8ad 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].is_used = 0U;
 800c220:	4b18      	ldr	r3, [pc, #96]	@ (800c284 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	f003 020f 	and.w	r2, r3, #15
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	440b      	add	r3, r1
 800c234:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c238:	2200      	movs	r2, #0
 800c23a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID_OUT_EP & 0xFU].bInterval = 0U;
 800c23c:	4b11      	ldr	r3, [pc, #68]	@ (800c284 <USBD_CUSTOM_HID_DeInit+0xbc>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	f003 020f 	and.w	r2, r3, #15
 800c244:	6879      	ldr	r1, [r7, #4]
 800c246:	4613      	mov	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	440b      	add	r3, r1
 800c250:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c254:	2200      	movs	r2, #0
 800c256:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom != NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d008      	beq.n	800c274 <USBD_CUSTOM_HID_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->DeInit();
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom);
#endif
    pdev->pClassData_HID_Custom = NULL;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  }

  return (uint8_t)USBD_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}
 800c27e:	bf00      	nop
 800c280:	20000132 	.word	0x20000132
 800c284:	20000133 	.word	0x20000133

0800c288 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c298:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800c29a:	2300      	movs	r3, #0
 800c29c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	e0ed      	b.n	800c490 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d052      	beq.n	800c366 <USBD_CUSTOM_HID_Setup+0xde>
 800c2c0:	2b20      	cmp	r3, #32
 800c2c2:	f040 80dd 	bne.w	800c480 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	785b      	ldrb	r3, [r3, #1]
 800c2ca:	3b02      	subs	r3, #2
 800c2cc:	2b09      	cmp	r3, #9
 800c2ce:	d842      	bhi.n	800c356 <USBD_CUSTOM_HID_Setup+0xce>
 800c2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d8 <USBD_CUSTOM_HID_Setup+0x50>)
 800c2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d6:	bf00      	nop
 800c2d8:	0800c331 	.word	0x0800c331
 800c2dc:	0800c30f 	.word	0x0800c30f
 800c2e0:	0800c357 	.word	0x0800c357
 800c2e4:	0800c357 	.word	0x0800c357
 800c2e8:	0800c357 	.word	0x0800c357
 800c2ec:	0800c357 	.word	0x0800c357
 800c2f0:	0800c357 	.word	0x0800c357
 800c2f4:	0800c341 	.word	0x0800c341
 800c2f8:	0800c31f 	.word	0x0800c31f
 800c2fc:	0800c301 	.word	0x0800c301
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	885b      	ldrh	r3, [r3, #2]
 800c304:	b2db      	uxtb	r3, r3
 800c306:	461a      	mov	r2, r3
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c30c:	e02a      	b.n	800c364 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	3340      	adds	r3, #64	@ 0x40
 800c312:	2201      	movs	r2, #1
 800c314:	4619      	mov	r1, r3
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f001 fe0f 	bl	800df3a <USBD_CtlSendData>
      break;
 800c31c:	e022      	b.n	800c364 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	885b      	ldrh	r3, [r3, #2]
 800c322:	0a1b      	lsrs	r3, r3, #8
 800c324:	b29b      	uxth	r3, r3
 800c326:	b2db      	uxtb	r3, r3
 800c328:	461a      	mov	r2, r3
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800c32e:	e019      	b.n	800c364 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	3344      	adds	r3, #68	@ 0x44
 800c334:	2201      	movs	r2, #1
 800c336:	4619      	mov	r1, r3
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f001 fdfe 	bl	800df3a <USBD_CtlSendData>
      break;
 800c33e:	e011      	b.n	800c364 <USBD_CUSTOM_HID_Setup+0xdc>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2201      	movs	r2, #1
 800c344:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800c346:	6939      	ldr	r1, [r7, #16]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	88db      	ldrh	r3, [r3, #6]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f001 fe1f 	bl	800df92 <USBD_CtlPrepareRx>
      break;
 800c354:	e006      	b.n	800c364 <USBD_CUSTOM_HID_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f001 fd7d 	bl	800de58 <USBD_CtlError>
      ret = USBD_FAIL;
 800c35e:	2303      	movs	r3, #3
 800c360:	75fb      	strb	r3, [r7, #23]
      break;
 800c362:	bf00      	nop
    }
    break;
 800c364:	e093      	b.n	800c48e <USBD_CUSTOM_HID_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	785b      	ldrb	r3, [r3, #1]
 800c36a:	2b0b      	cmp	r3, #11
 800c36c:	d87f      	bhi.n	800c46e <USBD_CUSTOM_HID_Setup+0x1e6>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <USBD_CUSTOM_HID_Setup+0xec>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c3a5 	.word	0x0800c3a5
 800c378:	0800c47d 	.word	0x0800c47d
 800c37c:	0800c46f 	.word	0x0800c46f
 800c380:	0800c46f 	.word	0x0800c46f
 800c384:	0800c46f 	.word	0x0800c46f
 800c388:	0800c46f 	.word	0x0800c46f
 800c38c:	0800c3cf 	.word	0x0800c3cf
 800c390:	0800c46f 	.word	0x0800c46f
 800c394:	0800c46f 	.word	0x0800c46f
 800c398:	0800c46f 	.word	0x0800c46f
 800c39c:	0800c41d 	.word	0x0800c41d
 800c3a0:	0800c447 	.word	0x0800c447
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d107      	bne.n	800c3c0 <USBD_CUSTOM_HID_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c3b0:	f107 030e 	add.w	r3, r7, #14
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f001 fdbe 	bl	800df3a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c3be:	e05e      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f001 fd48 	bl	800de58 <USBD_CtlError>
        ret = USBD_FAIL;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800c3cc:	e057      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	2b22      	cmp	r3, #34	@ 0x22
 800c3d8:	d10b      	bne.n	800c3f2 <USBD_CUSTOM_HID_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	88db      	ldrh	r3, [r3, #6]
 800c3de:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3e0:	bf28      	it	cs
 800c3e2:	232e      	movcs	r3, #46	@ 0x2e
 800c3e4:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->pReport;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	61bb      	str	r3, [r7, #24]
 800c3f0:	e00d      	b.n	800c40e <USBD_CUSTOM_HID_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	885b      	ldrh	r3, [r3, #2]
 800c3f6:	0a1b      	lsrs	r3, r3, #8
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b21      	cmp	r3, #33	@ 0x21
 800c3fc:	d107      	bne.n	800c40e <USBD_CUSTOM_HID_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800c3fe:	4b26      	ldr	r3, [pc, #152]	@ (800c498 <USBD_CUSTOM_HID_Setup+0x210>)
 800c400:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	88db      	ldrh	r3, [r3, #6]
 800c406:	2b09      	cmp	r3, #9
 800c408:	bf28      	it	cs
 800c40a:	2309      	movcs	r3, #9
 800c40c:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c40e:	8bfb      	ldrh	r3, [r7, #30]
 800c410:	461a      	mov	r2, r3
 800c412:	69b9      	ldr	r1, [r7, #24]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f001 fd90 	bl	800df3a <USBD_CtlSendData>
      break;
 800c41a:	e030      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c422:	b2db      	uxtb	r3, r3
 800c424:	2b03      	cmp	r3, #3
 800c426:	d107      	bne.n	800c438 <USBD_CUSTOM_HID_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	3348      	adds	r3, #72	@ 0x48
 800c42c:	2201      	movs	r2, #1
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 fd82 	bl	800df3a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c436:	e022      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f001 fd0c 	bl	800de58 <USBD_CtlError>
        ret = USBD_FAIL;
 800c440:	2303      	movs	r3, #3
 800c442:	75fb      	strb	r3, [r7, #23]
      break;
 800c444:	e01b      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d106      	bne.n	800c460 <USBD_CUSTOM_HID_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	885b      	ldrh	r3, [r3, #2]
 800c456:	b2db      	uxtb	r3, r3
 800c458:	461a      	mov	r2, r3
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c45e:	e00e      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f001 fcf8 	bl	800de58 <USBD_CtlError>
        ret = USBD_FAIL;
 800c468:	2303      	movs	r3, #3
 800c46a:	75fb      	strb	r3, [r7, #23]
      break;
 800c46c:	e007      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 fcf1 	bl	800de58 <USBD_CtlError>
      ret = USBD_FAIL;
 800c476:	2303      	movs	r3, #3
 800c478:	75fb      	strb	r3, [r7, #23]
      break;
 800c47a:	e000      	b.n	800c47e <USBD_CUSTOM_HID_Setup+0x1f6>
      break;
 800c47c:	bf00      	nop
    }
    break;
 800c47e:	e006      	b.n	800c48e <USBD_CUSTOM_HID_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 fce8 	bl	800de58 <USBD_CtlError>
    ret = USBD_FAIL;
 800c488:	2303      	movs	r3, #3
 800c48a:	75fb      	strb	r3, [r7, #23]
    break;
 800c48c:	bf00      	nop
  }
  return (uint8_t)ret;
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c490:	4618      	mov	r0, r3
 800c492:	3720      	adds	r7, #32
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}
 800c498:	200001f4 	.word	0x200001f4

0800c49c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e01d      	b.n	800c4f4 <USBD_CUSTOM_HID_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c4be:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d112      	bne.n	800c4f2 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10b      	bne.n	800c4ee <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_IN_EP, report, len);
 800c4de:	4b07      	ldr	r3, [pc, #28]	@ (800c4fc <USBD_CUSTOM_HID_SendReport+0x60>)
 800c4e0:	7819      	ldrb	r1, [r3, #0]
 800c4e2:	88fb      	ldrh	r3, [r7, #6]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f001 ffef 	bl	800e4ca <USBD_LL_Transmit>
 800c4ec:	e001      	b.n	800c4f2 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e000      	b.n	800c4f4 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3718      	adds	r7, #24
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20000132 	.word	0x20000132

0800c500 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2229      	movs	r2, #41	@ 0x29
 800c50c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 800c50e:	4b03      	ldr	r3, [pc, #12]	@ (800c51c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr
 800c51c:	20000170 	.word	0x20000170

0800c520 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2229      	movs	r2, #41	@ 0x29
 800c52c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 800c52e:	4b03      	ldr	r3, [pc, #12]	@ (800c53c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800c530:	4618      	mov	r0, r3
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	2000019c 	.word	0x2000019c

0800c540 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2229      	movs	r2, #41	@ 0x29
 800c54c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800c54e:	4b03      	ldr	r3, [pc, #12]	@ (800c55c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr
 800c55c:	200001c8 	.word	0x200001c8

0800c560 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	460b      	mov	r3, r1
 800c56a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom)->state = CUSTOM_HID_IDLE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c572:	2200      	movs	r2, #0
 800c574:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800c578:	2300      	movs	r3, #0
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b084      	sub	sp, #16
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	460b      	mov	r3, r1
 800c590:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom == NULL)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d101      	bne.n	800c5a0 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e00e      	b.n	800c5be <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5a6:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	68fa      	ldr	r2, [r7, #12]
 800c5b2:	7810      	ldrb	r0, [r2, #0]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	7852      	ldrb	r2, [r2, #1]
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b084      	sub	sp, #16
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData_HID_Custom;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c5d4:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e011      	b.n	800c604 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d10c      	bne.n	800c602 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData_HID_Custom)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32dc 	ldr.w	r3, [r3, #732]	@ 0x2dc
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	7810      	ldrb	r0, [r2, #0]
 800c5f4:	68fa      	ldr	r2, [r7, #12]
 800c5f6:	7852      	ldrb	r2, [r2, #1]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2200      	movs	r2, #0
 800c600:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800c602:	2300      	movs	r3, #0
}
 800c604:	4618      	mov	r0, r3
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	220a      	movs	r2, #10
 800c618:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800c61a:	4b03      	ldr	r3, [pc, #12]	@ (800c628 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr
 800c628:	20000200 	.word	0x20000200

0800c62c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d101      	bne.n	800c640 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c63c:	2303      	movs	r3, #3
 800c63e:	e004      	b.n	800c64a <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom = fops;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	683a      	ldr	r2, [r7, #0]
 800c644:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc

  return (uint8_t)USBD_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
	...

0800c658 <USBD_Update_HID_Custom_DESC>:

void USBD_Update_HID_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	4608      	mov	r0, r1
 800c662:	4611      	mov	r1, r2
 800c664:	461a      	mov	r2, r3
 800c666:	4603      	mov	r3, r0
 800c668:	70fb      	strb	r3, [r7, #3]
 800c66a:	460b      	mov	r3, r1
 800c66c:	70bb      	strb	r3, [r7, #2]
 800c66e:	4613      	mov	r3, r2
 800c670:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	330b      	adds	r3, #11
 800c676:	78fa      	ldrb	r2, [r7, #3]
 800c678:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	3311      	adds	r3, #17
 800c67e:	7c3a      	ldrb	r2, [r7, #16]
 800c680:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	331d      	adds	r3, #29
 800c686:	78ba      	ldrb	r2, [r7, #2]
 800c688:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3324      	adds	r3, #36	@ 0x24
 800c68e:	787a      	ldrb	r2, [r7, #1]
 800c690:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID_IN_EP = in_ep;
 800c692:	4a09      	ldr	r2, [pc, #36]	@ (800c6b8 <USBD_Update_HID_Custom_DESC+0x60>)
 800c694:	78bb      	ldrb	r3, [r7, #2]
 800c696:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_OUT_EP = out_ep;
 800c698:	4a08      	ldr	r2, [pc, #32]	@ (800c6bc <USBD_Update_HID_Custom_DESC+0x64>)
 800c69a:	787b      	ldrb	r3, [r7, #1]
 800c69c:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_ITF_NBR = itf_no;
 800c69e:	4a08      	ldr	r2, [pc, #32]	@ (800c6c0 <USBD_Update_HID_Custom_DESC+0x68>)
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID_STR_DESC_IDX = str_idx;
 800c6a4:	4a07      	ldr	r2, [pc, #28]	@ (800c6c4 <USBD_Update_HID_Custom_DESC+0x6c>)
 800c6a6:	7c3b      	ldrb	r3, [r7, #16]
 800c6a8:	7013      	strb	r3, [r2, #0]
}
 800c6aa:	bf00      	nop
 800c6ac:	370c      	adds	r7, #12
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	20000132 	.word	0x20000132
 800c6bc:	20000133 	.word	0x20000133
 800c6c0:	200012dc 	.word	0x200012dc
 800c6c4:	200012dd 	.word	0x200012dd

0800c6c8 <USBD_CUSTOM_HID2_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID2_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID2_HandleTypeDef *hhid;

  hhid = &CUSTOM_HID2_Instance;
 800c6d4:	4b43      	ldr	r3, [pc, #268]	@ (800c7e4 <USBD_CUSTOM_HID2_Init+0x11c>)
 800c6d6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <USBD_CUSTOM_HID2_Init+0x22>
  {
    pdev->pClassData_HID_Custom2 = NULL;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
    return (uint8_t)USBD_EMEM;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e078      	b.n	800c7dc <USBD_CUSTOM_HID2_Init+0x114>
  }

  pdev->pClassData_HID_Custom2 = (void *)hhid;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	7c1b      	ldrb	r3, [r3, #16]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d11b      	bne.n	800c732 <USBD_CUSTOM_HID2_Init+0x6a>
  {
    pdev->ep_in[CUSTOM_HID2_IN_EP & 0xFU].bInterval = CUSTOM_HID2_HS_BINTERVAL;
 800c6fa:	4b3b      	ldr	r3, [pc, #236]	@ (800c7e8 <USBD_CUSTOM_HID2_Init+0x120>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	f003 020f 	and.w	r2, r3, #15
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	440b      	add	r3, r1
 800c70e:	3326      	adds	r3, #38	@ 0x26
 800c710:	2205      	movs	r2, #5
 800c712:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID2_OUT_EP & 0xFU].bInterval = CUSTOM_HID2_HS_BINTERVAL;
 800c714:	4b35      	ldr	r3, [pc, #212]	@ (800c7ec <USBD_CUSTOM_HID2_Init+0x124>)
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	f003 020f 	and.w	r2, r3, #15
 800c71c:	6879      	ldr	r1, [r7, #4]
 800c71e:	4613      	mov	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	440b      	add	r3, r1
 800c728:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c72c:	2205      	movs	r2, #5
 800c72e:	801a      	strh	r2, [r3, #0]
 800c730:	e01a      	b.n	800c768 <USBD_CUSTOM_HID2_Init+0xa0>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID2_IN_EP & 0xFU].bInterval = CUSTOM_HID2_FS_BINTERVAL;
 800c732:	4b2d      	ldr	r3, [pc, #180]	@ (800c7e8 <USBD_CUSTOM_HID2_Init+0x120>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	f003 020f 	and.w	r2, r3, #15
 800c73a:	6879      	ldr	r1, [r7, #4]
 800c73c:	4613      	mov	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	440b      	add	r3, r1
 800c746:	3326      	adds	r3, #38	@ 0x26
 800c748:	2205      	movs	r2, #5
 800c74a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOM_HID2_OUT_EP & 0xFU].bInterval = CUSTOM_HID2_FS_BINTERVAL;
 800c74c:	4b27      	ldr	r3, [pc, #156]	@ (800c7ec <USBD_CUSTOM_HID2_Init+0x124>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	f003 020f 	and.w	r2, r3, #15
 800c754:	6879      	ldr	r1, [r7, #4]
 800c756:	4613      	mov	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	440b      	add	r3, r1
 800c760:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c764:	2205      	movs	r2, #5
 800c766:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID2_IN_EP, USBD_EP_TYPE_INTR,
 800c768:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e8 <USBD_CUSTOM_HID2_Init+0x120>)
 800c76a:	7819      	ldrb	r1, [r3, #0]
 800c76c:	2340      	movs	r3, #64	@ 0x40
 800c76e:	2203      	movs	r2, #3
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f001 fddc 	bl	800e32e <USBD_LL_OpenEP>
                       CUSTOM_HID2_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID2_IN_EP & 0xFU].is_used = 1U;
 800c776:	4b1c      	ldr	r3, [pc, #112]	@ (800c7e8 <USBD_CUSTOM_HID2_Init+0x120>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	f003 020f 	and.w	r2, r3, #15
 800c77e:	6879      	ldr	r1, [r7, #4]
 800c780:	4613      	mov	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	009b      	lsls	r3, r3, #2
 800c788:	440b      	add	r3, r1
 800c78a:	3324      	adds	r3, #36	@ 0x24
 800c78c:	2201      	movs	r2, #1
 800c78e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID2_OUT_EP, USBD_EP_TYPE_INTR,
 800c790:	4b16      	ldr	r3, [pc, #88]	@ (800c7ec <USBD_CUSTOM_HID2_Init+0x124>)
 800c792:	7819      	ldrb	r1, [r3, #0]
 800c794:	2340      	movs	r3, #64	@ 0x40
 800c796:	2203      	movs	r2, #3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f001 fdc8 	bl	800e32e <USBD_LL_OpenEP>
                       CUSTOM_HID2_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID2_OUT_EP & 0xFU].is_used = 1U;
 800c79e:	4b13      	ldr	r3, [pc, #76]	@ (800c7ec <USBD_CUSTOM_HID2_Init+0x124>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	f003 020f 	and.w	r2, r3, #15
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	009b      	lsls	r3, r3, #2
 800c7b0:	440b      	add	r3, r1
 800c7b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID2_IDLE;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  ((USBD_CUSTOM_HID2_ItfTypeDef *)pdev->pUserData_HID_Custom2)->Init();
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID2_OUT_EP, hhid->Report_buf,
 800c7cc:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <USBD_CUSTOM_HID2_Init+0x124>)
 800c7ce:	7819      	ldrb	r1, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	2340      	movs	r3, #64	@ 0x40
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f001 fe99 	bl	800e50c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID2_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}
 800c7e4:	20001334 	.word	0x20001334
 800c7e8:	2000020a 	.word	0x2000020a
 800c7ec:	2000020b 	.word	0x2000020b

0800c7f0 <USBD_CUSTOM_HID2_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID2_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID2_IN_EP);
 800c7fc:	4b2a      	ldr	r3, [pc, #168]	@ (800c8a8 <USBD_CUSTOM_HID2_DeInit+0xb8>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fdb9 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID2_IN_EP & 0xFU].is_used = 0U;
 800c808:	4b27      	ldr	r3, [pc, #156]	@ (800c8a8 <USBD_CUSTOM_HID2_DeInit+0xb8>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	f003 020f 	and.w	r2, r3, #15
 800c810:	6879      	ldr	r1, [r7, #4]
 800c812:	4613      	mov	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	440b      	add	r3, r1
 800c81c:	3324      	adds	r3, #36	@ 0x24
 800c81e:	2200      	movs	r2, #0
 800c820:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOM_HID2_IN_EP & 0xFU].bInterval = 0U;
 800c822:	4b21      	ldr	r3, [pc, #132]	@ (800c8a8 <USBD_CUSTOM_HID2_DeInit+0xb8>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f003 020f 	and.w	r2, r3, #15
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	440b      	add	r3, r1
 800c836:	3326      	adds	r3, #38	@ 0x26
 800c838:	2200      	movs	r2, #0
 800c83a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID2_OUT_EP);
 800c83c:	4b1b      	ldr	r3, [pc, #108]	@ (800c8ac <USBD_CUSTOM_HID2_DeInit+0xbc>)
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f001 fd99 	bl	800e37a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID2_OUT_EP & 0xFU].is_used = 0U;
 800c848:	4b18      	ldr	r3, [pc, #96]	@ (800c8ac <USBD_CUSTOM_HID2_DeInit+0xbc>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 020f 	and.w	r2, r3, #15
 800c850:	6879      	ldr	r1, [r7, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	440b      	add	r3, r1
 800c85c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c860:	2200      	movs	r2, #0
 800c862:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOM_HID2_OUT_EP & 0xFU].bInterval = 0U;
 800c864:	4b11      	ldr	r3, [pc, #68]	@ (800c8ac <USBD_CUSTOM_HID2_DeInit+0xbc>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	f003 020f 	and.w	r2, r3, #15
 800c86c:	6879      	ldr	r1, [r7, #4]
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	440b      	add	r3, r1
 800c878:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800c87c:	2200      	movs	r2, #0
 800c87e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassData_HID_Custom2 != NULL)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d008      	beq.n	800c89c <USBD_CUSTOM_HID2_DeInit+0xac>
  {
    ((USBD_CUSTOM_HID2_ItfTypeDef *)pdev->pUserData_HID_Custom2)->DeInit();
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	4798      	blx	r3
#if (0)
    USBD_free(pdev->pClassData_HID_Custom2);
#endif
    pdev->pClassData_HID_Custom2 = NULL;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  }

  return (uint8_t)USBD_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3708      	adds	r7, #8
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	2000020a 	.word	0x2000020a
 800c8ac:	2000020b 	.word	0x2000020b

0800c8b0 <USBD_CUSTOM_HID2_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID2_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID2_HandleTypeDef *hhid = (USBD_CUSTOM_HID2_HandleTypeDef *)pdev->pClassData_HID_Custom2;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800c8c0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <USBD_CUSTOM_HID2_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e0ed      	b.n	800cab8 <USBD_CUSTOM_HID2_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d052      	beq.n	800c98e <USBD_CUSTOM_HID2_Setup+0xde>
 800c8e8:	2b20      	cmp	r3, #32
 800c8ea:	f040 80dd 	bne.w	800caa8 <USBD_CUSTOM_HID2_Setup+0x1f8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	785b      	ldrb	r3, [r3, #1]
 800c8f2:	3b02      	subs	r3, #2
 800c8f4:	2b09      	cmp	r3, #9
 800c8f6:	d842      	bhi.n	800c97e <USBD_CUSTOM_HID2_Setup+0xce>
 800c8f8:	a201      	add	r2, pc, #4	@ (adr r2, 800c900 <USBD_CUSTOM_HID2_Setup+0x50>)
 800c8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8fe:	bf00      	nop
 800c900:	0800c959 	.word	0x0800c959
 800c904:	0800c937 	.word	0x0800c937
 800c908:	0800c97f 	.word	0x0800c97f
 800c90c:	0800c97f 	.word	0x0800c97f
 800c910:	0800c97f 	.word	0x0800c97f
 800c914:	0800c97f 	.word	0x0800c97f
 800c918:	0800c97f 	.word	0x0800c97f
 800c91c:	0800c969 	.word	0x0800c969
 800c920:	0800c947 	.word	0x0800c947
 800c924:	0800c929 	.word	0x0800c929
    {
    case CUSTOM_HID2_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	885b      	ldrh	r3, [r3, #2]
 800c92c:	b2db      	uxtb	r3, r3
 800c92e:	461a      	mov	r2, r3
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c934:	e02a      	b.n	800c98c <USBD_CUSTOM_HID2_Setup+0xdc>

    case CUSTOM_HID2_REQ_GET_PROTOCOL:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	3340      	adds	r3, #64	@ 0x40
 800c93a:	2201      	movs	r2, #1
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 fafb 	bl	800df3a <USBD_CtlSendData>
      break;
 800c944:	e022      	b.n	800c98c <USBD_CUSTOM_HID2_Setup+0xdc>

    case CUSTOM_HID2_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	885b      	ldrh	r3, [r3, #2]
 800c94a:	0a1b      	lsrs	r3, r3, #8
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	461a      	mov	r2, r3
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 800c956:	e019      	b.n	800c98c <USBD_CUSTOM_HID2_Setup+0xdc>

    case CUSTOM_HID2_REQ_GET_IDLE:
      (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	3344      	adds	r3, #68	@ 0x44
 800c95c:	2201      	movs	r2, #1
 800c95e:	4619      	mov	r1, r3
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 faea 	bl	800df3a <USBD_CtlSendData>
      break;
 800c966:	e011      	b.n	800c98c <USBD_CUSTOM_HID2_Setup+0xdc>

    case CUSTOM_HID2_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	2201      	movs	r2, #1
 800c96c:	64da      	str	r2, [r3, #76]	@ 0x4c
      (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800c96e:	6939      	ldr	r1, [r7, #16]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	88db      	ldrh	r3, [r3, #6]
 800c974:	461a      	mov	r2, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fb0b 	bl	800df92 <USBD_CtlPrepareRx>
      break;
 800c97c:	e006      	b.n	800c98c <USBD_CUSTOM_HID2_Setup+0xdc>

    default:
      USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f001 fa69 	bl	800de58 <USBD_CtlError>
      ret = USBD_FAIL;
 800c986:	2303      	movs	r3, #3
 800c988:	75fb      	strb	r3, [r7, #23]
      break;
 800c98a:	bf00      	nop
    }
    break;
 800c98c:	e093      	b.n	800cab6 <USBD_CUSTOM_HID2_Setup+0x206>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	785b      	ldrb	r3, [r3, #1]
 800c992:	2b0b      	cmp	r3, #11
 800c994:	d87f      	bhi.n	800ca96 <USBD_CUSTOM_HID2_Setup+0x1e6>
 800c996:	a201      	add	r2, pc, #4	@ (adr r2, 800c99c <USBD_CUSTOM_HID2_Setup+0xec>)
 800c998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99c:	0800c9cd 	.word	0x0800c9cd
 800c9a0:	0800caa5 	.word	0x0800caa5
 800c9a4:	0800ca97 	.word	0x0800ca97
 800c9a8:	0800ca97 	.word	0x0800ca97
 800c9ac:	0800ca97 	.word	0x0800ca97
 800c9b0:	0800ca97 	.word	0x0800ca97
 800c9b4:	0800c9f7 	.word	0x0800c9f7
 800c9b8:	0800ca97 	.word	0x0800ca97
 800c9bc:	0800ca97 	.word	0x0800ca97
 800c9c0:	0800ca97 	.word	0x0800ca97
 800c9c4:	0800ca45 	.word	0x0800ca45
 800c9c8:	0800ca6f 	.word	0x0800ca6f
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b03      	cmp	r3, #3
 800c9d6:	d107      	bne.n	800c9e8 <USBD_CUSTOM_HID2_Setup+0x138>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c9d8:	f107 030e 	add.w	r3, r7, #14
 800c9dc:	2202      	movs	r2, #2
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f001 faaa 	bl	800df3a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800c9e6:	e05e      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 fa34 	bl	800de58 <USBD_CtlError>
        ret = USBD_FAIL;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	75fb      	strb	r3, [r7, #23]
      break;
 800c9f4:	e057      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == CUSTOM_HID2_REPORT_DESC)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	885b      	ldrh	r3, [r3, #2]
 800c9fa:	0a1b      	lsrs	r3, r3, #8
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	2b22      	cmp	r3, #34	@ 0x22
 800ca00:	d10b      	bne.n	800ca1a <USBD_CUSTOM_HID2_Setup+0x16a>
      {
        len = MIN(USBD_CUSTOM_HID2_REPORT_DESC_SIZE, req->wLength);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	88db      	ldrh	r3, [r3, #6]
 800ca06:	2b2c      	cmp	r3, #44	@ 0x2c
 800ca08:	bf28      	it	cs
 800ca0a:	232c      	movcs	r3, #44	@ 0x2c
 800ca0c:	83fb      	strh	r3, [r7, #30]
        pbuf = ((USBD_CUSTOM_HID2_ItfTypeDef *)pdev->pUserData_HID_Custom2)->pReport;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	61bb      	str	r3, [r7, #24]
 800ca18:	e00d      	b.n	800ca36 <USBD_CUSTOM_HID2_Setup+0x186>
      }
      else
      {
        if ((req->wValue >> 8) == CUSTOM_HID2_DESCRIPTOR_TYPE)
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	885b      	ldrh	r3, [r3, #2]
 800ca1e:	0a1b      	lsrs	r3, r3, #8
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2b21      	cmp	r3, #33	@ 0x21
 800ca24:	d107      	bne.n	800ca36 <USBD_CUSTOM_HID2_Setup+0x186>
        {
          pbuf = USBD_CUSTOM_HID2_Desc;
 800ca26:	4b26      	ldr	r3, [pc, #152]	@ (800cac0 <USBD_CUSTOM_HID2_Setup+0x210>)
 800ca28:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID2_DESC_SIZ, req->wLength);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	88db      	ldrh	r3, [r3, #6]
 800ca2e:	2b09      	cmp	r3, #9
 800ca30:	bf28      	it	cs
 800ca32:	2309      	movcs	r3, #9
 800ca34:	83fb      	strh	r3, [r7, #30]
        }
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca36:	8bfb      	ldrh	r3, [r7, #30]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	69b9      	ldr	r1, [r7, #24]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f001 fa7c 	bl	800df3a <USBD_CtlSendData>
      break;
 800ca42:	e030      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d107      	bne.n	800ca60 <USBD_CUSTOM_HID2_Setup+0x1b0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	3348      	adds	r3, #72	@ 0x48
 800ca54:	2201      	movs	r2, #1
 800ca56:	4619      	mov	r1, r3
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f001 fa6e 	bl	800df3a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ca5e:	e022      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f001 f9f8 	bl	800de58 <USBD_CtlError>
        ret = USBD_FAIL;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca6c:	e01b      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d106      	bne.n	800ca88 <USBD_CUSTOM_HID2_Setup+0x1d8>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	885b      	ldrh	r3, [r3, #2]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	461a      	mov	r2, r3
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	649a      	str	r2, [r3, #72]	@ 0x48
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ca86:	e00e      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>
        USBD_CtlError(pdev, req);
 800ca88:	6839      	ldr	r1, [r7, #0]
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 f9e4 	bl	800de58 <USBD_CtlError>
        ret = USBD_FAIL;
 800ca90:	2303      	movs	r3, #3
 800ca92:	75fb      	strb	r3, [r7, #23]
      break;
 800ca94:	e007      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ca96:	6839      	ldr	r1, [r7, #0]
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f001 f9dd 	bl	800de58 <USBD_CtlError>
      ret = USBD_FAIL;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	75fb      	strb	r3, [r7, #23]
      break;
 800caa2:	e000      	b.n	800caa6 <USBD_CUSTOM_HID2_Setup+0x1f6>
      break;
 800caa4:	bf00      	nop
    }
    break;
 800caa6:	e006      	b.n	800cab6 <USBD_CUSTOM_HID2_Setup+0x206>

  default:
    USBD_CtlError(pdev, req);
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f001 f9d4 	bl	800de58 <USBD_CtlError>
    ret = USBD_FAIL;
 800cab0:	2303      	movs	r3, #3
 800cab2:	75fb      	strb	r3, [r7, #23]
    break;
 800cab4:	bf00      	nop
  }
  return (uint8_t)ret;
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	200002d0 	.word	0x200002d0

0800cac4 <USBD_CUSTOM_HID2_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID2_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b086      	sub	sp, #24
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4613      	mov	r3, r2
 800cad0:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID2_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom2 == NULL)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <USBD_CUSTOM_HID2_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cadc:	2303      	movs	r3, #3
 800cade:	e01d      	b.n	800cb1c <USBD_CUSTOM_HID2_SendReport+0x58>
  }

  hhid = (USBD_CUSTOM_HID2_HandleTypeDef *)pdev->pClassData_HID_Custom2;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800cae6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d112      	bne.n	800cb1a <USBD_CUSTOM_HID2_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID2_IDLE)
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d10b      	bne.n	800cb16 <USBD_CUSTOM_HID2_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID2_BUSY;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID2_IN_EP, report, len);
 800cb06:	4b07      	ldr	r3, [pc, #28]	@ (800cb24 <USBD_CUSTOM_HID2_SendReport+0x60>)
 800cb08:	7819      	ldrb	r1, [r3, #0]
 800cb0a:	88fb      	ldrh	r3, [r7, #6]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f001 fcdb 	bl	800e4ca <USBD_LL_Transmit>
 800cb14:	e001      	b.n	800cb1a <USBD_CUSTOM_HID2_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800cb16:	2301      	movs	r3, #1
 800cb18:	e000      	b.n	800cb1c <USBD_CUSTOM_HID2_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	2000020a 	.word	0x2000020a

0800cb28 <USBD_CUSTOM_HID2_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID2_GetFSCfgDesc(uint16_t *length)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID2_CfgFSDesc);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2229      	movs	r2, #41	@ 0x29
 800cb34:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID2_CfgFSDesc;
 800cb36:	4b03      	ldr	r3, [pc, #12]	@ (800cb44 <USBD_CUSTOM_HID2_GetFSCfgDesc+0x1c>)
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr
 800cb44:	2000024c 	.word	0x2000024c

0800cb48 <USBD_CUSTOM_HID2_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID2_GetHSCfgDesc(uint16_t *length)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b083      	sub	sp, #12
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID2_CfgHSDesc);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2229      	movs	r2, #41	@ 0x29
 800cb54:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID2_CfgHSDesc;
 800cb56:	4b03      	ldr	r3, [pc, #12]	@ (800cb64 <USBD_CUSTOM_HID2_GetHSCfgDesc+0x1c>)
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	20000278 	.word	0x20000278

0800cb68 <USBD_CUSTOM_HID2_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID2_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID2_OtherSpeedCfgDesc);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2229      	movs	r2, #41	@ 0x29
 800cb74:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID2_OtherSpeedCfgDesc;
 800cb76:	4b03      	ldr	r3, [pc, #12]	@ (800cb84 <USBD_CUSTOM_HID2_GetOtherSpeedCfgDesc+0x1c>)
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr
 800cb84:	200002a4 	.word	0x200002a4

0800cb88 <USBD_CUSTOM_HID2_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID2_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b083      	sub	sp, #12
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	460b      	mov	r3, r1
 800cb92:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID2_HandleTypeDef *)pdev->pClassData_HID_Custom2)->state = CUSTOM_HID2_IDLE;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return (uint8_t)USBD_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	370c      	adds	r7, #12
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr

0800cbae <USBD_CUSTOM_HID2_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID2_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b084      	sub	sp, #16
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	6078      	str	r0, [r7, #4]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID2_HandleTypeDef *hhid;

  if (pdev->pClassData_HID_Custom2 == NULL)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <USBD_CUSTOM_HID2_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cbc4:	2303      	movs	r3, #3
 800cbc6:	e00e      	b.n	800cbe6 <USBD_CUSTOM_HID2_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID2_HandleTypeDef *)pdev->pClassData_HID_Custom2;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800cbce:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID2_ItfTypeDef *)pdev->pUserData_HID_Custom2)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	68fa      	ldr	r2, [r7, #12]
 800cbda:	7810      	ldrb	r0, [r2, #0]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	7852      	ldrb	r2, [r2, #1]
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBD_CUSTOM_HID2_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID2_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID2_HandleTypeDef *hhid = (USBD_CUSTOM_HID2_HandleTypeDef *)pdev->pClassData_HID_Custom2;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800cbfc:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <USBD_CUSTOM_HID2_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e011      	b.n	800cc2c <USBD_CUSTOM_HID2_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d10c      	bne.n	800cc2a <USBD_CUSTOM_HID2_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID2_ItfTypeDef *)pdev->pUserData_HID_Custom2)->OutEvent(hhid->Report_buf[0], hhid->Report_buf[1]);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32e4 	ldr.w	r3, [r3, #740]	@ 0x2e4
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	7810      	ldrb	r0, [r2, #0]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	7852      	ldrb	r2, [r2, #1]
 800cc20:	4611      	mov	r1, r2
 800cc22:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return (uint8_t)USBD_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}

0800cc34 <USBD_CUSTOM_HID2_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID2_GetDeviceQualifierDesc(uint16_t *length)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID2_DeviceQualifierDesc);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	220a      	movs	r2, #10
 800cc40:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID2_DeviceQualifierDesc;
 800cc42:	4b03      	ldr	r3, [pc, #12]	@ (800cc50 <USBD_CUSTOM_HID2_GetDeviceQualifierDesc+0x1c>)
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	200002dc 	.word	0x200002dc

0800cc54 <USBD_CUSTOM_HID2_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID2_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID2_ItfTypeDef *fops)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <USBD_CUSTOM_HID2_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e004      	b.n	800cc72 <USBD_CUSTOM_HID2_RegisterInterface+0x1e>
  }

  pdev->pUserData_HID_Custom2 = fops;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4

  return (uint8_t)USBD_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	370c      	adds	r7, #12
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
	...

0800cc80 <USBD_Update_HID2_Custom_DESC>:

void USBD_Update_HID2_Custom_DESC(uint8_t *desc, uint8_t itf_no, uint8_t in_ep, uint8_t out_ep, uint8_t str_idx)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	4608      	mov	r0, r1
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	70fb      	strb	r3, [r7, #3]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70bb      	strb	r3, [r7, #2]
 800cc96:	4613      	mov	r3, r2
 800cc98:	707b      	strb	r3, [r7, #1]
  desc[11] = itf_no;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	330b      	adds	r3, #11
 800cc9e:	78fa      	ldrb	r2, [r7, #3]
 800cca0:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	3311      	adds	r3, #17
 800cca6:	7c3a      	ldrb	r2, [r7, #16]
 800cca8:	701a      	strb	r2, [r3, #0]
  desc[29] = in_ep;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	331d      	adds	r3, #29
 800ccae:	78ba      	ldrb	r2, [r7, #2]
 800ccb0:	701a      	strb	r2, [r3, #0]
  desc[36] = out_ep;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	3324      	adds	r3, #36	@ 0x24
 800ccb6:	787a      	ldrb	r2, [r7, #1]
 800ccb8:	701a      	strb	r2, [r3, #0]

  CUSTOM_HID2_IN_EP = in_ep;
 800ccba:	4a09      	ldr	r2, [pc, #36]	@ (800cce0 <USBD_Update_HID2_Custom_DESC+0x60>)
 800ccbc:	78bb      	ldrb	r3, [r7, #2]
 800ccbe:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID2_OUT_EP = out_ep;
 800ccc0:	4a08      	ldr	r2, [pc, #32]	@ (800cce4 <USBD_Update_HID2_Custom_DESC+0x64>)
 800ccc2:	787b      	ldrb	r3, [r7, #1]
 800ccc4:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID2_ITF_NBR = itf_no;
 800ccc6:	4a08      	ldr	r2, [pc, #32]	@ (800cce8 <USBD_Update_HID2_Custom_DESC+0x68>)
 800ccc8:	78fb      	ldrb	r3, [r7, #3]
 800ccca:	7013      	strb	r3, [r2, #0]
  CUSTOM_HID2_STR_DESC_IDX = str_idx;
 800cccc:	4a07      	ldr	r2, [pc, #28]	@ (800ccec <USBD_Update_HID2_Custom_DESC+0x6c>)
 800ccce:	7c3b      	ldrb	r3, [r7, #16]
 800ccd0:	7013      	strb	r3, [r2, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	2000020a 	.word	0x2000020a
 800cce4:	2000020b 	.word	0x2000020b
 800cce8:	2000020c 	.word	0x2000020c
 800ccec:	2000020d 	.word	0x2000020d

0800ccf0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cd04:	2303      	movs	r3, #3
 800cd06:	e01b      	b.n	800cd40 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pConfDesc = NULL;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	79fa      	ldrb	r2, [r7, #7]
 800cd32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f001 fa99 	bl	800e26c <USBD_LL_Init>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd52:	2300      	movs	r3, #0
 800cd54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	e02d      	b.n	800cdbc <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7c1b      	ldrb	r3, [r3, #16]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d112      	bne.n	800cd96 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d01e      	beq.n	800cdba <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd84:	f107 020e 	add.w	r2, r7, #14
 800cd88:	4610      	mov	r0, r2
 800cd8a:	4798      	blx	r3
 800cd8c:	4602      	mov	r2, r0
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
 800cd94:	e011      	b.n	800cdba <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00b      	beq.n	800cdba <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdaa:	f107 020e 	add.w	r2, r7, #14
 800cdae:	4610      	mov	r0, r2
 800cdb0:	4798      	blx	r3
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8c3 2318 	str.w	r2, [r3, #792]	@ 0x318
  }

  return USBD_OK;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 fa93 	bl	800e2f8 <USBD_LL_Start>
 800cdd2:	4603      	mov	r3, r0
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	370c      	adds	r7, #12
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	78fa      	ldrb	r2, [r7, #3]
 800ce16:	4611      	mov	r1, r2
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	4798      	blx	r3
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d007      	beq.n	800ce50 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	78fa      	ldrb	r2, [r7, #3]
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	4798      	blx	r3
  }

  return USBD_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ce6a:	6839      	ldr	r1, [r7, #0]
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f000 ffb9 	bl	800dde4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ce80:	461a      	mov	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ce8e:	f003 031f 	and.w	r3, r3, #31
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d01a      	beq.n	800cecc <USBD_LL_SetupStage+0x72>
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d822      	bhi.n	800cee0 <USBD_LL_SetupStage+0x86>
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <USBD_LL_SetupStage+0x4a>
 800ce9e:	2b01      	cmp	r3, #1
 800cea0:	d00a      	beq.n	800ceb8 <USBD_LL_SetupStage+0x5e>
 800cea2:	e01d      	b.n	800cee0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ceaa:	4619      	mov	r1, r3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 fa5d 	bl	800d36c <USBD_StdDevReq>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb6:	e020      	b.n	800cefa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f000 fac1 	bl	800d448 <USBD_StdItfReq>
 800cec6:	4603      	mov	r3, r0
 800cec8:	73fb      	strb	r3, [r7, #15]
      break;
 800ceca:	e016      	b.n	800cefa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ced2:	4619      	mov	r1, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f000 fb00 	bl	800d4da <USBD_StdEPReq>
 800ceda:	4603      	mov	r3, r0
 800cedc:	73fb      	strb	r3, [r7, #15]
      break;
 800cede:	e00c      	b.n	800cefa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cee6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	4619      	mov	r1, r3
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f001 fa62 	bl	800e3b8 <USBD_LL_StallEP>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]
      break;
 800cef8:	bf00      	nop
  }

  return ret;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cf12:	7afb      	ldrb	r3, [r7, #11]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d138      	bne.n	800cf8a <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cf1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d14a      	bne.n	800cfc0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	689a      	ldr	r2, [r3, #8]
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d913      	bls.n	800cf5e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	689a      	ldr	r2, [r3, #8]
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	1ad2      	subs	r2, r2, r3
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	bf28      	it	cs
 800cf50:	4613      	movcs	r3, r2
 800cf52:	461a      	mov	r2, r3
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f001 f838 	bl	800dfcc <USBD_CtlContinueRx>
 800cf5c:	e030      	b.n	800cfc0 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d10b      	bne.n	800cf82 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d005      	beq.n	800cf82 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf7c:	691b      	ldr	r3, [r3, #16]
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f001 f833 	bl	800dfee <USBD_CtlSendStatus>
 800cf88:	e01a      	b.n	800cfc0 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d114      	bne.n	800cfc0 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf9c:	699b      	ldr	r3, [r3, #24]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d00e      	beq.n	800cfc0 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cfa8:	699b      	ldr	r3, [r3, #24]
 800cfaa:	7afa      	ldrb	r2, [r7, #11]
 800cfac:	4611      	mov	r1, r2
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	4798      	blx	r3
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cfb6:	7dfb      	ldrb	r3, [r7, #23]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800cfbc:	7dfb      	ldrb	r3, [r7, #23]
 800cfbe:	e000      	b.n	800cfc2 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3718      	adds	r7, #24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b086      	sub	sp, #24
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	60f8      	str	r0, [r7, #12]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	607a      	str	r2, [r7, #4]
 800cfd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cfd8:	7afb      	ldrb	r3, [r7, #11]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d16b      	bne.n	800d0b6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	3314      	adds	r3, #20
 800cfe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d156      	bne.n	800d09c <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	689a      	ldr	r2, [r3, #8]
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d914      	bls.n	800d024 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	689a      	ldr	r2, [r3, #8]
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	1ad2      	subs	r2, r2, r3
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	461a      	mov	r2, r3
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f000 ffad 	bl	800df70 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d016:	2300      	movs	r3, #0
 800d018:	2200      	movs	r2, #0
 800d01a:	2100      	movs	r1, #0
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f001 fa75 	bl	800e50c <USBD_LL_PrepareReceive>
 800d022:	e03b      	b.n	800d09c <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d024:	693b      	ldr	r3, [r7, #16]
 800d026:	68da      	ldr	r2, [r3, #12]
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d11c      	bne.n	800d06a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	685a      	ldr	r2, [r3, #4]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d038:	429a      	cmp	r2, r3
 800d03a:	d316      	bcc.n	800d06a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d03c:	693b      	ldr	r3, [r7, #16]
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d046:	429a      	cmp	r2, r3
 800d048:	d20f      	bcs.n	800d06a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d04a:	2200      	movs	r2, #0
 800d04c:	2100      	movs	r1, #0
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f000 ff8e 	bl	800df70 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d05c:	2300      	movs	r3, #0
 800d05e:	2200      	movs	r2, #0
 800d060:	2100      	movs	r1, #0
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f001 fa52 	bl	800e50c <USBD_LL_PrepareReceive>
 800d068:	e018      	b.n	800d09c <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b03      	cmp	r3, #3
 800d074:	d10b      	bne.n	800d08e <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d005      	beq.n	800d08e <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d08e:	2180      	movs	r1, #128	@ 0x80
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f001 f991 	bl	800e3b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f000 ffbc 	bl	800e014 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d122      	bne.n	800d0ec <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f7ff fe98 	bl	800cddc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d0b4:	e01a      	b.n	800d0ec <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d114      	bne.n	800d0ec <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0c8:	695b      	ldr	r3, [r3, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00e      	beq.n	800d0ec <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d0d4:	695b      	ldr	r3, [r3, #20]
 800d0d6:	7afa      	ldrb	r2, [r7, #11]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	4798      	blx	r3
 800d0de:	4603      	mov	r3, r0
 800d0e0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d0e2:	7dfb      	ldrb	r3, [r7, #23]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d0e8:	7dfb      	ldrb	r3, [r7, #23]
 800d0ea:	e000      	b.n	800d0ee <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3718      	adds	r7, #24
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2200      	movs	r2, #0
 800d10a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d126:	2303      	movs	r3, #3
 800d128:	e02a      	b.n	800d180 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d009      	beq.n	800d14a <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	6852      	ldr	r2, [r2, #4]
 800d142:	b2d2      	uxtb	r2, r2
 800d144:	4611      	mov	r1, r2
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d14a:	2340      	movs	r3, #64	@ 0x40
 800d14c:	2200      	movs	r2, #0
 800d14e:	2100      	movs	r1, #0
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f001 f8ec 	bl	800e32e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2240      	movs	r2, #64	@ 0x40
 800d162:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d166:	2340      	movs	r3, #64	@ 0x40
 800d168:	2200      	movs	r2, #0
 800d16a:	2180      	movs	r1, #128	@ 0x80
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f001 f8de 	bl	800e32e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2201      	movs	r2, #1
 800d176:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2240      	movs	r2, #64	@ 0x40
 800d17c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	460b      	mov	r3, r1
 800d192:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	78fa      	ldrb	r2, [r7, #3]
 800d198:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2204      	movs	r2, #4
 800d1c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	2b04      	cmp	r3, #4
 800d1e6:	d106      	bne.n	800d1f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d1f6:	2300      	movs	r3, #0
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d212:	2b00      	cmp	r3, #0
 800d214:	d101      	bne.n	800d21a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d216:	2303      	movs	r3, #3
 800d218:	e012      	b.n	800d240 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d220:	b2db      	uxtb	r3, r3
 800d222:	2b03      	cmp	r3, #3
 800d224:	d10b      	bne.n	800d23e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d22c:	69db      	ldr	r3, [r3, #28]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d005      	beq.n	800d23e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d238:	69db      	ldr	r3, [r3, #28]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3708      	adds	r7, #8
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d25e:	2303      	movs	r3, #3
 800d260:	e014      	b.n	800d28c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d10d      	bne.n	800d28a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d274:	6a1b      	ldr	r3, [r3, #32]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d007      	beq.n	800d28a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d280:	6a1b      	ldr	r3, [r3, #32]
 800d282:	78fa      	ldrb	r2, [r7, #3]
 800d284:	4611      	mov	r1, r2
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	460b      	mov	r3, r1
 800d29e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d2aa:	2303      	movs	r3, #3
 800d2ac:	e014      	b.n	800d2d8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	2b03      	cmp	r3, #3
 800d2b8:	d10d      	bne.n	800d2d6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d007      	beq.n	800d2d6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ce:	78fa      	ldrb	r2, [r7, #3]
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3708      	adds	r7, #8
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b083      	sub	sp, #12
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	370c      	adds	r7, #12
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
 800d2fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  if (pdev->pClass != NULL)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d009      	beq.n	800d324 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	6852      	ldr	r2, [r2, #4]
 800d31c:	b2d2      	uxtb	r2, r2
 800d31e:	4611      	mov	r1, r2
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	4798      	blx	r3
  }

  return USBD_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	4618      	mov	r0, r3
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d32e:	b480      	push	{r7}
 800d330:	b087      	sub	sp, #28
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	3301      	adds	r3, #1
 800d344:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d34c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d350:	021b      	lsls	r3, r3, #8
 800d352:	b21a      	sxth	r2, r3
 800d354:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d358:	4313      	orrs	r3, r2
 800d35a:	b21b      	sxth	r3, r3
 800d35c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d35e:	89fb      	ldrh	r3, [r7, #14]
}
 800d360:	4618      	mov	r0, r3
 800d362:	371c      	adds	r7, #28
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d382:	2b40      	cmp	r3, #64	@ 0x40
 800d384:	d005      	beq.n	800d392 <USBD_StdDevReq+0x26>
 800d386:	2b40      	cmp	r3, #64	@ 0x40
 800d388:	d853      	bhi.n	800d432 <USBD_StdDevReq+0xc6>
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00b      	beq.n	800d3a6 <USBD_StdDevReq+0x3a>
 800d38e:	2b20      	cmp	r3, #32
 800d390:	d14f      	bne.n	800d432 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	4798      	blx	r3
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	73fb      	strb	r3, [r7, #15]
      break;
 800d3a4:	e04a      	b.n	800d43c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	785b      	ldrb	r3, [r3, #1]
 800d3aa:	2b09      	cmp	r3, #9
 800d3ac:	d83b      	bhi.n	800d426 <USBD_StdDevReq+0xba>
 800d3ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d3b4 <USBD_StdDevReq+0x48>)
 800d3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3b4:	0800d409 	.word	0x0800d409
 800d3b8:	0800d41d 	.word	0x0800d41d
 800d3bc:	0800d427 	.word	0x0800d427
 800d3c0:	0800d413 	.word	0x0800d413
 800d3c4:	0800d427 	.word	0x0800d427
 800d3c8:	0800d3e7 	.word	0x0800d3e7
 800d3cc:	0800d3dd 	.word	0x0800d3dd
 800d3d0:	0800d427 	.word	0x0800d427
 800d3d4:	0800d3ff 	.word	0x0800d3ff
 800d3d8:	0800d3f1 	.word	0x0800d3f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d3dc:	6839      	ldr	r1, [r7, #0]
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 f9de 	bl	800d7a0 <USBD_GetDescriptor>
          break;
 800d3e4:	e024      	b.n	800d430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d3e6:	6839      	ldr	r1, [r7, #0]
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fb71 	bl	800dad0 <USBD_SetAddress>
          break;
 800d3ee:	e01f      	b.n	800d430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fbb0 	bl	800db58 <USBD_SetConfig>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73fb      	strb	r3, [r7, #15]
          break;
 800d3fc:	e018      	b.n	800d430 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fc4f 	bl	800dca4 <USBD_GetConfig>
          break;
 800d406:	e013      	b.n	800d430 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d408:	6839      	ldr	r1, [r7, #0]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 fc80 	bl	800dd10 <USBD_GetStatus>
          break;
 800d410:	e00e      	b.n	800d430 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d412:	6839      	ldr	r1, [r7, #0]
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 fcaf 	bl	800dd78 <USBD_SetFeature>
          break;
 800d41a:	e009      	b.n	800d430 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d41c:	6839      	ldr	r1, [r7, #0]
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 fcbe 	bl	800dda0 <USBD_ClrFeature>
          break;
 800d424:	e004      	b.n	800d430 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 fd15 	bl	800de58 <USBD_CtlError>
          break;
 800d42e:	bf00      	nop
      }
      break;
 800d430:	e004      	b.n	800d43c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 fd0f 	bl	800de58 <USBD_CtlError>
      break;
 800d43a:	bf00      	nop
  }

  return ret;
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop

0800d448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d45e:	2b40      	cmp	r3, #64	@ 0x40
 800d460:	d005      	beq.n	800d46e <USBD_StdItfReq+0x26>
 800d462:	2b40      	cmp	r3, #64	@ 0x40
 800d464:	d82f      	bhi.n	800d4c6 <USBD_StdItfReq+0x7e>
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <USBD_StdItfReq+0x26>
 800d46a:	2b20      	cmp	r3, #32
 800d46c:	d12b      	bne.n	800d4c6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d474:	b2db      	uxtb	r3, r3
 800d476:	3b01      	subs	r3, #1
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d81d      	bhi.n	800d4b8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	889b      	ldrh	r3, [r3, #4]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	2b0f      	cmp	r3, #15
 800d484:	d813      	bhi.n	800d4ae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	4798      	blx	r3
 800d494:	4603      	mov	r3, r0
 800d496:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	88db      	ldrh	r3, [r3, #6]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d110      	bne.n	800d4c2 <USBD_StdItfReq+0x7a>
 800d4a0:	7bfb      	ldrb	r3, [r7, #15]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10d      	bne.n	800d4c2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f000 fda1 	bl	800dfee <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d4ac:	e009      	b.n	800d4c2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fcd1 	bl	800de58 <USBD_CtlError>
          break;
 800d4b6:	e004      	b.n	800d4c2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 fccc 	bl	800de58 <USBD_CtlError>
          break;
 800d4c0:	e000      	b.n	800d4c4 <USBD_StdItfReq+0x7c>
          break;
 800d4c2:	bf00      	nop
      }
      break;
 800d4c4:	e004      	b.n	800d4d0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d4c6:	6839      	ldr	r1, [r7, #0]
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fcc5 	bl	800de58 <USBD_CtlError>
      break;
 800d4ce:	bf00      	nop
  }

  return ret;
 800d4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b084      	sub	sp, #16
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	889b      	ldrh	r3, [r3, #4]
 800d4ec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d4f6:	2b40      	cmp	r3, #64	@ 0x40
 800d4f8:	d007      	beq.n	800d50a <USBD_StdEPReq+0x30>
 800d4fa:	2b40      	cmp	r3, #64	@ 0x40
 800d4fc:	f200 8145 	bhi.w	800d78a <USBD_StdEPReq+0x2b0>
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00c      	beq.n	800d51e <USBD_StdEPReq+0x44>
 800d504:	2b20      	cmp	r3, #32
 800d506:	f040 8140 	bne.w	800d78a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d510:	689b      	ldr	r3, [r3, #8]
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	4798      	blx	r3
 800d518:	4603      	mov	r3, r0
 800d51a:	73fb      	strb	r3, [r7, #15]
      break;
 800d51c:	e13a      	b.n	800d794 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	785b      	ldrb	r3, [r3, #1]
 800d522:	2b03      	cmp	r3, #3
 800d524:	d007      	beq.n	800d536 <USBD_StdEPReq+0x5c>
 800d526:	2b03      	cmp	r3, #3
 800d528:	f300 8129 	bgt.w	800d77e <USBD_StdEPReq+0x2a4>
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d07f      	beq.n	800d630 <USBD_StdEPReq+0x156>
 800d530:	2b01      	cmp	r3, #1
 800d532:	d03c      	beq.n	800d5ae <USBD_StdEPReq+0xd4>
 800d534:	e123      	b.n	800d77e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d002      	beq.n	800d548 <USBD_StdEPReq+0x6e>
 800d542:	2b03      	cmp	r3, #3
 800d544:	d016      	beq.n	800d574 <USBD_StdEPReq+0x9a>
 800d546:	e02c      	b.n	800d5a2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d548:	7bbb      	ldrb	r3, [r7, #14]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00d      	beq.n	800d56a <USBD_StdEPReq+0x90>
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
 800d550:	2b80      	cmp	r3, #128	@ 0x80
 800d552:	d00a      	beq.n	800d56a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d554:	7bbb      	ldrb	r3, [r7, #14]
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 ff2d 	bl	800e3b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d55e:	2180      	movs	r1, #128	@ 0x80
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 ff29 	bl	800e3b8 <USBD_LL_StallEP>
 800d566:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d568:	e020      	b.n	800d5ac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 fc73 	bl	800de58 <USBD_CtlError>
              break;
 800d572:	e01b      	b.n	800d5ac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	885b      	ldrh	r3, [r3, #2]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d10e      	bne.n	800d59a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d00b      	beq.n	800d59a <USBD_StdEPReq+0xc0>
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	2b80      	cmp	r3, #128	@ 0x80
 800d586:	d008      	beq.n	800d59a <USBD_StdEPReq+0xc0>
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	88db      	ldrh	r3, [r3, #6]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d104      	bne.n	800d59a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d590:	7bbb      	ldrb	r3, [r7, #14]
 800d592:	4619      	mov	r1, r3
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 ff0f 	bl	800e3b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fd27 	bl	800dfee <USBD_CtlSendStatus>

              break;
 800d5a0:	e004      	b.n	800d5ac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d5a2:	6839      	ldr	r1, [r7, #0]
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f000 fc57 	bl	800de58 <USBD_CtlError>
              break;
 800d5aa:	bf00      	nop
          }
          break;
 800d5ac:	e0ec      	b.n	800d788 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d002      	beq.n	800d5c0 <USBD_StdEPReq+0xe6>
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d016      	beq.n	800d5ec <USBD_StdEPReq+0x112>
 800d5be:	e030      	b.n	800d622 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5c0:	7bbb      	ldrb	r3, [r7, #14]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00d      	beq.n	800d5e2 <USBD_StdEPReq+0x108>
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
 800d5c8:	2b80      	cmp	r3, #128	@ 0x80
 800d5ca:	d00a      	beq.n	800d5e2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fef1 	bl	800e3b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5d6:	2180      	movs	r1, #128	@ 0x80
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 feed 	bl	800e3b8 <USBD_LL_StallEP>
 800d5de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d5e0:	e025      	b.n	800d62e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fc37 	bl	800de58 <USBD_CtlError>
              break;
 800d5ea:	e020      	b.n	800d62e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	885b      	ldrh	r3, [r3, #2]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d11b      	bne.n	800d62c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d004      	beq.n	800d608 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d5fe:	7bbb      	ldrb	r3, [r7, #14]
 800d600:	4619      	mov	r1, r3
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fef7 	bl	800e3f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fcf0 	bl	800dfee <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	4798      	blx	r3
 800d61c:	4603      	mov	r3, r0
 800d61e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d620:	e004      	b.n	800d62c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d622:	6839      	ldr	r1, [r7, #0]
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 fc17 	bl	800de58 <USBD_CtlError>
              break;
 800d62a:	e000      	b.n	800d62e <USBD_StdEPReq+0x154>
              break;
 800d62c:	bf00      	nop
          }
          break;
 800d62e:	e0ab      	b.n	800d788 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d636:	b2db      	uxtb	r3, r3
 800d638:	2b02      	cmp	r3, #2
 800d63a:	d002      	beq.n	800d642 <USBD_StdEPReq+0x168>
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	d032      	beq.n	800d6a6 <USBD_StdEPReq+0x1cc>
 800d640:	e097      	b.n	800d772 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d642:	7bbb      	ldrb	r3, [r7, #14]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d007      	beq.n	800d658 <USBD_StdEPReq+0x17e>
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	2b80      	cmp	r3, #128	@ 0x80
 800d64c:	d004      	beq.n	800d658 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fc01 	bl	800de58 <USBD_CtlError>
                break;
 800d656:	e091      	b.n	800d77c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	da0b      	bge.n	800d678 <USBD_StdEPReq+0x19e>
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d666:	4613      	mov	r3, r2
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	4413      	add	r3, r2
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	3310      	adds	r3, #16
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	4413      	add	r3, r2
 800d674:	3304      	adds	r3, #4
 800d676:	e00b      	b.n	800d690 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d678:	7bbb      	ldrb	r3, [r7, #14]
 800d67a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d67e:	4613      	mov	r3, r2
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	4413      	add	r3, r2
 800d684:	009b      	lsls	r3, r3, #2
 800d686:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	4413      	add	r3, r2
 800d68e:	3304      	adds	r3, #4
 800d690:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	2202      	movs	r2, #2
 800d69c:	4619      	mov	r1, r3
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fc4b 	bl	800df3a <USBD_CtlSendData>
              break;
 800d6a4:	e06a      	b.n	800d77c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	da11      	bge.n	800d6d2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	f003 020f 	and.w	r2, r3, #15
 800d6b4:	6879      	ldr	r1, [r7, #4]
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	440b      	add	r3, r1
 800d6c0:	3324      	adds	r3, #36	@ 0x24
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d117      	bne.n	800d6f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d6c8:	6839      	ldr	r1, [r7, #0]
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fbc4 	bl	800de58 <USBD_CtlError>
                  break;
 800d6d0:	e054      	b.n	800d77c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d6d2:	7bbb      	ldrb	r3, [r7, #14]
 800d6d4:	f003 020f 	and.w	r2, r3, #15
 800d6d8:	6879      	ldr	r1, [r7, #4]
 800d6da:	4613      	mov	r3, r2
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	4413      	add	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	440b      	add	r3, r1
 800d6e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d104      	bne.n	800d6f8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fbb1 	bl	800de58 <USBD_CtlError>
                  break;
 800d6f6:	e041      	b.n	800d77c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d6f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	da0b      	bge.n	800d718 <USBD_StdEPReq+0x23e>
 800d700:	7bbb      	ldrb	r3, [r7, #14]
 800d702:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	3310      	adds	r3, #16
 800d710:	687a      	ldr	r2, [r7, #4]
 800d712:	4413      	add	r3, r2
 800d714:	3304      	adds	r3, #4
 800d716:	e00b      	b.n	800d730 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d718:	7bbb      	ldrb	r3, [r7, #14]
 800d71a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d71e:	4613      	mov	r3, r2
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	4413      	add	r3, r2
 800d72e:	3304      	adds	r3, #4
 800d730:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d732:	7bbb      	ldrb	r3, [r7, #14]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <USBD_StdEPReq+0x264>
 800d738:	7bbb      	ldrb	r3, [r7, #14]
 800d73a:	2b80      	cmp	r3, #128	@ 0x80
 800d73c:	d103      	bne.n	800d746 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
 800d744:	e00e      	b.n	800d764 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d746:	7bbb      	ldrb	r3, [r7, #14]
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fe72 	bl	800e434 <USBD_LL_IsStallEP>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d003      	beq.n	800d75e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2201      	movs	r2, #1
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	e002      	b.n	800d764 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	2200      	movs	r2, #0
 800d762:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	2202      	movs	r2, #2
 800d768:	4619      	mov	r1, r3
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 fbe5 	bl	800df3a <USBD_CtlSendData>
              break;
 800d770:	e004      	b.n	800d77c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d772:	6839      	ldr	r1, [r7, #0]
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f000 fb6f 	bl	800de58 <USBD_CtlError>
              break;
 800d77a:	bf00      	nop
          }
          break;
 800d77c:	e004      	b.n	800d788 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d77e:	6839      	ldr	r1, [r7, #0]
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fb69 	bl	800de58 <USBD_CtlError>
          break;
 800d786:	bf00      	nop
      }
      break;
 800d788:	e004      	b.n	800d794 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 fb63 	bl	800de58 <USBD_CtlError>
      break;
 800d792:	bf00      	nop
  }

  return ret;
 800d794:	7bfb      	ldrb	r3, [r7, #15]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3710      	adds	r7, #16
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
	...

0800d7a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	885b      	ldrh	r3, [r3, #2]
 800d7ba:	0a1b      	lsrs	r3, r3, #8
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	2b06      	cmp	r3, #6
 800d7c2:	f200 8156 	bhi.w	800da72 <USBD_GetDescriptor+0x2d2>
 800d7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7cc <USBD_GetDescriptor+0x2c>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d7e9 	.word	0x0800d7e9
 800d7d0:	0800d801 	.word	0x0800d801
 800d7d4:	0800d841 	.word	0x0800d841
 800d7d8:	0800da73 	.word	0x0800da73
 800d7dc:	0800da73 	.word	0x0800da73
 800d7e0:	0800da13 	.word	0x0800da13
 800d7e4:	0800da3f 	.word	0x0800da3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	7c12      	ldrb	r2, [r2, #16]
 800d7f4:	f107 0108 	add.w	r1, r7, #8
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	4798      	blx	r3
 800d7fc:	60f8      	str	r0, [r7, #12]
      break;
 800d7fe:	e140      	b.n	800da82 <USBD_GetDescriptor+0x2e2>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7c1b      	ldrb	r3, [r3, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10d      	bne.n	800d824 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d810:	f107 0208 	add.w	r2, r7, #8
 800d814:	4610      	mov	r0, r2
 800d816:	4798      	blx	r3
 800d818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3301      	adds	r3, #1
 800d81e:	2202      	movs	r2, #2
 800d820:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d822:	e12e      	b.n	800da82 <USBD_GetDescriptor+0x2e2>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82c:	f107 0208 	add.w	r2, r7, #8
 800d830:	4610      	mov	r0, r2
 800d832:	4798      	blx	r3
 800d834:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3301      	adds	r3, #1
 800d83a:	2202      	movs	r2, #2
 800d83c:	701a      	strb	r2, [r3, #0]
      break;
 800d83e:	e120      	b.n	800da82 <USBD_GetDescriptor+0x2e2>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	885b      	ldrh	r3, [r3, #2]
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b05      	cmp	r3, #5
 800d848:	f200 80ac 	bhi.w	800d9a4 <USBD_GetDescriptor+0x204>
 800d84c:	a201      	add	r2, pc, #4	@ (adr r2, 800d854 <USBD_GetDescriptor+0xb4>)
 800d84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d852:	bf00      	nop
 800d854:	0800d86d 	.word	0x0800d86d
 800d858:	0800d8a1 	.word	0x0800d8a1
 800d85c:	0800d8d5 	.word	0x0800d8d5
 800d860:	0800d909 	.word	0x0800d909
 800d864:	0800d93d 	.word	0x0800d93d
 800d868:	0800d971 	.word	0x0800d971
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	7c12      	ldrb	r2, [r2, #16]
 800d884:	f107 0108 	add.w	r1, r7, #8
 800d888:	4610      	mov	r0, r2
 800d88a:	4798      	blx	r3
 800d88c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d88e:	e0bf      	b.n	800da10 <USBD_GetDescriptor+0x270>
            USBD_CtlError(pdev, req);
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fae0 	bl	800de58 <USBD_CtlError>
            err++;
 800d898:	7afb      	ldrb	r3, [r7, #11]
 800d89a:	3301      	adds	r3, #1
 800d89c:	72fb      	strb	r3, [r7, #11]
          break;
 800d89e:	e0b7      	b.n	800da10 <USBD_GetDescriptor+0x270>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d00b      	beq.n	800d8c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	7c12      	ldrb	r2, [r2, #16]
 800d8b8:	f107 0108 	add.w	r1, r7, #8
 800d8bc:	4610      	mov	r0, r2
 800d8be:	4798      	blx	r3
 800d8c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8c2:	e0a5      	b.n	800da10 <USBD_GetDescriptor+0x270>
            USBD_CtlError(pdev, req);
 800d8c4:	6839      	ldr	r1, [r7, #0]
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fac6 	bl	800de58 <USBD_CtlError>
            err++;
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d8d2:	e09d      	b.n	800da10 <USBD_GetDescriptor+0x270>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8e6:	68db      	ldr	r3, [r3, #12]
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	7c12      	ldrb	r2, [r2, #16]
 800d8ec:	f107 0108 	add.w	r1, r7, #8
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	4798      	blx	r3
 800d8f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8f6:	e08b      	b.n	800da10 <USBD_GetDescriptor+0x270>
            USBD_CtlError(pdev, req);
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 faac 	bl	800de58 <USBD_CtlError>
            err++;
 800d900:	7afb      	ldrb	r3, [r7, #11]
 800d902:	3301      	adds	r3, #1
 800d904:	72fb      	strb	r3, [r7, #11]
          break;
 800d906:	e083      	b.n	800da10 <USBD_GetDescriptor+0x270>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00b      	beq.n	800d92c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	7c12      	ldrb	r2, [r2, #16]
 800d920:	f107 0108 	add.w	r1, r7, #8
 800d924:	4610      	mov	r0, r2
 800d926:	4798      	blx	r3
 800d928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d92a:	e071      	b.n	800da10 <USBD_GetDescriptor+0x270>
            USBD_CtlError(pdev, req);
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fa92 	bl	800de58 <USBD_CtlError>
            err++;
 800d934:	7afb      	ldrb	r3, [r7, #11]
 800d936:	3301      	adds	r3, #1
 800d938:	72fb      	strb	r3, [r7, #11]
          break;
 800d93a:	e069      	b.n	800da10 <USBD_GetDescriptor+0x270>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d942:	695b      	ldr	r3, [r3, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d00b      	beq.n	800d960 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	7c12      	ldrb	r2, [r2, #16]
 800d954:	f107 0108 	add.w	r1, r7, #8
 800d958:	4610      	mov	r0, r2
 800d95a:	4798      	blx	r3
 800d95c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d95e:	e057      	b.n	800da10 <USBD_GetDescriptor+0x270>
            USBD_CtlError(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fa78 	bl	800de58 <USBD_CtlError>
            err++;
 800d968:	7afb      	ldrb	r3, [r7, #11]
 800d96a:	3301      	adds	r3, #1
 800d96c:	72fb      	strb	r3, [r7, #11]
          break;
 800d96e:	e04f      	b.n	800da10 <USBD_GetDescriptor+0x270>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d976:	699b      	ldr	r3, [r3, #24]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00b      	beq.n	800d994 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d982:	699b      	ldr	r3, [r3, #24]
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	7c12      	ldrb	r2, [r2, #16]
 800d988:	f107 0108 	add.w	r1, r7, #8
 800d98c:	4610      	mov	r0, r2
 800d98e:	4798      	blx	r3
 800d990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d992:	e03d      	b.n	800da10 <USBD_GetDescriptor+0x270>
            USBD_CtlError(pdev, req);
 800d994:	6839      	ldr	r1, [r7, #0]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f000 fa5e 	bl	800de58 <USBD_CtlError>
            err++;
 800d99c:	7afb      	ldrb	r3, [r7, #11]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d9a2:	e035      	b.n	800da10 <USBD_GetDescriptor+0x270>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00c      	beq.n	800d9ca <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	8852      	ldrh	r2, [r2, #2]
 800d9bc:	b2d1      	uxtb	r1, r2
 800d9be:	f107 0208 	add.w	r2, r7, #8
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	4798      	blx	r3
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	e006      	b.n	800d9d8 <USBD_GetDescriptor+0x238>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 fa43 	bl	800de58 <USBD_CtlError>
            err++;
 800d9d2:	7afb      	ldrb	r3, [r7, #11]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	72fb      	strb	r3, [r7, #11]
          }
#endif

#if (USBD_CLASS_USER_STRING_DESC == 1U)
          if (pdev->pDesc->GetUserStrDescriptor != NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9de:	69db      	ldr	r3, [r3, #28]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00d      	beq.n	800da00 <USBD_GetDescriptor+0x260>
          {
            pbuf = pdev->pDesc->GetUserStrDescriptor(pdev->dev_speed, (req->wValue), &len);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d9ea:	69db      	ldr	r3, [r3, #28]
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	7c10      	ldrb	r0, [r2, #16]
 800d9f0:	683a      	ldr	r2, [r7, #0]
 800d9f2:	8852      	ldrh	r2, [r2, #2]
 800d9f4:	b2d1      	uxtb	r1, r2
 800d9f6:	f107 0208 	add.w	r2, r7, #8
 800d9fa:	4798      	blx	r3
 800d9fc:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800d9fe:	e006      	b.n	800da0e <USBD_GetDescriptor+0x26e>
            USBD_CtlError(pdev, req);
 800da00:	6839      	ldr	r1, [r7, #0]
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f000 fa28 	bl	800de58 <USBD_CtlError>
            err++;
 800da08:	7afb      	ldrb	r3, [r7, #11]
 800da0a:	3301      	adds	r3, #1
 800da0c:	72fb      	strb	r3, [r7, #11]
          break;
 800da0e:	bf00      	nop
      }
      break;
 800da10:	e037      	b.n	800da82 <USBD_GetDescriptor+0x2e2>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	7c1b      	ldrb	r3, [r3, #16]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d109      	bne.n	800da2e <USBD_GetDescriptor+0x28e>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da22:	f107 0208 	add.w	r2, r7, #8
 800da26:	4610      	mov	r0, r2
 800da28:	4798      	blx	r3
 800da2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da2c:	e029      	b.n	800da82 <USBD_GetDescriptor+0x2e2>
        USBD_CtlError(pdev, req);
 800da2e:	6839      	ldr	r1, [r7, #0]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 fa11 	bl	800de58 <USBD_CtlError>
        err++;
 800da36:	7afb      	ldrb	r3, [r7, #11]
 800da38:	3301      	adds	r3, #1
 800da3a:	72fb      	strb	r3, [r7, #11]
      break;
 800da3c:	e021      	b.n	800da82 <USBD_GetDescriptor+0x2e2>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7c1b      	ldrb	r3, [r3, #16]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10d      	bne.n	800da62 <USBD_GetDescriptor+0x2c2>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da4e:	f107 0208 	add.w	r2, r7, #8
 800da52:	4610      	mov	r0, r2
 800da54:	4798      	blx	r3
 800da56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	3301      	adds	r3, #1
 800da5c:	2207      	movs	r2, #7
 800da5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da60:	e00f      	b.n	800da82 <USBD_GetDescriptor+0x2e2>
        USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f9f7 	bl	800de58 <USBD_CtlError>
        err++;
 800da6a:	7afb      	ldrb	r3, [r7, #11]
 800da6c:	3301      	adds	r3, #1
 800da6e:	72fb      	strb	r3, [r7, #11]
      break;
 800da70:	e007      	b.n	800da82 <USBD_GetDescriptor+0x2e2>

    default:
      USBD_CtlError(pdev, req);
 800da72:	6839      	ldr	r1, [r7, #0]
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 f9ef 	bl	800de58 <USBD_CtlError>
      err++;
 800da7a:	7afb      	ldrb	r3, [r7, #11]
 800da7c:	3301      	adds	r3, #1
 800da7e:	72fb      	strb	r3, [r7, #11]
      break;
 800da80:	bf00      	nop
  }

  if (err != 0U)
 800da82:	7afb      	ldrb	r3, [r7, #11]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d11e      	bne.n	800dac6 <USBD_GetDescriptor+0x326>
  {
    return;
  }

  if (req->wLength != 0U)
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	88db      	ldrh	r3, [r3, #6]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d016      	beq.n	800dabe <USBD_GetDescriptor+0x31e>
  {
    if (len != 0U)
 800da90:	893b      	ldrh	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d00e      	beq.n	800dab4 <USBD_GetDescriptor+0x314>
    {
      len = MIN(len, req->wLength);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	88da      	ldrh	r2, [r3, #6]
 800da9a:	893b      	ldrh	r3, [r7, #8]
 800da9c:	4293      	cmp	r3, r2
 800da9e:	bf28      	it	cs
 800daa0:	4613      	movcs	r3, r2
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800daa6:	893b      	ldrh	r3, [r7, #8]
 800daa8:	461a      	mov	r2, r3
 800daaa:	68f9      	ldr	r1, [r7, #12]
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f000 fa44 	bl	800df3a <USBD_CtlSendData>
 800dab2:	e009      	b.n	800dac8 <USBD_GetDescriptor+0x328>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dab4:	6839      	ldr	r1, [r7, #0]
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f9ce 	bl	800de58 <USBD_CtlError>
 800dabc:	e004      	b.n	800dac8 <USBD_GetDescriptor+0x328>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 fa95 	bl	800dfee <USBD_CtlSendStatus>
 800dac4:	e000      	b.n	800dac8 <USBD_GetDescriptor+0x328>
    return;
 800dac6:	bf00      	nop
  }
}
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop

0800dad0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	889b      	ldrh	r3, [r3, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d131      	bne.n	800db46 <USBD_SetAddress+0x76>
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	88db      	ldrh	r3, [r3, #6]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d12d      	bne.n	800db46 <USBD_SetAddress+0x76>
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	885b      	ldrh	r3, [r3, #2]
 800daee:	2b7f      	cmp	r3, #127	@ 0x7f
 800daf0:	d829      	bhi.n	800db46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	885b      	ldrh	r3, [r3, #2]
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dafc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db04:	b2db      	uxtb	r3, r3
 800db06:	2b03      	cmp	r3, #3
 800db08:	d104      	bne.n	800db14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800db0a:	6839      	ldr	r1, [r7, #0]
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 f9a3 	bl	800de58 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db12:	e01d      	b.n	800db50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	7bfa      	ldrb	r2, [r7, #15]
 800db18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
 800db1e:	4619      	mov	r1, r3
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fcb3 	bl	800e48c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fa61 	bl	800dfee <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800db2c:	7bfb      	ldrb	r3, [r7, #15]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2202      	movs	r2, #2
 800db36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db3a:	e009      	b.n	800db50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db44:	e004      	b.n	800db50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800db46:	6839      	ldr	r1, [r7, #0]
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f000 f985 	bl	800de58 <USBD_CtlError>
  }
}
 800db4e:	bf00      	nop
 800db50:	bf00      	nop
 800db52:	3710      	adds	r7, #16
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b084      	sub	sp, #16
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	885b      	ldrh	r3, [r3, #2]
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	4b4c      	ldr	r3, [pc, #304]	@ (800dca0 <USBD_SetConfig+0x148>)
 800db6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800db70:	4b4b      	ldr	r3, [pc, #300]	@ (800dca0 <USBD_SetConfig+0x148>)
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d905      	bls.n	800db84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f000 f96c 	bl	800de58 <USBD_CtlError>
    return USBD_FAIL;
 800db80:	2303      	movs	r3, #3
 800db82:	e088      	b.n	800dc96 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d002      	beq.n	800db96 <USBD_SetConfig+0x3e>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d025      	beq.n	800dbe0 <USBD_SetConfig+0x88>
 800db94:	e071      	b.n	800dc7a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800db96:	4b42      	ldr	r3, [pc, #264]	@ (800dca0 <USBD_SetConfig+0x148>)
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d01c      	beq.n	800dbd8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800db9e:	4b40      	ldr	r3, [pc, #256]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	461a      	mov	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dba8:	4b3d      	ldr	r3, [pc, #244]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7ff f91f 	bl	800cdf2 <USBD_SetClassConfig>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d004      	beq.n	800dbc8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f949 	bl	800de58 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dbc6:	e065      	b.n	800dc94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 fa10 	bl	800dfee <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2203      	movs	r2, #3
 800dbd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dbd6:	e05d      	b.n	800dc94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 fa08 	bl	800dfee <USBD_CtlSendStatus>
      break;
 800dbde:	e059      	b.n	800dc94 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dbe0:	4b2f      	ldr	r3, [pc, #188]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d112      	bne.n	800dc0e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2202      	movs	r2, #2
 800dbec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dbf0:	4b2b      	ldr	r3, [pc, #172]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dbfa:	4b29      	ldr	r3, [pc, #164]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7ff f912 	bl	800ce2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f9f1 	bl	800dfee <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dc0c:	e042      	b.n	800dc94 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dc0e:	4b24      	ldr	r3, [pc, #144]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	461a      	mov	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d02a      	beq.n	800dc72 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff f900 	bl	800ce2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800dc2a:	4b1d      	ldr	r3, [pc, #116]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	461a      	mov	r2, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dc34:	4b1a      	ldr	r3, [pc, #104]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7ff f8d9 	bl	800cdf2 <USBD_SetClassConfig>
 800dc40:	4603      	mov	r3, r0
 800dc42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800dc44:	7bfb      	ldrb	r3, [r7, #15]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00f      	beq.n	800dc6a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 f903 	bl	800de58 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	4619      	mov	r1, r3
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff f8e5 	bl	800ce2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dc68:	e014      	b.n	800dc94 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f9bf 	bl	800dfee <USBD_CtlSendStatus>
      break;
 800dc70:	e010      	b.n	800dc94 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 f9bb 	bl	800dfee <USBD_CtlSendStatus>
      break;
 800dc78:	e00c      	b.n	800dc94 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 f8eb 	bl	800de58 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dc82:	4b07      	ldr	r3, [pc, #28]	@ (800dca0 <USBD_SetConfig+0x148>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	4619      	mov	r1, r3
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7ff f8ce 	bl	800ce2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	73fb      	strb	r3, [r7, #15]
      break;
 800dc92:	bf00      	nop
  }

  return ret;
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20001388 	.word	0x20001388

0800dca4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	88db      	ldrh	r3, [r3, #6]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d004      	beq.n	800dcc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 f8cd 	bl	800de58 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dcbe:	e023      	b.n	800dd08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	dc02      	bgt.n	800dcd2 <USBD_GetConfig+0x2e>
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	dc03      	bgt.n	800dcd8 <USBD_GetConfig+0x34>
 800dcd0:	e015      	b.n	800dcfe <USBD_GetConfig+0x5a>
 800dcd2:	2b03      	cmp	r3, #3
 800dcd4:	d00b      	beq.n	800dcee <USBD_GetConfig+0x4a>
 800dcd6:	e012      	b.n	800dcfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3308      	adds	r3, #8
 800dce2:	2201      	movs	r2, #1
 800dce4:	4619      	mov	r1, r3
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f927 	bl	800df3a <USBD_CtlSendData>
        break;
 800dcec:	e00c      	b.n	800dd08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 f91f 	bl	800df3a <USBD_CtlSendData>
        break;
 800dcfc:	e004      	b.n	800dd08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 f8a9 	bl	800de58 <USBD_CtlError>
        break;
 800dd06:	bf00      	nop
}
 800dd08:	bf00      	nop
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	3b01      	subs	r3, #1
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d81e      	bhi.n	800dd66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	88db      	ldrh	r3, [r3, #6]
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d004      	beq.n	800dd3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f000 f890 	bl	800de58 <USBD_CtlError>
        break;
 800dd38:	e01a      	b.n	800dd70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d005      	beq.n	800dd56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	f043 0202 	orr.w	r2, r3, #2
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	330c      	adds	r3, #12
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f8eb 	bl	800df3a <USBD_CtlSendData>
      break;
 800dd64:	e004      	b.n	800dd70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f875 	bl	800de58 <USBD_CtlError>
      break;
 800dd6e:	bf00      	nop
  }
}
 800dd70:	bf00      	nop
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	885b      	ldrh	r3, [r3, #2]
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d106      	bne.n	800dd98 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 f92b 	bl	800dfee <USBD_CtlSendStatus>
  }
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	2b02      	cmp	r3, #2
 800ddb6:	d80b      	bhi.n	800ddd0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	885b      	ldrh	r3, [r3, #2]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d10c      	bne.n	800ddda <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f910 	bl	800dfee <USBD_CtlSendStatus>
      }
      break;
 800ddce:	e004      	b.n	800ddda <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 f840 	bl	800de58 <USBD_CtlError>
      break;
 800ddd8:	e000      	b.n	800dddc <USBD_ClrFeature+0x3c>
      break;
 800ddda:	bf00      	nop
  }
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	781a      	ldrb	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	781a      	ldrb	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	3301      	adds	r3, #1
 800de0c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff fa8d 	bl	800d32e <SWAPBYTE>
 800de14:	4603      	mov	r3, r0
 800de16:	461a      	mov	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3301      	adds	r3, #1
 800de20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	3301      	adds	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800de28:	68f8      	ldr	r0, [r7, #12]
 800de2a:	f7ff fa80 	bl	800d32e <SWAPBYTE>
 800de2e:	4603      	mov	r3, r0
 800de30:	461a      	mov	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	3301      	adds	r3, #1
 800de3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	3301      	adds	r3, #1
 800de40:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800de42:	68f8      	ldr	r0, [r7, #12]
 800de44:	f7ff fa73 	bl	800d32e <SWAPBYTE>
 800de48:	4603      	mov	r3, r0
 800de4a:	461a      	mov	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	80da      	strh	r2, [r3, #6]
}
 800de50:	bf00      	nop
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800de62:	2180      	movs	r1, #128	@ 0x80
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 faa7 	bl	800e3b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800de6a:	2100      	movs	r1, #0
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 faa3 	bl	800e3b8 <USBD_LL_StallEP>
}
 800de72:	bf00      	nop
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b086      	sub	sp, #24
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800de86:	2300      	movs	r3, #0
 800de88:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d036      	beq.n	800defe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800de94:	6938      	ldr	r0, [r7, #16]
 800de96:	f000 f836 	bl	800df06 <USBD_GetLen>
 800de9a:	4603      	mov	r3, r0
 800de9c:	3301      	adds	r3, #1
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	005b      	lsls	r3, r3, #1
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dea8:	7dfb      	ldrb	r3, [r7, #23]
 800deaa:	68ba      	ldr	r2, [r7, #8]
 800deac:	4413      	add	r3, r2
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	7812      	ldrb	r2, [r2, #0]
 800deb2:	701a      	strb	r2, [r3, #0]
  idx++;
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
 800deb6:	3301      	adds	r3, #1
 800deb8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800deba:	7dfb      	ldrb	r3, [r7, #23]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	4413      	add	r3, r2
 800dec0:	2203      	movs	r2, #3
 800dec2:	701a      	strb	r2, [r3, #0]
  idx++;
 800dec4:	7dfb      	ldrb	r3, [r7, #23]
 800dec6:	3301      	adds	r3, #1
 800dec8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800deca:	e013      	b.n	800def4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800decc:	7dfb      	ldrb	r3, [r7, #23]
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	4413      	add	r3, r2
 800ded2:	693a      	ldr	r2, [r7, #16]
 800ded4:	7812      	ldrb	r2, [r2, #0]
 800ded6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	3301      	adds	r3, #1
 800dedc:	613b      	str	r3, [r7, #16]
    idx++;
 800dede:	7dfb      	ldrb	r3, [r7, #23]
 800dee0:	3301      	adds	r3, #1
 800dee2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	68ba      	ldr	r2, [r7, #8]
 800dee8:	4413      	add	r3, r2
 800deea:	2200      	movs	r2, #0
 800deec:	701a      	strb	r2, [r3, #0]
    idx++;
 800deee:	7dfb      	ldrb	r3, [r7, #23]
 800def0:	3301      	adds	r3, #1
 800def2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d1e7      	bne.n	800decc <USBD_GetString+0x52>
 800defc:	e000      	b.n	800df00 <USBD_GetString+0x86>
    return;
 800defe:	bf00      	nop
  }
}
 800df00:	3718      	adds	r7, #24
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800df06:	b480      	push	{r7}
 800df08:	b085      	sub	sp, #20
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800df16:	e005      	b.n	800df24 <USBD_GetLen+0x1e>
  {
    len++;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
 800df1a:	3301      	adds	r3, #1
 800df1c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	3301      	adds	r3, #1
 800df22:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1f5      	bne.n	800df18 <USBD_GetLen+0x12>
  }

  return len;
 800df2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3714      	adds	r7, #20
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b084      	sub	sp, #16
 800df3e:	af00      	add	r7, sp, #0
 800df40:	60f8      	str	r0, [r7, #12]
 800df42:	60b9      	str	r1, [r7, #8]
 800df44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	2202      	movs	r2, #2
 800df4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68ba      	ldr	r2, [r7, #8]
 800df5e:	2100      	movs	r1, #0
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 fab2 	bl	800e4ca <USBD_LL_Transmit>

  return USBD_OK;
 800df66:	2300      	movs	r3, #0
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	2100      	movs	r1, #0
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f000 faa1 	bl	800e4ca <USBD_LL_Transmit>

  return USBD_OK;
 800df88:	2300      	movs	r3, #0
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800df92:	b580      	push	{r7, lr}
 800df94:	b084      	sub	sp, #16
 800df96:	af00      	add	r7, sp, #0
 800df98:	60f8      	str	r0, [r7, #12]
 800df9a:	60b9      	str	r1, [r7, #8]
 800df9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	2203      	movs	r2, #3
 800dfa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	687a      	ldr	r2, [r7, #4]
 800dfaa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	2100      	movs	r1, #0
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 faa5 	bl	800e50c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	2100      	movs	r1, #0
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f000 fa94 	bl	800e50c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b082      	sub	sp, #8
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2204      	movs	r2, #4
 800dffa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dffe:	2300      	movs	r3, #0
 800e000:	2200      	movs	r2, #0
 800e002:	2100      	movs	r1, #0
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fa60 	bl	800e4ca <USBD_LL_Transmit>

  return USBD_OK;
 800e00a:	2300      	movs	r3, #0
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}

0800e014 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2205      	movs	r2, #5
 800e020:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e024:	2300      	movs	r3, #0
 800e026:	2200      	movs	r2, #0
 800e028:	2100      	movs	r1, #0
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fa6e 	bl	800e50c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e030:	2300      	movs	r3, #0
}
 800e032:	4618      	mov	r0, r3
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b082      	sub	sp, #8
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	460b      	mov	r3, r1
 800e044:	70fb      	strb	r3, [r7, #3]
 800e046:	4613      	mov	r3, r2
 800e048:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800e04a:	883b      	ldrh	r3, [r7, #0]
 800e04c:	089b      	lsrs	r3, r3, #2
 800e04e:	b29a      	uxth	r2, r3
 800e050:	78fb      	ldrb	r3, [r7, #3]
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7f8 fa97 	bl	8006588 <HAL_PCDEx_SetTxFiFo>
 800e05a:	4603      	mov	r3, r0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	460b      	mov	r3, r1
 800e06e:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800e070:	887b      	ldrh	r3, [r7, #2]
 800e072:	089b      	lsrs	r3, r3, #2
 800e074:	b29b      	uxth	r3, r3
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f7f8 facc 	bl	8006616 <HAL_PCDEx_SetRxFiFo>
 800e07e:	4603      	mov	r3, r0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e09c:	4619      	mov	r1, r3
 800e09e:	4610      	mov	r0, r2
 800e0a0:	f7fe fedb 	bl	800ce5a <USBD_LL_SetupStage>
}
 800e0a4:	bf00      	nop
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0be:	78fa      	ldrb	r2, [r7, #3]
 800e0c0:	6879      	ldr	r1, [r7, #4]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	00db      	lsls	r3, r3, #3
 800e0c6:	4413      	add	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	440b      	add	r3, r1
 800e0cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	78fb      	ldrb	r3, [r7, #3]
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	f7fe ff15 	bl	800cf04 <USBD_LL_DataOutStage>
}
 800e0da:	bf00      	nop
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b082      	sub	sp, #8
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	460b      	mov	r3, r1
 800e0ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0f4:	78fa      	ldrb	r2, [r7, #3]
 800e0f6:	6879      	ldr	r1, [r7, #4]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	4413      	add	r3, r2
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	440b      	add	r3, r1
 800e102:	3320      	adds	r3, #32
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	78fb      	ldrb	r3, [r7, #3]
 800e108:	4619      	mov	r1, r3
 800e10a:	f7fe ff5e 	bl	800cfca <USBD_LL_DataInStage>
}
 800e10e:	bf00      	nop
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b082      	sub	sp, #8
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e124:	4618      	mov	r0, r3
 800e126:	f7ff f86d 	bl	800d204 <USBD_LL_SOF>
}
 800e12a:	bf00      	nop
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b084      	sub	sp, #16
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e13a:	2301      	movs	r3, #1
 800e13c:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	79db      	ldrb	r3, [r3, #7]
 800e142:	2b02      	cmp	r3, #2
 800e144:	d102      	bne.n	800e14c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800e146:	2301      	movs	r3, #1
 800e148:	73fb      	strb	r3, [r7, #15]
 800e14a:	e008      	b.n	800e15e <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	79db      	ldrb	r3, [r3, #7]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d102      	bne.n	800e15a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800e154:	2300      	movs	r3, #0
 800e156:	73fb      	strb	r3, [r7, #15]
 800e158:	e001      	b.n	800e15e <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800e15a:	f7f4 f9a7 	bl	80024ac <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e164:	7bfa      	ldrb	r2, [r7, #15]
 800e166:	4611      	mov	r1, r2
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff f80d 	bl	800d188 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e174:	4618      	mov	r0, r3
 800e176:	f7fe ffbe 	bl	800d0f6 <USBD_LL_Reset>
}
 800e17a:	bf00      	nop
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
	...

0800e184 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e192:	4618      	mov	r0, r3
 800e194:	f7ff f808 	bl	800d1a8 <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	6812      	ldr	r2, [r2, #0]
 800e1a6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e1aa:	f043 0301 	orr.w	r3, r3, #1
 800e1ae:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	7adb      	ldrb	r3, [r3, #11]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d005      	beq.n	800e1c4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1b8:	4b04      	ldr	r3, [pc, #16]	@ (800e1cc <HAL_PCD_SuspendCallback+0x48>)
 800e1ba:	691b      	ldr	r3, [r3, #16]
 800e1bc:	4a03      	ldr	r2, [pc, #12]	@ (800e1cc <HAL_PCD_SuspendCallback+0x48>)
 800e1be:	f043 0306 	orr.w	r3, r3, #6
 800e1c2:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800e1c4:	bf00      	nop
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	e000ed00 	.word	0xe000ed00

0800e1d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fff8 	bl	800d1d4 <USBD_LL_Resume>
}
 800e1e4:	bf00      	nop
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1fe:	78fa      	ldrb	r2, [r7, #3]
 800e200:	4611      	mov	r1, r2
 800e202:	4618      	mov	r0, r3
 800e204:	f7ff f846 	bl	800d294 <USBD_LL_IsoOUTIncomplete>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	460b      	mov	r3, r1
 800e21a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e222:	78fa      	ldrb	r2, [r7, #3]
 800e224:	4611      	mov	r1, r2
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff f80e 	bl	800d248 <USBD_LL_IsoINIncomplete>
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff f84c 	bl	800d2e0 <USBD_LL_DevConnected>
}
 800e248:	bf00      	nop
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff f849 	bl	800d2f6 <USBD_LL_DevDisconnected>
}
 800e264:	bf00      	nop
 800e266:	3708      	adds	r7, #8
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800e274:	4b1c      	ldr	r3, [pc, #112]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e276:	4a1d      	ldr	r2, [pc, #116]	@ (800e2ec <USBD_LL_Init+0x80>)
 800e278:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d12d      	bne.n	800e2de <USBD_LL_Init+0x72>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800e282:	4b19      	ldr	r3, [pc, #100]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	f8c3 24e0 	str.w	r2, [r3, #1248]	@ 0x4e0
    pdev->pData = hpcd_USB_OTG_PTR;
 800e28c:	4b16      	ldr	r3, [pc, #88]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800e296:	4b14      	ldr	r3, [pc, #80]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7ff fee0 	bl	800e064 <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800e2a4:	4b10      	ldr	r3, [pc, #64]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2240      	movs	r2, #64	@ 0x40
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7ff fec4 	bl	800e03a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_KEYBOARD == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (HID_KEYBOARD_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
 800e2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e2b4:	6818      	ldr	r0, [r3, #0]
 800e2b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f0 <USBD_LL_Init+0x84>)
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	2240      	movs	r2, #64	@ 0x40
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	f7ff feb9 	bl	800e03a <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_CUSTOM2 == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID2_IN_EP & 0x7F), 64);
 800e2c8:	4b07      	ldr	r3, [pc, #28]	@ (800e2e8 <USBD_LL_Init+0x7c>)
 800e2ca:	6818      	ldr	r0, [r3, #0]
 800e2cc:	4b09      	ldr	r3, [pc, #36]	@ (800e2f4 <USBD_LL_Init+0x88>)
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	2240      	movs	r2, #64	@ 0x40
 800e2d8:	4619      	mov	r1, r3
 800e2da:	f7ff feae 	bl	800e03a <HAL_PCDEx_SetTxFiFoInBytes>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	2000138c 	.word	0x2000138c
 800e2ec:	20000800 	.word	0x20000800
 800e2f0:	20000132 	.word	0x20000132
 800e2f4:	2000020a 	.word	0x2000020a

0800e2f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e30e:	4618      	mov	r0, r3
 800e310:	f7f7 f873 	bl	80053fa <HAL_PCD_Start>
 800e314:	4603      	mov	r3, r0
 800e316:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e318:	7bfb      	ldrb	r3, [r7, #15]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 f918 	bl	800e550 <USBD_Get_USB_Status>
 800e320:	4603      	mov	r3, r0
 800e322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e324:	7bbb      	ldrb	r3, [r7, #14]
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	4608      	mov	r0, r1
 800e338:	4611      	mov	r1, r2
 800e33a:	461a      	mov	r2, r3
 800e33c:	4603      	mov	r3, r0
 800e33e:	70fb      	strb	r3, [r7, #3]
 800e340:	460b      	mov	r3, r1
 800e342:	70bb      	strb	r3, [r7, #2]
 800e344:	4613      	mov	r3, r2
 800e346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800e356:	78bb      	ldrb	r3, [r7, #2]
 800e358:	883a      	ldrh	r2, [r7, #0]
 800e35a:	78f9      	ldrb	r1, [r7, #3]
 800e35c:	f7f7 fd47 	bl	8005dee <HAL_PCD_EP_Open>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f8f2 	bl	800e550 <USBD_Get_USB_Status>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e370:	7bbb      	ldrb	r3, [r7, #14]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e394:	78fa      	ldrb	r2, [r7, #3]
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f7f7 fd92 	bl	8005ec2 <HAL_PCD_EP_Close>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 f8d3 	bl	800e550 <USBD_Get_USB_Status>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e3d2:	78fa      	ldrb	r2, [r7, #3]
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7f7 fe32 	bl	8006040 <HAL_PCD_EP_SetStall>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 f8b4 	bl	800e550 <USBD_Get_USB_Status>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}

0800e3f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3f6:	b580      	push	{r7, lr}
 800e3f8:	b084      	sub	sp, #16
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
 800e3fe:	460b      	mov	r3, r1
 800e400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e406:	2300      	movs	r3, #0
 800e408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e410:	78fa      	ldrb	r2, [r7, #3]
 800e412:	4611      	mov	r1, r2
 800e414:	4618      	mov	r0, r3
 800e416:	f7f7 fe76 	bl	8006106 <HAL_PCD_EP_ClrStall>
 800e41a:	4603      	mov	r3, r0
 800e41c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e41e:	7bfb      	ldrb	r3, [r7, #15]
 800e420:	4618      	mov	r0, r3
 800e422:	f000 f895 	bl	800e550 <USBD_Get_USB_Status>
 800e426:	4603      	mov	r3, r0
 800e428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e42a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}

0800e434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e434:	b480      	push	{r7}
 800e436:	b085      	sub	sp, #20
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	460b      	mov	r3, r1
 800e43e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e446:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800e448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	da0b      	bge.n	800e468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e450:	78fb      	ldrb	r3, [r7, #3]
 800e452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	4613      	mov	r3, r2
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	4413      	add	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	440b      	add	r3, r1
 800e462:	3316      	adds	r3, #22
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	e00b      	b.n	800e480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e468:	78fb      	ldrb	r3, [r7, #3]
 800e46a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e46e:	68f9      	ldr	r1, [r7, #12]
 800e470:	4613      	mov	r3, r2
 800e472:	00db      	lsls	r3, r3, #3
 800e474:	4413      	add	r3, r2
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	440b      	add	r3, r1
 800e47a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e47e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e480:	4618      	mov	r0, r3
 800e482:	3714      	adds	r7, #20
 800e484:	46bd      	mov	sp, r7
 800e486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48a:	4770      	bx	lr

0800e48c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e49c:	2300      	movs	r3, #0
 800e49e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 800e4a6:	78fa      	ldrb	r2, [r7, #3]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7f7 fc7b 	bl	8005da6 <HAL_PCD_SetAddress>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f000 f84a 	bl	800e550 <USBD_Get_USB_Status>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b086      	sub	sp, #24
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	60f8      	str	r0, [r7, #12]
 800e4d2:	607a      	str	r2, [r7, #4]
 800e4d4:	603b      	str	r3, [r7, #0]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800e4e8:	7af9      	ldrb	r1, [r7, #11]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	f7f7 fd6d 	bl	8005fcc <HAL_PCD_EP_Transmit>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 f829 	bl	800e550 <USBD_Get_USB_Status>
 800e4fe:	4603      	mov	r3, r0
 800e500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e502:	7dbb      	ldrb	r3, [r7, #22]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	607a      	str	r2, [r7, #4]
 800e516:	603b      	str	r3, [r7, #0]
 800e518:	460b      	mov	r3, r1
 800e51a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8d3 0310 	ldr.w	r0, [r3, #784]	@ 0x310
 800e52a:	7af9      	ldrb	r1, [r7, #11]
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	f7f7 fd11 	bl	8005f56 <HAL_PCD_EP_Receive>
 800e534:	4603      	mov	r3, r0
 800e536:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800e538:	7dfb      	ldrb	r3, [r7, #23]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f000 f808 	bl	800e550 <USBD_Get_USB_Status>
 800e540:	4603      	mov	r3, r0
 800e542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e544:	7dbb      	ldrb	r3, [r7, #22]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3718      	adds	r7, #24
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	4603      	mov	r3, r0
 800e558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	2b03      	cmp	r3, #3
 800e562:	d817      	bhi.n	800e594 <USBD_Get_USB_Status+0x44>
 800e564:	a201      	add	r2, pc, #4	@ (adr r2, 800e56c <USBD_Get_USB_Status+0x1c>)
 800e566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56a:	bf00      	nop
 800e56c:	0800e57d 	.word	0x0800e57d
 800e570:	0800e583 	.word	0x0800e583
 800e574:	0800e589 	.word	0x0800e589
 800e578:	0800e58f 	.word	0x0800e58f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	73fb      	strb	r3, [r7, #15]
    break;
 800e580:	e00b      	b.n	800e59a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800e582:	2303      	movs	r3, #3
 800e584:	73fb      	strb	r3, [r7, #15]
    break;
 800e586:	e008      	b.n	800e59a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800e588:	2301      	movs	r3, #1
 800e58a:	73fb      	strb	r3, [r7, #15]
    break;
 800e58c:	e005      	b.n	800e59a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800e58e:	2303      	movs	r3, #3
 800e590:	73fb      	strb	r3, [r7, #15]
    break;
 800e592:	e002      	b.n	800e59a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800e594:	2303      	movs	r3, #3
 800e596:	73fb      	strb	r3, [r7, #15]
    break;
 800e598:	bf00      	nop
  }
  return usb_status;
 800e59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <sniprintf>:
 800e5a8:	b40c      	push	{r2, r3}
 800e5aa:	b530      	push	{r4, r5, lr}
 800e5ac:	4b18      	ldr	r3, [pc, #96]	@ (800e610 <sniprintf+0x68>)
 800e5ae:	1e0c      	subs	r4, r1, #0
 800e5b0:	681d      	ldr	r5, [r3, #0]
 800e5b2:	b09d      	sub	sp, #116	@ 0x74
 800e5b4:	da08      	bge.n	800e5c8 <sniprintf+0x20>
 800e5b6:	238b      	movs	r3, #139	@ 0x8b
 800e5b8:	602b      	str	r3, [r5, #0]
 800e5ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e5be:	b01d      	add	sp, #116	@ 0x74
 800e5c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5c4:	b002      	add	sp, #8
 800e5c6:	4770      	bx	lr
 800e5c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e5cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e5d0:	f04f 0300 	mov.w	r3, #0
 800e5d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e5d6:	bf14      	ite	ne
 800e5d8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e5dc:	4623      	moveq	r3, r4
 800e5de:	9304      	str	r3, [sp, #16]
 800e5e0:	9307      	str	r3, [sp, #28]
 800e5e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e5e6:	9002      	str	r0, [sp, #8]
 800e5e8:	9006      	str	r0, [sp, #24]
 800e5ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e5ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e5f0:	ab21      	add	r3, sp, #132	@ 0x84
 800e5f2:	a902      	add	r1, sp, #8
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	9301      	str	r3, [sp, #4]
 800e5f8:	f000 f9a2 	bl	800e940 <_svfiprintf_r>
 800e5fc:	1c43      	adds	r3, r0, #1
 800e5fe:	bfbc      	itt	lt
 800e600:	238b      	movlt	r3, #139	@ 0x8b
 800e602:	602b      	strlt	r3, [r5, #0]
 800e604:	2c00      	cmp	r4, #0
 800e606:	d0da      	beq.n	800e5be <sniprintf+0x16>
 800e608:	9b02      	ldr	r3, [sp, #8]
 800e60a:	2200      	movs	r2, #0
 800e60c:	701a      	strb	r2, [r3, #0]
 800e60e:	e7d6      	b.n	800e5be <sniprintf+0x16>
 800e610:	200002e8 	.word	0x200002e8

0800e614 <memset>:
 800e614:	4402      	add	r2, r0
 800e616:	4603      	mov	r3, r0
 800e618:	4293      	cmp	r3, r2
 800e61a:	d100      	bne.n	800e61e <memset+0xa>
 800e61c:	4770      	bx	lr
 800e61e:	f803 1b01 	strb.w	r1, [r3], #1
 800e622:	e7f9      	b.n	800e618 <memset+0x4>

0800e624 <__errno>:
 800e624:	4b01      	ldr	r3, [pc, #4]	@ (800e62c <__errno+0x8>)
 800e626:	6818      	ldr	r0, [r3, #0]
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop
 800e62c:	200002e8 	.word	0x200002e8

0800e630 <__libc_init_array>:
 800e630:	b570      	push	{r4, r5, r6, lr}
 800e632:	4d0d      	ldr	r5, [pc, #52]	@ (800e668 <__libc_init_array+0x38>)
 800e634:	4c0d      	ldr	r4, [pc, #52]	@ (800e66c <__libc_init_array+0x3c>)
 800e636:	1b64      	subs	r4, r4, r5
 800e638:	10a4      	asrs	r4, r4, #2
 800e63a:	2600      	movs	r6, #0
 800e63c:	42a6      	cmp	r6, r4
 800e63e:	d109      	bne.n	800e654 <__libc_init_array+0x24>
 800e640:	4d0b      	ldr	r5, [pc, #44]	@ (800e670 <__libc_init_array+0x40>)
 800e642:	4c0c      	ldr	r4, [pc, #48]	@ (800e674 <__libc_init_array+0x44>)
 800e644:	f000 fc64 	bl	800ef10 <_init>
 800e648:	1b64      	subs	r4, r4, r5
 800e64a:	10a4      	asrs	r4, r4, #2
 800e64c:	2600      	movs	r6, #0
 800e64e:	42a6      	cmp	r6, r4
 800e650:	d105      	bne.n	800e65e <__libc_init_array+0x2e>
 800e652:	bd70      	pop	{r4, r5, r6, pc}
 800e654:	f855 3b04 	ldr.w	r3, [r5], #4
 800e658:	4798      	blx	r3
 800e65a:	3601      	adds	r6, #1
 800e65c:	e7ee      	b.n	800e63c <__libc_init_array+0xc>
 800e65e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e662:	4798      	blx	r3
 800e664:	3601      	adds	r6, #1
 800e666:	e7f2      	b.n	800e64e <__libc_init_array+0x1e>
 800e668:	0800f020 	.word	0x0800f020
 800e66c:	0800f020 	.word	0x0800f020
 800e670:	0800f020 	.word	0x0800f020
 800e674:	0800f024 	.word	0x0800f024

0800e678 <__retarget_lock_acquire_recursive>:
 800e678:	4770      	bx	lr

0800e67a <__retarget_lock_release_recursive>:
 800e67a:	4770      	bx	lr

0800e67c <memcpy>:
 800e67c:	440a      	add	r2, r1
 800e67e:	4291      	cmp	r1, r2
 800e680:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e684:	d100      	bne.n	800e688 <memcpy+0xc>
 800e686:	4770      	bx	lr
 800e688:	b510      	push	{r4, lr}
 800e68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e692:	4291      	cmp	r1, r2
 800e694:	d1f9      	bne.n	800e68a <memcpy+0xe>
 800e696:	bd10      	pop	{r4, pc}

0800e698 <_free_r>:
 800e698:	b538      	push	{r3, r4, r5, lr}
 800e69a:	4605      	mov	r5, r0
 800e69c:	2900      	cmp	r1, #0
 800e69e:	d041      	beq.n	800e724 <_free_r+0x8c>
 800e6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a4:	1f0c      	subs	r4, r1, #4
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bfb8      	it	lt
 800e6aa:	18e4      	addlt	r4, r4, r3
 800e6ac:	f000 f8e0 	bl	800e870 <__malloc_lock>
 800e6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800e728 <_free_r+0x90>)
 800e6b2:	6813      	ldr	r3, [r2, #0]
 800e6b4:	b933      	cbnz	r3, 800e6c4 <_free_r+0x2c>
 800e6b6:	6063      	str	r3, [r4, #4]
 800e6b8:	6014      	str	r4, [r2, #0]
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6c0:	f000 b8dc 	b.w	800e87c <__malloc_unlock>
 800e6c4:	42a3      	cmp	r3, r4
 800e6c6:	d908      	bls.n	800e6da <_free_r+0x42>
 800e6c8:	6820      	ldr	r0, [r4, #0]
 800e6ca:	1821      	adds	r1, r4, r0
 800e6cc:	428b      	cmp	r3, r1
 800e6ce:	bf01      	itttt	eq
 800e6d0:	6819      	ldreq	r1, [r3, #0]
 800e6d2:	685b      	ldreq	r3, [r3, #4]
 800e6d4:	1809      	addeq	r1, r1, r0
 800e6d6:	6021      	streq	r1, [r4, #0]
 800e6d8:	e7ed      	b.n	800e6b6 <_free_r+0x1e>
 800e6da:	461a      	mov	r2, r3
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	b10b      	cbz	r3, 800e6e4 <_free_r+0x4c>
 800e6e0:	42a3      	cmp	r3, r4
 800e6e2:	d9fa      	bls.n	800e6da <_free_r+0x42>
 800e6e4:	6811      	ldr	r1, [r2, #0]
 800e6e6:	1850      	adds	r0, r2, r1
 800e6e8:	42a0      	cmp	r0, r4
 800e6ea:	d10b      	bne.n	800e704 <_free_r+0x6c>
 800e6ec:	6820      	ldr	r0, [r4, #0]
 800e6ee:	4401      	add	r1, r0
 800e6f0:	1850      	adds	r0, r2, r1
 800e6f2:	4283      	cmp	r3, r0
 800e6f4:	6011      	str	r1, [r2, #0]
 800e6f6:	d1e0      	bne.n	800e6ba <_free_r+0x22>
 800e6f8:	6818      	ldr	r0, [r3, #0]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	6053      	str	r3, [r2, #4]
 800e6fe:	4408      	add	r0, r1
 800e700:	6010      	str	r0, [r2, #0]
 800e702:	e7da      	b.n	800e6ba <_free_r+0x22>
 800e704:	d902      	bls.n	800e70c <_free_r+0x74>
 800e706:	230c      	movs	r3, #12
 800e708:	602b      	str	r3, [r5, #0]
 800e70a:	e7d6      	b.n	800e6ba <_free_r+0x22>
 800e70c:	6820      	ldr	r0, [r4, #0]
 800e70e:	1821      	adds	r1, r4, r0
 800e710:	428b      	cmp	r3, r1
 800e712:	bf04      	itt	eq
 800e714:	6819      	ldreq	r1, [r3, #0]
 800e716:	685b      	ldreq	r3, [r3, #4]
 800e718:	6063      	str	r3, [r4, #4]
 800e71a:	bf04      	itt	eq
 800e71c:	1809      	addeq	r1, r1, r0
 800e71e:	6021      	streq	r1, [r4, #0]
 800e720:	6054      	str	r4, [r2, #4]
 800e722:	e7ca      	b.n	800e6ba <_free_r+0x22>
 800e724:	bd38      	pop	{r3, r4, r5, pc}
 800e726:	bf00      	nop
 800e728:	200014d4 	.word	0x200014d4

0800e72c <sbrk_aligned>:
 800e72c:	b570      	push	{r4, r5, r6, lr}
 800e72e:	4e0f      	ldr	r6, [pc, #60]	@ (800e76c <sbrk_aligned+0x40>)
 800e730:	460c      	mov	r4, r1
 800e732:	6831      	ldr	r1, [r6, #0]
 800e734:	4605      	mov	r5, r0
 800e736:	b911      	cbnz	r1, 800e73e <sbrk_aligned+0x12>
 800e738:	f000 fba4 	bl	800ee84 <_sbrk_r>
 800e73c:	6030      	str	r0, [r6, #0]
 800e73e:	4621      	mov	r1, r4
 800e740:	4628      	mov	r0, r5
 800e742:	f000 fb9f 	bl	800ee84 <_sbrk_r>
 800e746:	1c43      	adds	r3, r0, #1
 800e748:	d103      	bne.n	800e752 <sbrk_aligned+0x26>
 800e74a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e74e:	4620      	mov	r0, r4
 800e750:	bd70      	pop	{r4, r5, r6, pc}
 800e752:	1cc4      	adds	r4, r0, #3
 800e754:	f024 0403 	bic.w	r4, r4, #3
 800e758:	42a0      	cmp	r0, r4
 800e75a:	d0f8      	beq.n	800e74e <sbrk_aligned+0x22>
 800e75c:	1a21      	subs	r1, r4, r0
 800e75e:	4628      	mov	r0, r5
 800e760:	f000 fb90 	bl	800ee84 <_sbrk_r>
 800e764:	3001      	adds	r0, #1
 800e766:	d1f2      	bne.n	800e74e <sbrk_aligned+0x22>
 800e768:	e7ef      	b.n	800e74a <sbrk_aligned+0x1e>
 800e76a:	bf00      	nop
 800e76c:	200014d0 	.word	0x200014d0

0800e770 <_malloc_r>:
 800e770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e774:	1ccd      	adds	r5, r1, #3
 800e776:	f025 0503 	bic.w	r5, r5, #3
 800e77a:	3508      	adds	r5, #8
 800e77c:	2d0c      	cmp	r5, #12
 800e77e:	bf38      	it	cc
 800e780:	250c      	movcc	r5, #12
 800e782:	2d00      	cmp	r5, #0
 800e784:	4606      	mov	r6, r0
 800e786:	db01      	blt.n	800e78c <_malloc_r+0x1c>
 800e788:	42a9      	cmp	r1, r5
 800e78a:	d904      	bls.n	800e796 <_malloc_r+0x26>
 800e78c:	230c      	movs	r3, #12
 800e78e:	6033      	str	r3, [r6, #0]
 800e790:	2000      	movs	r0, #0
 800e792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e86c <_malloc_r+0xfc>
 800e79a:	f000 f869 	bl	800e870 <__malloc_lock>
 800e79e:	f8d8 3000 	ldr.w	r3, [r8]
 800e7a2:	461c      	mov	r4, r3
 800e7a4:	bb44      	cbnz	r4, 800e7f8 <_malloc_r+0x88>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7ff ffbf 	bl	800e72c <sbrk_aligned>
 800e7ae:	1c43      	adds	r3, r0, #1
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	d158      	bne.n	800e866 <_malloc_r+0xf6>
 800e7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e7b8:	4627      	mov	r7, r4
 800e7ba:	2f00      	cmp	r7, #0
 800e7bc:	d143      	bne.n	800e846 <_malloc_r+0xd6>
 800e7be:	2c00      	cmp	r4, #0
 800e7c0:	d04b      	beq.n	800e85a <_malloc_r+0xea>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	4639      	mov	r1, r7
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	eb04 0903 	add.w	r9, r4, r3
 800e7cc:	f000 fb5a 	bl	800ee84 <_sbrk_r>
 800e7d0:	4581      	cmp	r9, r0
 800e7d2:	d142      	bne.n	800e85a <_malloc_r+0xea>
 800e7d4:	6821      	ldr	r1, [r4, #0]
 800e7d6:	1a6d      	subs	r5, r5, r1
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4630      	mov	r0, r6
 800e7dc:	f7ff ffa6 	bl	800e72c <sbrk_aligned>
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	d03a      	beq.n	800e85a <_malloc_r+0xea>
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	442b      	add	r3, r5
 800e7e8:	6023      	str	r3, [r4, #0]
 800e7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e7ee:	685a      	ldr	r2, [r3, #4]
 800e7f0:	bb62      	cbnz	r2, 800e84c <_malloc_r+0xdc>
 800e7f2:	f8c8 7000 	str.w	r7, [r8]
 800e7f6:	e00f      	b.n	800e818 <_malloc_r+0xa8>
 800e7f8:	6822      	ldr	r2, [r4, #0]
 800e7fa:	1b52      	subs	r2, r2, r5
 800e7fc:	d420      	bmi.n	800e840 <_malloc_r+0xd0>
 800e7fe:	2a0b      	cmp	r2, #11
 800e800:	d917      	bls.n	800e832 <_malloc_r+0xc2>
 800e802:	1961      	adds	r1, r4, r5
 800e804:	42a3      	cmp	r3, r4
 800e806:	6025      	str	r5, [r4, #0]
 800e808:	bf18      	it	ne
 800e80a:	6059      	strne	r1, [r3, #4]
 800e80c:	6863      	ldr	r3, [r4, #4]
 800e80e:	bf08      	it	eq
 800e810:	f8c8 1000 	streq.w	r1, [r8]
 800e814:	5162      	str	r2, [r4, r5]
 800e816:	604b      	str	r3, [r1, #4]
 800e818:	4630      	mov	r0, r6
 800e81a:	f000 f82f 	bl	800e87c <__malloc_unlock>
 800e81e:	f104 000b 	add.w	r0, r4, #11
 800e822:	1d23      	adds	r3, r4, #4
 800e824:	f020 0007 	bic.w	r0, r0, #7
 800e828:	1ac2      	subs	r2, r0, r3
 800e82a:	bf1c      	itt	ne
 800e82c:	1a1b      	subne	r3, r3, r0
 800e82e:	50a3      	strne	r3, [r4, r2]
 800e830:	e7af      	b.n	800e792 <_malloc_r+0x22>
 800e832:	6862      	ldr	r2, [r4, #4]
 800e834:	42a3      	cmp	r3, r4
 800e836:	bf0c      	ite	eq
 800e838:	f8c8 2000 	streq.w	r2, [r8]
 800e83c:	605a      	strne	r2, [r3, #4]
 800e83e:	e7eb      	b.n	800e818 <_malloc_r+0xa8>
 800e840:	4623      	mov	r3, r4
 800e842:	6864      	ldr	r4, [r4, #4]
 800e844:	e7ae      	b.n	800e7a4 <_malloc_r+0x34>
 800e846:	463c      	mov	r4, r7
 800e848:	687f      	ldr	r7, [r7, #4]
 800e84a:	e7b6      	b.n	800e7ba <_malloc_r+0x4a>
 800e84c:	461a      	mov	r2, r3
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	42a3      	cmp	r3, r4
 800e852:	d1fb      	bne.n	800e84c <_malloc_r+0xdc>
 800e854:	2300      	movs	r3, #0
 800e856:	6053      	str	r3, [r2, #4]
 800e858:	e7de      	b.n	800e818 <_malloc_r+0xa8>
 800e85a:	230c      	movs	r3, #12
 800e85c:	6033      	str	r3, [r6, #0]
 800e85e:	4630      	mov	r0, r6
 800e860:	f000 f80c 	bl	800e87c <__malloc_unlock>
 800e864:	e794      	b.n	800e790 <_malloc_r+0x20>
 800e866:	6005      	str	r5, [r0, #0]
 800e868:	e7d6      	b.n	800e818 <_malloc_r+0xa8>
 800e86a:	bf00      	nop
 800e86c:	200014d4 	.word	0x200014d4

0800e870 <__malloc_lock>:
 800e870:	4801      	ldr	r0, [pc, #4]	@ (800e878 <__malloc_lock+0x8>)
 800e872:	f7ff bf01 	b.w	800e678 <__retarget_lock_acquire_recursive>
 800e876:	bf00      	nop
 800e878:	200014cc 	.word	0x200014cc

0800e87c <__malloc_unlock>:
 800e87c:	4801      	ldr	r0, [pc, #4]	@ (800e884 <__malloc_unlock+0x8>)
 800e87e:	f7ff befc 	b.w	800e67a <__retarget_lock_release_recursive>
 800e882:	bf00      	nop
 800e884:	200014cc 	.word	0x200014cc

0800e888 <__ssputs_r>:
 800e888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e88c:	688e      	ldr	r6, [r1, #8]
 800e88e:	461f      	mov	r7, r3
 800e890:	42be      	cmp	r6, r7
 800e892:	680b      	ldr	r3, [r1, #0]
 800e894:	4682      	mov	sl, r0
 800e896:	460c      	mov	r4, r1
 800e898:	4690      	mov	r8, r2
 800e89a:	d82d      	bhi.n	800e8f8 <__ssputs_r+0x70>
 800e89c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e8a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e8a4:	d026      	beq.n	800e8f4 <__ssputs_r+0x6c>
 800e8a6:	6965      	ldr	r5, [r4, #20]
 800e8a8:	6909      	ldr	r1, [r1, #16]
 800e8aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8ae:	eba3 0901 	sub.w	r9, r3, r1
 800e8b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8b6:	1c7b      	adds	r3, r7, #1
 800e8b8:	444b      	add	r3, r9
 800e8ba:	106d      	asrs	r5, r5, #1
 800e8bc:	429d      	cmp	r5, r3
 800e8be:	bf38      	it	cc
 800e8c0:	461d      	movcc	r5, r3
 800e8c2:	0553      	lsls	r3, r2, #21
 800e8c4:	d527      	bpl.n	800e916 <__ssputs_r+0x8e>
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	f7ff ff52 	bl	800e770 <_malloc_r>
 800e8cc:	4606      	mov	r6, r0
 800e8ce:	b360      	cbz	r0, 800e92a <__ssputs_r+0xa2>
 800e8d0:	6921      	ldr	r1, [r4, #16]
 800e8d2:	464a      	mov	r2, r9
 800e8d4:	f7ff fed2 	bl	800e67c <memcpy>
 800e8d8:	89a3      	ldrh	r3, [r4, #12]
 800e8da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8e2:	81a3      	strh	r3, [r4, #12]
 800e8e4:	6126      	str	r6, [r4, #16]
 800e8e6:	6165      	str	r5, [r4, #20]
 800e8e8:	444e      	add	r6, r9
 800e8ea:	eba5 0509 	sub.w	r5, r5, r9
 800e8ee:	6026      	str	r6, [r4, #0]
 800e8f0:	60a5      	str	r5, [r4, #8]
 800e8f2:	463e      	mov	r6, r7
 800e8f4:	42be      	cmp	r6, r7
 800e8f6:	d900      	bls.n	800e8fa <__ssputs_r+0x72>
 800e8f8:	463e      	mov	r6, r7
 800e8fa:	6820      	ldr	r0, [r4, #0]
 800e8fc:	4632      	mov	r2, r6
 800e8fe:	4641      	mov	r1, r8
 800e900:	f000 faa6 	bl	800ee50 <memmove>
 800e904:	68a3      	ldr	r3, [r4, #8]
 800e906:	1b9b      	subs	r3, r3, r6
 800e908:	60a3      	str	r3, [r4, #8]
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	4433      	add	r3, r6
 800e90e:	6023      	str	r3, [r4, #0]
 800e910:	2000      	movs	r0, #0
 800e912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e916:	462a      	mov	r2, r5
 800e918:	f000 fac4 	bl	800eea4 <_realloc_r>
 800e91c:	4606      	mov	r6, r0
 800e91e:	2800      	cmp	r0, #0
 800e920:	d1e0      	bne.n	800e8e4 <__ssputs_r+0x5c>
 800e922:	6921      	ldr	r1, [r4, #16]
 800e924:	4650      	mov	r0, sl
 800e926:	f7ff feb7 	bl	800e698 <_free_r>
 800e92a:	230c      	movs	r3, #12
 800e92c:	f8ca 3000 	str.w	r3, [sl]
 800e930:	89a3      	ldrh	r3, [r4, #12]
 800e932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e936:	81a3      	strh	r3, [r4, #12]
 800e938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e93c:	e7e9      	b.n	800e912 <__ssputs_r+0x8a>
	...

0800e940 <_svfiprintf_r>:
 800e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e944:	4698      	mov	r8, r3
 800e946:	898b      	ldrh	r3, [r1, #12]
 800e948:	061b      	lsls	r3, r3, #24
 800e94a:	b09d      	sub	sp, #116	@ 0x74
 800e94c:	4607      	mov	r7, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	4614      	mov	r4, r2
 800e952:	d510      	bpl.n	800e976 <_svfiprintf_r+0x36>
 800e954:	690b      	ldr	r3, [r1, #16]
 800e956:	b973      	cbnz	r3, 800e976 <_svfiprintf_r+0x36>
 800e958:	2140      	movs	r1, #64	@ 0x40
 800e95a:	f7ff ff09 	bl	800e770 <_malloc_r>
 800e95e:	6028      	str	r0, [r5, #0]
 800e960:	6128      	str	r0, [r5, #16]
 800e962:	b930      	cbnz	r0, 800e972 <_svfiprintf_r+0x32>
 800e964:	230c      	movs	r3, #12
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e96c:	b01d      	add	sp, #116	@ 0x74
 800e96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e972:	2340      	movs	r3, #64	@ 0x40
 800e974:	616b      	str	r3, [r5, #20]
 800e976:	2300      	movs	r3, #0
 800e978:	9309      	str	r3, [sp, #36]	@ 0x24
 800e97a:	2320      	movs	r3, #32
 800e97c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e980:	f8cd 800c 	str.w	r8, [sp, #12]
 800e984:	2330      	movs	r3, #48	@ 0x30
 800e986:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eb24 <_svfiprintf_r+0x1e4>
 800e98a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e98e:	f04f 0901 	mov.w	r9, #1
 800e992:	4623      	mov	r3, r4
 800e994:	469a      	mov	sl, r3
 800e996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e99a:	b10a      	cbz	r2, 800e9a0 <_svfiprintf_r+0x60>
 800e99c:	2a25      	cmp	r2, #37	@ 0x25
 800e99e:	d1f9      	bne.n	800e994 <_svfiprintf_r+0x54>
 800e9a0:	ebba 0b04 	subs.w	fp, sl, r4
 800e9a4:	d00b      	beq.n	800e9be <_svfiprintf_r+0x7e>
 800e9a6:	465b      	mov	r3, fp
 800e9a8:	4622      	mov	r2, r4
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	f7ff ff6b 	bl	800e888 <__ssputs_r>
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	f000 80a7 	beq.w	800eb06 <_svfiprintf_r+0x1c6>
 800e9b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9ba:	445a      	add	r2, fp
 800e9bc:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9be:	f89a 3000 	ldrb.w	r3, [sl]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 809f 	beq.w	800eb06 <_svfiprintf_r+0x1c6>
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e9ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9d2:	f10a 0a01 	add.w	sl, sl, #1
 800e9d6:	9304      	str	r3, [sp, #16]
 800e9d8:	9307      	str	r3, [sp, #28]
 800e9da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9de:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9e0:	4654      	mov	r4, sl
 800e9e2:	2205      	movs	r2, #5
 800e9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9e8:	484e      	ldr	r0, [pc, #312]	@ (800eb24 <_svfiprintf_r+0x1e4>)
 800e9ea:	f7f1 fbf1 	bl	80001d0 <memchr>
 800e9ee:	9a04      	ldr	r2, [sp, #16]
 800e9f0:	b9d8      	cbnz	r0, 800ea2a <_svfiprintf_r+0xea>
 800e9f2:	06d0      	lsls	r0, r2, #27
 800e9f4:	bf44      	itt	mi
 800e9f6:	2320      	movmi	r3, #32
 800e9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e9fc:	0711      	lsls	r1, r2, #28
 800e9fe:	bf44      	itt	mi
 800ea00:	232b      	movmi	r3, #43	@ 0x2b
 800ea02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea06:	f89a 3000 	ldrb.w	r3, [sl]
 800ea0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea0c:	d015      	beq.n	800ea3a <_svfiprintf_r+0xfa>
 800ea0e:	9a07      	ldr	r2, [sp, #28]
 800ea10:	4654      	mov	r4, sl
 800ea12:	2000      	movs	r0, #0
 800ea14:	f04f 0c0a 	mov.w	ip, #10
 800ea18:	4621      	mov	r1, r4
 800ea1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea1e:	3b30      	subs	r3, #48	@ 0x30
 800ea20:	2b09      	cmp	r3, #9
 800ea22:	d94b      	bls.n	800eabc <_svfiprintf_r+0x17c>
 800ea24:	b1b0      	cbz	r0, 800ea54 <_svfiprintf_r+0x114>
 800ea26:	9207      	str	r2, [sp, #28]
 800ea28:	e014      	b.n	800ea54 <_svfiprintf_r+0x114>
 800ea2a:	eba0 0308 	sub.w	r3, r0, r8
 800ea2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ea32:	4313      	orrs	r3, r2
 800ea34:	9304      	str	r3, [sp, #16]
 800ea36:	46a2      	mov	sl, r4
 800ea38:	e7d2      	b.n	800e9e0 <_svfiprintf_r+0xa0>
 800ea3a:	9b03      	ldr	r3, [sp, #12]
 800ea3c:	1d19      	adds	r1, r3, #4
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	9103      	str	r1, [sp, #12]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	bfbb      	ittet	lt
 800ea46:	425b      	neglt	r3, r3
 800ea48:	f042 0202 	orrlt.w	r2, r2, #2
 800ea4c:	9307      	strge	r3, [sp, #28]
 800ea4e:	9307      	strlt	r3, [sp, #28]
 800ea50:	bfb8      	it	lt
 800ea52:	9204      	strlt	r2, [sp, #16]
 800ea54:	7823      	ldrb	r3, [r4, #0]
 800ea56:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea58:	d10a      	bne.n	800ea70 <_svfiprintf_r+0x130>
 800ea5a:	7863      	ldrb	r3, [r4, #1]
 800ea5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea5e:	d132      	bne.n	800eac6 <_svfiprintf_r+0x186>
 800ea60:	9b03      	ldr	r3, [sp, #12]
 800ea62:	1d1a      	adds	r2, r3, #4
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	9203      	str	r2, [sp, #12]
 800ea68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea6c:	3402      	adds	r4, #2
 800ea6e:	9305      	str	r3, [sp, #20]
 800ea70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800eb34 <_svfiprintf_r+0x1f4>
 800ea74:	7821      	ldrb	r1, [r4, #0]
 800ea76:	2203      	movs	r2, #3
 800ea78:	4650      	mov	r0, sl
 800ea7a:	f7f1 fba9 	bl	80001d0 <memchr>
 800ea7e:	b138      	cbz	r0, 800ea90 <_svfiprintf_r+0x150>
 800ea80:	9b04      	ldr	r3, [sp, #16]
 800ea82:	eba0 000a 	sub.w	r0, r0, sl
 800ea86:	2240      	movs	r2, #64	@ 0x40
 800ea88:	4082      	lsls	r2, r0
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	3401      	adds	r4, #1
 800ea8e:	9304      	str	r3, [sp, #16]
 800ea90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea94:	4824      	ldr	r0, [pc, #144]	@ (800eb28 <_svfiprintf_r+0x1e8>)
 800ea96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ea9a:	2206      	movs	r2, #6
 800ea9c:	f7f1 fb98 	bl	80001d0 <memchr>
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d036      	beq.n	800eb12 <_svfiprintf_r+0x1d2>
 800eaa4:	4b21      	ldr	r3, [pc, #132]	@ (800eb2c <_svfiprintf_r+0x1ec>)
 800eaa6:	bb1b      	cbnz	r3, 800eaf0 <_svfiprintf_r+0x1b0>
 800eaa8:	9b03      	ldr	r3, [sp, #12]
 800eaaa:	3307      	adds	r3, #7
 800eaac:	f023 0307 	bic.w	r3, r3, #7
 800eab0:	3308      	adds	r3, #8
 800eab2:	9303      	str	r3, [sp, #12]
 800eab4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eab6:	4433      	add	r3, r6
 800eab8:	9309      	str	r3, [sp, #36]	@ 0x24
 800eaba:	e76a      	b.n	800e992 <_svfiprintf_r+0x52>
 800eabc:	fb0c 3202 	mla	r2, ip, r2, r3
 800eac0:	460c      	mov	r4, r1
 800eac2:	2001      	movs	r0, #1
 800eac4:	e7a8      	b.n	800ea18 <_svfiprintf_r+0xd8>
 800eac6:	2300      	movs	r3, #0
 800eac8:	3401      	adds	r4, #1
 800eaca:	9305      	str	r3, [sp, #20]
 800eacc:	4619      	mov	r1, r3
 800eace:	f04f 0c0a 	mov.w	ip, #10
 800ead2:	4620      	mov	r0, r4
 800ead4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ead8:	3a30      	subs	r2, #48	@ 0x30
 800eada:	2a09      	cmp	r2, #9
 800eadc:	d903      	bls.n	800eae6 <_svfiprintf_r+0x1a6>
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0c6      	beq.n	800ea70 <_svfiprintf_r+0x130>
 800eae2:	9105      	str	r1, [sp, #20]
 800eae4:	e7c4      	b.n	800ea70 <_svfiprintf_r+0x130>
 800eae6:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaea:	4604      	mov	r4, r0
 800eaec:	2301      	movs	r3, #1
 800eaee:	e7f0      	b.n	800ead2 <_svfiprintf_r+0x192>
 800eaf0:	ab03      	add	r3, sp, #12
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	462a      	mov	r2, r5
 800eaf6:	4b0e      	ldr	r3, [pc, #56]	@ (800eb30 <_svfiprintf_r+0x1f0>)
 800eaf8:	a904      	add	r1, sp, #16
 800eafa:	4638      	mov	r0, r7
 800eafc:	f3af 8000 	nop.w
 800eb00:	1c42      	adds	r2, r0, #1
 800eb02:	4606      	mov	r6, r0
 800eb04:	d1d6      	bne.n	800eab4 <_svfiprintf_r+0x174>
 800eb06:	89ab      	ldrh	r3, [r5, #12]
 800eb08:	065b      	lsls	r3, r3, #25
 800eb0a:	f53f af2d 	bmi.w	800e968 <_svfiprintf_r+0x28>
 800eb0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb10:	e72c      	b.n	800e96c <_svfiprintf_r+0x2c>
 800eb12:	ab03      	add	r3, sp, #12
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	462a      	mov	r2, r5
 800eb18:	4b05      	ldr	r3, [pc, #20]	@ (800eb30 <_svfiprintf_r+0x1f0>)
 800eb1a:	a904      	add	r1, sp, #16
 800eb1c:	4638      	mov	r0, r7
 800eb1e:	f000 f879 	bl	800ec14 <_printf_i>
 800eb22:	e7ed      	b.n	800eb00 <_svfiprintf_r+0x1c0>
 800eb24:	0800efe4 	.word	0x0800efe4
 800eb28:	0800efee 	.word	0x0800efee
 800eb2c:	00000000 	.word	0x00000000
 800eb30:	0800e889 	.word	0x0800e889
 800eb34:	0800efea 	.word	0x0800efea

0800eb38 <_printf_common>:
 800eb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb3c:	4616      	mov	r6, r2
 800eb3e:	4698      	mov	r8, r3
 800eb40:	688a      	ldr	r2, [r1, #8]
 800eb42:	690b      	ldr	r3, [r1, #16]
 800eb44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	bfb8      	it	lt
 800eb4c:	4613      	movlt	r3, r2
 800eb4e:	6033      	str	r3, [r6, #0]
 800eb50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eb54:	4607      	mov	r7, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	b10a      	cbz	r2, 800eb5e <_printf_common+0x26>
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	6033      	str	r3, [r6, #0]
 800eb5e:	6823      	ldr	r3, [r4, #0]
 800eb60:	0699      	lsls	r1, r3, #26
 800eb62:	bf42      	ittt	mi
 800eb64:	6833      	ldrmi	r3, [r6, #0]
 800eb66:	3302      	addmi	r3, #2
 800eb68:	6033      	strmi	r3, [r6, #0]
 800eb6a:	6825      	ldr	r5, [r4, #0]
 800eb6c:	f015 0506 	ands.w	r5, r5, #6
 800eb70:	d106      	bne.n	800eb80 <_printf_common+0x48>
 800eb72:	f104 0a19 	add.w	sl, r4, #25
 800eb76:	68e3      	ldr	r3, [r4, #12]
 800eb78:	6832      	ldr	r2, [r6, #0]
 800eb7a:	1a9b      	subs	r3, r3, r2
 800eb7c:	42ab      	cmp	r3, r5
 800eb7e:	dc26      	bgt.n	800ebce <_printf_common+0x96>
 800eb80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800eb84:	6822      	ldr	r2, [r4, #0]
 800eb86:	3b00      	subs	r3, #0
 800eb88:	bf18      	it	ne
 800eb8a:	2301      	movne	r3, #1
 800eb8c:	0692      	lsls	r2, r2, #26
 800eb8e:	d42b      	bmi.n	800ebe8 <_printf_common+0xb0>
 800eb90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800eb94:	4641      	mov	r1, r8
 800eb96:	4638      	mov	r0, r7
 800eb98:	47c8      	blx	r9
 800eb9a:	3001      	adds	r0, #1
 800eb9c:	d01e      	beq.n	800ebdc <_printf_common+0xa4>
 800eb9e:	6823      	ldr	r3, [r4, #0]
 800eba0:	6922      	ldr	r2, [r4, #16]
 800eba2:	f003 0306 	and.w	r3, r3, #6
 800eba6:	2b04      	cmp	r3, #4
 800eba8:	bf02      	ittt	eq
 800ebaa:	68e5      	ldreq	r5, [r4, #12]
 800ebac:	6833      	ldreq	r3, [r6, #0]
 800ebae:	1aed      	subeq	r5, r5, r3
 800ebb0:	68a3      	ldr	r3, [r4, #8]
 800ebb2:	bf0c      	ite	eq
 800ebb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebb8:	2500      	movne	r5, #0
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	bfc4      	itt	gt
 800ebbe:	1a9b      	subgt	r3, r3, r2
 800ebc0:	18ed      	addgt	r5, r5, r3
 800ebc2:	2600      	movs	r6, #0
 800ebc4:	341a      	adds	r4, #26
 800ebc6:	42b5      	cmp	r5, r6
 800ebc8:	d11a      	bne.n	800ec00 <_printf_common+0xc8>
 800ebca:	2000      	movs	r0, #0
 800ebcc:	e008      	b.n	800ebe0 <_printf_common+0xa8>
 800ebce:	2301      	movs	r3, #1
 800ebd0:	4652      	mov	r2, sl
 800ebd2:	4641      	mov	r1, r8
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	47c8      	blx	r9
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d103      	bne.n	800ebe4 <_printf_common+0xac>
 800ebdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ebe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe4:	3501      	adds	r5, #1
 800ebe6:	e7c6      	b.n	800eb76 <_printf_common+0x3e>
 800ebe8:	18e1      	adds	r1, r4, r3
 800ebea:	1c5a      	adds	r2, r3, #1
 800ebec:	2030      	movs	r0, #48	@ 0x30
 800ebee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ebf2:	4422      	add	r2, r4
 800ebf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ebf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ebfc:	3302      	adds	r3, #2
 800ebfe:	e7c7      	b.n	800eb90 <_printf_common+0x58>
 800ec00:	2301      	movs	r3, #1
 800ec02:	4622      	mov	r2, r4
 800ec04:	4641      	mov	r1, r8
 800ec06:	4638      	mov	r0, r7
 800ec08:	47c8      	blx	r9
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	d0e6      	beq.n	800ebdc <_printf_common+0xa4>
 800ec0e:	3601      	adds	r6, #1
 800ec10:	e7d9      	b.n	800ebc6 <_printf_common+0x8e>
	...

0800ec14 <_printf_i>:
 800ec14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec18:	7e0f      	ldrb	r7, [r1, #24]
 800ec1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ec1c:	2f78      	cmp	r7, #120	@ 0x78
 800ec1e:	4691      	mov	r9, r2
 800ec20:	4680      	mov	r8, r0
 800ec22:	460c      	mov	r4, r1
 800ec24:	469a      	mov	sl, r3
 800ec26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ec2a:	d807      	bhi.n	800ec3c <_printf_i+0x28>
 800ec2c:	2f62      	cmp	r7, #98	@ 0x62
 800ec2e:	d80a      	bhi.n	800ec46 <_printf_i+0x32>
 800ec30:	2f00      	cmp	r7, #0
 800ec32:	f000 80d1 	beq.w	800edd8 <_printf_i+0x1c4>
 800ec36:	2f58      	cmp	r7, #88	@ 0x58
 800ec38:	f000 80b8 	beq.w	800edac <_printf_i+0x198>
 800ec3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ec40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ec44:	e03a      	b.n	800ecbc <_printf_i+0xa8>
 800ec46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ec4a:	2b15      	cmp	r3, #21
 800ec4c:	d8f6      	bhi.n	800ec3c <_printf_i+0x28>
 800ec4e:	a101      	add	r1, pc, #4	@ (adr r1, 800ec54 <_printf_i+0x40>)
 800ec50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec54:	0800ecad 	.word	0x0800ecad
 800ec58:	0800ecc1 	.word	0x0800ecc1
 800ec5c:	0800ec3d 	.word	0x0800ec3d
 800ec60:	0800ec3d 	.word	0x0800ec3d
 800ec64:	0800ec3d 	.word	0x0800ec3d
 800ec68:	0800ec3d 	.word	0x0800ec3d
 800ec6c:	0800ecc1 	.word	0x0800ecc1
 800ec70:	0800ec3d 	.word	0x0800ec3d
 800ec74:	0800ec3d 	.word	0x0800ec3d
 800ec78:	0800ec3d 	.word	0x0800ec3d
 800ec7c:	0800ec3d 	.word	0x0800ec3d
 800ec80:	0800edbf 	.word	0x0800edbf
 800ec84:	0800eceb 	.word	0x0800eceb
 800ec88:	0800ed79 	.word	0x0800ed79
 800ec8c:	0800ec3d 	.word	0x0800ec3d
 800ec90:	0800ec3d 	.word	0x0800ec3d
 800ec94:	0800ede1 	.word	0x0800ede1
 800ec98:	0800ec3d 	.word	0x0800ec3d
 800ec9c:	0800eceb 	.word	0x0800eceb
 800eca0:	0800ec3d 	.word	0x0800ec3d
 800eca4:	0800ec3d 	.word	0x0800ec3d
 800eca8:	0800ed81 	.word	0x0800ed81
 800ecac:	6833      	ldr	r3, [r6, #0]
 800ecae:	1d1a      	adds	r2, r3, #4
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	6032      	str	r2, [r6, #0]
 800ecb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	e09c      	b.n	800edfa <_printf_i+0x1e6>
 800ecc0:	6833      	ldr	r3, [r6, #0]
 800ecc2:	6820      	ldr	r0, [r4, #0]
 800ecc4:	1d19      	adds	r1, r3, #4
 800ecc6:	6031      	str	r1, [r6, #0]
 800ecc8:	0606      	lsls	r6, r0, #24
 800ecca:	d501      	bpl.n	800ecd0 <_printf_i+0xbc>
 800eccc:	681d      	ldr	r5, [r3, #0]
 800ecce:	e003      	b.n	800ecd8 <_printf_i+0xc4>
 800ecd0:	0645      	lsls	r5, r0, #25
 800ecd2:	d5fb      	bpl.n	800eccc <_printf_i+0xb8>
 800ecd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ecd8:	2d00      	cmp	r5, #0
 800ecda:	da03      	bge.n	800ece4 <_printf_i+0xd0>
 800ecdc:	232d      	movs	r3, #45	@ 0x2d
 800ecde:	426d      	negs	r5, r5
 800ece0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece4:	4858      	ldr	r0, [pc, #352]	@ (800ee48 <_printf_i+0x234>)
 800ece6:	230a      	movs	r3, #10
 800ece8:	e011      	b.n	800ed0e <_printf_i+0xfa>
 800ecea:	6821      	ldr	r1, [r4, #0]
 800ecec:	6833      	ldr	r3, [r6, #0]
 800ecee:	0608      	lsls	r0, r1, #24
 800ecf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800ecf4:	d402      	bmi.n	800ecfc <_printf_i+0xe8>
 800ecf6:	0649      	lsls	r1, r1, #25
 800ecf8:	bf48      	it	mi
 800ecfa:	b2ad      	uxthmi	r5, r5
 800ecfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800ecfe:	4852      	ldr	r0, [pc, #328]	@ (800ee48 <_printf_i+0x234>)
 800ed00:	6033      	str	r3, [r6, #0]
 800ed02:	bf14      	ite	ne
 800ed04:	230a      	movne	r3, #10
 800ed06:	2308      	moveq	r3, #8
 800ed08:	2100      	movs	r1, #0
 800ed0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ed0e:	6866      	ldr	r6, [r4, #4]
 800ed10:	60a6      	str	r6, [r4, #8]
 800ed12:	2e00      	cmp	r6, #0
 800ed14:	db05      	blt.n	800ed22 <_printf_i+0x10e>
 800ed16:	6821      	ldr	r1, [r4, #0]
 800ed18:	432e      	orrs	r6, r5
 800ed1a:	f021 0104 	bic.w	r1, r1, #4
 800ed1e:	6021      	str	r1, [r4, #0]
 800ed20:	d04b      	beq.n	800edba <_printf_i+0x1a6>
 800ed22:	4616      	mov	r6, r2
 800ed24:	fbb5 f1f3 	udiv	r1, r5, r3
 800ed28:	fb03 5711 	mls	r7, r3, r1, r5
 800ed2c:	5dc7      	ldrb	r7, [r0, r7]
 800ed2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ed32:	462f      	mov	r7, r5
 800ed34:	42bb      	cmp	r3, r7
 800ed36:	460d      	mov	r5, r1
 800ed38:	d9f4      	bls.n	800ed24 <_printf_i+0x110>
 800ed3a:	2b08      	cmp	r3, #8
 800ed3c:	d10b      	bne.n	800ed56 <_printf_i+0x142>
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	07df      	lsls	r7, r3, #31
 800ed42:	d508      	bpl.n	800ed56 <_printf_i+0x142>
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	6861      	ldr	r1, [r4, #4]
 800ed48:	4299      	cmp	r1, r3
 800ed4a:	bfde      	ittt	le
 800ed4c:	2330      	movle	r3, #48	@ 0x30
 800ed4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ed52:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ed56:	1b92      	subs	r2, r2, r6
 800ed58:	6122      	str	r2, [r4, #16]
 800ed5a:	f8cd a000 	str.w	sl, [sp]
 800ed5e:	464b      	mov	r3, r9
 800ed60:	aa03      	add	r2, sp, #12
 800ed62:	4621      	mov	r1, r4
 800ed64:	4640      	mov	r0, r8
 800ed66:	f7ff fee7 	bl	800eb38 <_printf_common>
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	d14a      	bne.n	800ee04 <_printf_i+0x1f0>
 800ed6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed72:	b004      	add	sp, #16
 800ed74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed78:	6823      	ldr	r3, [r4, #0]
 800ed7a:	f043 0320 	orr.w	r3, r3, #32
 800ed7e:	6023      	str	r3, [r4, #0]
 800ed80:	4832      	ldr	r0, [pc, #200]	@ (800ee4c <_printf_i+0x238>)
 800ed82:	2778      	movs	r7, #120	@ 0x78
 800ed84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ed88:	6823      	ldr	r3, [r4, #0]
 800ed8a:	6831      	ldr	r1, [r6, #0]
 800ed8c:	061f      	lsls	r7, r3, #24
 800ed8e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ed92:	d402      	bmi.n	800ed9a <_printf_i+0x186>
 800ed94:	065f      	lsls	r7, r3, #25
 800ed96:	bf48      	it	mi
 800ed98:	b2ad      	uxthmi	r5, r5
 800ed9a:	6031      	str	r1, [r6, #0]
 800ed9c:	07d9      	lsls	r1, r3, #31
 800ed9e:	bf44      	itt	mi
 800eda0:	f043 0320 	orrmi.w	r3, r3, #32
 800eda4:	6023      	strmi	r3, [r4, #0]
 800eda6:	b11d      	cbz	r5, 800edb0 <_printf_i+0x19c>
 800eda8:	2310      	movs	r3, #16
 800edaa:	e7ad      	b.n	800ed08 <_printf_i+0xf4>
 800edac:	4826      	ldr	r0, [pc, #152]	@ (800ee48 <_printf_i+0x234>)
 800edae:	e7e9      	b.n	800ed84 <_printf_i+0x170>
 800edb0:	6823      	ldr	r3, [r4, #0]
 800edb2:	f023 0320 	bic.w	r3, r3, #32
 800edb6:	6023      	str	r3, [r4, #0]
 800edb8:	e7f6      	b.n	800eda8 <_printf_i+0x194>
 800edba:	4616      	mov	r6, r2
 800edbc:	e7bd      	b.n	800ed3a <_printf_i+0x126>
 800edbe:	6833      	ldr	r3, [r6, #0]
 800edc0:	6825      	ldr	r5, [r4, #0]
 800edc2:	6961      	ldr	r1, [r4, #20]
 800edc4:	1d18      	adds	r0, r3, #4
 800edc6:	6030      	str	r0, [r6, #0]
 800edc8:	062e      	lsls	r6, r5, #24
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	d501      	bpl.n	800edd2 <_printf_i+0x1be>
 800edce:	6019      	str	r1, [r3, #0]
 800edd0:	e002      	b.n	800edd8 <_printf_i+0x1c4>
 800edd2:	0668      	lsls	r0, r5, #25
 800edd4:	d5fb      	bpl.n	800edce <_printf_i+0x1ba>
 800edd6:	8019      	strh	r1, [r3, #0]
 800edd8:	2300      	movs	r3, #0
 800edda:	6123      	str	r3, [r4, #16]
 800eddc:	4616      	mov	r6, r2
 800edde:	e7bc      	b.n	800ed5a <_printf_i+0x146>
 800ede0:	6833      	ldr	r3, [r6, #0]
 800ede2:	1d1a      	adds	r2, r3, #4
 800ede4:	6032      	str	r2, [r6, #0]
 800ede6:	681e      	ldr	r6, [r3, #0]
 800ede8:	6862      	ldr	r2, [r4, #4]
 800edea:	2100      	movs	r1, #0
 800edec:	4630      	mov	r0, r6
 800edee:	f7f1 f9ef 	bl	80001d0 <memchr>
 800edf2:	b108      	cbz	r0, 800edf8 <_printf_i+0x1e4>
 800edf4:	1b80      	subs	r0, r0, r6
 800edf6:	6060      	str	r0, [r4, #4]
 800edf8:	6863      	ldr	r3, [r4, #4]
 800edfa:	6123      	str	r3, [r4, #16]
 800edfc:	2300      	movs	r3, #0
 800edfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee02:	e7aa      	b.n	800ed5a <_printf_i+0x146>
 800ee04:	6923      	ldr	r3, [r4, #16]
 800ee06:	4632      	mov	r2, r6
 800ee08:	4649      	mov	r1, r9
 800ee0a:	4640      	mov	r0, r8
 800ee0c:	47d0      	blx	sl
 800ee0e:	3001      	adds	r0, #1
 800ee10:	d0ad      	beq.n	800ed6e <_printf_i+0x15a>
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	079b      	lsls	r3, r3, #30
 800ee16:	d413      	bmi.n	800ee40 <_printf_i+0x22c>
 800ee18:	68e0      	ldr	r0, [r4, #12]
 800ee1a:	9b03      	ldr	r3, [sp, #12]
 800ee1c:	4298      	cmp	r0, r3
 800ee1e:	bfb8      	it	lt
 800ee20:	4618      	movlt	r0, r3
 800ee22:	e7a6      	b.n	800ed72 <_printf_i+0x15e>
 800ee24:	2301      	movs	r3, #1
 800ee26:	4632      	mov	r2, r6
 800ee28:	4649      	mov	r1, r9
 800ee2a:	4640      	mov	r0, r8
 800ee2c:	47d0      	blx	sl
 800ee2e:	3001      	adds	r0, #1
 800ee30:	d09d      	beq.n	800ed6e <_printf_i+0x15a>
 800ee32:	3501      	adds	r5, #1
 800ee34:	68e3      	ldr	r3, [r4, #12]
 800ee36:	9903      	ldr	r1, [sp, #12]
 800ee38:	1a5b      	subs	r3, r3, r1
 800ee3a:	42ab      	cmp	r3, r5
 800ee3c:	dcf2      	bgt.n	800ee24 <_printf_i+0x210>
 800ee3e:	e7eb      	b.n	800ee18 <_printf_i+0x204>
 800ee40:	2500      	movs	r5, #0
 800ee42:	f104 0619 	add.w	r6, r4, #25
 800ee46:	e7f5      	b.n	800ee34 <_printf_i+0x220>
 800ee48:	0800eff5 	.word	0x0800eff5
 800ee4c:	0800f006 	.word	0x0800f006

0800ee50 <memmove>:
 800ee50:	4288      	cmp	r0, r1
 800ee52:	b510      	push	{r4, lr}
 800ee54:	eb01 0402 	add.w	r4, r1, r2
 800ee58:	d902      	bls.n	800ee60 <memmove+0x10>
 800ee5a:	4284      	cmp	r4, r0
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	d807      	bhi.n	800ee70 <memmove+0x20>
 800ee60:	1e43      	subs	r3, r0, #1
 800ee62:	42a1      	cmp	r1, r4
 800ee64:	d008      	beq.n	800ee78 <memmove+0x28>
 800ee66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee6e:	e7f8      	b.n	800ee62 <memmove+0x12>
 800ee70:	4402      	add	r2, r0
 800ee72:	4601      	mov	r1, r0
 800ee74:	428a      	cmp	r2, r1
 800ee76:	d100      	bne.n	800ee7a <memmove+0x2a>
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee82:	e7f7      	b.n	800ee74 <memmove+0x24>

0800ee84 <_sbrk_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d06      	ldr	r5, [pc, #24]	@ (800eea0 <_sbrk_r+0x1c>)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	602b      	str	r3, [r5, #0]
 800ee90:	f7f3 fc7c 	bl	800278c <_sbrk>
 800ee94:	1c43      	adds	r3, r0, #1
 800ee96:	d102      	bne.n	800ee9e <_sbrk_r+0x1a>
 800ee98:	682b      	ldr	r3, [r5, #0]
 800ee9a:	b103      	cbz	r3, 800ee9e <_sbrk_r+0x1a>
 800ee9c:	6023      	str	r3, [r4, #0]
 800ee9e:	bd38      	pop	{r3, r4, r5, pc}
 800eea0:	200014c8 	.word	0x200014c8

0800eea4 <_realloc_r>:
 800eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea8:	4607      	mov	r7, r0
 800eeaa:	4614      	mov	r4, r2
 800eeac:	460d      	mov	r5, r1
 800eeae:	b921      	cbnz	r1, 800eeba <_realloc_r+0x16>
 800eeb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	f7ff bc5b 	b.w	800e770 <_malloc_r>
 800eeba:	b92a      	cbnz	r2, 800eec8 <_realloc_r+0x24>
 800eebc:	f7ff fbec 	bl	800e698 <_free_r>
 800eec0:	4625      	mov	r5, r4
 800eec2:	4628      	mov	r0, r5
 800eec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec8:	f000 f81a 	bl	800ef00 <_malloc_usable_size_r>
 800eecc:	4284      	cmp	r4, r0
 800eece:	4606      	mov	r6, r0
 800eed0:	d802      	bhi.n	800eed8 <_realloc_r+0x34>
 800eed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eed6:	d8f4      	bhi.n	800eec2 <_realloc_r+0x1e>
 800eed8:	4621      	mov	r1, r4
 800eeda:	4638      	mov	r0, r7
 800eedc:	f7ff fc48 	bl	800e770 <_malloc_r>
 800eee0:	4680      	mov	r8, r0
 800eee2:	b908      	cbnz	r0, 800eee8 <_realloc_r+0x44>
 800eee4:	4645      	mov	r5, r8
 800eee6:	e7ec      	b.n	800eec2 <_realloc_r+0x1e>
 800eee8:	42b4      	cmp	r4, r6
 800eeea:	4622      	mov	r2, r4
 800eeec:	4629      	mov	r1, r5
 800eeee:	bf28      	it	cs
 800eef0:	4632      	movcs	r2, r6
 800eef2:	f7ff fbc3 	bl	800e67c <memcpy>
 800eef6:	4629      	mov	r1, r5
 800eef8:	4638      	mov	r0, r7
 800eefa:	f7ff fbcd 	bl	800e698 <_free_r>
 800eefe:	e7f1      	b.n	800eee4 <_realloc_r+0x40>

0800ef00 <_malloc_usable_size_r>:
 800ef00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef04:	1f18      	subs	r0, r3, #4
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	bfbc      	itt	lt
 800ef0a:	580b      	ldrlt	r3, [r1, r0]
 800ef0c:	18c0      	addlt	r0, r0, r3
 800ef0e:	4770      	bx	lr

0800ef10 <_init>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	bf00      	nop
 800ef14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef16:	bc08      	pop	{r3}
 800ef18:	469e      	mov	lr, r3
 800ef1a:	4770      	bx	lr

0800ef1c <_fini>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	bf00      	nop
 800ef20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef22:	bc08      	pop	{r3}
 800ef24:	469e      	mov	lr, r3
 800ef26:	4770      	bx	lr
